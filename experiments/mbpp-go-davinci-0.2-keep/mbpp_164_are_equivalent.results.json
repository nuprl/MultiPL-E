{
  "name": "mbpp_164_are_equivalent",
  "language": "go_test.go",
  "prompt": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_164_are_equivalent.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    var sum1, sum2 int\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    return sum(divisors1) == sum(divisors2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6_nd_3ts_test.go:10:18: undefined: get_divisors\n/tmp/tmp6_nd_3ts_test.go:11:18: undefined: get_divisors\n/tmp/tmp6_nd_3ts_test.go:12:12: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    var sum1, sum2 int\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    sum1 := sum(divisors1)\n    sum2 := sum(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn06_uspe_test.go:10:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:11:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:12:13: undefined: sum\n/tmp/tmpn06_uspe_test.go:13:13: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    var sum1, sum2 int\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    // Get the divisors of num1\n    divisors1 := get_divisors(num1)\n    // Get the divisors of num2\n    divisors2 := get_divisors(num2)\n    // Get the sum of the divisors of num1\n    sum1 := sum(divisors1)\n    // Get the sum of the divisors of num2\n    sum2 := sum(divisors2)\n    // Check if the sums are the same\n    if sum1 == sum2 {\n        return true\n    }\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123991,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy1bzwzoz_test.go:11:18: undefined: get_divisors\n/tmp/tmpy1bzwzoz_test.go:13:18: undefined: get_divisors\n/tmp/tmpy1bzwzoz_test.go:15:13: undefined: sum\n/tmp/tmpy1bzwzoz_test.go:17:13: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := []int{}\n    divisors2 := []int{}\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            divisors1 = append(divisors1, i)\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            divisors2 = append(divisors2, i)\n        }\n    }\n    sum1 := 0\n    sum2 := 0\n    for _, v := range divisors1 {\n        sum1 += v\n    }\n    for _, v := range divisors2 {\n        sum2 += v\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := make(map[int]bool)\n    divisors2 := make(map[int]bool)\n    for i := 1; i <= num1; i++ {\n        if num1 % i == 0 {\n            divisors1[i] = true\n        }\n    }\n    for i := 1; i <= num2; i++ {\n        if num2 % i == 0 {\n            divisors2[i] = true\n        }\n    }\n    sum1 := 0\n    for k, _ := range divisors1 {\n        sum1 += k\n    }\n    sum2 := 0\n    for k, _ := range divisors2 {\n        sum2 += k\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123991,
      "stdout": "--- FAIL: TestAre_Equivalent (0.00s)\n    --- FAIL: TestAre_Equivalent/test_num__2 (0.00s)\n        tmphtl0vd0h_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := divisors(num1)\n    divisors2 := divisors(num2)\n    return sum(divisors1) == sum(divisors2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppitn0pqg_test.go:10:18: undefined: divisors\n/tmp/tmppitn0pqg_test.go:11:18: undefined: divisors\n/tmp/tmppitn0pqg_test.go:12:12: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "--- FAIL: TestAre_Equivalent (0.00s)\n    --- FAIL: TestAre_Equivalent/test_num__2 (0.00s)\n        tmpwt81utbb_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    if num1 == num2 {\n        return true\n    }\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    sum1 := sum(divisors1)\n    sum2 := sum(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn06_uspe_test.go:10:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:11:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:12:13: undefined: sum\n/tmp/tmpn06_uspe_test.go:13:13: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "--- FAIL: TestAre_Equivalent (0.00s)\n    --- FAIL: TestAre_Equivalent/test_num__2 (0.00s)\n        tmp5v7_0k_0_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    sum1 := sum(divisors1)\n    sum2 := sum(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn06_uspe_test.go:10:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:11:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:12:13: undefined: sum\n/tmp/tmpn06_uspe_test.go:13:13: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i <= num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i <= num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "--- FAIL: TestAre_Equivalent (0.00s)\n    --- FAIL: TestAre_Equivalent/test_num__2 (0.00s)\n        tmpctrrj1_2_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    var sum1, sum2 int\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := []int{}\n    divisors2 := []int{}\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            divisors1 = append(divisors1, i)\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            divisors2 = append(divisors2, i)\n        }\n    }\n    sum1 := 0\n    sum2 := 0\n    for i := 0; i < len(divisors1); i++ {\n        sum1 += divisors1[i]\n    }\n    for i := 0; i < len(divisors2); i++ {\n        sum2 += divisors2[i]\n    }\n    if sum1 == sum2 {\n        return true\n    }\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123991,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    sum1 := sum_divisors(divisors1)\n    sum2 := sum_divisors(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpum0kgnhn_test.go:10:18: undefined: get_divisors\n/tmp/tmpum0kgnhn_test.go:11:18: undefined: get_divisors\n/tmp/tmpum0kgnhn_test.go:12:13: undefined: sum_divisors\n/tmp/tmpum0kgnhn_test.go:13:13: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := []int{}\n    divisors2 := []int{}\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            divisors1 = append(divisors1, i)\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            divisors2 = append(divisors2, i)\n        }\n    }\n    sum1 := 0\n    sum2 := 0\n    for _, v := range divisors1 {\n        sum1 += v\n    }\n    for _, v := range divisors2 {\n        sum2 += v\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    sum1 := sum(divisors1)\n    sum2 := sum(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn06_uspe_test.go:10:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:11:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:12:13: undefined: sum\n/tmp/tmpn06_uspe_test.go:13:13: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i <= num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i <= num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "--- FAIL: TestAre_Equivalent (0.00s)\n    --- FAIL: TestAre_Equivalent/test_num__2 (0.00s)\n        tmpctrrj1_2_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    sum1 := sum(divisors1)\n    sum2 := sum(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn06_uspe_test.go:10:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:11:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:12:13: undefined: sum\n/tmp/tmpn06_uspe_test.go:13:13: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    sum1 := 0\n    sum2 := 0\n    for _, divisor := range divisors1 {\n        sum1 += divisor\n    }\n    for _, divisor := range divisors2 {\n        sum2 += divisor\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphx4_e1gg_test.go:10:18: undefined: get_divisors\n/tmp/tmphx4_e1gg_test.go:11:18: undefined: get_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i <= num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i <= num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    if sum1 == sum2 {\n        return true\n    }\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "--- FAIL: TestAre_Equivalent (0.00s)\n    --- FAIL: TestAre_Equivalent/test_num__2 (0.00s)\n        tmpuupavr3q_test.go:43: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := divisors(num1)\n    divisors2 := divisors(num2)\n    sum1 := sum(divisors1)\n    sum2 := sum(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6xnz8s5k_test.go:10:18: undefined: divisors\n/tmp/tmp6xnz8s5k_test.go:11:18: undefined: divisors\n/tmp/tmp6xnz8s5k_test.go:12:13: undefined: sum\n/tmp/tmp6xnz8s5k_test.go:13:13: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i <= num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i <= num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "--- FAIL: TestAre_Equivalent (0.00s)\n    --- FAIL: TestAre_Equivalent/test_num__2 (0.00s)\n        tmpctrrj1_2_test.go:40: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    if sum1 == sum2 {\n        return true\n    }\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := []int{}\n    divisors2 := []int{}\n    for i := 1; i <= num1; i++ {\n        if num1 % i == 0 {\n            divisors1 = append(divisors1, i)\n        }\n    }\n    for i := 1; i <= num2; i++ {\n        if num2 % i == 0 {\n            divisors2 = append(divisors2, i)\n        }\n    }\n    sum1 := 0\n    sum2 := 0\n    for _, v := range divisors1 {\n        sum1 += v\n    }\n    for _, v := range divisors2 {\n        sum2 += v\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123991,
      "stdout": "--- FAIL: TestAre_Equivalent (0.00s)\n    --- FAIL: TestAre_Equivalent/test_num__2 (0.00s)\n        tmpqjuwv7jy_test.go:48: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := []int{}\n    divisors2 := []int{}\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            divisors1 = append(divisors1, i)\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            divisors2 = append(divisors2, i)\n        }\n    }\n    sum1 := 0\n    sum2 := 0\n    for _, v := range divisors1 {\n        sum1 += v\n    }\n    for _, v := range divisors2 {\n        sum2 += v\n    }\n    if sum1 == sum2 {\n        return true\n    }\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    sum1 := sum(divisors1)\n    sum2 := sum(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn06_uspe_test.go:10:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:11:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:12:13: undefined: sum\n/tmp/tmpn06_uspe_test.go:13:13: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    var sum1, sum2 int\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return get_divisors_sum(num1) == get_divisors_sum(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123991,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkcc44xfx_test.go:10:12: undefined: get_divisors_sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    // TODO - Add your code here\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "--- FAIL: TestAre_Equivalent (0.00s)\n    --- FAIL: TestAre_Equivalent/test_num__2 (0.00s)\n        tmpwt81utbb_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := divisors(num1)\n    divisors2 := divisors(num2)\n    sum1 := sum(divisors1)\n    sum2 := sum(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6xnz8s5k_test.go:10:18: undefined: divisors\n/tmp/tmp6xnz8s5k_test.go:11:18: undefined: divisors\n/tmp/tmp6xnz8s5k_test.go:12:13: undefined: sum\n/tmp/tmp6xnz8s5k_test.go:13:13: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    return sum(divisors1) == sum(divisors2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6_nd_3ts_test.go:10:18: undefined: get_divisors\n/tmp/tmp6_nd_3ts_test.go:11:18: undefined: get_divisors\n/tmp/tmp6_nd_3ts_test.go:12:12: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    return sum(divisors1) == sum(divisors2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6_nd_3ts_test.go:10:18: undefined: get_divisors\n/tmp/tmp6_nd_3ts_test.go:11:18: undefined: get_divisors\n/tmp/tmp6_nd_3ts_test.go:12:12: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    sum1 := sum(divisors1)\n    sum2 := sum(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn06_uspe_test.go:10:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:11:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:12:13: undefined: sum\n/tmp/tmpn06_uspe_test.go:13:13: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := []int{}\n    divisors2 := []int{}\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            divisors1 = append(divisors1, i)\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            divisors2 = append(divisors2, i)\n        }\n    }\n    sum1 := 0\n    sum2 := 0\n    for _, v := range divisors1 {\n        sum1 += v\n    }\n    for _, v := range divisors2 {\n        sum2 += v\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    var sum1, sum2 int\n    for i := 1; i <= num1/2; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i <= num2/2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    if sum1 == sum2 {\n        return true\n    }\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123991,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    sum1 := sum(divisors1)\n    sum2 := sum(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn06_uspe_test.go:10:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:11:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:12:13: undefined: sum\n/tmp/tmpn06_uspe_test.go:13:13: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    var sum1, sum2 int\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    // TODO: Implement\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123991,
      "stdout": "--- FAIL: TestAre_Equivalent (0.00s)\n    --- FAIL: TestAre_Equivalent/test_num__2 (0.00s)\n        tmpzwhzq5u2_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    if sum1 == sum2 {\n        return true\n    }\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "--- FAIL: TestAre_Equivalent (0.00s)\n    --- FAIL: TestAre_Equivalent/test_num__2 (0.00s)\n        tmp5v7_0k_0_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    var sum1, sum2 int\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n\n    sum1 := 0\n    sum2 := 0\n\n    for _, divisor := range divisors1 {\n        sum1 += divisor\n    }\n\n    for _, divisor := range divisors2 {\n        sum2 += divisor\n    }\n\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123991,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmply8e_h5k_test.go:10:18: undefined: get_divisors\n/tmp/tmply8e_h5k_test.go:11:18: undefined: get_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := []int{}\n    divisors2 := []int{}\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            divisors1 = append(divisors1, i)\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            divisors2 = append(divisors2, i)\n        }\n    }\n    sum1 := 0\n    sum2 := 0\n    for _, v := range divisors1 {\n        sum1 += v\n    }\n    for _, v := range divisors2 {\n        sum2 += v\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    if sum1 == sum2 {\n        return true\n    }\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    var sum1, sum2 int\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    sum1 := sum(divisors1)\n    sum2 := sum(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn06_uspe_test.go:10:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:11:18: undefined: get_divisors\n/tmp/tmpn06_uspe_test.go:12:13: undefined: sum\n/tmp/tmpn06_uspe_test.go:13:13: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := []int{}\n    divisors2 := []int{}\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            divisors1 = append(divisors1, i)\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            divisors2 = append(divisors2, i)\n        }\n    }\n    sum1 := 0\n    sum2 := 0\n    for _, v := range divisors1 {\n        sum1 += v\n    }\n    for _, v := range divisors2 {\n        sum2 += v\n    }\n    if sum1 == sum2 {\n        return true\n    }\n    return false\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := []int{}\n    divisors2 := []int{}\n    for i := 1; i <= num1; i++ {\n        if num1 % i == 0 {\n            divisors1 = append(divisors1, i)\n        }\n    }\n    for i := 1; i <= num2; i++ {\n        if num2 % i == 0 {\n            divisors2 = append(divisors2, i)\n        }\n    }\n    sum1 := 0\n    sum2 := 0\n    for _, v := range divisors1 {\n        sum1 += v\n    }\n    for _, v := range divisors2 {\n        sum2 += v\n    }\n    if sum1 == sum2 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123991,
      "stdout": "--- FAIL: TestAre_Equivalent (0.00s)\n    --- FAIL: TestAre_Equivalent/test_num__2 (0.00s)\n        tmptrtpzrjt_test.go:52: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    if num1 == num2 {\n        return true\n    }\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123989,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := []int{}\n    divisors2 := []int{}\n\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            divisors1 = append(divisors1, i)\n        }\n    }\n\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            divisors2 = append(divisors2, i)\n        }\n    }\n\n    sum1 := 0\n    sum2 := 0\n\n    for _, v := range divisors1 {\n        sum1 += v\n    }\n\n    for _, v := range divisors2 {\n        sum2 += v\n    }\n\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123991,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n\n    sum1 := sum_divisors(divisors1)\n    sum2 := sum_divisors(divisors2)\n\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123991,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpurowadko_test.go:10:18: undefined: get_divisors\n/tmp/tmpurowadko_test.go:11:18: undefined: get_divisors\n/tmp/tmpurowadko_test.go:13:13: undefined: sum_divisors\n/tmp/tmpurowadko_test.go:14:13: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := divisors(num1)\n    divisors2 := divisors(num2)\n    sum1 := sum(divisors1)\n    sum2 := sum(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6xnz8s5k_test.go:10:18: undefined: divisors\n/tmp/tmp6xnz8s5k_test.go:11:18: undefined: divisors\n/tmp/tmp6xnz8s5k_test.go:12:13: undefined: sum\n/tmp/tmp6xnz8s5k_test.go:13:13: undefined: sum\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    divisors1 := get_divisors(num1)\n    divisors2 := get_divisors(num2)\n    sum1 := sum_divisors(divisors1)\n    sum2 := sum_divisors(divisors2)\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123988,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpum0kgnhn_test.go:10:18: undefined: get_divisors\n/tmp/tmpum0kgnhn_test.go:11:18: undefined: get_divisors\n/tmp/tmpum0kgnhn_test.go:12:13: undefined: sum_divisors\n/tmp/tmpum0kgnhn_test.go:13:13: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_divisors(num1) == sum_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8yk8wck_test.go:10:12: undefined: sum_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    return sum_of_divisors(num1) == sum_of_divisors(num2)\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0fpxzlje_test.go:10:12: undefined: sum_of_divisors\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package are_equivalent_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to determine if the sum of the divisors of two integers are the same.\nfunc are_equivalent(num1 int, num2 int) bool {\n    sum1 := 0\n    sum2 := 0\n    for i := 1; i < num1; i++ {\n        if num1 % i == 0 {\n            sum1 += i\n        }\n    }\n    for i := 1; i < num2; i++ {\n        if num2 % i == 0 {\n            sum2 += i\n        }\n    }\n    return sum1 == sum2\n}\n\nfunc TestAre_Equivalent(t *testing.T) {\n  candidate := are_equivalent\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(36, 57), expected: false },\n     { actual: candidate(2, 4), expected: false },\n     { actual: candidate(23, 47), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509768,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}