{
  "name": "mbpp_472_check_Consecutive",
  "language": "go_test.go",
  "prompt": "package check_Consecutive_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check whether the given list contains consecutive numbers or not.\nfunc check_Consecutive(l []int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_472_check_Consecutive.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCheck_Consecutive(t *testing.T) {\n  candidate := check_Consecutive\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: true },\n     { actual: candidate([]int{1, 2, 3, 5, 6}), expected: false },\n     { actual: candidate([]int{1, 2, 1}), expected: false },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(l) == 0 {\n        return false\n    }\n    max, min := l[0], l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n",
    "    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n",
    "    if len(l) < 2 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n",
    "    for i := 0; i < len(l)-1; i++ {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i + 1] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(l) <= 1 {\n        return false\n    }\n    for i := 0; i < len(l) - 1; i++ {\n        if l[i + 1] - l[i] != 1 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n",
    "    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n",
    "    var min, max int\n    min = l[0]\n    max = l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n",
    "    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n",
    "    var min, max int\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n",
    "    for i := 0; i < len(l) - 1; i++ {\n        if l[i] + 1 != l[i+1] {\n            return false\n        }\n    }\n    return true\n}\n",
    "    var max, min int\n    for _, v := range l {\n        if v > max {\n            max = v\n        }\n        if v < min {\n            min = v\n        }\n    }\n    if max-min+1 == len(l) {\n        return true\n    }\n    return false\n}\n",
    "    if len(l) == 0 {\n        return false\n    }\n    for i := 1; i < len(l); i++ {\n        if l[i] - l[i-1] != 1 {\n            return false\n        }\n    }\n    return true\n}\n",
    "    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n",
    "    if len(l) == 0 {\n        return false\n    }\n    if len(l) == 1 {\n        return true\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n",
    "    var min, max int\n    min, max = l[0], l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n",
    "    if len(l) == 0 {\n        return false\n    }\n    min := l[0]\n    max := l[0]\n    for _, v := range l {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    if max - min + 1 == len(l) {\n        return true\n    }\n    return false\n}\n"
  ]
}