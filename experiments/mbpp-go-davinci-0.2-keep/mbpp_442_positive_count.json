{
  "name": "mbpp_442_positive_count",
  "language": "go_test.go",
  "prompt": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var pos_count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            pos_count++\n        }\n    }\n    return float64(pos_count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count, total int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n        total++\n    }\n    return float64(count) / float64(total)\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var positive_count int\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n",
    "    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n"
  ]
}