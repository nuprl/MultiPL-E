{
  "name": "mbpp_273_substract_elements",
  "language": "go_test.go",
  "prompt": "package substract_elements_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\nfunc substract_elements(test_tup1 []interface{}, test_tup2 []interface{}) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_273_substract_elements.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSubstract_Elements(t *testing.T) {\n  candidate := substract_elements\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{10, 4, 5}, []interface{}{2, 5, 18}), expected: []interface{}{8, -1, -13} },\n     { actual: candidate([]interface{}{11, 2, 3}, []interface{}{24, 45, 16}), expected: []interface{}{-13, -43, -13} },\n     { actual: candidate([]interface{}{7, 18, 9}, []interface{}{10, 11, 12}), expected: []interface{}{-3, 7, -3} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] - test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] - test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        default:\n            fmt.Println(\"Error: Invalid type\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Not a valid type\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float32:\n            result = append(result, test_tup1[i].(float32) - test_tup2[i].(float32))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] - test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] - test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] - test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n            default:\n                fmt.Println(\"Error: Unsupported type.\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] - test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Invalid type\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var new_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            new_tup = append(new_tup, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            new_tup = append(new_tup, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            new_tup = append(new_tup, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n        }\n    }\n    return new_tup\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        } else {\n            result = append(result, test_tup2[i].(int) - test_tup1[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] - test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i] == test_tup2[i] {\n            result = append(result, 0)\n        } else {\n            result = append(result, test_tup1[i] - test_tup2[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        } else {\n            result = append(result, test_tup2[i].(int) - test_tup1[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return nil\n    }\n\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n        default:\n            return nil\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] - test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        } else {\n            result = append(result, test_tup2[i].(int) - test_tup1[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    if len(test_tup1) != len(test_tup2) {\n        return []interface{}{}\n    }\n    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var new_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            new_tup = append(new_tup, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            new_tup = append(new_tup, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return new_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n            default:\n                fmt.Println(\"Unknown type\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        } else {\n            result = append(result, test_tup2[i].(int) - test_tup1[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] - test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + \" \" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n            default:\n                result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n            case float64:\n                result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n            default:\n                fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i] - test_tup2[i])\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := range test_tup1 {\n        result = append(result, test_tup1[i] - test_tup2[i])\n    }\n    return result\n}\n",
    "    var new_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        new_tup = append(new_tup, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return new_tup\n}\n",
    "    var new_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            new_tup = append(new_tup, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            new_tup = append(new_tup, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            new_tup = append(new_tup, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return new_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n            case int:\n                result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n            case float32:\n                result = append(result, test_tup1[i].(float32) - test_tup2[i].(float32))\n            case float64:\n                result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n            case string:\n                result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n            default:\n                result = append(result, test_tup1[i])\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Type not supported\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        if test_tup1[i].(int) > test_tup2[i].(int) {\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        } else {\n            result = append(result, test_tup2[i].(int) - test_tup1[i].(int))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        default:\n            fmt.Println(\"Error: unsupported type\")\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float32:\n            result = append(result, test_tup1[i].(float32) - test_tup2[i].(float32))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result_tup []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result_tup = append(result_tup, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result_tup = append(result_tup, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result_tup = append(result_tup, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result_tup\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i, _ := range test_tup1 {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \" - \" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        case string:\n            result = append(result, test_tup1[i].(string) + \"-\" + test_tup2[i].(string))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        switch test_tup1[i].(type) {\n        case int:\n            result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n        case float64:\n            result = append(result, test_tup1[i].(float64) - test_tup2[i].(float64))\n        }\n    }\n    return result\n}\n",
    "    var result []interface{}\n    for i := 0; i < len(test_tup1); i++ {\n        result = append(result, test_tup1[i].(int) - test_tup2[i].(int))\n    }\n    return result\n}\n"
  ]
}