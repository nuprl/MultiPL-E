{
  "name": "mbpp_782_odd_length_sum",
  "language": "go_test.go",
  "prompt": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_782_odd_length_sum.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_slice(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc1p7xvla_test.go:14:24: undefined: sum_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_of_subarray(arr, i, j)\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp147npgnp_test.go:14:24: undefined: sum_of_subarray\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_slice(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc1p7xvla_test.go:14:24: undefined: sum_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j-i+1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j-i+1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_subarray(arr, i, j)\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp492df6i8_test.go:14:24: undefined: sum_subarray\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_subarray(arr, i, j)\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbp3qw5lu_test.go:14:24: undefined: sum_subarray\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i) % 2 != 0 {\n                sum += sum_array(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp010rtpkm_test.go:14:24: undefined: sum_array\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_subarray(arr, i, j)\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp492df6i8_test.go:14:24: undefined: sum_subarray\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_array(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm59qst24_test.go:14:24: undefined: sum_array\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_slice(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3bspexai_test.go:14:24: undefined: sum_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_slice(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc1p7xvla_test.go:14:24: undefined: sum_slice\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplgesapgp_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j-i) % 2 == 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_array(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4kc_wzjn_test.go:14:24: undefined: sum_array\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j-i+1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_of_subarray(arr, i, j)\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj5af5qfb_test.go:14:24: undefined: sum_of_subarray\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplgesapgp_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j-i+1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_of_array(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpspme1oyo_test.go:14:24: undefined: sum_of_array\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_of_subarray(arr, i, j)\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp147npgnp_test.go:14:24: undefined: sum_of_subarray\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_subarray(arr, i, j)\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp492df6i8_test.go:14:24: undefined: sum_subarray\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int = 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122544,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_of_subarray(arr, i, j)\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj5af5qfb_test.go:14:24: undefined: sum_of_subarray\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j-i+1) % 2 != 0 {\n                sum += sum_of_subarray(arr, i, j)\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvaxloa5p_test.go:14:24: undefined: sum_of_subarray\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4k64189j_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8rqqtn64_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_subarray(arr, i, j)\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp492df6i8_test.go:14:24: undefined: sum_subarray\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                sum += sum_subarray(arr, i, j)\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp492df6i8_test.go:14:24: undefined: sum_subarray\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 == 1 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplgesapgp_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    sum := 0\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i) % 2 == 0 {\n                sum += sum_arr(arr[i:j+1])\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122543,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps61ovgb2_test.go:14:24: undefined: sum_arr\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package odd_length_sum_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\nfunc odd_length_sum(arr []int) int {\n    var sum int\n    for i := 0; i < len(arr); i++ {\n        for j := i; j < len(arr); j++ {\n            if (j - i + 1) % 2 != 0 {\n                for k := i; k <= j; k++ {\n                    sum += arr[k]\n                }\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestOdd_Length_Sum(t *testing.T) {\n  candidate := odd_length_sum\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 4}), expected: 14 },\n     { actual: candidate([]int{1, 2, 1, 2}), expected: 15 },\n     { actual: candidate([]int{1, 7}), expected: 8 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509926,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}