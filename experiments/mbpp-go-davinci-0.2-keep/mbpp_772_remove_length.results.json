{
  "name": "mbpp_772_remove_length",
  "language": "go_test.go",
  "prompt": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_772_remove_length.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch != ' ' {\n            word += string(ch)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpollxvq7w_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpollxvq7w_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            words = append(words, word)\n            word = \"\"\n        }\n    }\n    words = append(words, word)\n    for _, word := range words {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp55u4fozk_test.go:45: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmp55u4fozk_test.go:45: expected 'If you me about ok', got 'If you me about ok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp55u4fozk_test.go:45: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpdddw3lnb_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpdddw3lnb_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if word_length != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            word_length = 0\n        } else {\n            word += string(test_str[i])\n            word_length++\n        }\n    }\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpjh1w0hxc_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpjh1w0hxc_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n    var j int\n    var k int\n\n    i = 0\n    j = 0\n    k = 0\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    word = \"\"\n    result = \"\"\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word_len++\n        } else {\n            word_end = i\n            word = test_str[word_start:word_end]\n            if word_len != K {\n                if k == 0 {\n                    result = word\n                } else {\n                    result = result + \" \" + word\n                }\n                k++\n            }\n            word_len = 0\n            word_start = i + 1\n        }\n    }\n\n    if word_len != K {\n        if k == 0 {\n            result = test_str[word_start:]\n        } else {\n            result = result + \" \" + test_str[word_start:]\n        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplmgw3olt_test.go:16:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n        } else {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpahkwdpdz_test.go:50: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpahkwdpdz_test.go:50: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var i int\n    var j int\n    var length int\n    var word_length int\n\n    length = len(test_str)\n    for i = 0; i < length; i++ {\n        word = \"\"\n        for j = i; j < length; j++ {\n            if test_str[j] == ' ' {\n                break\n            }\n            word = word + string(test_str[j])\n        }\n        word_length = len(word)\n        if word_length != K {\n            result = result + word\n        }\n        if j < length {\n            result = result + \" \"\n        }\n        i = j\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpp3qan9i6_test.go:53: expected 'person is most value', got ' person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpp3qan9i6_test.go:53: expected 'If you me about ok', got 'If you  me about  ok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpp3qan9i6_test.go:53: expected 'Forces of darkeness is the', got 'Forces of darkeness is   the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_count int\n    var i int\n\n    word_count = 0\n    word_length = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if word_length != K {\n                result += word\n                word_count++\n            }\n            word = \"\"\n            word_length = 0\n        } else {\n            word += string(test_str[i])\n            word_length++\n        }\n    }\n    if word_length != K {\n        result += word\n        word_count++\n    }\n\n    if word_count == 0 {\n        return \"\"\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpwwvn85qw_test.go:57: expected 'person is most value', got 'personismostvalue'\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpwwvn85qw_test.go:57: expected 'If you me about ok', got 'Ifyoumeaboutok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpwwvn85qw_test.go:57: expected 'Forces of darkeness is the', got 'Forcesofdarkenessisthe'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch != ' ' {\n            word += string(ch)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpollxvq7w_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpollxvq7w_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n        } else {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpahkwdpdz_test.go:50: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpahkwdpdz_test.go:50: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var new_str string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxzee2ln7_test.go:100:1: expected 'IDENT', found 'func'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_len = len(word)\n            if word_len != K {\n                result = result + word + \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word = test_str[word_start:len(test_str)]\n    word_len = len(word)\n    if word_len != K {\n        result = result + word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpi_zzn6lm_test.go:54: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpi_zzn6lm_test.go:54: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    word_len = 0\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(ch)\n            word_len++\n        }\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmplba6n82y_test.go:47: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmplba6n82y_test.go:47: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if word_length != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            word_length = 0\n        } else {\n            word += string(test_str[i])\n            word_length++\n        }\n    }\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpjh1w0hxc_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpjh1w0hxc_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n\n    i = 0\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_length != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            word_length = 0\n        } else {\n            word += string(test_str[i])\n            word_length++\n        }\n        i++\n    }\n\n    if word_length != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5yb0wt6n_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var res string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                res += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        res += word\n    }\n    return res\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123618,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4ip7n6kp_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4ip7n6kp_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpbre04jcx_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpbre04jcx_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var str_len int\n    var c byte\n\n    str_len = len(test_str)\n    for i = 0; i < str_len; i++ {\n        c = test_str[i]\n        if c == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3nesb6qr_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_len = len(word)\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word_end = len(test_str)\n    word = test_str[word_start:word_end]\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpb9xrjmer_test.go:56: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpb9xrjmer_test.go:56: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp2pruklkd_test.go:44: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp2pruklkd_test.go:44: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpym87eszt_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    words = strings.Split(test_str, \" \")\n    for _, word := range words {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfnlwtyak_test.go:12:13: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var word_length int\n    var i int\n    var j int\n\n    words = make([]string, 0)\n    word = \"\"\n    word_length = 0\n    i = 0\n    j = 0\n\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_length == K {\n                word = \"\"\n                word_length = 0\n            } else {\n                words = append(words, word)\n                word = \"\"\n                word_length = 0\n            }\n        } else {\n            word += string(test_str[i])\n            word_length += 1\n        }\n        i += 1\n    }\n\n    if word_length != K {\n        words = append(words, word)\n    }\n\n    for j < len(words) {\n        result += words[j] + \" \"\n        j += 1\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp37rh60z4_test.go:67: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmp37rh60z4_test.go:67: expected 'If you me about ok', got 'If you me about ok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp37rh60z4_test.go:67: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, v := range test_str {\n        if v != ' ' {\n            word += string(v)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpx5tdem4m_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpx5tdem4m_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    words = strings.Split(test_str, \" \")\n    for _, word := range words {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfnlwtyak_test.go:12:13: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n    var k int\n\n    i = 0\n    j = 0\n    k = 0\n    word_length = 0\n    for i < len(test_str) {\n        if test_str[i] != ' ' {\n            word_length++\n        } else {\n            if word_length != K {\n                for k = j; k < i; k++ {\n                    result += string(test_str[k])\n                }\n                result += \" \"\n            }\n            j = i + 1\n            word_length = 0\n        }\n        i++\n    }\n    if word_length != K {\n        for k = j; k < i; k++ {\n            result += string(test_str[k])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2ah22pyp_test.go:11:9: word declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var str_len int = len(test_str)\n    for i = 0; i < str_len; i++ {\n        word = \"\"\n        word_len = 0\n        for j = i; j < str_len; j++ {\n            if test_str[j] == ' ' {\n                break\n            }\n            word = word + string(test_str[j])\n            word_len++\n        }\n        if word_len != K {\n            result = result + word + \" \"\n        }\n        i = j\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp1ujgdays_test.go:49: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmp1ujgdays_test.go:49: expected 'If you me about ok', got 'If you me about ok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp1ujgdays_test.go:49: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Split(test_str, \" \")) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiducgdq6_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if word_length != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            word_length = 0\n        } else {\n            word += string(test_str[i])\n            word_length++\n        }\n    }\n\n    if word_length != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoz2bhk0y_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_start int\n    var word_end int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5kjvkvz3_test.go:100:1: expected 'IDENT', found 'func'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Fields(test_str)) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123618,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpansduni5_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmph11mzxyw_test.go:44: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmph11mzxyw_test.go:44: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Split(test_str, \" \")) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiducgdq6_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6jip2kkj_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var is_word bool\n    for _, c := range test_str {\n        if c == ' ' {\n            if is_word {\n                if len(word) != K {\n                    result += word + \" \"\n                }\n                word = \"\"\n                is_word = false\n            }\n        } else {\n            word += string(c)\n            is_word = true\n        }\n    }\n    if is_word {\n        if len(word) != K {\n            result += word\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp86am4lu0_test.go:50: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp86am4lu0_test.go:50: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n            word_len++\n        } else {\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            word_len = 0\n        }\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpc8j13d74_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpc8j13d74_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var i int\n    var length int\n\n    length = len(test_str)\n    for i = 0; i < length; i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n\n    if len(word) != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8ytsny78_test.go:49: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8ytsny78_test.go:49: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if word_len != K {\n                result += word\n            }\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n    }\n\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcxrsxnu6_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmph40kdnk5_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n    var k int\n    var str_length int\n    var is_word bool\n    var is_space bool\n    var is_k_length bool\n\n    str_length = len(test_str)\n    for i = 0; i < str_length; i++ {\n        if test_str[i] == ' ' {\n            is_space = true\n        } else {\n            is_space = false\n        }\n\n        if is_space == false {\n            is_word = true\n            word_length = 0\n            word = \"\"\n        }\n\n        if is_word == true {\n            word_length++\n            word += string(test_str[i])\n        }\n\n        if is_space == true {\n            is_word = false\n            is_k_length = false\n            if word_length == K {\n                is_k_length = true\n            }\n            if is_k_length == false {\n                result += word\n            }\n        }\n    }\n\n    if is_k_length == false {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2amyfxdc_test.go:14:9: j declared but not used\n/tmp/tmp2amyfxdc_test.go:15:9: k declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n            word_len++\n        } else {\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            word_len = 0\n        }\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpc8j13d74_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpc8j13d74_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n    var str_length int\n\n    str_length = len(test_str)\n    for i = 0; i < str_length; i++ {\n        if test_str[i] == ' ' {\n            if word_length != K {\n                result += word\n            }\n            result += \" \"\n            word = \"\"\n            word_length = 0\n        } else {\n            word += string(test_str[i])\n            word_length++\n        }\n    }\n\n    if word_length != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdaesco7q_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpbre04jcx_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpbre04jcx_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    i = 0\n    j = 0\n    word_len = 0\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n        i++\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz_so9_tx_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var res string\n    for _, word := range(strings.Split(test_str, \" \")) {\n        if len(word) != K {\n            res += word + \" \"\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpipd_pvvi_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, v := range test_str {\n        if v == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(v)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n    var k int\n    var str_length int\n    var str_length_minus_k int\n    var str_length_minus_k_minus_1 int\n    var str_length_minus_k_minus_2 int\n\n    str_length = len(test_str)\n    str_length_minus_k = str_length - K\n    str_length_minus_k_minus_1 = str_length_minus_k - 1\n    str_length_minus_k_minus_2 = str_length_minus_k - 2\n\n    for i = 0; i < str_length; i++ {\n        if test_str[i] != ' ' {\n            word = word + string(test_str[i])\n            word_length = word_length + 1\n        } else {\n            if word_length == K {\n                if i == str_length_minus_k {\n                    if test_str[i + 1] == ' ' {\n                        result = result + string(test_str[i])\n                    }\n                } else if i == str_length_minus_k_minus_1 {\n                    if test_str[i + 1] == ' ' {\n                        result = result + string(test_str[i])\n                    }\n                } else if i == str_length_minus_k_minus_2 {\n                    if test_str[i + 1] == ' ' {\n                        result = result + string(test_str[i])\n                    }\n                } else {\n                    for j = i + 1; j < str_length; j++ {\n                        if test_str[j] == ' ' {\n                            k = k + 1\n                        } else {\n                            break\n                        }\n                    }\n                    if k == 0 {\n                        result = result + string(test_str[i])\n                    }\n                    k = 0\n                }\n            } else {\n                result = result + word + string(test_str[i])\n            }\n            word = \"\"\n            word_length = 0\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpil0jfd9h_test.go:82: expected 'person is most value', got ' person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpil0jfd9h_test.go:82: expected 'If you me about ok', got 'If you  me about  '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpil0jfd9h_test.go:82: expected 'Forces of darkeness is the', got 'Forces of darkeness is   the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    words = strings.Split(test_str, \" \")\n    for _, word := range words {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfnlwtyak_test.go:12:13: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, v := range test_str {\n        if v == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(v)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n\n    i = 0\n    j = 0\n    k = 0\n    l = len(test_str)\n    for i < l {\n        if test_str[i] == ' ' {\n            word_len = i - j\n            if word_len != K {\n                for m = j; m < i; m++ {\n                    result += string(test_str[m])\n                }\n                result += \" \"\n            }\n            j = i + 1\n        }\n        i++\n    }\n    word_len = i - j\n    if word_len != K {\n        for m = j; m < i; m++ {\n            result += string(test_str[m])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuvlbw6ee_test.go:11:9: word declared but not used\n/tmp/tmpuvlbw6ee_test.go:15:9: k declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Fields(test_str)) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123618,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpansduni5_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_count int\n    var i int\n    var j int\n    var k int\n    var l int\n\n    word_count = 0\n    word_len = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    result = \"\"\n    word = \"\"\n\n    for i < len(test_str) {\n        if test_str[i] != ' ' {\n            word_len++\n            word += string(test_str[i])\n        } else {\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            word_len = 0\n        }\n        i++\n    }\n\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwk7wc0fc_test.go:13:9: word_count declared but not used\n/tmp/tmpwk7wc0fc_test.go:15:9: j declared but not used\n/tmp/tmpwk7wc0fc_test.go:16:9: k declared but not used\n/tmp/tmpwk7wc0fc_test.go:17:9: l declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var str_len int = len(test_str)\n\n    for i = 0; i < str_len; i++ {\n        if test_str[i] == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt70km4px_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    words = make([]string, 0)\n    word = \"\"\n    word_len = 0\n    i = 0\n    j = 0\n\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_len == K {\n                word = \"\"\n            } else {\n                words = append(words, word)\n                word = \"\"\n            }\n            word_len = 0\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n        i++\n    }\n\n    if word_len != K {\n        words = append(words, word)\n    }\n\n    for j < len(words) {\n        result += words[j]\n        if j != len(words) - 1 {\n            result += \" \"\n        }\n        j++\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n\n    if len(word) != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp9qdmoj1p_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp9qdmoj1p_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            words = append(words, word)\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    words = append(words, word)\n    for _, word := range words {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpghlkneh9_test.go:45: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpghlkneh9_test.go:45: expected 'If you me about ok', got 'If you me about ok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpghlkneh9_test.go:45: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n\n    i = 0\n    j = 0\n    word_length = 0\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_length != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            word_length = 0\n        } else {\n            word += string(test_str[i])\n            word_length++\n        }\n        i++\n    }\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvxarr6v3_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n            word_length++\n        } else {\n            if word_length != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            word_length = 0\n        }\n    }\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp20h_kx38_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp20h_kx38_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, char := range test_str {\n        if char == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    for _, char := range test_str {\n        if char == ' ' {\n            word_length = len(word)\n            if word_length != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_length = len(word)\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp3qasp5hg_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp3qasp5hg_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, c := range test_str {\n        if c == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmppqh4siox_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmppqh4siox_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_start int\n    var word_end int\n    var word_count int\n\n    word_start = 0\n    word_end = 0\n    word_count = 0\n    word_length = 0\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_length = len(word)\n            if word_length != K {\n                result += word\n                result += \" \"\n            }\n            word_start = i + 1\n            word_count++\n        }\n    }\n    word = test_str[word_start:len(test_str)]\n    word_length = len(word)\n    if word_length != K {\n        result += word\n    }\n    word_count++\n\n    fmt.Println(\"word_count: \", word_count)\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "word_count:  6\nword_count:  7\nword_count:  8\n--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp89e6e5oh_test.go:60: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp89e6e5oh_test.go:60: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, char := range test_str {\n        if char == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var k int\n    var c byte\n\n    i = 0\n    j = 0\n    k = 0\n    word_len = 0\n    for i < len(test_str) {\n        c = test_str[i]\n        if c == ' ' {\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(c)\n            word_len++\n        }\n        i++\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp45hx45w0_test.go:14:9: j declared but not used\n/tmp/tmp45hx45w0_test.go:15:9: k declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_count int\n    var word_start int\n    var word_end int\n    var i int\n    var j int\n    var k int\n    var l int\n\n    word_count = 0\n    word_start = 0\n    word_end = 0\n    word_length = 0\n    result = \"\"\n    word = \"\"\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_count++\n            word_end = i\n            word_length = word_end - word_start\n            if word_length == K {\n                for j = 0; j < word_length; j++ {\n                    word = word + string(test_str[word_start + j])\n                }\n                if word == \" \" {\n                    result = result + string(test_str[word_start])\n                } else {\n                    result = result + word\n                }\n                word = \"\"\n            } else {\n                for k = word_start; k <= word_end; k++ {\n                    result = result + string(test_str[k])\n                }\n            }\n            word_start = i + 1\n        }\n    }\n    word_length = len(test_str) - word_start\n    if word_length == K {\n        for l = 0; l < word_length; l++ {\n            word = word + string(test_str[word_start + l])\n        }\n        if word == \" \" {\n            result = result + string(test_str[word_start])\n        } else {\n            result = result + word\n        }\n    } else {\n        for k = word_start; k < len(test_str); k++ {\n            result = result + string(test_str[k])\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp2hwkmgsa_test.go:88: expected 'person is most value', got 'Theperson is most value tet'\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmp2hwkmgsa_test.go:88: expected 'If you me about ok', got 'If you toldme about thisok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp2hwkmgsa_test.go:88: expected 'Forces of darkeness is the', got 'Forces of darkeness is comeintothe play'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var word_len int\n\n    words = strings.Split(test_str, \" \")\n    for _, word = range words {\n        word_len = len(word)\n        if word_len != K {\n            result += word + \" \"\n        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3bqptkhr_test.go:15:13: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n    var str_length int = len(test_str)\n    var is_word bool = false\n\n    for i = 0; i < str_length; i++ {\n        if test_str[i] != ' ' {\n            word = word + string(test_str[i])\n            word_length++\n            is_word = true\n        } else {\n            if is_word {\n                if word_length != K {\n                    result = result + word\n                }\n                word = \"\"\n                word_length = 0\n                is_word = false\n            }\n            result = result + string(test_str[i])\n        }\n    }\n\n    if word_length != K {\n        result = result + word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6b_n5rzr_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_start int\n    var word_end int\n    var word_found bool\n\n    word_found = false\n    word_start = 0\n    word_end = 0\n    word_length = 0\n    for i, c := range test_str {\n        if c == ' ' {\n            if word_found {\n                word_end = i\n                word_length = word_end - word_start\n                if word_length != K {\n                    result += word\n                }\n                word_found = false\n            }\n        } else {\n            if !word_found {\n                word_start = i\n                word_found = true\n            }\n            word = test_str[word_start:i+1]\n        }\n    }\n    if word_found {\n        word_end = len(test_str)\n        word_length = word_end - word_start\n        if word_length != K {\n            result += word\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpegjew_td_test.go:64: expected 'person is most value', got 'personismostvalue'\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpegjew_td_test.go:64: expected 'If you me about ok', got 'Ifyoumeaboutok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpegjew_td_test.go:64: expected 'Forces of darkeness is the', got 'Forcesofdarkenessisthe'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    for _, word := range(strings.Split(test_str, \" \")) {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiducgdq6_test.go:11:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_count int\n    var i int\n    var j int\n    var k int\n    var l int\n\n    word_count = 0\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n\n    for i < len(test_str) {\n        if test_str[i] != ' ' {\n            word_count++\n            i++\n        } else {\n            word = test_str[j:i]\n            word_len = len(word)\n            if word_len != K {\n                result += word\n                if k < word_count {\n                    k = word_count\n                }\n                l += word_count\n            }\n            j = i + 1\n            i = j\n            word_count = 0\n        }\n    }\n    word = test_str[j:i]\n    word_len = len(word)\n    if word_len != K {\n        result += word\n        if k < word_count {\n            k = word_count\n        }\n        l += word_count\n    }\n    if l < k {\n        return \"\"\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpoeex2v5__test.go:74: expected 'person is most value', got 'personismostvalue'\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpoeex2v5__test.go:74: expected 'If you me about ok', got 'Ifyoumeaboutok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpoeex2v5__test.go:74: expected 'Forces of darkeness is the', got 'Forcesofdarkenessisthe'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_count int\n\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if word_len != K {\n                result += word\n                word_count++\n                if word_count != 1 {\n                    result += \" \"\n                }\n            }\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n    }\n\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpcxqts9z9_test.go:54: expected 'person is most value', got 'personis most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpcxqts9z9_test.go:54: expected 'If you me about ok', got 'Ifyou me about ok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpcxqts9z9_test.go:54: expected 'Forces of darkeness is the', got 'Forcesof darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n    var char byte\n\n    i = 0\n    j = 0\n    word_length = 0\n    for i < len(test_str) {\n        char = test_str[i]\n        if char == ' ' {\n            if word_length != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            word_length = 0\n        } else {\n            word += string(char)\n            word_length++\n        }\n        i++\n    }\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0aov07wq_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpbre04jcx_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpbre04jcx_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var tmp string\n    var i int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if len(tmp) != K {\n                result += tmp\n                result += \" \"\n            }\n            tmp = \"\"\n        } else {\n            tmp += string(test_str[i])\n        }\n    }\n\n    if len(tmp) != K {\n        result += tmp\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp74r7yjd9_test.go:48: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp74r7yjd9_test.go:48: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    words = strings.Split(test_str, \" \")\n    for _, word := range words {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfnlwtyak_test.go:12:13: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var o3 int\n    var p3 int\n    var q3\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmph40kdnk5_test.go:99:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c != ' ' {\n            word += string(c)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8suh0iva_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, char := range test_str {\n        if char == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var ret_str string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_len = len(word)\n            if word_len != K {\n                ret_str += word\n                ret_str += \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word = test_str[word_start:]\n    word_len = len(word)\n    if word_len != K {\n        ret_str += word\n    }\n    return ret_str\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp2onyr0cj_test.go:54: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp2onyr0cj_test.go:54: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var s int\n    var t int\n    var u int\n    var v int\n    var w int\n    var x int\n    var y int\n    var z int\n    var a int\n    var b int\n    var c int\n    var d int\n    var e int\n    var f int\n    var g int\n    var h int\n    var i1 int\n    var j1 int\n    var k1 int\n    var l1 int\n    var m1 int\n    var n1 int\n    var o1 int\n    var p1 int\n    var q1 int\n    var r1 int\n    var s1 int\n    var t1 int\n    var u1 int\n    var v1 int\n    var w1 int\n    var x1 int\n    var y1 int\n    var z1 int\n    var a1 int\n    var b1 int\n    var c1 int\n    var d1 int\n    var e1 int\n    var f1 int\n    var g1 int\n    var h1 int\n    var i2 int\n    var j2 int\n    var k2 int\n    var l2 int\n    var m2 int\n    var n2 int\n    var o2 int\n    var p2 int\n    var q2 int\n    var r2 int\n    var s2 int\n    var t2 int\n    var u2 int\n    var v2 int\n    var w2 int\n    var x2 int\n    var y2 int\n    var z2 int\n    var a2 int\n    var b2 int\n    var c2 int\n    var d2 int\n    var e2 int\n    var f2 int\n    var g2 int\n    var h2 int\n    var i3 int\n    var j3 int\n    var k3 int\n    var l3 int\n    var m3 int\n    var n3 int\n    var\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3b8h3_ss_test.go:100:1: expected 'IDENT', found 'func'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    for _, char := range test_str {\n        if char == ' ' {\n            word_length = len(word)\n            if word_length != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_length = len(word)\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp3qasp5hg_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp3qasp5hg_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var i int\n    var j int\n    var k int\n    var l int\n\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    for i < len(test_str) {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n        } else {\n            words = append(words, word)\n            word = \"\"\n        }\n        i++\n    }\n    words = append(words, word)\n\n    for j < len(words) {\n        if len(words[j]) != K {\n            result += words[j]\n            if j != len(words) - 1 {\n                result += \" \"\n            }\n        }\n        j++\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3x_fhepd_test.go:15:9: k declared but not used\n/tmp/tmp3x_fhepd_test.go:16:9: l declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var new_str string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                new_str += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        new_str += word\n    }\n    return new_str\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123628,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpr7_q4p5v_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpr7_q4p5v_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_count int\n    var word_start int\n    var word_end int\n    var i int\n    var j int\n\n    word_count = 0\n    word_start = 0\n    word_end = 0\n    word_length = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word_length = word_end - word_start\n            if word_length == K {\n                word_count++\n            } else {\n                if word_count == 0 {\n                    result = result + test_str[word_start:word_end]\n                } else {\n                    for j = 0; j < word_count; j++ {\n                        result = result + \" \"\n                    }\n                    word_count = 0\n                }\n            }\n            word_start = i + 1\n        }\n    }\n    word_end = i\n    word_length = word_end - word_start\n    if word_length == K {\n        word_count++\n    } else {\n        if word_count == 0 {\n            result = result + test_str[word_start:word_end]\n        } else {\n            for j = 0; j < word_count; j++ {\n                result = result + \" \"\n            }\n            word_count = 0\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp96irjzeq_test.go:11:9: word declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result_str string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_len = 0\n    word_start = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            if word_len != K {\n                result_str += test_str[word_start:word_end]\n            }\n            word_start = i + 1\n            word_len = 0\n        } else {\n            word_len++\n        }\n    }\n\n    if word_len != K {\n        result_str += test_str[word_start:]\n    }\n\n    return result_str\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123628,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpbzy1ff33_test.go:53: expected 'person is most value', got 'personismostvalue'\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpbzy1ff33_test.go:53: expected 'If you me about ok', got 'Ifyoumeaboutok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpbzy1ff33_test.go:53: expected 'Forces of darkeness is the', got 'Forcesofdarkenessisthe'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var i int\n    var j int\n    var length int\n    length = len(test_str)\n    for i = 0; i < length; i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n        } else {\n            if len(word) != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe8n0t1w8_test.go:13:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, v := range test_str {\n        if v != ' ' {\n            word += string(v)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpx5tdem4m_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpx5tdem4m_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_count int\n    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n\n    i = 0\n    j = 0\n    k = 0\n    l = 0\n    m = 0\n    n = 0\n    word_count = 0\n    word_length = 0\n    result = \"\"\n    word = \"\"\n\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            word_count++\n            if word_length == K {\n                for j = 0; j < word_length; j++ {\n                    word = word + \" \"\n                }\n            }\n            result = result + word\n            word = \"\"\n            word_length = 0\n        } else {\n            word = word + string(test_str[i])\n            word_length++\n        }\n        i++\n    }\n    if word_length == K {\n        for j = 0; j < word_length; j++ {\n            word = word + \" \"\n        }\n    }\n    result = result + word\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmdlf29mf_test.go:16:9: k declared but not used\n/tmp/tmpmdlf29mf_test.go:17:9: l declared but not used\n/tmp/tmpmdlf29mf_test.go:18:9: m declared but not used\n/tmp/tmpmdlf29mf_test.go:19:9: n declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var res string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                res += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        res += word\n    }\n    return res\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123618,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4ip7n6kp_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4ip7n6kp_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_count int\n    var word_index int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_count = 0\n    word_index = 0\n    word_start = 0\n    word_end = 0\n    word_length = 0\n    word = \"\"\n    result = \"\"\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word_length = word_end - word_start\n            if word_length == K {\n                word_count++\n            } else {\n                result += word + \" \"\n            }\n            word_start = i + 1\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n\n    word_end = len(test_str)\n    word_length = word_end - word_start\n    if word_length == K {\n        word_count++\n    } else {\n        result += word\n    }\n\n    fmt.Printf(\"%d words removed\\n\", word_count)\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpep4mese7_test.go:14:9: word_index declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var k int\n\n    i = 0\n    j = 0\n    k = 0\n    word = \"\"\n    word_len = 0\n    result = \"\"\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n        i++\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123628,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9uv0famj_test.go:14:9: j declared but not used\n/tmp/tmp9uv0famj_test.go:15:9: k declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, char := range test_str {\n        if char == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch != ' ' {\n            word += string(ch)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpollxvq7w_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpollxvq7w_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_count int\n    var word_index int\n    var word_start int\n    var word_end int\n    var word_start_index int\n    var word_end_index int\n    var word_start_index_found bool\n    var word_end_index_found bool\n    var word_start_index_found_first bool\n    var word_end_index_found_first bool\n    var word_start_index_found_second bool\n    var word_end_index_found_second bool\n    var word_start_index_found_third bool\n    var word_end_index_found_third bool\n    var word_start_index_found_fourth bool\n    var word_end_index_found_fourth bool\n    var word_start_index_found_fifth bool\n    var word_end_index_found_fifth bool\n    var word_start_index_found_sixth bool\n    var word_end_index_found_sixth bool\n    var word_start_index_found_seventh bool\n    var word_end_index_found_seventh bool\n    var word_start_index_found_eighth bool\n    var word_end_index_found_eighth bool\n    var word_start_index_found_ninth bool\n    var word_end_index_found_ninth bool\n    var word_start_index_found_tenth bool\n    var word_end_index_found_tenth bool\n    var word_start_index_found_eleventh bool\n    var word_end_index_found_eleventh bool\n    var word_start_index_found_twelfth bool\n    var word_end_index_found_twelfth bool\n    var word_start_index_found_thirteenth bool\n    var word_end_index_found_thirteenth bool\n    var word_start_index_found_fourteenth bool\n    var word_end_index_found_fourteenth bool\n    var word_start_index_found_fifteenth bool\n    var word_end_index_found_fifteenth bool\n    var word_start_index_found_sixteenth bool\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123628,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpz7ykb03h_test.go:53:6: expected '(', found TestRemove_Length\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    words = strings.Split(test_str, \" \")\n    for _, word := range words {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123625,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfnlwtyak_test.go:12:13: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    words = make([]string, 0)\n    word = \"\"\n    word_len = 0\n    i = 0\n    j = 0\n\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_len == K {\n                word = \"\"\n                word_len = 0\n            } else {\n                words = append(words, word)\n                word = \"\"\n                word_len = 0\n            }\n        } else {\n            word += string(test_str[i])\n            word_len += 1\n        }\n        i += 1\n    }\n\n    if word_len != K {\n        words = append(words, word)\n    }\n\n    for j < len(words) {\n        result += words[j]\n        if j != len(words) - 1 {\n            result += \" \"\n        }\n        j += 1\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    words := strings.Fields(test_str)\n    for _, word := range words {\n        if len(word) != K {\n            result += word + \" \"\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpswfjz5pl_test.go:11:14: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word = test_str[word_start:len(test_str)]\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123620,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpbrg9wppt_test.go:54: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpbrg9wppt_test.go:54: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var word_start int\n    var word_end int\n    var i int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word_length = word_end - word_start\n            if word_length != K {\n                result += word\n                result += \" \"\n            }\n            word_start = i + 1\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n    word_end = i\n    word_length = word_end - word_start\n    if word_length != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpm7a8b9ar_test.go:55: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpm7a8b9ar_test.go:55: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    words = make([]string, 0)\n    word = \"\"\n    word_len = 0\n    i = 0\n    j = 0\n\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            words = append(words, word)\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n        i++\n    }\n    words = append(words, word)\n\n    for j < len(words) {\n        if len(words[j]) != K {\n            result += words[j]\n            result += \" \"\n        }\n        j++\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmptjyadysc_test.go:62: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmptjyadysc_test.go:62: expected 'If you me about ok', got 'If you me about ok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmptjyadysc_test.go:62: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var res string\n    var word_len int\n    var word_start int\n    var word_end int\n\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word_len = word_end - word_start\n            if word_len != K {\n                res += test_str[word_start:word_end] + \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word_end = len(test_str)\n    word_len = word_end - word_start\n    if word_len != K {\n        res += test_str[word_start:word_end]\n    }\n    return res\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp_a8lc8qf_test.go:48: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp_a8lc8qf_test.go:48: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp1dvpa4l5_test.go:48: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp1dvpa4l5_test.go:48: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    words = make([]string, 0)\n    word = \"\"\n    word_len = 0\n    i = 0\n    j = 0\n\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            words = append(words, word)\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n        i++\n    }\n    words = append(words, word)\n\n    for j < len(words) {\n        if len(words[j]) != K {\n            result += words[j] + \" \"\n        }\n        j++\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpf7ypa1jg_test.go:61: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpf7ypa1jg_test.go:61: expected 'If you me about ok', got 'If you me about ok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpf7ypa1jg_test.go:61: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, c := range test_str {\n        if c == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmppqh4siox_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmppqh4siox_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, char := range test_str {\n        if char == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpd9bb4cu9_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var res string\n    var word string\n    for _, v := range test_str {\n        if v == ' ' {\n            if len(word) != K {\n                res += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(v)\n        }\n    }\n    if len(word) != K {\n        res += word\n    }\n    return res\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123622,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpmkzipfj6_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpmkzipfj6_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var words []string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    words = make([]string, 0)\n    word = \"\"\n    word_len = 0\n    i = 0\n    j = 0\n\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_len == K {\n                word = \"\"\n                word_len = 0\n            } else {\n                words = append(words, word)\n                word = \"\"\n                word_len = 0\n            }\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n        i++\n    }\n    if word_len != K {\n        words = append(words, word)\n    }\n\n    for j < len(words) {\n        result += words[j]\n        if j != len(words) - 1 {\n            result += \" \"\n        }\n        j++\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_end = i\n            word = test_str[word_start:word_end]\n            word_len = len(word)\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word_start = i + 1\n        }\n    }\n    word_end = len(test_str)\n    word = test_str[word_start:word_end]\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpvy6z8gam_test.go:57: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpvy6z8gam_test.go:57: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    for _, c := range test_str {\n        if c == ' ' {\n            word_length = len(word)\n            if word_length != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    word_length = len(word)\n    if word_length != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp0zvok_76_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp0zvok_76_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word += string(test_str[i])\n        } else {\n            if len(word) != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp3oscyuvz_test.go:44: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp3oscyuvz_test.go:44: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var str_len int\n    str_len = len(test_str)\n    for i = 0; i < str_len; i++ {\n        word = \"\"\n        word_len = 0\n        for j = i; j < str_len; j++ {\n            if test_str[j] == ' ' {\n                break\n            }\n            word += string(test_str[j])\n            word_len++\n        }\n        if word_len != K {\n            result += word\n        }\n        if j < str_len {\n            result += \" \"\n        }\n        i = j\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpl8chf1tw_test.go:53: expected 'person is most value', got ' person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpl8chf1tw_test.go:53: expected 'If you me about ok', got 'If you  me about  ok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpl8chf1tw_test.go:53: expected 'Forces of darkeness is the', got 'Forces of darkeness is   the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var k int\n    var str_len int\n    var str_len_minus_k int\n    var str_len_minus_k_minus_1 int\n    var str_len_minus_k_minus_2 int\n    var str_len_minus_k_minus_3 int\n    var str_len_minus_k_minus_4 int\n    var str_len_minus_k_minus_5 int\n    var str_len_minus_k_minus_6 int\n    var str_len_minus_k_minus_7 int\n    var str_len_minus_k_minus_8 int\n    var str_len_minus_k_minus_9 int\n    var str_len_minus_k_minus_10 int\n    var str_len_minus_k_minus_11 int\n    var str_len_minus_k_minus_12 int\n    var str_len_minus_k_minus_13 int\n    var str_len_minus_k_minus_14 int\n    var str_len_minus_k_minus_15 int\n    var str_len_minus_k_minus_16 int\n    var str_len_minus_k_minus_17 int\n    var str_len_minus_k_minus_18 int\n    var str_len_minus_k_minus_19 int\n    var str_len_minus_k_minus_20 int\n    var str_len_minus_k_minus_21 int\n    var str_len_minus_k_minus_22 int\n    var str_len_minus_k_minus_23 int\n    var str_len_minus_k_minus_24 int\n    var str_len_minus_k_minus_25 int\n    var str_len_minus_k_minus_26 int\n    var str_len_minus_k_minus_27 int\n    var str_len_minus_k_minus_28 int\n    var str_len_minus_k_minus_29 int\n    var str_len_minus_k_minus_30 int\n    var str_len_minus_k_minus\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123628,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpf89xmxgt_test.go:48:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    words := []rune(test_str)\n    for i := 0; i < len(words); i++ {\n        if words[i] == ' ' {\n            result += \" \"\n        } else {\n            if i + K < len(words) {\n                result += string(words[i:i+K])\n                i += K - 1\n            } else {\n                result += string(words[i:])\n                break\n            }\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpu4j9mcmc_test.go:43: expected 'person is most value', got 'The person is most value tet'\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmpu4j9mcmc_test.go:43: expected 'If you me about ok', got 'If you told me about this ok'\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpu4j9mcmc_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is come into the play'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, c := range test_str {\n        if c == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmppqh4siox_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmppqh4siox_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, v := range test_str {\n        if v == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(v)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp2bkjwu_a_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_length int\n    var i int\n    var j int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word_length = 0\n            word = \"\"\n            for j = i; j < len(test_str); j++ {\n                if test_str[j] == ' ' {\n                    break\n                }\n                word_length++\n                word += string(test_str[j])\n            }\n            i = j\n            if word_length != K {\n                result += word + \" \"\n            }\n        }\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp0bqdo7wr_test.go:52: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__1 (0.00s)\n        tmp0bqdo7wr_test.go:52: expected 'If you me about ok', got 'If you me about ok '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp0bqdo7wr_test.go:52: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result []string\n    words := strings.Split(test_str, \" \")\n    for _, word := range words {\n        if len(word) != K {\n            result = append(result, word)\n        }\n    }\n    return strings.Join(result, \" \")\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfn1z1fu3_test.go:11:14: undefined: strings\n/tmp/tmpfn1z1fu3_test.go:17:12: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var k int\n\n    i = 0\n    j = 0\n    k = 0\n    word_len = 0\n    result = \"\"\n    word = \"\"\n    for i < len(test_str) {\n        if test_str[i] == ' ' {\n            if word_len != K {\n                result += word\n            }\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(test_str[i])\n            word_len += 1\n        }\n        i += 1\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwmv19r4v_test.go:14:9: j declared but not used\n/tmp/tmpwmv19r4v_test.go:15:9: k declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var word_start int\n    var word_end int\n    var i int\n\n    word_start = 0\n    word_end = 0\n    word_len = 0\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] != ' ' {\n            word_len++\n        } else {\n            word_end = i\n            word = test_str[word_start:word_end]\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word_start = i + 1\n            word_len = 0\n        }\n    }\n    word = test_str[word_start:len(test_str)]\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8rw1k0_1_test.go:57: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8rw1k0_1_test.go:57: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, c := range test_str {\n        if c == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123627,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmppqh4siox_test.go:46: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmppqh4siox_test.go:46: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n    var k int\n    var flag bool\n    var str_len int\n\n    str_len = len(test_str)\n    for i = 0; i < str_len; i++ {\n        if test_str[i] == ' ' {\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n            word_len = 0\n        } else {\n            word += string(test_str[i])\n            word_len++\n        }\n    }\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5cwmbcrx_test.go:14:9: j declared but not used\n/tmp/tmp5cwmbcrx_test.go:15:9: k declared but not used\n/tmp/tmp5cwmbcrx_test.go:16:9: flag declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    for _, ch := range test_str {\n        if ch == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123629,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpli8ppg6g_test.go:47: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpli8ppg6g_test.go:47: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for i := 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpg52jq4if_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpg52jq4if_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    var word_len int\n    var i int\n    var j int\n\n    for i = 0; i < len(test_str); i++ {\n        if test_str[i] == ' ' {\n            word_len = len(word)\n            if word_len != K {\n                result += word\n                result += \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(test_str[i])\n        }\n    }\n    word_len = len(word)\n    if word_len != K {\n        result += word\n    }\n\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpra48b1nk_test.go:14:9: j declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char != ' ' {\n            word += string(char)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp4aximh3u_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(ch)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpo_zn4n_q_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, c := range test_str {\n        if c == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(c)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510435,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp6_q5a3y__test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, ch := range test_str {\n        if ch != ' ' {\n            word += string(ch)\n        } else {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmpollxvq7w_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmpollxvq7w_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove all the words with k length in the given string.\nfunc remove_length(test_str string, K int) string {\n    var result string\n    var word string\n    for _, char := range test_str {\n        if char == ' ' {\n            if len(word) != K {\n                result += word + \" \"\n            }\n            word = \"\"\n        } else {\n            word += string(char)\n        }\n    }\n    if len(word) != K {\n        result += word\n    }\n    return result\n}\n\nfunc TestRemove_Length(t *testing.T) {\n  candidate := remove_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"The person is most value tet\", 3), expected: \"person is most value\" },\n     { actual: candidate(\"If you told me about this ok\", 4), expected: \"If you me about ok\" },\n     { actual: candidate(\"Forces of darkeness is come into the play\", 4), expected: \"Forces of darkeness is the\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510436,
      "stdout": "--- FAIL: TestRemove_Length (0.00s)\n    --- FAIL: TestRemove_Length/test_num__0 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'person is most value', got 'person is most value '\n    --- FAIL: TestRemove_Length/test_num__2 (0.00s)\n        tmp8yjn8_uv_test.go:43: expected 'Forces of darkeness is the', got 'Forces of darkeness is the '\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}