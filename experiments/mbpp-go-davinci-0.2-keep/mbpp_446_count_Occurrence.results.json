{
  "name": "mbpp_446_count_Occurrence",
  "language": "go_test.go",
  "prompt": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_446_count_Occurrence.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpr1_l12a9_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpr1_l12a9_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpr1_l12a9_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpv5ap5e10_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpv5ap5e10_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpv5ap5e10_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, v := range lst_lst {\n                for _, v2 := range tup_lst {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp0bgdqks2_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp0bgdqks2_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp0bgdqks2_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpwlgy1ke2_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpwlgy1ke2_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpwlgy1ke2_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range tup.(string) {\n            if string(v) == lst.(string) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range tup.([]bool) {\n            if v == lst.(bool) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpntr_1k7p_test.go:61: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpntr_1k7p_test.go:61: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpntr_1k7p_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    tup_v := reflect.ValueOf(tup)\n    lst_v := reflect.ValueOf(lst)\n    count := 0\n    for i := 0; i < lst_v.Len(); i++ {\n        for j := 0; j < tup_v.Len(); j++ {\n            if reflect.DeepEqual(lst_v.Index(i).Interface(), tup_v.Index(j).Interface()) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7oxi21za_test.go:10:14: undefined: reflect\n/tmp/tmp7oxi21za_test.go:11:14: undefined: reflect\n/tmp/tmp7oxi21za_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range tup.([]int) {\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpqlge6j6g_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpqlge6j6g_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpqlge6j6g_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpjs7__hyx_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpjs7__hyx_test.go:45: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpjs7__hyx_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v1 := range tup.([]string) {\n            for _, v2 := range lst.([]string) {\n                if v1 == v2 {\n                    count++\n                }\n            }\n        }\n    case []int:\n        for _, v1 := range tup.([]int) {\n            for _, v2 := range lst.([]int) {\n                if v1 == v2 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpyvdjeul8_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpyvdjeul8_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpyvdjeul8_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_ele := range tup_lst {\n                for _, lst_ele := range lst_lst {\n                    if tup_ele == lst_ele {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_ele := range tup_lst {\n                for _, lst_ele := range lst_lst {\n                    if tup_ele == lst_ele {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpn8rsae6__test.go:65: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpn8rsae6__test.go:65: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpn8rsae6__test.go:65: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpgpcv6oey_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpgpcv6oey_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpgpcv6oey_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            t := tup.([]int)\n            l := lst.([]int)\n            count := 0\n            for _, v := range l {\n                for _, v2 := range t {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpetbhpuaj_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpetbhpuaj_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpetbhpuaj_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            fmt.Println(\"lst is not a list\")\n            return 0\n        }\n    default:\n        fmt.Println(\"tup is not a tuple\")\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "tup is not a tuple\ntup is not a tuple\ntup is not a tuple\n--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp_llrww7o_test.go:50: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp_llrww7o_test.go:50: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp_llrww7o_test.go:50: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range tup.(string) {\n            if string(v) == lst.(string) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range tup.([]bool) {\n            if v == lst.(bool) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpntr_1k7p_test.go:61: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpntr_1k7p_test.go:61: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpntr_1k7p_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case string:\n        return strings.Count(tup.(string), lst.(string))\n    case []int:\n        count := 0\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpom_70i1z_test.go:12:16: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            count := 0\n            for _, i := range lst.([]int) {\n                for _, j := range tup_lst {\n                    if i == j {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpvb80cl3d_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpvb80cl3d_test.go:44: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpvb80cl3d_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpensuu0xb_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpensuu0xb_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpensuu0xb_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "Unsupported type\nUnsupported type\nUnsupported type\n--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp3m6bmjxj_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp3m6bmjxj_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp3m6bmjxj_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int = 0\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgw4blag5_test.go:11:12: undefined: reflect\n/tmp/tmpgw4blag5_test.go:12:10: undefined: reflect\n/tmp/tmpgw4blag5_test.go:13:14: undefined: reflect\n/tmp/tmpgw4blag5_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, i := range lst.([]int) {\n                for _, j := range tup.([]int) {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmps96dj44y_test.go:46: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmps96dj44y_test.go:46: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmps96dj44y_test.go:46: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        lst_lst := lst.([]string)\n        count := 0\n        for _, tup_str := range tup_lst {\n            for _, lst_str := range lst_lst {\n                if tup_str == lst_str {\n                    count++\n                }\n            }\n        }\n        return count\n    case []int:\n        tup_lst := tup.([]int)\n        lst_lst := lst.([]int)\n        count := 0\n        for _, tup_int := range tup_lst {\n            for _, lst_int := range lst_lst {\n                if tup_int == lst_int {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp7nx9cwik_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp7nx9cwik_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp7nx9cwik_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_ele := range tup_lst {\n                for _, lst_ele := range lst_lst {\n                    if tup_ele == lst_ele {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpl92cny7l_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpl92cny7l_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpl92cny7l_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpddm51jc3_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpddm51jc3_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpddm51jc3_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            t := tup.([]string)\n            l := lst.([]string)\n            count := 0\n            for _, v := range l {\n                for _, v2 := range t {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpy9of92dn_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpy9of92dn_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpy9of92dn_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    case int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case float64:\n        for _, v := range lst.([]float64) {\n            if v == tup.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpf1d4dlzu_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpf1d4dlzu_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpf1d4dlzu_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpensuu0xb_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpensuu0xb_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpensuu0xb_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, t := range tup.([]int) {\n                for _, l := range lst.([]int) {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpxm06jo7l_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpxm06jo7l_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpxm06jo7l_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpa1hg1kyw_test.go:60: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpa1hg1kyw_test.go:60: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpa1hg1kyw_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        lst_lst := lst.([]string)\n        count := 0\n        for _, tup_val := range tup_lst {\n            for _, lst_val := range lst_lst {\n                if tup_val == lst_val {\n                    count++\n                }\n            }\n        }\n        return count\n    case []int:\n        tup_lst := tup.([]int)\n        lst_lst := lst.([]int)\n        count := 0\n        for _, tup_val := range tup_lst {\n            for _, lst_val := range lst_lst {\n                if tup_val == lst_val {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmptmu4wgwr_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmptmu4wgwr_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmptmu4wgwr_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_str := range tup_lst {\n                for _, lst_str := range lst_lst {\n                    if tup_str == lst_str {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpa7dnsg5y_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpa7dnsg5y_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpa7dnsg5y_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpia0p1kl6_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpia0p1kl6_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpia0p1kl6_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpux8ud5ry_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpux8ud5ry_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpux8ud5ry_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case int:\n            count := 0\n            for _, v := range tup_lst {\n                if v == lst.(int) {\n                    count += 1\n                }\n            }\n            return count\n        case []int:\n            count := 0\n            lst_lst := lst.([]int)\n            for _, v := range tup_lst {\n                for _, v1 := range lst_lst {\n                    if v == v1 {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpidy_dl16_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpidy_dl16_test.go:56: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpidy_dl16_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.011s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpa1hg1kyw_test.go:60: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpa1hg1kyw_test.go:60: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpa1hg1kyw_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            t := tup.([]int)\n            l := lst.([]int)\n            count := 0\n            for _, v := range l {\n                for _, v2 := range t {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmppgfip13__test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmppgfip13__test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmppgfip13__test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp7xytnsjm_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp7xytnsjm_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp7xytnsjm_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpv5ap5e10_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpv5ap5e10_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpv5ap5e10_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range tup.([]int) {\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpqlge6j6g_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpqlge6j6g_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpqlge6j6g_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int = 0\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgw4blag5_test.go:11:12: undefined: reflect\n/tmp/tmpgw4blag5_test.go:12:10: undefined: reflect\n/tmp/tmpgw4blag5_test.go:13:14: undefined: reflect\n/tmp/tmpgw4blag5_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp34cbjk_b_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp34cbjk_b_test.go:45: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp34cbjk_b_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4zmvsm1r_test.go:11:12: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:12:10: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:13:14: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, t := range tup.([]int) {\n                for _, l := range lst.([]int) {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpxm06jo7l_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpxm06jo7l_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpxm06jo7l_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range tup.(string) {\n            if string(v) == lst.(string) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range tup.([]bool) {\n            if v == lst.(bool) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpntr_1k7p_test.go:61: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpntr_1k7p_test.go:61: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpntr_1k7p_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpuu1_jbwm_test.go:65: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpuu1_jbwm_test.go:65: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpuu1_jbwm_test.go:65: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            var count int\n            for _, v := range tup.([]string) {\n                for _, v2 := range lst.([]string) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            var count int\n            for _, v := range tup.([]int) {\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpflnxxjvj_test.go:56: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpflnxxjvj_test.go:56: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpflnxxjvj_test.go:56: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1j7oifj0_test.go:65: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1j7oifj0_test.go:65: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1j7oifj0_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            for _, v1 := range lst.([]string) {\n                if v == v1 {\n                    count++\n                }\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            for _, v1 := range lst.([]int) {\n                if v == v1 {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpj_ujvsqj_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpj_ujvsqj_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpj_ujvsqj_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case string:\n        switch lst.(type) {\n        case string:\n            return strings.Count(tup.(string), lst.(string))\n        default:\n            return -1\n        }\n    case []string:\n        switch lst.(type) {\n        case string:\n            count := 0\n            for _, v := range tup.([]string) {\n                count += strings.Count(v, lst.(string))\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpszl613fu_test.go:14:20: undefined: strings\n/tmp/tmpszl613fu_test.go:23:26: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_int := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_int := lst.([]int)\n            count := 0\n            for _, i := range lst_int {\n                for _, j := range tup_int {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        case []string:\n            lst_str := lst.([]string)\n            count := 0\n            for _, i := range lst_str {\n                for _, j := range tup_int {\n                    if i == fmt.Sprintf(\"%d\", j) {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        tup_str := tup.([]string)\n        switch lst.(type) {\n        case []int:\n            lst_int := lst.([]int)\n            count := 0\n            for _, i := range lst_int {\n                for _, j := range tup_str {\n                    if fmt.Sprintf(\"%d\", i) == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        case []string:\n            lst_str := lst.([]string)\n            count := 0\n            for _, i := range lst_str {\n                for _, j := range tup_str {\n                    if i == j {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpw3k7vxf7_test.go:87: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpw3k7vxf7_test.go:87: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpw3k7vxf7_test.go:87: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.013s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpgkc8ygqi_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpgkc8ygqi_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpgkc8ygqi_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.014s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    case reflect.Array:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpct5xhedb_test.go:11:12: undefined: reflect\n/tmp/tmpct5xhedb_test.go:12:10: undefined: reflect\n/tmp/tmpct5xhedb_test.go:13:14: undefined: reflect\n/tmp/tmpct5xhedb_test.go:15:16: undefined: reflect\n/tmp/tmpct5xhedb_test.go:19:10: undefined: reflect\n/tmp/tmpct5xhedb_test.go:20:14: undefined: reflect\n/tmp/tmpct5xhedb_test.go:22:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk2_7es0e_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk2_7es0e_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk2_7es0e_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int = 0\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpq406wggk_test.go:44: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpq406wggk_test.go:44: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpq406wggk_test.go:44: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpensuu0xb_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpensuu0xb_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpensuu0xb_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case string:\n        tupStr := tup.(string)\n        switch lst.(type) {\n        case string:\n            lstStr := lst.(string)\n            return strings.Count(tupStr, lstStr)\n        case []string:\n            lstStrArr := lst.([]string)\n            count := 0\n            for _, str := range lstStrArr {\n                count += strings.Count(tupStr, str)\n            }\n            return count\n        }\n    case []string:\n        tupStrArr := tup.([]string)\n        switch lst.(type) {\n        case string:\n            lstStr := lst.(string)\n            count := 0\n            for _, str := range tupStrArr {\n                count += strings.Count(str, lstStr)\n            }\n            return count\n        case []string:\n            lstStrArr := lst.([]string)\n            count := 0\n            for _, str := range tupStrArr {\n                for _, str2 := range lstStrArr {\n                    count += strings.Count(str, str2)\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7b0re33y_test.go:16:20: undefined: strings\n/tmp/tmp7b0re33y_test.go:21:26: undefined: strings\n/tmp/tmp7b0re33y_test.go:32:26: undefined: strings\n/tmp/tmp7b0re33y_test.go:40:30: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpl0t6uzu6_test.go:65: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpl0t6uzu6_test.go:65: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpl0t6uzu6_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_str := range tup_lst {\n                for _, lst_str := range lst_lst {\n                    if tup_str == lst_str {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmporjkrafs_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmporjkrafs_test.go:45: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmporjkrafs_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp4cxto1w3_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp4cxto1w3_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp4cxto1w3_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp4cxto1w3_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp4cxto1w3_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp4cxto1w3_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, v := range lst_lst {\n                for _, vv := range tup_lst {\n                    if v == vv {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmphymtumo9_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmphymtumo9_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmphymtumo9_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_str := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_str := lst.([]string)\n            count := 0\n            for _, v := range tup_str {\n                for _, v2 := range lst_str {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    case []int:\n        tup_int := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_int := lst.([]int)\n            count := 0\n            for _, v := range tup_int {\n                for _, v2 := range lst_int {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpoyskf8ur_test.go:60: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpoyskf8ur_test.go:60: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpoyskf8ur_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range tup.([]bool) {\n            if v == lst.(bool) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmplu6730w0_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmplu6730w0_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmplu6730w0_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case string:\n        tup_str := tup.(string)\n        switch lst.(type) {\n        case string:\n            lst_str := lst.(string)\n            return strings.Count(tup_str, lst_str)\n        case []string:\n            lst_str_lst := lst.([]string)\n            count := 0\n            for _, v := range lst_str_lst {\n                count += strings.Count(tup_str, v)\n            }\n            return count\n        }\n    case []string:\n        tup_str_lst := tup.([]string)\n        switch lst.(type) {\n        case string:\n            lst_str := lst.(string)\n            count := 0\n            for _, v := range tup_str_lst {\n                count += strings.Count(v, lst_str)\n            }\n            return count\n        case []string:\n            lst_str_lst := lst.([]string)\n            count := 0\n            for _, v := range tup_str_lst {\n                for _, vv := range lst_str_lst {\n                    count += strings.Count(v, vv)\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoeb1il7y_test.go:16:20: undefined: strings\n/tmp/tmpoeb1il7y_test.go:21:26: undefined: strings\n/tmp/tmpoeb1il7y_test.go:32:26: undefined: strings\n/tmp/tmpoeb1il7y_test.go:40:30: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, t := range tup_lst {\n                for _, l := range lst_lst {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpdjp4ef8w_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpdjp4ef8w_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpdjp4ef8w_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case string:\n        switch lst.(type) {\n        case string:\n            return strings.Count(tup.(string), lst.(string))\n        case []string:\n            count := 0\n            for _, v := range lst.([]string) {\n                count += strings.Count(tup.(string), v)\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case string:\n            count := 0\n            for _, v := range tup.([]string) {\n                count += strings.Count(v, lst.(string))\n            }\n            return count\n        case []string:\n            count := 0\n            for _, v := range tup.([]string) {\n                for _, v2 := range lst.([]string) {\n                    count += strings.Count(v, v2)\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqdybd0u1_test.go:14:20: undefined: strings\n/tmp/tmpqdybd0u1_test.go:18:26: undefined: strings\n/tmp/tmpqdybd0u1_test.go:29:26: undefined: strings\n/tmp/tmpqdybd0u1_test.go:36:30: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp4t8v9gjt_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp4t8v9gjt_test.go:45: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp4t8v9gjt_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpimjuv62d_test.go:65: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpimjuv62d_test.go:65: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpimjuv62d_test.go:65: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpov1uwx4f_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpov1uwx4f_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpov1uwx4f_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpux8ud5ry_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpux8ud5ry_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpux8ud5ry_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpda9g9pgd_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4zmvsm1r_test.go:11:12: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:12:10: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:13:14: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123514,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpychhdo6a_test.go:60: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpychhdo6a_test.go:60: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpychhdo6a_test.go:60: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int = 0\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123514,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6g97a3d4_test.go:11:12: undefined: reflect\n/tmp/tmp6g97a3d4_test.go:12:10: undefined: reflect\n/tmp/tmp6g97a3d4_test.go:13:14: undefined: reflect\n/tmp/tmp6g97a3d4_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        lst_lst := lst.([]string)\n        count := 0\n        for _, tup_ele := range tup_lst {\n            for _, lst_ele := range lst_lst {\n                if tup_ele == lst_ele {\n                    count++\n                }\n            }\n        }\n        return count\n    case []int:\n        tup_lst := tup.([]int)\n        lst_lst := lst.([]int)\n        count := 0\n        for _, tup_ele := range tup_lst {\n            for _, lst_ele := range lst_lst {\n                if tup_ele == lst_ele {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123514,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpeep6_dq4_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpeep6_dq4_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpeep6_dq4_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123514,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpw54tfg4k_test.go:65: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpw54tfg4k_test.go:65: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpw54tfg4k_test.go:65: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp4cxto1w3_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp4cxto1w3_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp4cxto1w3_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_str := tup.([]string)\n        lst_str := lst.([]string)\n        count := 0\n        for _, t := range tup_str {\n            for _, l := range lst_str {\n                if t == l {\n                    count++\n                }\n            }\n        }\n        return count\n    case []int:\n        tup_int := tup.([]int)\n        lst_int := lst.([]int)\n        count := 0\n        for _, t := range tup_int {\n            for _, l := range lst_int {\n                if t == l {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123514,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpct6zwu75_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpct6zwu75_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpct6zwu75_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    case reflect.Array:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpct5xhedb_test.go:11:12: undefined: reflect\n/tmp/tmpct5xhedb_test.go:12:10: undefined: reflect\n/tmp/tmpct5xhedb_test.go:13:14: undefined: reflect\n/tmp/tmpct5xhedb_test.go:15:16: undefined: reflect\n/tmp/tmpct5xhedb_test.go:19:10: undefined: reflect\n/tmp/tmpct5xhedb_test.go:20:14: undefined: reflect\n/tmp/tmpct5xhedb_test.go:22:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_str := range tup_lst {\n                for _, lst_str := range lst_lst {\n                    if tup_str == lst_str {\n                        count++\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmporjkrafs_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmporjkrafs_test.go:45: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmporjkrafs_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, t := range tup.([]string) {\n            for _, l := range lst.([]string) {\n                if t == l {\n                    count++\n                }\n            }\n        }\n    case []int:\n        for _, t := range tup.([]int) {\n            for _, l := range lst.([]int) {\n                if t == l {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123514,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpk44fhjjz_test.go:47: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpk44fhjjz_test.go:47: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpk44fhjjz_test.go:47: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        lst_lst := lst.([]string)\n        count := 0\n        for _, tup_elem := range tup_lst {\n            for _, lst_elem := range lst_lst {\n                if tup_elem == lst_elem {\n                    count++\n                }\n            }\n        }\n        return count\n    case []int:\n        tup_lst := tup.([]int)\n        lst_lst := lst.([]int)\n        count := 0\n        for _, tup_elem := range tup_lst {\n            for _, lst_elem := range lst_lst {\n                if tup_elem == lst_elem {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123514,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpzsw6dbhx_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpzsw6dbhx_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpzsw6dbhx_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range tup.([]bool) {\n            if v == lst.(bool) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmplu6730w0_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmplu6730w0_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmplu6730w0_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "Unsupported type\nUnsupported type\nUnsupported type\n--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp3m6bmjxj_test.go:51: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp3m6bmjxj_test.go:51: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp3m6bmjxj_test.go:51: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp7xytnsjm_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp7xytnsjm_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp7xytnsjm_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, v := range lst_lst {\n                for _, vv := range tup_lst {\n                    if v == vv {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123514,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpfvqgojxb_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpfvqgojxb_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpfvqgojxb_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_ := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_ := lst.([]string)\n            count := 0\n            for _, t := range tup_ {\n                for _, l := range lst_ {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpseunc031_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpseunc031_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpseunc031_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4zmvsm1r_test.go:11:12: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:12:10: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:13:14: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, v := range tup_lst {\n                for _, v2 := range lst_lst {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmph0ut7i2h_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmph0ut7i2h_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmph0ut7i2h_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_str := range tup_lst {\n                for _, lst_str := range lst_lst {\n                    if tup_str == lst_str {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpa7dnsg5y_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpa7dnsg5y_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpa7dnsg5y_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range tup.(string) {\n            if string(v) == lst.(string) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpa55dpvum_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpa55dpvum_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpa55dpvum_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for i := 0; i < len(tup_lst); i++ {\n                for j := 0; j < len(lst_lst); j++ {\n                    if tup_lst[i] == lst_lst[j] {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpgkq8x42g_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpgkq8x42g_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpgkq8x42g_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmplrfyycix_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmplrfyycix_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmplrfyycix_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpji_v7gle_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpji_v7gle_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpji_v7gle_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_count := 0\n            for _, tup_val := range tup.([]string) {\n                for _, lst_val := range lst.([]string) {\n                    if tup_val == lst_val {\n                        tup_count++\n                    }\n                }\n            }\n            return tup_count\n        default:\n            return 0\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_count := 0\n            for _, tup_val := range tup.([]int) {\n                for _, lst_val := range lst.([]int) {\n                    if tup_val == lst_val {\n                        tup_count++\n                    }\n                }\n            }\n            return tup_count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp7yg3n2bb_test.go:61: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp7yg3n2bb_test.go:61: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp7yg3n2bb_test.go:61: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_int := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_int := lst.([]int)\n            count := 0\n            for _, v := range tup_int {\n                for _, v2 := range lst_int {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        case []string:\n            lst_str := lst.([]string)\n            count := 0\n            for _, v := range tup_int {\n                for _, v2 := range lst_str {\n                    if v == len(v2) {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        tup_str := tup.([]string)\n        switch lst.(type) {\n        case []int:\n            lst_int := lst.([]int)\n            count := 0\n            for _, v := range tup_str {\n                for _, v2 := range lst_int {\n                    if len(v) == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        case []string:\n            lst_str := lst.([]string)\n            count := 0\n            for _, v := range tup_str {\n                for _, v2 := range lst_str {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpplynx6w__test.go:87: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpplynx6w__test.go:87: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpplynx6w__test.go:87: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpnwhd059r_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpnwhd059r_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpnwhd059r_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case string:\n        tup_str := tup.(string)\n        switch lst.(type) {\n        case string:\n            lst_str := lst.(string)\n            return strings.Count(tup_str, lst_str)\n        case []string:\n            lst_str_arr := lst.([]string)\n            count := 0\n            for _, lst_str := range lst_str_arr {\n                count += strings.Count(tup_str, lst_str)\n            }\n            return count\n        }\n    case []string:\n        tup_str_arr := tup.([]string)\n        switch lst.(type) {\n        case string:\n            lst_str := lst.(string)\n            count := 0\n            for _, tup_str := range tup_str_arr {\n                count += strings.Count(tup_str, lst_str)\n            }\n            return count\n        case []string:\n            lst_str_arr := lst.([]string)\n            count := 0\n            for _, tup_str := range tup_str_arr {\n                for _, lst_str := range lst_str_arr {\n                    count += strings.Count(tup_str, lst_str)\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123514,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzbz4engj_test.go:16:20: undefined: strings\n/tmp/tmpzbz4engj_test.go:21:26: undefined: strings\n/tmp/tmpzbz4engj_test.go:32:26: undefined: strings\n/tmp/tmpzbz4engj_test.go:40:30: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp2of2s83w_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp2of2s83w_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp2of2s83w_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        }\n    }\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpqzkxr559_test.go:45: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpqzkxr559_test.go:45: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpqzkxr559_test.go:45: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpxm4u61c2_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpxm4u61c2_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpxm4u61c2_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1j7oifj0_test.go:65: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1j7oifj0_test.go:65: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1j7oifj0_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        lst_lst := lst.([]string)\n        count := 0\n        for _, v := range tup_lst {\n            for _, v2 := range lst_lst {\n                if v == v2 {\n                    count++\n                }\n            }\n        }\n        return count\n    case []int:\n        tup_lst := tup.([]int)\n        lst_lst := lst.([]int)\n        count := 0\n        for _, v := range tup_lst {\n            for _, v2 := range lst_lst {\n                if v == v2 {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpojh9lyo9_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpojh9lyo9_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpojh9lyo9_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, v := range tup_lst {\n                for _, v2 := range lst_lst {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpbs_df13p_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpbs_df13p_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpbs_df13p_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpn4i5exjb_test.go:28: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpn4i5exjb_test.go:28: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpn4i5exjb_test.go:28: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        lst_lst := lst.([]string)\n        count := 0\n        for _, tup_val := range tup_lst {\n            for _, lst_val := range lst_lst {\n                if tup_val == lst_val {\n                    count++\n                }\n            }\n        }\n        return count\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmprwijzb6y_test.go:43: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmprwijzb6y_test.go:43: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmprwijzb6y_test.go:43: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1j7oifj0_test.go:65: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1j7oifj0_test.go:65: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1j7oifj0_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, v := range tup_lst {\n                for _, v2 := range lst_lst {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, v := range tup_lst {\n                for _, v2 := range lst_lst {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpz2tidnpu_test.go:65: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpz2tidnpu_test.go:65: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpz2tidnpu_test.go:65: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case string:\n        return strings.Count(tup.(string), lst.(string))\n    case []int:\n        count := 0\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n        return count\n    case []string:\n        count := 0\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n        return count\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqxuyryri_test.go:12:16: undefined: strings\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, t := range tup.([]string) {\n            for _, l := range lst.([]string) {\n                if t == l {\n                    count++\n                }\n            }\n        }\n    case []int:\n        for _, t := range tup.([]int) {\n            for _, l := range lst.([]int) {\n                if t == l {\n                    count++\n                }\n            }\n        }\n    case []float64:\n        for _, t := range tup.([]float64) {\n            for _, l := range lst.([]float64) {\n                if t == l {\n                    count++\n                }\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1vqnqtxv_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1vqnqtxv_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1vqnqtxv_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4zmvsm1r_test.go:11:12: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:12:10: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:13:14: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpozqmwz6w_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpozqmwz6w_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpozqmwz6w_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            count += count_Occurrence(s.Index(i).Interface(), lst)\n        }\n    case reflect.Int:\n        switch reflect.TypeOf(lst).Kind() {\n        case reflect.Slice:\n            s := reflect.ValueOf(lst)\n\n            for i := 0; i < s.Len(); i++ {\n                if tup == s.Index(i).Interface() {\n                    count++\n                }\n            }\n        default:\n            if tup == lst {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyxrlvfkm_test.go:11:12: undefined: reflect\n/tmp/tmpyxrlvfkm_test.go:12:10: undefined: reflect\n/tmp/tmpyxrlvfkm_test.go:13:14: undefined: reflect\n/tmp/tmpyxrlvfkm_test.go:18:10: undefined: reflect\n/tmp/tmpyxrlvfkm_test.go:19:16: undefined: reflect\n/tmp/tmpyxrlvfkm_test.go:20:14: undefined: reflect\n/tmp/tmpyxrlvfkm_test.go:21:18: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpozqmwz6w_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpozqmwz6w_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpozqmwz6w_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            count := 0\n            for _, t := range tup.([]string) {\n                for _, l := range lst.([]string) {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, t := range tup.([]int) {\n                for _, l := range lst.([]int) {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    case []float64:\n        switch lst.(type) {\n        case []float64:\n            count := 0\n            for _, t := range tup.([]float64) {\n                for _, l := range lst.([]float64) {\n                    if t == l {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp04nfx266_test.go:76: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp04nfx266_test.go:76: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp04nfx266_test.go:76: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            count := 0\n            for _, v := range tup.([]int) {\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpqlge6j6g_test.go:46: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpqlge6j6g_test.go:46: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpqlge6j6g_test.go:46: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    case reflect.Array:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpct5xhedb_test.go:11:12: undefined: reflect\n/tmp/tmpct5xhedb_test.go:12:10: undefined: reflect\n/tmp/tmpct5xhedb_test.go:13:14: undefined: reflect\n/tmp/tmpct5xhedb_test.go:15:16: undefined: reflect\n/tmp/tmpct5xhedb_test.go:19:10: undefined: reflect\n/tmp/tmpct5xhedb_test.go:20:14: undefined: reflect\n/tmp/tmpct5xhedb_test.go:22:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpv5ap5e10_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpv5ap5e10_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpv5ap5e10_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range tup.(string) {\n            if string(v) == lst.(string) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    case []bool:\n        for _, v := range tup.([]bool) {\n            if v == lst.(bool) {\n                count++\n            }\n        }\n    case []interface{}:\n        for _, v := range tup.([]interface{}) {\n            if v == lst {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpjablfb_f_test.go:67: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpjablfb_f_test.go:67: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpjablfb_f_test.go:67: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_str := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_str := lst.([]string)\n            count := 0\n            for _, v := range lst_str {\n                for _, v2 := range tup_str {\n                    if v == v2 {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp9u8sfr9h_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp9u8sfr9h_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp9u8sfr9h_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int = 0\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgw4blag5_test.go:11:12: undefined: reflect\n/tmp/tmpgw4blag5_test.go:12:10: undefined: reflect\n/tmp/tmpgw4blag5_test.go:13:14: undefined: reflect\n/tmp/tmpgw4blag5_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        tup_lst := tup.([]string)\n        switch lst.(type) {\n        case []string:\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_item := range tup_lst {\n                for _, lst_item := range lst_lst {\n                    if tup_item == lst_item {\n                        count += 1\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpv_hjexfp_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpv_hjexfp_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpv_hjexfp_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpux8ud5ry_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpux8ud5ry_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpux8ud5ry_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpensuu0xb_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpensuu0xb_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpensuu0xb_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4zmvsm1r_test.go:11:12: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:12:10: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:13:14: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var result int\n    switch tup.(type) {\n    case []int:\n        for _, v := range tup.([]int) {\n            switch lst.(type) {\n            case []int:\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        result += 1\n                    }\n                }\n            case []string:\n                for _, v2 := range lst.([]string) {\n                    if v == v2 {\n                        result += 1\n                    }\n                }\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            switch lst.(type) {\n            case []int:\n                for _, v2 := range lst.([]int) {\n                    if v == v2 {\n                        result += 1\n                    }\n                }\n            case []string:\n                for _, v2 := range lst.([]string) {\n                    if v == v2 {\n                        result += 1\n                    }\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpytvtuo6v_test.go:23:26: invalid operation: v == v2 (mismatched types int and string)\n/tmp/tmpytvtuo6v_test.go:34:26: invalid operation: v == v2 (mismatched types string and int)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []string:\n        switch lst.(type) {\n        case []string:\n            tup_lst := tup.([]string)\n            lst_lst := lst.([]string)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpfuw6yivt_test.go:65: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpfuw6yivt_test.go:65: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpfuw6yivt_test.go:65: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4zmvsm1r_test.go:11:12: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:12:10: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:13:14: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp4cxto1w3_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp4cxto1w3_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp4cxto1w3_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp9mlwetsj_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpux8ud5ry_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpux8ud5ry_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpux8ud5ry_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    // your code here\n    return 0\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmp1c36iv3n_test.go:29: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4zmvsm1r_test.go:11:12: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:12:10: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:13:14: undefined: reflect\n/tmp/tmp4zmvsm1r_test.go:16:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range lst.([]string) {\n            if v == tup.(string) {\n                count++\n            }\n        }\n    case int:\n        for _, v := range lst.([]int) {\n            if v == tup.(int) {\n                count++\n            }\n        }\n    case float64:\n        for _, v := range lst.([]float64) {\n            if v == tup.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123510,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpf1d4dlzu_test.go:49: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpf1d4dlzu_test.go:49: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpf1d4dlzu_test.go:49: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case string:\n        for _, v := range tup.(string) {\n            if string(v) == lst.(string) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []float64:\n        for _, v := range tup.([]float64) {\n            if v == lst.(float64) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123515,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpa55dpvum_test.go:55: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpa55dpvum_test.go:55: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpa55dpvum_test.go:55: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch tup.(type) {\n    case []int:\n        for _, v := range tup.([]int) {\n            if v == lst.(int) {\n                count++\n            }\n        }\n    case []string:\n        for _, v := range tup.([]string) {\n            if v == lst.(string) {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123512,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpov1uwx4f_test.go:43: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpov1uwx4f_test.go:43: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpov1uwx4f_test.go:43: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    var count int\n    switch reflect.TypeOf(tup).Kind() {\n    case reflect.Slice:\n        s := reflect.ValueOf(tup)\n        for i := 0; i < s.Len(); i++ {\n            if reflect.DeepEqual(lst, s.Index(i).Interface()) == true {\n                count++\n            }\n        }\n    }\n    return count\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl9001kl_test.go:11:12: undefined: reflect\n/tmp/tmpyl9001kl_test.go:12:10: undefined: reflect\n/tmp/tmpyl9001kl_test.go:13:14: undefined: reflect\n/tmp/tmpyl9001kl_test.go:15:16: undefined: reflect\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case int:\n        return count_Occurrence_int(tup.(int), lst.([]int))\n    case string:\n        return count_Occurrence_string(tup.(string), lst.([]string))\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnz7pz_2y_test.go:12:16: undefined: count_Occurrence_int\n/tmp/tmpnz7pz_2y_test.go:14:16: undefined: count_Occurrence_string\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, v := range lst_lst {\n                for _, vv := range tup_lst {\n                    if v == vv {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123514,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpfvqgojxb_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpfvqgojxb_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpfvqgojxb_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        tup_lst := tup.([]int)\n        switch lst.(type) {\n        case []int:\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_val := range tup_lst {\n                for _, lst_val := range lst_lst {\n                    if tup_val == lst_val {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return -1\n        }\n    default:\n        return -1\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517492,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpv5ap5e10_test.go:48: expected '%!s(int=3)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpv5ap5e10_test.go:48: expected '%!s(int=6)', got '%!s(int=-1)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpv5ap5e10_test.go:48: expected '%!s(int=2)', got '%!s(int=-1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package count_Occurrence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the occurence of all elements of list in a tuple.\nfunc count_Occurrence(tup interface{}, lst interface{}) int {\n    switch tup.(type) {\n    case []int:\n        switch lst.(type) {\n        case []int:\n            tup_lst := tup.([]int)\n            lst_lst := lst.([]int)\n            count := 0\n            for _, tup_elem := range tup_lst {\n                for _, lst_elem := range lst_lst {\n                    if tup_elem == lst_elem {\n                        count++\n                    }\n                }\n            }\n            return count\n        default:\n            return 0\n        }\n    default:\n        return 0\n    }\n}\n\nfunc TestCount_Occurrence(t *testing.T) {\n  candidate := count_Occurrence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{\"a\", \"a\", \"c\", \"b\", \"d\"}, []string{\"a\", \"b\"}), expected: 3 },\n     { actual: candidate([]interface{}{1, 2, 3, 1, 4, 6, 7, 1, 4}, []int{1, 4, 7}), expected: 6 },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}, []int{1, 2}), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123516,
      "stdout": "--- FAIL: TestCount_Occurrence (0.00s)\n    --- FAIL: TestCount_Occurrence/test_num__0 (0.00s)\n        tmpg6m3ejck_test.go:48: expected '%!s(int=3)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__1 (0.00s)\n        tmpg6m3ejck_test.go:48: expected '%!s(int=6)', got '%!s(int=0)'\n    --- FAIL: TestCount_Occurrence/test_num__2 (0.00s)\n        tmpg6m3ejck_test.go:48: expected '%!s(int=2)', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}