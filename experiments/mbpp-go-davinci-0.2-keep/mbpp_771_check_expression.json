{
  "name": "mbpp_771_check_expression",
  "language": "go_test.go",
  "prompt": "package check_expression_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp string) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestCheck_Expression(t *testing.T) {\n  candidate := check_expression\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"{()}[{}]\"), expected: true },\n     { actual: candidate(\"{()}[{]\"), expected: false },\n     { actual: candidate(\"{()}[{}][]({})\"), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            var top rune\n            top, stack = stack[len(stack)-1], stack[:len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') || (c == '}' && top != '{') || (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack) - 1]\n            if (c == ')' && top != '(') ||\n                (c == '}' && top != '{') ||\n                (c == ']' && top != '[') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '{' || r == '[' {\n            stack = append(stack, r)\n        } else if r == ')' || r == '}' || r == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if c == ')' && top != '(' {\n                return false\n            }\n            if c == '}' && top != '{' {\n                return false\n            }\n            if c == ']' && top != '[' {\n                return false\n            }\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack)-1]\n            if (last == \"(\" && c == ')') || (last == \"[\" && c == ']') || (last == \"{\" && c == '}') {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (c == ')' && top != '(') || (c == ']' && top != '[') || (c == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            } else if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            } else if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    if len(stack) != 0 {\n        return false\n    }\n    return true\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] == \"(\" {\n                stack = stack[:len(stack)-1]\n            } else if c == ']' && stack[len(stack)-1] == \"[\" {\n                stack = stack[:len(stack)-1]\n            } else if c == '}' && stack[len(stack)-1] == \"{\" {\n                stack = stack[:len(stack)-1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, r := range exp {\n        if r == '(' || r == '[' || r == '{' {\n            stack = append(stack, r)\n        } else if r == ')' || r == ']' || r == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != \"(\" {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != \"{\" {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != \"[\" {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        if r == '(' || r == '[' || r == '{' {\n            stack = append(stack, r)\n        } else if r == ')' || r == ']' || r == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            if (r == ')' && top != '(') || (r == ']' && top != '[') || (r == '}' && top != '{') {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last != '(') || (c == ']' && last != '[') || (c == '}' && last != '{') {\n                return false\n            }\n            stack = stack[:len(stack) - 1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []string\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, string(c))\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            top := stack[len(stack)-1]\n            stack = stack[:len(stack)-1]\n            if !((c == ')' && top == \"(\") || (c == '}' && top == \"{\") || (c == ']' && top == \"[\")) {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            last := stack[len(stack) - 1]\n            if (c == ')' && last == '(') || (c == '}' && last == '{') || (c == ']' && last == '[') {\n                stack = stack[:len(stack) - 1]\n            } else {\n                return false\n            }\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '[' || c == '{' {\n            stack = append(stack, c)\n        } else if c == ')' || c == ']' || c == '}' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    stack := make([]rune, 0)\n    for _, c := range exp {\n        if c == '(' || c == '{' || c == '[' {\n            stack = append(stack, c)\n        } else if c == ')' || c == '}' || c == ']' {\n            if len(stack) == 0 {\n                return false\n            }\n            if c == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if c == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if c == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n",
    "    var stack []rune\n    for _, r := range exp {\n        switch r {\n        case '(', '{', '[':\n            stack = append(stack, r)\n        case ')', '}', ']':\n            if len(stack) == 0 {\n                return false\n            }\n            if r == ')' && stack[len(stack)-1] != '(' {\n                return false\n            }\n            if r == '}' && stack[len(stack)-1] != '{' {\n                return false\n            }\n            if r == ']' && stack[len(stack)-1] != '[' {\n                return false\n            }\n            stack = stack[:len(stack)-1]\n        }\n    }\n    return len(stack) == 0\n}\n"
  ]
}