{
  "name": "mbpp_100_next_smallest_palindrome",
  "language": "go_test.go",
  "prompt": "package next_smallest_palindrome_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\nfunc next_smallest_palindrome(num int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_100_next_smallest_palindrome.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestNext_Smallest_Palindrome(t *testing.T) {\n  candidate := next_smallest_palindrome\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(99), expected: 101 },\n     { actual: candidate(1221), expected: 1331 },\n     { actual: candidate(120), expected: 121 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if num < 0 {\n        return -1\n    }\n    if num < 10 {\n        return num\n    }\n    if num < 100 {\n        if num % 11 == 0 {\n            return num + 2\n        }\n        return num + 1\n    }\n    if num < 1000 {\n        if num % 101 == 0 {\n            return num + 202\n        }\n        if num % 11 == 0 {\n            return num + 22\n        }\n        return num + 11\n    }\n    if num < 10000 {\n        if num % 1001 == 0 {\n            return num + 2002\n        }\n        if num % 101 == 0 {\n            return num + 202\n        }\n        if num % 11 == 0 {\n            return num + 22\n        }\n        return num + 11\n    }\n    if num < 100000 {\n        if num % 10001 == 0 {\n            return num + 20002\n        }\n        if num % 1001 == 0 {\n            return num + 2002\n        }\n        if num % 101 == 0 {\n            return num + 202\n        }\n        if num % 11 == 0 {\n            return num + 22\n        }\n        return num + 11\n    }\n    if num < 1000000 {\n        if num % 100001 == 0 {\n            return num + 200002\n        }\n        if num % 10001 == 0 {\n            return num + 20002\n        }\n        if num % 1001 == 0 {\n            return num + 2002\n        }\n        if num % 101 == 0 {\n            return num + 202\n        }\n        if num % 11 == 0 {\n            return num + 22\n        }\n        return num + 11\n    }\n    if num < 10000000 {\n        if num % 1000001 == 0 {\n            return num + 2000002\n        }\n        if num % 100001 == 0 {\n            return num + 200002\n        }\n        if num % 10001 == 0 {\n            return num + 20002\n        }\n        if num % 1001 == 0 {\n            return num + 2002\n        }\n        if num % 101 == 0 {\n            return num + 202\n        }\n        if num % 11 == 0 {\n            return num + 22\n       ",
    "    if num < 0 {\n        return -1\n    }\n    if num < 10 {\n        return num\n    }\n    num_str := fmt.Sprintf(\"%d\", num)\n    num_len := len(num_str)\n    if num_len % 2 == 0 {\n        // even\n        left_str := num_str[:num_len/2]\n        right_str := num_str[num_len/2:]\n        left_int, _ := strconv.Atoi(left_str)\n        right_int, _ := strconv.Atoi(right_str)\n        if left_int < right_int {\n            return num\n        }\n        left_int += 1\n        left_str = fmt.Sprintf(\"%d\", left_int)\n        right_str = fmt.Sprintf(\"%d\", left_int)\n        right_str = reverse(right_str)\n        return strconv.Atoi(left_str + right_str)\n    } else {\n        // odd\n        left_str := num_str[:num_len/2]\n        right_str := num_str[num_len/2+1:]\n        left_int, _ := strconv.Atoi(left_str)\n        right_int, _ := strconv.Atoi(right_str)\n        if left_int < right_int {\n            return num\n        }\n        left_int += 1\n        left_str = fmt.Sprintf(\"%d\", left_int)\n        right_str = fmt.Sprintf(\"%d\", left_int)\n        right_str = reverse(right_str)\n        return strconv.Atoi(left_str + num_str[num_len/2] + right_str)\n    }\n}\n",
    "    // convert int to string\n    str := fmt.Sprintf(\"%d\", num)\n    // get length of string\n    length := len(str)\n    // create a slice of ints from string\n    slice := make([]int, length)\n    for i, v := range str {\n        slice[i] = int(v - '0')\n    }\n    // create a slice of ints to hold the palindrome\n    palindrome := make([]int, length)\n    // create a slice of ints to hold the left half of the palindrome\n    left := make([]int, length / 2)\n    // create a slice of ints to hold the right half of the palindrome\n    right := make([]int, length / 2)\n    // copy the left half of the slice into the left half of the palindrome\n    copy(left, slice[:length / 2])\n    // copy the right half of the slice into the right half of the palindrome\n    copy(right, slice[length / 2:])\n    // reverse the right half of the palindrome\n    for i, j := 0, len(right) - 1; i < j; i, j = i + 1, j - 1 {\n        right[i], right[j] = right[j], right[i]\n    }\n    // copy the left half of the palindrome into the palindrome\n    copy(palindrome[:length / 2], left)\n    // copy the right half of the palindrome into the palindrome\n    copy(palindrome[length / 2:], right)\n    // convert the palindrome to an int\n    palindrome_int := 0\n    for i := 0; i < length; i++ {\n        palindrome_int = palindrome_int * 10 + palindrome[i]\n    }\n    // if the palindrome is less than the number, increment the left half of the palindrome\n    if palindrome_int < num {\n        for i := len(left) - 1; i >= 0; i-- {\n            left[i]++\n            if left[i] == 10 {\n                left[i] = 0\n            } else",
    "    if num < 0 {\n        return -1\n    }\n    if num < 10 {\n        return num\n    }\n    if num < 100 {\n        if num % 11 == 0 {\n            return num + 2\n        }\n        return num + 1\n    }\n    if num < 1000 {\n        if num % 101 == 0 {\n            return num + 202\n        }\n        if num % 11 == 0 {\n            return num + 22\n        }\n        return num + 11\n    }\n    if num < 10000 {\n        if num % 1001 == 0 {\n            return num + 2002\n        }\n        if num % 101 == 0 {\n            return num + 220\n        }\n        if num % 11 == 0 {\n            return num + 24\n        }\n        return num + 13\n    }\n    if num < 100000 {\n        if num % 10001 == 0 {\n            return num + 20002\n        }\n        if num % 1001 == 0 {\n            return num + 2200\n        }\n        if num % 101 == 0 {\n            return num + 240\n        }\n        if num % 11 == 0 {\n            return num + 26\n        }\n        return num + 15\n    }\n    if num < 1000000 {\n        if num % 100001 == 0 {\n            return num + 200002\n        }\n        if num % 10001 == 0 {\n            return num + 22000\n        }\n        if num % 1001 == 0 {\n            return num + 2400\n        }\n        if num % 101 == 0 {\n            return num + 260\n        }\n        if num % 11 == 0 {\n            return num + 28\n        }\n        return num + 17\n    }\n    if num < 10000000 {\n        if num % 1000001 == 0 {\n            return num + 2000002\n        }\n        if num % 100001 == 0 {\n            return num + 22000\n        }\n        if num % 10001 == 0 {\n            return num + 24000\n        }\n        if num % 1001 == 0 {\n            return num + 2600\n        }\n        if num % 101 == 0 {\n            return num + 280\n        }\n        if num % 11 == 0 {\n            return num + 30\n",
    "    if num < 0 {\n        return -1\n    }\n    if num < 10 {\n        return num\n    }\n    digits := make([]int, 0)\n    for num > 0 {\n        digits = append(digits, num % 10)\n        num /= 10\n    }\n    if len(digits) == 1 {\n        return digits[0]\n    }\n    // fmt.Println(digits)\n    for i := 0; i < len(digits) / 2; i++ {\n        if digits[i] < digits[len(digits) - 1 - i] {\n            digits[i] = digits[len(digits) - 1 - i]\n        } else if digits[i] > digits[len(digits) - 1 - i] {\n            digits[i] = digits[len(digits) - 1 - i]\n            for j := i + 1; j < len(digits) / 2; j++ {\n                digits[j] = digits[len(digits) - 1 - j]\n            }\n            break\n        }\n    }\n    // fmt.Println(digits)\n    for i := 0; i < len(digits) / 2; i++ {\n        if digits[i] < digits[len(digits) - 1 - i] {\n            digits[i] = digits[len(digits) - 1 - i]\n        } else if digits[i] > digits[len(digits) - 1 - i] {\n            digits[i] = digits[len(digits) - 1 - i]\n            for j := i + 1; j < len(digits) / 2; j++ {\n                digits[j] = digits[len(digits) - 1 - j]\n            }\n            break\n        }\n    }\n    // fmt.Println(digits)\n    if digits[len(digits) / 2] < 9 {\n        digits[len(digits) / 2] += 1\n    } else {\n        digits[len(digits) / 2] = 0\n        for i := len(digits) / 2 - 1; i >= 0; i-- {\n            if digits[i] <",
    "    // if num is a palindrome, return it\n    if is_palindrome(num) {\n        return num\n    }\n\n    // if num is a single digit, return it\n    if num < 10 {\n        return num\n    }\n\n    // if num is a two digit number, return the next palindrome\n    if num < 100 {\n        if num % 11 == 0 {\n            return num + 11\n        }\n        return num + 1\n    }\n\n    // if num is a three digit number, return the next palindrome\n    if num < 1000 {\n        if num % 101 == 0 {\n            return num + 101\n        }\n        return num + 1\n    }\n\n    // if num is a four digit number, return the next palindrome\n    if num < 10000 {\n        if num % 1001 == 0 {\n            return num + 1001\n        }\n        return num + 1\n    }\n\n    // if num is a five digit number, return the next palindrome\n    if num < 100000 {\n        if num % 10001 == 0 {\n            return num + 10001\n        }\n        return num + 1\n    }\n\n    // if num is a six digit number, return the next palindrome\n    if num < 1000000 {\n        if num % 100001 == 0 {\n            return num + 100001\n        }\n        return num + 1\n    }\n\n    // if num is a seven digit number, return the next palindrome\n    if num < 10000000 {\n        if num % 1000001 == 0 {\n            return num + 1000001\n        }\n        return num + 1\n    }\n\n    // if num is a eight digit number, return the next palindrome\n    if num < 100000000 {\n        if num % 10000001 == 0 {\n            return num + 10000001\n        }\n        return num + 1\n    }\n\n    // if num is a nine digit number, return the next palindrome\n    if num < 1000000000 {\n        if num % 100000001 == 0 {\n            return num + 100000001\n        }\n        return num + 1\n    }\n\n    // if num is a ten digit number, return the next palindrome\n    if num < 10000000000 {",
    "    if num < 0 {\n        return -1\n    }\n    if num < 10 {\n        return num\n    }\n    if num < 100 {\n        if num % 11 == 0 {\n            return num + 2\n        }\n        return num + 1\n    }\n    if num < 1000 {\n        if num % 101 == 0 {\n            return num + 202\n        }\n        if num % 11 == 0 {\n            return num + 22\n        }\n        return num + 11\n    }\n    if num < 10000 {\n        if num % 1001 == 0 {\n            return num + 2002\n        }\n        if num % 101 == 0 {\n            return num + 220\n        }\n        if num % 11 == 0 {\n            return num + 24\n        }\n        return num + 11\n    }\n    if num < 100000 {\n        if num % 10001 == 0 {\n            return num + 20002\n        }\n        if num % 1001 == 0 {\n            return num + 2200\n        }\n        if num % 101 == 0 {\n            return num + 242\n        }\n        if num % 11 == 0 {\n            return num + 26\n        }\n        return num + 11\n    }\n    if num < 1000000 {\n        if num % 100001 == 0 {\n            return num + 200002\n        }\n        if num % 10001 == 0 {\n            return num + 22000\n        }\n        if num % 1001 == 0 {\n            return num + 2420\n        }\n        if num % 101 == 0 {\n            return num + 264\n        }\n        if num % 11 == 0 {\n            return num + 28\n        }\n        return num + 11\n    }\n    if num < 10000000 {\n        if num % 1000001 == 0 {\n            return num + 2000002\n        }\n        if num % 100001 == 0 {\n            return num + 220000\n        }\n        if num % 10001 == 0 {\n            return num + 24200\n        }\n        if num % 1001 == 0 {\n            return num + 2642\n        }\n        if num % 101 == 0 {\n            return num + 2864\n        }\n        if num % 11 == 0 {\n            return",
    "    if num < 0 {\n        return -1\n    }\n    if num < 10 {\n        return num\n    }\n    digits := make([]int, 0)\n    for num > 0 {\n        digits = append(digits, num % 10)\n        num /= 10\n    }\n    n := len(digits)\n    for i := 0; i < n / 2; i++ {\n        digits[n - i - 1] = digits[i]\n    }\n    for i := 0; i < n; i++ {\n        if digits[i] < 9 {\n            digits[i]++\n            for j := 0; j < n / 2; j++ {\n                digits[n - j - 1] = digits[j]\n            }\n            result := 0\n            for i := 0; i < n; i++ {\n                result = result * 10 + digits[i]\n            }\n            return result\n        }\n    }\n    result := 0\n    for i := 0; i < n; i++ {\n        result = result * 10 + 1\n    }\n    return result\n}\n",
    "    if num < 0 {\n        return -1\n    }\n    if num < 10 {\n        return num\n    }\n    // get the digits of the number\n    digits := make([]int, 0)\n    for num > 0 {\n        digits = append(digits, num % 10)\n        num /= 10\n    }\n    // reverse the digits\n    for i := 0; i < len(digits) / 2; i++ {\n        digits[i], digits[len(digits) - i - 1] = digits[len(digits) - i - 1], digits[i]\n    }\n    // find the first digit that is not 9\n    i := 0\n    for i < len(digits) && digits[i] == 9 {\n        i++\n    }\n    // if all digits are 9, then return the next palindrome\n    if i == len(digits) {\n        digits = append(digits, 0)\n        digits[0] = 1\n    } else {\n        digits[i]++\n    }\n    // copy the digits to the right\n    for i = 0; i < len(digits) / 2; i++ {\n        digits[len(digits) - i - 1] = digits[i]\n    }\n    // convert the digits to a number\n    num = 0\n    for i = 0; i < len(digits); i++ {\n        num = num * 10 + digits[i]\n    }\n    return num\n}\n",
    "    if num < 0 {\n        return -1\n    }\n    if num < 10 {\n        return num\n    }\n    if num == 11 {\n        return 22\n    }\n    if num < 100 {\n        if num % 11 == 0 {\n            return num + 11\n        }\n        return num + 1\n    }\n    if num < 1000 {\n        if num % 101 == 0 {\n            return num + 101\n        }\n        return num + 1\n    }\n    if num < 10000 {\n        if num % 1001 == 0 {\n            return num + 1001\n        }\n        return num + 1\n    }\n    if num < 100000 {\n        if num % 10001 == 0 {\n            return num + 10001\n        }\n        return num + 1\n    }\n    if num < 1000000 {\n        if num % 100001 == 0 {\n            return num + 100001\n        }\n        return num + 1\n    }\n    if num < 10000000 {\n        if num % 1000001 == 0 {\n            return num + 1000001\n        }\n        return num + 1\n    }\n    if num < 100000000 {\n        if num % 10000001 == 0 {\n            return num + 10000001\n        }\n        return num + 1\n    }\n    if num < 1000000000 {\n        if num % 100000001 == 0 {\n            return num + 100000001\n        }\n        return num + 1\n    }\n    if num < 10000000000 {\n        if num % 1000000001 == 0 {\n            return num + 1000000001\n        }\n        return num + 1\n    }\n    if num < 100000000000 {\n        if num % 10000000001 == 0 {\n            return num + 10000000001\n        }\n        return num + 1\n    }\n    if num < 1000000000000 {\n        if num % 100000000001 == 0 {\n            return num + 100000000001\n        }\n        return num + 1\n    }\n    if num < 10000000000000 {\n        if num % 1000000000001 == 0 {\n            return num + 1000000000001\n        }\n        return num + 1\n    }\n    if num < 100000000000000 {\n        if num % 10000000000001",
    "    if num < 0 {\n        return -1\n    }\n\n    if num < 10 {\n        return num\n    }\n\n    digits := []int{}\n    for num > 0 {\n        digits = append(digits, num % 10)\n        num /= 10\n    }\n\n    for i := 0; i < len(digits) / 2; i++ {\n        digits[len(digits) - i - 1] = digits[i]\n    }\n\n    for i := 0; i < len(digits); i++ {\n        if digits[i] < 9 {\n            digits[i]++\n            return to_int(digits)\n        }\n    }\n\n    return to_int(digits)\n}\n",
    "    if num < 0 {\n        return -1\n    }\n    if num < 10 {\n        return num\n    }\n    if num < 100 {\n        if num % 11 == 0 {\n            return num + 2\n        }\n        return num + 1\n    }\n    if num < 1000 {\n        if num % 101 == 0 {\n            return num + 202\n        }\n        if num % 11 == 0 {\n            return num + 22\n        }\n        return num + 11\n    }\n    if num < 10000 {\n        if num % 1001 == 0 {\n            return num + 2002\n        }\n        if num % 101 == 0 {\n            return num + 220\n        }\n        if num % 11 == 0 {\n            return num + 24\n        }\n        return num + 13\n    }\n    if num < 100000 {\n        if num % 10001 == 0 {\n            return num + 20002\n        }\n        if num % 1001 == 0 {\n            return num + 2200\n        }\n        if num % 101 == 0 {\n            return num + 240\n        }\n        if num % 11 == 0 {\n            return num + 26\n        }\n        return num + 15\n    }\n    if num < 1000000 {\n        if num % 100001 == 0 {\n            return num + 200002\n        }\n        if num % 10001 == 0 {\n            return num + 22000\n        }\n        if num % 1001 == 0 {\n            return num + 2400\n        }\n        if num % 101 == 0 {\n            return num + 260\n        }\n        if num % 11 == 0 {\n            return num + 28\n        }\n        return num + 17\n    }\n    if num < 10000000 {\n        if num % 1000001 == 0 {\n            return num + 2000002\n        }\n        if num % 100001 == 0 {\n            return num + 22000\n        }\n        if num % 10001 == 0 {\n            return num + 24000\n        }\n        if num % 1001 == 0 {\n            return num + 2600\n        }\n        if num % 101 == 0 {\n            return num + 280\n        }\n        if num % 11 == 0 {\n            return num + 210\n",
    "    // convert int to string\n    str := fmt.Sprintf(\"%d\", num)\n    // get length of string\n    len := len(str)\n    // get half length of string\n    half := len / 2\n    // get first half of string\n    first := str[:half]\n    // get second half of string\n    second := str[half:]\n    // reverse second half of string\n    reverse := \"\"\n    for i := len(second) - 1; i >= 0; i-- {\n        reverse += string(second[i])\n    }\n    // if first half is less than reversed second half, increment first half by 1\n    if first < reverse {\n        first = fmt.Sprintf(\"%d\", num + 1)\n    }\n    // return first half + reversed first half\n    return num\n}\n",
    "    if num < 0 {\n        return -1\n    }\n    if num < 10 {\n        return num\n    }\n    if num < 100 {\n        if num % 11 == 0 {\n            return num\n        }\n        if num % 11 == 1 {\n            return num + 2\n        }\n        if num % 11 == 2 {\n            return num + 1\n        }\n        if num % 11 == 3 {\n            return num + 8\n        }\n        if num % 11 == 4 {\n            return num + 7\n        }\n        if num % 11 == 5 {\n            return num + 4\n        }\n        if num % 11 == 6 {\n            return num + 3\n        }\n        if num % 11 == 7 {\n            return num + 6\n        }\n        if num % 11 == 8 {\n            return num + 5\n        }\n        if num % 11 == 9 {\n            return num + 10\n        }\n    }\n    if num < 1000 {\n        if num % 111 == 0 {\n            return num\n        }\n        if num % 111 == 1 {\n            return num + 2\n        }\n        if num % 111 == 2 {\n            return num + 1\n        }\n        if num % 111 == 3 {\n            return num + 8\n        }\n        if num % 111 == 4 {\n            return num + 7\n        }\n        if num % 111 == 5 {\n            return num + 4\n        }\n        if num % 111 == 6 {\n            return num + 3\n        }\n        if num % 111 == 7 {\n            return num + 6\n        }\n        if num % 111 == 8 {\n            return num + 5\n        }\n        if num % 111 == 9 {\n            return num + 10\n        }\n        if num % 111 == 10 {\n            return num + 9\n        }\n        if num % 111 == 11 {\n            return num + 22\n        }\n        if num % 111 == 12 {\n            return num + 21\n        }\n        if num % 111 == 13 {\n            return num + 18\n        }\n        if num % 111 == 14 {\n            return num + 17\n        }\n        if num % 111 == 15 {\n            return num + 14\n        }\n       ",
    "    if num < 10 {\n        return num\n    }\n    digits := []int{}\n    for num > 0 {\n        digits = append(digits, num % 10)\n        num /= 10\n    }\n    n := len(digits)\n    for i := 0; i < n / 2; i++ {\n        digits[n - i - 1] = digits[i]\n    }\n    for i := 0; i < n; i++ {\n        if digits[i] != 9 {\n            digits[i]++\n            break\n        }\n        digits[i] = 0\n    }\n    if digits[0] == 0 {\n        digits = append([]int{1}, digits...)\n    }\n    result := 0\n    for i := 0; i < len(digits); i++ {\n        result = result * 10 + digits[i]\n    }\n    return result\n}\n",
    "    if num < 0 {\n        return -1\n    }\n    if num < 10 {\n        return num\n    }\n    if num == 11 {\n        return 22\n    }\n    if num < 100 {\n        if num % 11 == 0 {\n            return num + 11\n        }\n        return num + 1\n    }\n    if num < 1000 {\n        if num % 101 == 0 {\n            return num + 101\n        }\n        if num % 111 == 0 {\n            return num + 111\n        }\n        return num + 1\n    }\n    if num < 10000 {\n        if num % 1001 == 0 {\n            return num + 1001\n        }\n        if num % 1111 == 0 {\n            return num + 1111\n        }\n        return num + 1\n    }\n    if num < 100000 {\n        if num % 10001 == 0 {\n            return num + 10001\n        }\n        if num % 11111 == 0 {\n            return num + 11111\n        }\n        return num + 1\n    }\n    if num < 1000000 {\n        if num % 100001 == 0 {\n            return num + 100001\n        }\n        if num % 111111 == 0 {\n            return num + 111111\n        }\n        return num + 1\n    }\n    if num < 10000000 {\n        if num % 1000001 == 0 {\n            return num + 1000001\n        }\n        if num % 1111111 == 0 {\n            return num + 1111111\n        }\n        return num + 1\n    }\n    if num < 100000000 {\n        if num % 10000001 == 0 {\n            return num + 10000001\n        }\n        if num % 11111111 == 0 {\n            return num + 11111111\n        }\n        return num + 1\n    }\n    if num < 1000000000 {\n        if num % 100000001 == 0 {\n            return num + 100000001\n        }\n        if num % 111111111 == 0 {\n            return num + 111111111\n        }\n        return num + 1\n    }\n    return -1\n}\n",
    "    num_str := fmt.Sprintf(\"%d\", num)\n    num_len := len(num_str)\n    if num_len == 1 {\n        return num\n    }\n    if num_len == 2 {\n        if num_str[0] == num_str[1] {\n            return num\n        } else if num_str[0] > num_str[1] {\n            return num\n        } else {\n            return num + 11\n        }\n    }\n    if num_len % 2 == 0 {\n        left_half := num_str[0:num_len/2]\n        right_half := num_str[num_len/2:]\n        left_half_int, _ := strconv.Atoi(left_half)\n        right_half_int, _ := strconv.Atoi(right_half)\n        if left_half_int == right_half_int {\n            return num\n        } else if left_half_int > right_half_int {\n            return num\n        } else {\n            left_half_int += 1\n            left_half = fmt.Sprintf(\"%d\", left_half_int)\n            right_half = left_half\n            return strconv.Atoi(left_half + right_half)\n        }\n    } else {\n        left_half := num_str[0:num_len/2]\n        right_half := num_str[num_len/2+1:]\n        left_half_int, _ := strconv.Atoi(left_half)\n        right_half_int, _ := strconv.Atoi(right_half)\n        if left_half_int == right_half_int {\n            return num\n        } else if left_half_int > right_half_int {\n            return num\n        } else {\n            left_half_int += 1\n            left_half = fmt.Sprintf(\"%d\", left_half_int)\n            right_half = left_half\n            return strconv.Atoi(left_half + num_str[num_len/2] + right_half)\n        }\n    }\n}\n",
    "    var s string = fmt.Sprintf(\"%d\", num)\n    var l int = len(s)\n    var i int = l / 2\n    var j int = l / 2\n    if l % 2 == 1 {\n        j++\n    }\n    for i >= 0 && j < l {\n        if s[i] < s[j] {\n            s = s[:i] + s[j] + s[i+1:j] + s[i] + s[j+1:]\n            return atoi(s)\n        } else if s[i] > s[j] {\n            s = s[:i] + s[i] + s[i+1:j] + s[i] + s[j+1:]\n            return atoi(s)\n        }\n        i--\n        j++\n    }\n    return num\n}\n",
    "    if num < 0 {\n        return -1\n    }\n    if num < 10 {\n        return num\n    }\n\n    digits := make([]int, 0)\n    for num > 0 {\n        digits = append(digits, num % 10)\n        num /= 10\n    }\n\n    // fmt.Println(digits)\n\n    // find the first digit that is not 9\n    i := 0\n    for i < len(digits) && digits[i] == 9 {\n        i++\n    }\n\n    // fmt.Println(i)\n\n    if i == len(digits) {\n        // all digits are 9\n        digits = append(digits, 0)\n        i = 0\n        for i < len(digits) {\n            digits[i] = 0\n            i++\n        }\n        digits[0] = 1\n        digits[len(digits) - 1] = 1\n        // fmt.Println(digits)\n    } else {\n        // fmt.Println(\"here\")\n        // fmt.Println(i)\n        // fmt.Println(digits)\n        digits[i]++\n        for j := i - 1; j >= 0; j-- {\n            digits[j] = digits[i]\n        }\n    }\n\n    // fmt.Println(digits)\n\n    num = 0\n    for i := len(digits) - 1; i >= 0; i-- {\n        num = num * 10 + digits[i]\n    }\n\n    return num\n}\n",
    "    if num < 0 {\n        return -1\n    }\n    if num < 10 {\n        return num\n    }\n    if num < 100 {\n        if num % 11 == 0 {\n            return num + 2\n        }\n        return num + 1\n    }\n    if num < 1000 {\n        if num % 101 == 0 {\n            return num + 202\n        }\n        if num % 11 == 0 {\n            return num + 22\n        }\n        return num + 11\n    }\n    if num < 10000 {\n        if num % 1001 == 0 {\n            return num + 2002\n        }\n        if num % 101 == 0 {\n            return num + 220\n        }\n        if num % 11 == 0 {\n            return num + 24\n        }\n        return num + 13\n    }\n    if num < 100000 {\n        if num % 10001 == 0 {\n            return num + 20002\n        }\n        if num % 1001 == 0 {\n            return num + 2200\n        }\n        if num % 101 == 0 {\n            return num + 240\n        }\n        if num % 11 == 0 {\n            return num + 26\n        }\n        return num + 15\n    }\n    if num < 1000000 {\n        if num % 100001 == 0 {\n            return num + 200002\n        }\n        if num % 10001 == 0 {\n            return num + 22000\n        }\n        if num % 1001 == 0 {\n            return num + 2400\n        }\n        if num % 101 == 0 {\n            return num + 260\n        }\n        if num % 11 == 0 {\n            return num + 28\n        }\n        return num + 17\n    }\n    if num < 10000000 {\n        if num % 1000001 == 0 {\n            return num + 2000002\n        }\n        if num % 100001 == 0 {\n            return num + 22000\n        }\n        if num % 10001 == 0 {\n            return num + 24000\n        }\n        if num % 1001 == 0 {\n            return num + 26000\n        }\n        if num % 101 == 0 {\n            return num + 280\n        }\n        if num % 11 == 0 {\n            return num + 210"
  ]
}