{
  "name": "mbpp_125_find_length",
  "language": "go_test.go",
  "prompt": "package find_length_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\nfunc find_length(myString string) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_125_find_length.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Length(t *testing.T) {\n  candidate := find_length\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"11000010001\"), expected: 6 },\n     { actual: candidate(\"10111\"), expected: 1 },\n     { actual: candidate(\"11011101100101\"), expected: 2 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    max_diff := 0\n    count_0 := 0\n    count_1 := 0\n    for _, char := range myString {\n        if char == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if count_0 + count_1 > max_diff {\n                max_diff = count_0 + count_1\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    var diff int = 0\n    var i int = 0\n    for i < len(myString) {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n        i++\n    }\n    return max_diff\n}\n",
    "    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n",
    "    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int = 0\n    var count_1 int = 0\n    var count_0 int = 0\n    for _, char := range myString {\n        if char == '1' {\n            count_1++\n        } else {\n            count_0++\n        }\n        if count_1 == count_0 {\n            if count_1 + count_0 > max_diff {\n                max_diff = count_1 + count_0\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    max_diff := 0\n    for i := 0; i < len(myString); i++ {\n        for j := i + 1; j <= len(myString); j++ {\n            diff := 0\n            for k := i; k < j; k++ {\n                if myString[k] == '0' {\n                    diff++\n                } else {\n                    diff--\n                }\n            }\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var maxDiff int\n    var count0, count1 int\n    for i := 0; i < len(myString); i++ {\n        for j := i; j < len(myString); j++ {\n            if myString[j] == '0' {\n                count0++\n            } else {\n                count1++\n            }\n            if count0 - count1 > maxDiff {\n                maxDiff = count0 - count1\n            }\n        }\n        count0 = 0\n        count1 = 0\n    }\n    return maxDiff\n}\n",
    "    var max_diff int\n    var zero_count, one_count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        if zero_count == one_count {\n            if max_diff < (zero_count + one_count) {\n                max_diff = zero_count + one_count\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        if count_zero == count_one {\n            if max_diff < count_zero {\n                max_diff = count_zero\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int = 0\n    var diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        diff = count_0 - count_1\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int = 0\n    var count_zero int = 0\n    var count_one int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count_zero++\n        } else {\n            count_one++\n        }\n        diff := count_zero - count_one\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n",
    "    var max int\n    var count int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n",
    "    var max int\n    var count int\n    var zeroCount int\n    var oneCount int\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zeroCount++\n        } else {\n            oneCount++\n        }\n        if zeroCount == oneCount {\n            count = zeroCount + oneCount\n            if count > max {\n                max = count\n            }\n        }\n    }\n    return max\n}\n",
    "    var max_diff int = 0\n    var count_0 int = 0\n    var count_1 int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            count_0++\n        } else {\n            count_1++\n        }\n        if count_0 == count_1 {\n            if max_diff < count_0 {\n                max_diff = count_0\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var maxDiff int\n    var currDiff int\n    var numZeros int\n    var numOnes int\n\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            numZeros++\n        } else {\n            numOnes++\n        }\n        currDiff = numZeros - numOnes\n        if currDiff < 0 {\n            currDiff = -currDiff\n        }\n        if currDiff > maxDiff {\n            maxDiff = currDiff\n        }\n    }\n    return maxDiff\n}\n",
    "    var max int\n    var count int\n    for _, v := range myString {\n        if v == '0' {\n            count++\n        } else {\n            count--\n        }\n        if count < 0 {\n            count = 0\n        }\n        if count > max {\n            max = count\n        }\n    }\n    return max\n}\n",
    "    var maxDiff int = 0\n    var count0 int = 0\n    var count1 int = 0\n    for _, char := range myString {\n        if char == '0' {\n            count0++\n        } else {\n            count1++\n        }\n        if count0 == count1 {\n            if count0 + count1 > maxDiff {\n                maxDiff = count0 + count1\n            }\n        }\n    }\n    return maxDiff\n}\n",
    "    var max_diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    var diff int = 0\n    var i int = 0\n    var j int = 0\n\n    for i < len(myString) {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        diff = zero_count - one_count\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n        i++\n    }\n    return max_diff\n}\n",
    "    // fmt.Println(\"myString:\", myString)\n    var max_diff int = 0\n    var diff int = 0\n    var zero_count int = 0\n    var one_count int = 0\n    for i := 0; i < len(myString); i++ {\n        if myString[i] == '0' {\n            zero_count++\n        } else {\n            one_count++\n        }\n        diff = zero_count - one_count\n        if diff < 0 {\n            diff = -diff\n        }\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n"
  ]
}