{
  "name": "mbpp_569_sort_sublists",
  "language": "go_test.go",
  "prompt": "package sort_sublists_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to sort each sublist of strings in a given list of lists.\nfunc sort_sublists(list1 [][]string) [][]string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_569_sort_sublists.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSort_Sublists(t *testing.T) {\n  candidate := sort_sublists\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"white\", \"black\", \"orange\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\", \"white\"}, []string{\"black\", \"orange\", \"white\"}} },\n     { actual: candidate([][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}}), expected: [][]int{[]string{\"green\", \"orange\"}, []string{\"black\"}, []string{\"green\", \"orange\"}, []string{\"white\"}} },\n     { actual: candidate([][]int{[]string{\"a\", \"b\"}, []string{\"d\", \"c\"}, []string{\"g\", \"h\"}, []string{\"f\", \"e\"}}), expected: [][]int{[]string{\"a\", \"b\"}, []string{\"c\", \"d\"}, []string{\"g\", \"h\"}, []string{\"e\", \"f\"}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for i := 0; i < len(list1); i++ {\n        for j := i + 1; j < len(list1); j++ {\n            if list1[i][0] > list1[j][0] {\n                list1[i], list1[j] = list1[j], list1[i]\n            }\n        }\n    }\n    return list1\n}\n",
    "    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for i := range list1 {\n        for j := range list1[i] {\n            for k := range list1[i] {\n                if list1[i][j] < list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := 0; k < len(list1[i]) - 1; k++ {\n                if list1[i][k] > list1[i][k+1] {\n                    list1[i][k], list1[i][k+1] = list1[i][k+1], list1[i][k]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for _, sublist := range list1 {\n        for i := 0; i < len(sublist) - 1; i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for _, list2 := range list1 {\n        sort_strings(list2)\n    }\n    return list1\n}\n",
    "    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for _, sublist := range list1 {\n        for i := 0; i < len(sublist); i++ {\n            for j := i + 1; j < len(sublist); j++ {\n                if sublist[i] > sublist[j] {\n                    sublist[i], sublist[j] = sublist[j], sublist[i]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n",
    "    for i := 0; i < len(list1); i++ {\n        for j := 0; j < len(list1[i]); j++ {\n            for k := j + 1; k < len(list1[i]); k++ {\n                if list1[i][j] > list1[i][k] {\n                    list1[i][j], list1[i][k] = list1[i][k], list1[i][j]\n                }\n            }\n        }\n    }\n    return list1\n}\n"
  ]
}