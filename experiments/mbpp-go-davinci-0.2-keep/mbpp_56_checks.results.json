{
  "name": "mbpp_56_checks",
  "language": "go_test.go",
  "prompt": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_56_checks.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp_d3v5p84_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    // check if it is one less than twice its reverse\n    return n == rev * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpbu9fh8ms_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    // check if the number is one less than twice its reverse\n    return n == rev * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp7k1n2jrl_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    // reverse the number\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmphpn4s_mn_test.go:37: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpy3l9drqr_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp_d3v5p84_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    // check if twice the reverse is one less than the number\n    return 2 * rev == n - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp7bkx9jfu_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n/10 + n%10)*2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpfighkmg5_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    return n == (n % 10) * 2 + 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpuewe4zc__test.go:31: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // convert to string\n    s := fmt.Sprintf(\"%d\", n)\n    // reverse string\n    r := \"\"\n    for i := len(s) - 1; i >= 0; i-- {\n        r += string(s[i])\n    }\n    // convert back to int\n    rn, _ := strconv.Atoi(r)\n    // check if n is one less than twice rn\n    return n == 2*rn - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp40lp6vkf_test.go:18:14: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpg_bdpedx_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (2 * reverse(n) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6wr7i9t1_test.go:10:22: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp50_iz1qg_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp_d3v5p84_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n + 1) / 2\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpri69uopu_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // convert n to string\n    // reverse string\n    // convert string to int\n    // check if n is one less than twice the reverse\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpoczlnykp_test.go:32: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    rev := 0\n    for i := n; i > 0; i /= 10 {\n        rev = rev * 10 + i % 10\n    }\n    return n == rev * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n / 10) * 19 - n % 10\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpf6x01lzv_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp_d3v5p84_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n / 10) * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp7cmgn6nn_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var r int\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmppoz0btcb_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu54i4x4y_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpocny1hxv_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp_d3v5p84_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 0 {\n        return false\n    }\n    n_rev := 0\n    for n > 0 {\n        n_rev = n_rev * 10 + n % 10\n        n /= 10\n    }\n    return n_rev == n * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpg_e244te_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    var temp int\n    var num int\n    num = n\n    for num > 0 {\n        temp = num % 10\n        rev = rev * 10 + temp\n        num = num / 10\n    }\n    if n == (rev * 2) - 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    reversed := 0\n    for n > 0 {\n        reversed = reversed * 10 + n % 10\n        n /= 10\n    }\n\n    return n == reversed - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpi9x81cxt_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n/10 + n%10)*2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpfighkmg5_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp_0dcvoay_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpg_bdpedx_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var r int\n    var t int\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    t = r * 2 - 1\n    return t == n\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpyyj1ukrt_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Convert the number to a string\n    s := fmt.Sprintf(\"%d\", n)\n    // Reverse the string\n    r := reverse(s)\n    // Convert the string back to an int\n    rn, _ := strconv.Atoi(r)\n    // Check if the number is one less than twice its reverse\n    return n == 2*rn - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5yhaeavf_test.go:13:10: undefined: reverse\n/tmp/tmp5yhaeavf_test.go:15:14: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    s := fmt.Sprintf(\"%d\", n)\n    r := \"\"\n    for i := len(s) - 1; i >= 0; i-- {\n        r += string(s[i])\n    }\n    return n == 2 * (toInt(r) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpojxs1tc9_test.go:15:22: undefined: toInt\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp_d3v5p84_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (2 * reverse(n) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6wr7i9t1_test.go:10:22: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (2 * reverse(n) - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6wr7i9t1_test.go:10:22: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    reversed := 0\n    for n > 0 {\n        reversed = reversed * 10 + n % 10\n        n /= 10\n    }\n\n    return n == reversed - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpi9x81cxt_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpuydpc0u1_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var r int\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmppoz0btcb_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n * 2) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpobf_eskg_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return rev * 2 == n + 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpz9p58wlh_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2*reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo07idgg1_test.go:10:19: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplotk5dsa_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n = n / 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp0sr9haqq_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplotk5dsa_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp50_iz1qg_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var reverse int\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpzkwkvuly_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5z7v3i67_test.go:13:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n/10 + n%10) * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp5doj86vd_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu54i4x4y_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpocny1hxv_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Reverse the number\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpz7me65dw_test.go:34: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // TODO: implement this function\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpld9purpu_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpocny1hxv_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplotk5dsa_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n/10 + n%10) * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp5doj86vd_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n / 10) * 19\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpzn02o4sr_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n == 0 {\n        return true\n    }\n    if n < 0 {\n        n = -n\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmptbbpqofz_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == oneLessThanTwiceReverse(n)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxji50f07_test.go:10:17: undefined: oneLessThanTwiceReverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp50_iz1qg_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    r := 0\n    for n > 0 {\n        r = r*10 + n%10\n        n /= 10\n    }\n    // check if it's one less than twice the reverse\n    return n == r*2-1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpu061yjkt_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplotk5dsa_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp50_iz1qg_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplotk5dsa_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == oneLessThanTwiceReverse(n)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxji50f07_test.go:10:17: undefined: oneLessThanTwiceReverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpocny1hxv_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpthambzmx_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // get the reverse\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    // check if it is one less than twice its reverse\n    return n == 2 * rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpk7v0_gb8_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var r int\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmppoz0btcb_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // convert int to string\n    s := fmt.Sprintf(\"%d\", n)\n    // reverse string\n    r := \"\"\n    for i := len(s)-1; i >= 0; i-- {\n        r += string(s[i])\n    }\n    // convert string to int\n    ri, _ := strconv.Atoi(r)\n    // check if n is one less than twice its reverse\n    return n == 2*ri - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplhqt90v__test.go:18:14: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    // check if the number is one less than twice its reverse\n    return n == rev * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp_jbmz4k9_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplotk5dsa_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    reversed := 0\n    for n > 0 {\n        reversed = reversed * 10 + n % 10\n        n /= 10\n    }\n    // check if the number is one less than twice its reverse\n    return n == reversed * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp5y0ebgau_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n + 1) / 2\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpri69uopu_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var r int\n    var t int\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    t = r * 2 - 1\n    return t == n\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpyyj1ukrt_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n / 10) * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp7cmgn6nn_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmphy6ilbj4_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n/10) + (n%10)*10 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpdt6w0mp5_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 0 {\n        n = -n\n    }\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp_0dcvoay_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplotk5dsa_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == oneLessThanTwiceItsReverse(n)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvzfldsw9_test.go:10:17: undefined: oneLessThanTwiceItsReverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp_d3v5p84_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp_d3v5p84_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmphy6ilbj4_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Convert to string\n    s := fmt.Sprintf(\"%d\", n)\n    // Reverse string\n    r := reverse(s)\n    // Convert back to int\n    i, _ := strconv.Atoi(r)\n    // Compare\n    return n == 2 * i - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgzo1nxkz_test.go:13:10: undefined: reverse\n/tmp/tmpgzo1nxkz_test.go:15:13: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var r int\n    var nn int\n    for n > 0 {\n        r = r * 10 + n % 10\n        n = n / 10\n    }\n    nn = r * 2 - 1\n    return nn == n\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpxqsha4sx_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // convert int to string\n    s := fmt.Sprintf(\"%d\", n)\n    // reverse string\n    r := reverse(s)\n    // convert string to int\n    i, _ := strconv.Atoi(r)\n    // check if n is one less than twice its reverse\n    return n == (2 * i) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu642l4g_test.go:13:10: undefined: reverse\n/tmp/tmpgu642l4g_test.go:15:13: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplotk5dsa_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Convert the number to a string\n    s := fmt.Sprintf(\"%d\", n)\n    // Reverse the string\n    r := \"\"\n    for i := len(s) - 1; i >= 0; i-- {\n        r += string(s[i])\n    }\n    // Convert the string back to an int\n    ri, _ := strconv.Atoi(r)\n    // Check if the number is one less than twice its reverse\n    return n == (2 * ri) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph3lylw7o_test.go:18:14: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpyob0ja6s_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2 * reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplotk5dsa_test.go:10:21: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n == 0 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpy3l9drqr_test.go:42: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // reverse the number\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    // check if it is one less than twice its reverse\n    return n == rev * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpw39vl6o2_test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmphy6ilbj4_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpuydpc0u1_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpocny1hxv_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp_d3v5p84_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // get the reverse of the number\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    // check if the number is one less than twice its reverse\n    return n == rev * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp5fqfnyd__test.go:35: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 0 {\n        return false\n    }\n    if n < 10 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    return checks(n / 10)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__1 (0.00s)\n        tmpoomb88si_test.go:37: expected '%!s(bool=false)', got '%!s(bool=true)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for i := n; i > 0; i /= 10 {\n        rev = rev * 10 + i % 10\n    }\n    return n == 2 * rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124014,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp50_iz1qg_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmphy6ilbj4_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    n_rev := 0\n    for n > 0 {\n        n_rev = n_rev * 10 + n % 10\n        n /= 10\n    }\n    return n_rev == n * 2 - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124014,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpcz6w0z2l_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == 2*reverse(n) - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo07idgg1_test.go:10:19: undefined: reverse\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Convert the number to a string\n    s := fmt.Sprintf(\"%d\", n)\n    // Reverse the string\n    r := reverse(s)\n    // Convert the reversed string back to a number\n    rn, _ := strconv.Atoi(r)\n    // Check if the number is one less than twice its reverse\n    return n == 2*rn - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124014,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnvit3uuz_test.go:13:10: undefined: reverse\n/tmp/tmpnvit3uuz_test.go:15:14: undefined: strconv\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var reverse int\n    var temp int\n    var num int\n    num = n\n    for n > 0 {\n        temp = n % 10\n        reverse = reverse * 10 + temp\n        n = n / 10\n    }\n    if num == (2 * reverse) - 1 {\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124014,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp_d3v5p84_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n = n / 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124014,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpz_e0uc0i_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124014,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpxv7k2b3n_test.go:38: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    var rev int\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124011,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpocny1hxv_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n == 0 {\n        return true\n    }\n    if n % 10 == 0 {\n        return false\n    }\n    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return reverse == n + 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124014,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp0ff4k_5x_test.go:39: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    reverse := 0\n    for n > 0 {\n        reverse = reverse * 10 + n % 10\n        n /= 10\n    }\n    return n == reverse - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124013,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmphy6ilbj4_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    rev := 0\n    for n > 0 {\n        rev = rev * 10 + n % 10\n        n /= 10\n    }\n    return n == rev - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpp3v9e40t_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp50_iz1qg_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    // Write your code here\n    return false\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpg_bdpedx_test.go:29: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp50_iz1qg_test.go:33: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    return n == (n/10 + n%10*10 - 1)\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666124014,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmp255dlypr_test.go:28: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package checks_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to check if a given number is one less than twice its reverse.\nfunc checks(n int) bool {\n    if n < 10 {\n        return false\n    }\n    r := 0\n    for n > 0 {\n        r = r * 10 + n % 10\n        n /= 10\n    }\n    return n == r - 1\n}\n\nfunc TestChecks(t *testing.T) {\n  candidate := checks\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(70), expected: false },\n     { actual: candidate(23), expected: false },\n     { actual: candidate(73), expected: true },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510574,
      "stdout": "--- FAIL: TestChecks (0.00s)\n    --- FAIL: TestChecks/test_num__2 (0.00s)\n        tmpsirkkysv_test.go:36: expected '%!s(bool=true)', got '%!s(bool=false)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}