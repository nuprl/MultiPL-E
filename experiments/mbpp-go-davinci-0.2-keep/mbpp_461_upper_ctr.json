{
  "name": "mbpp_461_upper_ctr",
  "language": "go_test.go",
  "prompt": "package upper_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count the upper case characters in a given string.\nfunc upper_ctr(str string) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_461_upper_ctr.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestUpper_Ctr(t *testing.T) {\n  candidate := upper_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"PYthon\"), expected: 1 },\n     { actual: candidate(\"BigData\"), expected: 1 },\n     { actual: candidate(\"program\"), expected: 0 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n",
    "    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    var ctr int = 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n",
    "    ctr := 0\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n",
    "    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    count := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            count++\n        }\n    }\n    return count\n}\n",
    "    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    var ctr int\n    for _, c := range str {\n        if c >= 'A' && c <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    var ctr int\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n",
    "    ctr := 0\n    for _, char := range str {\n        if char >= 'A' && char <= 'Z' {\n            ctr++\n        }\n    }\n    return ctr\n}\n"
  ]
}