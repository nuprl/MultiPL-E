{
  "name": "mbpp_442_positive_count",
  "language": "go_test.go",
  "prompt": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var pos_count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            pos_count++\n        }\n    }\n    return float64(pos_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmplq6rk8uo_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmplq6rk8uo_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmplq6rk8uo_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count, total int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n        total++\n    }\n    return float64(count) / float64(total)\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa75z_otu_test.go:35: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa75z_otu_test.go:35: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa75z_otu_test.go:35: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp8u561qt4_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp8u561qt4_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp8u561qt4_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var pos_count int = 0\n    for _, n := range nums {\n        if n > 0 {\n            pos_count++\n        }\n    }\n    return float64(pos_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpdfrglokh_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpdfrglokh_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpdfrglokh_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpt8ed1r9s_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpt8ed1r9s_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpt8ed1r9s_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpt8ed1r9s_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpt8ed1r9s_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpt8ed1r9s_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp8u561qt4_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp8u561qt4_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp8u561qt4_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return positive_count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpq0ebiljr_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpq0ebiljr_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpq0ebiljr_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpt8ed1r9s_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpt8ed1r9s_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpt8ed1r9s_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var positives float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            positives++\n        }\n    }\n    return positives / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcxqcnqyt_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcxqcnqyt_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcxqcnqyt_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count += 1\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp1t_c9kx1_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp1t_c9kx1_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp1t_c9kx1_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count += 1\n        }\n    }\n    return positive_count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpgpymlv4f_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpgpymlv4f_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpgpymlv4f_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var pos_count int = 0\n    var neg_count int = 0\n    var total_count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            pos_count += 1\n        } else {\n            neg_count += 1\n        }\n        total_count += 1\n    }\n    return float64(pos_count) / float64(total_count)\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp9r8431wo_test.go:39: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp9r8431wo_test.go:39: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp9r8431wo_test.go:39: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    count := 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpr244zgyg_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpr244zgyg_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpr244zgyg_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var positives int = 0\n    for _, num := range nums {\n        if num > 0 {\n            positives++\n        }\n    }\n    return float64(positives) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp0_bxl6th_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp0_bxl6th_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp0_bxl6th_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, v := range nums {\n        if v > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpyvzyloae_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpyvzyloae_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpyvzyloae_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp6txpp2vo_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp6txpp2vo_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp6txpp2vo_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4o1pqw0u_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4o1pqw0u_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4o1pqw0u_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp92ab2rc0_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp92ab2rc0_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp92ab2rc0_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmppge5drmu_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmppge5drmu_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmppge5drmu_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmppge5drmu_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmppge5drmu_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmppge5drmu_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp8u561qt4_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp8u561qt4_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp8u561qt4_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp6txpp2vo_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp6txpp2vo_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp6txpp2vo_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, n := range nums {\n        if n > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp4p6qut4t_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var positive_count int\n    for _, num := range nums {\n        if num > 0 {\n            positive_count++\n        }\n    }\n    return float64(positive_count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp8u561qt4_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp8u561qt4_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp8u561qt4_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    count := 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpr244zgyg_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpr244zgyg_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpr244zgyg_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmp1hh2mg71_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpw_1b0pxw_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpw_ibt1i5_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpw_ibt1i5_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpw_ibt1i5_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpt8ed1r9s_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpt8ed1r9s_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpt8ed1r9s_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count, total int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n        total++\n    }\n    return float64(count) / float64(total)\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpa75z_otu_test.go:35: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpa75z_otu_test.go:35: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpa75z_otu_test.go:35: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count int\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return float64(count) / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509678,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpcp1rd7xi_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package positive_count_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums []int) float64 {\n    var count float64 = 0\n    for _, num := range nums {\n        if num > 0 {\n            count++\n        }\n    }\n    return count / float64(len(nums))\n}\n\nfunc TestPositive_Count(t *testing.T) {\n  candidate := positive_count\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8}), expected: 0.54 },\n     { actual: candidate([]int{2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8}), expected: 0.69 },\n     { actual: candidate([]int{2, 4, -6, -9, 11, -12, 14, -5, 17}), expected: 0.56 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123866,
      "stdout": "--- FAIL: TestPositive_Count (0.00s)\n    --- FAIL: TestPositive_Count/test_num__0 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.54)', got '%!s(float64=0.5384615384615384)'\n    --- FAIL: TestPositive_Count/test_num__1 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.69)', got '%!s(float64=0.6923076923076923)'\n    --- FAIL: TestPositive_Count/test_num__2 (0.00s)\n        tmpvyskscie_test.go:34: expected '%!s(float64=0.56)', got '%!s(float64=0.5555555555555556)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}