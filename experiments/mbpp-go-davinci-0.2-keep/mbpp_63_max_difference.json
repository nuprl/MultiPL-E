{
  "name": "mbpp_63_max_difference",
  "language": "go_test.go",
  "prompt": "package max_difference_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the maximum difference between available pairs in the given tuple list.\nfunc max_difference(test_list [][]interface{}) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_63_max_difference.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMax_Difference(t *testing.T) {\n  candidate := max_difference\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{1, 7}, []interface{}{10, 3}, []interface{}{1, 2}}), expected: 7 },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{2, 17}, []interface{}{9, 13}, []interface{}{11, 12}}), expected: 15 },\n     { actual: candidate([][]int{[]interface{}{12, 35}, []interface{}{21, 27}, []interface{}{13, 23}, []interface{}{41, 22}}), expected: 23 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var max_diff int\n    for _, t := range test_list {\n        if t[0].(int) > t[1].(int) {\n            if t[0].(int) - t[1].(int) > max_diff {\n                max_diff = t[0].(int) - t[1].(int)\n            }\n        } else {\n            if t[1].(int) - t[0].(int) > max_diff {\n                max_diff = t[1].(int) - t[0].(int)\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int\n    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            for k := 0; k < len(test_list[i]); k++ {\n                if j != k {\n                    diff := test_list[i][j].(int) - test_list[i][k].(int)\n                    if diff > max_diff {\n                        max_diff = diff\n                    }\n                }\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    max_diff := 0\n    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            for k := 0; k < len(test_list[i]); k++ {\n                if j != k {\n                    diff := test_list[i][j].(int) - test_list[i][k].(int)\n                    if diff > max_diff {\n                        max_diff = diff\n                    }\n                }\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int\n    for _, tuple := range test_list {\n        if tuple[0].(int) > tuple[1].(int) {\n            if tuple[0].(int) - tuple[1].(int) > max_diff {\n                max_diff = tuple[0].(int) - tuple[1].(int)\n            }\n        } else {\n            if tuple[1].(int) - tuple[0].(int) > max_diff {\n                max_diff = tuple[1].(int) - tuple[0].(int)\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int\n    for _, tuple := range test_list {\n        if tuple[0].(int) > tuple[1].(int) {\n            if tuple[0].(int) - tuple[1].(int) > max_diff {\n                max_diff = tuple[0].(int) - tuple[1].(int)\n            }\n        } else {\n            if tuple[1].(int) - tuple[0].(int) > max_diff {\n                max_diff = tuple[1].(int) - tuple[0].(int)\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int = 0\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0] == test_list[j][0] {\n                if test_list[i][1] > test_list[j][1] {\n                    diff := test_list[i][1].(int) - test_list[j][1].(int)\n                    if diff > max_diff {\n                        max_diff = diff\n                    }\n                } else {\n                    diff := test_list[j][1].(int) - test_list[i][1].(int)\n                    if diff > max_diff {\n                        max_diff = diff\n                    }\n                }\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int = 0\n    var current_diff int = 0\n    var current_max int = 0\n    var current_min int = 0\n    var current_max_index int = 0\n    var current_min_index int = 0\n    var i int = 0\n    var j int = 0\n\n    for i = 0; i < len(test_list); i++ {\n        current_max = test_list[i][0].(int)\n        current_max_index = i\n        for j = i + 1; j < len(test_list); j++ {\n            if test_list[j][0].(int) > current_max {\n                current_max = test_list[j][0].(int)\n                current_max_index = j\n            }\n        }\n        if current_max_index != i {\n            current_min = test_list[i][0].(int)\n            current_min_index = i\n            for j = i + 1; j < current_max_index; j++ {\n                if test_list[j][0].(int) < current_min {\n                    current_min = test_list[j][0].(int)\n                    current_min_index = j\n                }\n            }\n            current_diff = current_max - current_min\n            if current_diff > max_diff {\n                max_diff = current_diff\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int\n    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            for k := 0; k < len(test_list[i]); k++ {\n                if j != k {\n                    diff := test_list[i][j].(int) - test_list[i][k].(int)\n                    if diff > max_diff {\n                        max_diff = diff\n                    }\n                }\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0] == test_list[j][0] {\n                diff := test_list[j][1].(int) - test_list[i][1].(int)\n                if diff > max_diff {\n                    max_diff = diff\n                }\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int\n    for _, pair := range test_list {\n        if pair[0].(int) > pair[1].(int) {\n            if pair[0].(int) - pair[1].(int) > max_diff {\n                max_diff = pair[0].(int) - pair[1].(int)\n            }\n        } else {\n            if pair[1].(int) - pair[0].(int) > max_diff {\n                max_diff = pair[1].(int) - pair[0].(int)\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int = 0\n    for i := 0; i < len(test_list); i++ {\n        for j := 0; j < len(test_list[i]); j++ {\n            for k := 0; k < len(test_list[i]); k++ {\n                if j != k {\n                    if test_list[i][j].(int) - test_list[i][k].(int) > max_diff {\n                        max_diff = test_list[i][j].(int) - test_list[i][k].(int)\n                    }\n                }\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int\n    for _, tuple := range test_list {\n        if tuple[0].(int) > tuple[1].(int) {\n            if tuple[0].(int) - tuple[1].(int) > max_diff {\n                max_diff = tuple[0].(int) - tuple[1].(int)\n            }\n        } else {\n            if tuple[1].(int) - tuple[0].(int) > max_diff {\n                max_diff = tuple[1].(int) - tuple[0].(int)\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_difference int\n    for _, test_tuple := range test_list {\n        var test_difference int\n        if test_tuple[0].(int) > test_tuple[1].(int) {\n            test_difference = test_tuple[0].(int) - test_tuple[1].(int)\n        } else {\n            test_difference = test_tuple[1].(int) - test_tuple[0].(int)\n        }\n        if test_difference > max_difference {\n            max_difference = test_difference\n        }\n    }\n    return max_difference\n}\n",
    "    var max_diff int\n    for _, tuple := range test_list {\n        diff := tuple[1].(int) - tuple[0].(int)\n        if diff > max_diff {\n            max_diff = diff\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int\n    for _, pair := range test_list {\n        if pair[0].(int) > pair[1].(int) {\n            if pair[0].(int) - pair[1].(int) > max_diff {\n                max_diff = pair[0].(int) - pair[1].(int)\n            }\n        } else {\n            if pair[1].(int) - pair[0].(int) > max_diff {\n                max_diff = pair[1].(int) - pair[0].(int)\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int = 0\n    for _, test := range test_list {\n        if test[0].(int) > test[1].(int) {\n            diff := test[0].(int) - test[1].(int)\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int\n    for _, pair := range test_list {\n        if pair[0].(int) > pair[1].(int) {\n            if pair[0].(int) - pair[1].(int) > max_diff {\n                max_diff = pair[0].(int) - pair[1].(int)\n            }\n        } else {\n            if pair[1].(int) - pair[0].(int) > max_diff {\n                max_diff = pair[1].(int) - pair[0].(int)\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int\n    for _, tuple := range test_list {\n        if len(tuple) != 2 {\n            panic(\"Invalid tuple\")\n        }\n        if tuple[0] == nil || tuple[1] == nil {\n            continue\n        }\n        if tuple[0].(int) > tuple[1].(int) {\n            diff := tuple[0].(int) - tuple[1].(int)\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n    return max_diff\n}\n",
    "    var max_diff int\n    for _, tup := range test_list {\n        if len(tup) != 3 {\n            panic(\"tuple must be of length 3\")\n        }\n        if tup[0].(int) > tup[1].(int) {\n            panic(\"first element must be less than second element\")\n        }\n        if tup[2].(int) > max_diff {\n            max_diff = tup[2].(int)\n        }\n    }\n    return max_diff\n}\n",
    "    max_diff := 0\n    for _, tup := range test_list {\n        if tup[0] != tup[1] {\n            diff := tup[1].(int) - tup[0].(int)\n            if diff > max_diff {\n                max_diff = diff\n            }\n        }\n    }\n    return max_diff\n}\n"
  ]
}