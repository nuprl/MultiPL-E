{
  "name": "mbpp_764_number_ctr",
  "language": "go_test.go",
  "prompt": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_764_number_ctr.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.016s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var counter int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            counter++\n        }\n    }\n    return counter\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, r := range str {\n        if r >= '0' && r <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var counter int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            counter++\n        }\n    }\n    return counter\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.015s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.015s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.015s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, ch := range str {\n        if ch >= '0' && ch <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, val := range str {\n        if val >= '0' && val <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count += 1\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    return len(str)\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "--- FAIL: TestNumber_Ctr (0.00s)\n    --- FAIL: TestNumber_Ctr/test_num__0 (0.00s)\n        tmpb34nj69e_test.go:29: expected '%!s(int=1)', got '%!s(int=14)'\n    --- FAIL: TestNumber_Ctr/test_num__1 (0.00s)\n        tmpb34nj69e_test.go:29: expected '%!s(int=1)', got '%!s(int=8)'\n    --- FAIL: TestNumber_Ctr/test_num__3 (0.00s)\n        tmpb34nj69e_test.go:29: expected '%!s(int=3)', got '%!s(int=11)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.015s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, v := range str {\n        if v >= '0' && v <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int = 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr += 1\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    ctr := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    count := 0\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, c := range str {\n        if c >= '0' && c <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122652,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var ctr int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            ctr++\n        }\n    }\n    return ctr\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package number_ctr_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count number of digits in a given string.\nfunc number_ctr(str string) int {\n    var count int\n    for _, char := range str {\n        if char >= '0' && char <= '9' {\n            count++\n        }\n    }\n    return count\n}\n\nfunc TestNumber_Ctr(t *testing.T) {\n  candidate := number_ctr\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"program2bedone\"), expected: 1 },\n     { actual: candidate(\"3wonders\"), expected: 1 },\n     { actual: candidate(\"123\"), expected: 3 },\n     { actual: candidate(\"3wond-1ers2\"), expected: 3 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510115,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}