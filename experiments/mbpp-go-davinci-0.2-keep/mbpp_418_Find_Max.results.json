{
  "name": "mbpp_418_Find_Max",
  "language": "go_test.go",
  "prompt": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_418_Find_Max.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx5c7g2e_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4v4bwm61_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            var max_len int\n            var max_ele interface{}\n            for _, ele := range lst.([]int) {\n                if len(fmt.Sprintf(\"%v\", ele)) > max_len {\n                    max_len = len(fmt.Sprintf(\"%v\", ele))\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        case []string:\n            var max_len int\n            var max_ele interface{}\n            for _, ele := range lst.([]string) {\n                if len(ele) > max_len {\n                    max_len = len(ele)\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        case []float64:\n            var max_len int\n            var max_ele interface{}\n            for _, ele := range lst.([]float64) {\n                if len(fmt.Sprintf(\"%v\", ele)) > max_len {\n                    max_len = len(fmt.Sprintf(\"%v\", ele))\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb423xegy_test.go:53:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp67butl4w_test.go:14:19: invalid argument v (type int) for len\n/tmp/tmp67butl4w_test.go:15:26: invalid argument v (type int) for len\n/tmp/tmp67butl4w_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []interface{}:\n            max := lst.([]interface{})[0]\n            for _, v := range lst.([]interface{}) {\n                if len(v.([]interface{})) > len(max.([]interface{})) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpunbwn1jn_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.(string)) > len(max.(string)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm866_7_w_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        var max float64\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphdpblqv4_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuoua7uci_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            var max int\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            var max string\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr0q3xuuf_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := \"\"\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfiwuggk2_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprint(v)) > len(fmt.Sprint(max)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmz35ok03_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max_len := 0\n        max_str := \"\"\n        for _, str := range lst.([]string) {\n            if len(str) > max_len {\n                max_len = len(str)\n                max_str = str\n            }\n        }\n        return max_str\n    case []int:\n        max_len := 0\n        max_int := 0\n        for _, i := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", i)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", i))\n                max_int = i\n            }\n        }\n        return max_int\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvl95ebl__test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg43xeh1v_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2753uti_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp67butl4w_test.go:14:19: invalid argument v (type int) for len\n/tmp/tmp67butl4w_test.go:15:26: invalid argument v (type int) for len\n/tmp/tmp67butl4w_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max_len := 0\n        max_str := \"\"\n        for _, str := range lst.([]string) {\n            if len(str) > max_len {\n                max_len = len(str)\n                max_str = str\n            }\n        }\n        return max_str\n    case []int:\n        max_len := 0\n        max_int := 0\n        for _, i := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", i)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", i))\n                max_int = i\n            }\n        }\n        return max_int\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvl95ebl__test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4v4bwm61_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.(string)) > len(max.(string)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm866_7_w_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f5gzz5s_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg43xeh1v_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx5c7g2e_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max_len := 0\n        max_str := \"\"\n        for _, i := range lst.([]string) {\n            if len(i) > max_len {\n                max_len = len(i)\n                max_str = i\n            }\n        }\n        return max_str\n    case []int:\n        max_len := 0\n        max_int := 0\n        for _, i := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", i)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", i))\n                max_int = i\n            }\n        }\n        return max_int\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpufyjbk1__test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2753uti_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := \"\"\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfiwuggk2_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            var max int\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            var max string\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []float64:\n            var max float64\n            for _, v := range lst.([]float64) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6fseug95_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        var max_str string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max_str) {\n                max_str = v\n            }\n        }\n        return max_str\n    case []int:\n        var max_int int\n        for _, v := range lst.([]int) {\n            if v > max_int {\n                max_int = v\n            }\n        }\n        return max_int\n    case []float64:\n        var max_float float64\n        for _, v := range lst.([]float64) {\n            if v > max_float {\n                max_float = v\n            }\n        }\n        return max_float\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkopzfuic_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max_len := 0\n        max_str := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > max_len {\n                max_len = len(v)\n                max_str = v\n            }\n        }\n        return max_str\n    case []int:\n        max_len := 0\n        max_int := 0\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", v)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", v))\n                max_int = v\n            }\n        }\n        return max_int\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpem0psmxt_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx5c7g2e_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            return Find_Max_int(lst.([]int))\n        case []string:\n            return Find_Max_string(lst.([]string))\n        case []float64:\n            return Find_Max_float64(lst.([]float64))\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjanrkraf_test.go:12:20: undefined: Find_Max_int\n/tmp/tmpjanrkraf_test.go:14:20: undefined: Find_Max_string\n/tmp/tmpjanrkraf_test.go:16:20: undefined: Find_Max_float64\n/tmp/tmpjanrkraf_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx5c7g2e_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            var max_len int\n            var max_elem int\n            for _, elem := range lst.([]int) {\n                if len(fmt.Sprintf(\"%d\", elem)) > max_len {\n                    max_len = len(fmt.Sprintf(\"%d\", elem))\n                    max_elem = elem\n                }\n            }\n            return max_elem\n        case []string:\n            var max_len int\n            var max_elem string\n            for _, elem := range lst.([]string) {\n                if len(elem) > max_len {\n                    max_len = len(elem)\n                    max_elem = elem\n                }\n            }\n            return max_elem\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp9snf26i_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if len(v) > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            max := 0\n            for _, v := range lst.([]string) {\n                if len(v) > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaspbq10p_test.go:14:23: invalid argument v (type int) for len\n/tmp/tmpaspbq10p_test.go:23:25: cannot use v (type string) as type int in assignment\n/tmp/tmpaspbq10p_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg43xeh1v_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if len(fmt.Sprintf(\"%d\", v)) > len(fmt.Sprintf(\"%d\", max)) {\n                    max = v\n                }\n            }\n            return max\n        case []float64:\n            max := lst.([]float64)[0]\n            for _, v := range lst.([]float64) {\n                if len(fmt.Sprintf(\"%f\", v)) > len(fmt.Sprintf(\"%f\", max)) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptrvigbrk_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            var max string\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            var max int\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp13ifzazq_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []float32:\n        max := 0\n        for _, v := range lst.([]float32) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []float64:\n        max := 0\n        for _, v := range lst.([]float64) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpykp5f3kb_test.go:14:19: invalid argument v (type int) for len\n/tmp/tmpykp5f3kb_test.go:15:26: invalid argument v (type int) for len\n/tmp/tmpykp5f3kb_test.go:30:19: invalid argument v (type float32) for len\n/tmp/tmpykp5f3kb_test.go:31:26: invalid argument v (type float32) for len\n/tmp/tmpykp5f3kb_test.go:38:19: invalid argument v (type float64) for len\n/tmp/tmpykp5f3kb_test.go:39:26: invalid argument v (type float64) for len\n/tmp/tmpykp5f3kb_test.go:55:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2753uti_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        max := 0.0\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppbt80avt_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    var max interface{}\n    switch lst.(type) {\n    case []int:\n        for _, v := range lst.([]int) {\n            if max == nil {\n                max = v\n            } else if len(fmt.Sprintf(\"%v\", max)) < len(fmt.Sprintf(\"%v\", v)) {\n                max = v\n            }\n        }\n    case []string:\n        for _, v := range lst.([]string) {\n            if max == nil {\n                max = v\n            } else if len(fmt.Sprintf(\"%v\", max)) < len(fmt.Sprintf(\"%v\", v)) {\n                max = v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2z2npz0y_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    max := 0\n    max_element := \"\"\n    switch lst.(type) {\n    case []string:\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n                max_element = v\n            }\n        }\n    case []int:\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n                max_element = fmt.Sprintf(\"%d\", v)\n            }\n        }\n    case []float64:\n        for _, v := range lst.([]float64) {\n            if v > float64(max) {\n                max = int(v)\n                max_element = fmt.Sprintf(\"%f\", v)\n            }\n        }\n    }\n    return max_element\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbdc6bqd8_test.go:45:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.(string)) > len(max.(string)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm866_7_w_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            return Find_Max_int(lst.([]int))\n        case []string:\n            return Find_Max_string(lst.([]string))\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppbcnwo2x_test.go:12:20: undefined: Find_Max_int\n/tmp/tmppbcnwo2x_test.go:14:20: undefined: Find_Max_string\n/tmp/tmppbcnwo2x_test.go:27:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprintf(\"%v\", v)) > len(fmt.Sprintf(\"%v\", max)) {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9mton2xy_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        max := 0.0\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppbt80avt_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuoua7uci_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    case []interface{}:\n        return Find_Max_interface(lst.([]interface{}))\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx80pv2x2_test.go:12:16: undefined: Find_Max_int\n/tmp/tmpx80pv2x2_test.go:14:16: undefined: Find_Max_string\n/tmp/tmpx80pv2x2_test.go:16:16: undefined: Find_Max_interface\n/tmp/tmpx80pv2x2_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max_len := 0\n        max_str := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > max_len {\n                max_len = len(v)\n                max_str = v\n            }\n        }\n        return max_str\n    case []int:\n        max_len := 0\n        max_int := 0\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", v)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", v))\n                max_int = v\n            }\n        }\n        return max_int\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpem0psmxt_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            var max int\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            var max string\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr0q3xuuf_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch v := lst.(type) {\n    case []interface{}:\n        max := v[0]\n        for _, val := range v {\n            if len(val.(string)) > len(max.(string)) {\n                max = val\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4r3vzi6r_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            var max_len int\n            var max_str string\n            for _, v := range lst.([]string) {\n                if len(v) > max_len {\n                    max_len = len(v)\n                    max_str = v\n                }\n            }\n            return max_str\n        case []int:\n            var max_len int\n            var max_int int\n            for _, v := range lst.([]int) {\n                if len(fmt.Sprintf(\"%d\", v)) > max_len {\n                    max_len = len(fmt.Sprintf(\"%d\", v))\n                    max_int = v\n                }\n            }\n            return max_int\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpstnhrzby_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []interface{}:\n            max_len := 0\n            max_elem := lst.([]interface{})[0]\n            for _, elem := range lst.([]interface{}) {\n                if len(elem.([]interface{})) > max_len {\n                    max_len = len(elem.([]interface{}))\n                    max_elem = elem\n                }\n            }\n            return max_elem\n        case []string:\n            max_len := 0\n            max_elem := lst.([]string)[0]\n            for _, elem := range lst.([]string) {\n                if len(elem) > max_len {\n                    max_len = len(elem)\n                    max_elem = elem\n                }\n            }\n            return max_elem\n        case []int:\n            max_len := 0\n            max_elem := lst.([]int)[0]\n            for _, elem := range lst.([]int) {\n                if len(elem) > max_len {\n                    max_len = len(elem)\n                    max_elem = elem\n                }\n            }\n            return max_elem\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx632c96z_test.go:35:23: invalid argument elem (type int) for len\n/tmp/tmpx632c96z_test.go:36:34: invalid argument elem (type int) for len\n/tmp/tmpx632c96z_test.go:53:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max_len := 0\n            max_ele := 0\n            for _, ele := range lst.([]int) {\n                if len(fmt.Sprintf(\"%d\", ele)) > max_len {\n                    max_len = len(fmt.Sprintf(\"%d\", ele))\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        case []string:\n            max_len := 0\n            max_ele := \"\"\n            for _, ele := range lst.([]string) {\n                if len(ele) > max_len {\n                    max_len = len(ele)\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb43ul743_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprifvy9fr_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            var max_len int\n            var max_ele interface{}\n            for _, ele := range lst.([]int) {\n                if len(ele) > max_len {\n                    max_len = len(ele)\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        case []string:\n            var max_len int\n            var max_ele interface{}\n            for _, ele := range lst.([]string) {\n                if len(ele) > max_len {\n                    max_len = len(ele)\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_t0ast4h_test.go:15:23: invalid argument ele (type int) for len\n/tmp/tmp_t0ast4h_test.go:16:34: invalid argument ele (type int) for len\n/tmp/tmp_t0ast4h_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if len(v) > max {\n                    max = len(v)\n                }\n            }\n            return max\n        case []string:\n            max := 0\n            for _, v := range lst.([]string) {\n                if len(v) > max {\n                    max = len(v)\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpul5c2y1q_test.go:14:23: invalid argument v (type int) for len\n/tmp/tmpul5c2y1q_test.go:15:30: invalid argument v (type int) for len\n/tmp/tmpul5c2y1q_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    var max interface{}\n    switch lst.(type) {\n    case []int:\n        max = lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprintf(\"%v\", v)) > len(fmt.Sprintf(\"%v\", max)) {\n                max = v\n            }\n        }\n    case []string:\n        max = lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max.(string)) {\n                max = v\n            }\n        }\n    case []float64:\n        max = lst.([]float64)[0]\n        for _, v := range lst.([]float64) {\n            if len(fmt.Sprintf(\"%v\", v)) > len(fmt.Sprintf(\"%v\", max)) {\n                max = v\n            }\n        }\n    }\n    return max\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsqwky8zu_test.go:44:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg43xeh1v_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []interface{}:\n            lst_ := lst.([]interface{})\n            max_ := lst_[0]\n            for _, v := range lst_ {\n                if len(v.([]interface{})) > len(max_.([]interface{})) {\n                    max_ = v\n                }\n            }\n            return max_\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppiprf9ly_test.go:32:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max_len := 0\n            max_str := \"\"\n            for _, s := range lst.([]string) {\n                if len(s) > max_len {\n                    max_len = len(s)\n                    max_str = s\n                }\n            }\n            return max_str\n        case []int:\n            max_len := 0\n            max_int := 0\n            for _, i := range lst.([]int) {\n                if len(fmt.Sprintf(\"%d\", i)) > max_len {\n                    max_len = len(fmt.Sprintf(\"%d\", i))\n                    max_int = i\n                }\n            }\n            return max_int\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp66ssuget_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.(string)) > len(max.(string)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm866_7_w_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprifvy9fr_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", v)) > len(fmt.Sprintf(\"%d\", max)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ysxl969_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []float64:\n        max := 0\n        for _, v := range lst.([]float64) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return \"Invalid type\"\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdd_la3my_test.go:14:19: invalid argument v (type int) for len\n/tmp/tmpdd_la3my_test.go:15:26: invalid argument v (type int) for len\n/tmp/tmpdd_la3my_test.go:30:19: invalid argument v (type float64) for len\n/tmp/tmpdd_la3my_test.go:31:26: invalid argument v (type float64) for len\n/tmp/tmpdd_la3my_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []interface{}:\n            max_len := 0\n            max_el := lst.([]interface{})[0]\n            for _, el := range lst.([]interface{}) {\n                if len(el.([]interface{})) > max_len {\n                    max_len = len(el.([]interface{}))\n                    max_el = el\n                }\n            }\n            return max_el\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfma34yxk_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv5fqswhu_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.(string)) > len(max.(string)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm866_7_w_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4v4bwm61_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2753uti_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            var max_len int = 0\n            var max_ele interface{}\n            for _, ele := range lst.([]int) {\n                if len(ele) > max_len {\n                    max_len = len(ele)\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        case []string:\n            var max_len int = 0\n            var max_ele interface{}\n            for _, ele := range lst.([]string) {\n                if len(ele) > max_len {\n                    max_len = len(ele)\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr0y_fqdy_test.go:15:23: invalid argument ele (type int) for len\n/tmp/tmpr0y_fqdy_test.go:16:34: invalid argument ele (type int) for len\n/tmp/tmpr0y_fqdy_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp27t0kfd_test.go:12:16: undefined: Find_Max_int\n/tmp/tmpp27t0kfd_test.go:14:16: undefined: Find_Max_string\n/tmp/tmpp27t0kfd_test.go:27:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := \"\"\n            for _, s := range lst.([]string) {\n                if len(s) > len(max) {\n                    max = s\n                }\n            }\n            return max\n        case []int:\n            max := 0\n            for _, i := range lst.([]int) {\n                if i > max {\n                    max = i\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpavdirt7b_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        max := lst.([]float64)[0]\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7n7z0wxj_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2753uti_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            var max_len int = 0\n            var max_elm interface{} = nil\n            for _, elm := range lst.([]int) {\n                if len(fmt.Sprintf(\"%d\", elm)) > max_len {\n                    max_len = len(fmt.Sprintf(\"%d\", elm))\n                    max_elm = elm\n                }\n            }\n            return max_elm\n        case []string:\n            var max_len int = 0\n            var max_elm interface{} = nil\n            for _, elm := range lst.([]string) {\n                if len(elm) > max_len {\n                    max_len = len(elm)\n                    max_elm = elm\n                }\n            }\n            return max_elm\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpthuo19vn_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max_len int\n        var max_ele int\n        for _, ele := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", ele)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", ele))\n                max_ele = ele\n            }\n        }\n        return max_ele\n    case []string:\n        var max_len int\n        var max_ele string\n        for _, ele := range lst.([]string) {\n            if len(ele) > max_len {\n                max_len = len(ele)\n                max_ele = ele\n            }\n        }\n        return max_ele\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp30a4mdug_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := \"\"\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfiwuggk2_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if len(fmt.Sprintf(\"%d\", v)) > len(fmt.Sprintf(\"%d\", max)) {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            max := \"\"\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp63f3zp0k_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := \"\"\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if len(fmt.Sprintf(\"%d\", v)) > len(fmt.Sprintf(\"%d\", max)) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo3jj8_72_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max_len := 0\n            max_str := \"\"\n            for _, str := range lst.([]string) {\n                if len(str) > max_len {\n                    max_len = len(str)\n                    max_str = str\n                }\n            }\n            return max_str\n        case []int:\n            max_num := 0\n            for _, num := range lst.([]int) {\n                if num > max_num {\n                    max_num = num\n                }\n            }\n            return max_num\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcru0ij_c_test.go:41:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvb_pdyv0_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max_len int = 0\n        var max_ele interface{}\n        for _, ele := range lst.([]int) {\n            if len(fmt.Sprint(ele)) > max_len {\n                max_len = len(fmt.Sprint(ele))\n                max_ele = ele\n            }\n        }\n        return max_ele\n    case []string:\n        var max_len int = 0\n        var max_ele interface{}\n        for _, ele := range lst.([]string) {\n            if len(ele) > max_len {\n                max_len = len(ele)\n                max_ele = ele\n            }\n        }\n        return max_ele\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdoetq7wf_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, val := range lst.([]int) {\n            if val > max {\n                max = val\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, val := range lst.([]string) {\n            if len(val) > len(max) {\n                max = val\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpe7ii2jdg_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp27t0kfd_test.go:12:16: undefined: Find_Max_int\n/tmp/tmpp27t0kfd_test.go:14:16: undefined: Find_Max_string\n/tmp/tmpp27t0kfd_test.go:27:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if len(v) > max {\n                    max = len(v)\n                }\n            }\n            return max\n        case []string:\n            max := 0\n            for _, v := range lst.([]string) {\n                if len(v) > max {\n                    max = len(v)\n                }\n            }\n            return max\n        default:\n            return fmt.Sprintf(\"%v\", lst)\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkveitbtl_test.go:14:23: invalid argument v (type int) for len\n/tmp/tmpkveitbtl_test.go:15:30: invalid argument v (type int) for len\n/tmp/tmpkveitbtl_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if len(v) > max {\n                    max = len(v)\n                }\n            }\n            return max\n        case []string:\n            max := 0\n            for _, v := range lst.([]string) {\n                if len(v) > max {\n                    max = len(v)\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpul5c2y1q_test.go:14:23: invalid argument v (type int) for len\n/tmp/tmpul5c2y1q_test.go:15:30: invalid argument v (type int) for len\n/tmp/tmpul5c2y1q_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", v)) > len(fmt.Sprintf(\"%d\", max)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpni5nrriv_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            var max_len int\n            var max_ele interface{}\n            for _, ele := range lst.([]int) {\n                if len(fmt.Sprint(ele)) > max_len {\n                    max_len = len(fmt.Sprint(ele))\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        case []string:\n            var max_len int\n            var max_ele interface{}\n            for _, ele := range lst.([]string) {\n                if len(ele) > max_len {\n                    max_len = len(ele)\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        case []float64:\n            var max_len int\n            var max_ele interface{}\n            for _, ele := range lst.([]float64) {\n                if len(fmt.Sprint(ele)) > max_len {\n                    max_len = len(fmt.Sprint(ele))\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphfpi4jqt_test.go:53:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuoua7uci_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max_len := 0\n        max_str := \"\"\n        for _, str := range lst.([]string) {\n            if len(str) > max_len {\n                max_len = len(str)\n                max_str = str\n            }\n        }\n        return max_str\n    case []int:\n        max_len := 0\n        max_int := 0\n        for _, i := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", i)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", i))\n                max_int = i\n            }\n        }\n        return max_int\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvl95ebl__test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    max_len := 0\n    max_elem := lst\n    switch lst.(type) {\n    case []int:\n        for _, elem := range lst.([]int) {\n            if len(elem) > max_len {\n                max_len = len(elem)\n                max_elem = elem\n            }\n        }\n    case []string:\n        for _, elem := range lst.([]string) {\n            if len(elem) > max_len {\n                max_len = len(elem)\n                max_elem = elem\n            }\n        }\n    }\n    return max_elem\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfv5uc41r_test.go:15:19: invalid argument elem (type int) for len\n/tmp/tmpfv5uc41r_test.go:16:30: invalid argument elem (type int) for len\n/tmp/tmpfv5uc41r_test.go:38:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", v)) > len(fmt.Sprintf(\"%d\", max)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ysxl969_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        max := 0.0\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6uem489c_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if len(v) > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            max := \"\"\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1k6gy50q_test.go:14:23: invalid argument v (type int) for len\n/tmp/tmp1k6gy50q_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprint(v)) > len(fmt.Sprint(max)) {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    }\n    return nil\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgxjyptq0_test.go:38:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max_len int\n        var max_elem int\n        for _, elem := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", elem)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", elem))\n                max_elem = elem\n            }\n        }\n        return max_elem\n    case []string:\n        var max_len int\n        var max_elem string\n        for _, elem := range lst.([]string) {\n            if len(elem) > max_len {\n                max_len = len(elem)\n                max_elem = elem\n            }\n        }\n        return max_elem\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8d0jiwxc_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp67butl4w_test.go:14:19: invalid argument v (type int) for len\n/tmp/tmp67butl4w_test.go:15:26: invalid argument v (type int) for len\n/tmp/tmp67butl4w_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", v)) > max {\n                max = len(fmt.Sprintf(\"%d\", v))\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps_fl0ovy_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4v4bwm61_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []float64:\n        max := 0\n        for _, v := range lst.([]float64) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt0ogh_wd_test.go:14:19: invalid argument v (type int) for len\n/tmp/tmpt0ogh_wd_test.go:15:26: invalid argument v (type int) for len\n/tmp/tmpt0ogh_wd_test.go:30:19: invalid argument v (type float64) for len\n/tmp/tmpt0ogh_wd_test.go:31:26: invalid argument v (type float64) for len\n/tmp/tmpt0ogh_wd_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3lkhfkm7_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(max.(string)) < len(v.(string)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprb506lb1_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if len(fmt.Sprintf(\"%d\", v)) > len(fmt.Sprintf(\"%d\", max)) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo0r2bl1p_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        max := 0.0\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppbt80avt_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max_len := 0\n            max_ele := 0\n            for _, ele := range lst.([]int) {\n                if len(fmt.Sprintf(\"%d\", ele)) > max_len {\n                    max_len = len(fmt.Sprintf(\"%d\", ele))\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        case []string:\n            max_len := 0\n            max_ele := \"\"\n            for _, ele := range lst.([]string) {\n                if len(ele) > max_len {\n                    max_len = len(ele)\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb43ul743_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        var max interface{}\n        for _, v := range lst.([]interface{}) {\n            if len(fmt.Sprintf(\"%v\", v)) > len(fmt.Sprintf(\"%v\", max)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return lst\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4yndmsiq_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    case []float64:\n        return Find_Max_float64(lst.([]float64))\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1bo_s8wl_test.go:12:16: undefined: Find_Max_int\n/tmp/tmp1bo_s8wl_test.go:14:16: undefined: Find_Max_string\n/tmp/tmp1bo_s8wl_test.go:16:16: undefined: Find_Max_float64\n/tmp/tmp1bo_s8wl_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := 0\n            for _, i := range lst.([]int) {\n                if len(fmt.Sprintf(\"%d\", i)) > max {\n                    max = len(fmt.Sprintf(\"%d\", i))\n                }\n            }\n            return max\n        case []string:\n            max := 0\n            for _, i := range lst.([]string) {\n                if len(i) > max {\n                    max = len(i)\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkf2jjnry_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4v4bwm61_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return fmt.Errorf(\"Invalid type\")\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp16mzxlqb_test.go:14:19: invalid argument v (type int) for len\n/tmp/tmp16mzxlqb_test.go:15:26: invalid argument v (type int) for len\n/tmp/tmp16mzxlqb_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []interface{}:\n            max_len := 0\n            max_elm := lst.([]interface{})[0]\n            for _, elm := range lst.([]interface{}) {\n                if len(elm.([]interface{})) > max_len {\n                    max_len = len(elm.([]interface{}))\n                    max_elm = elm\n                }\n            }\n            return max_elm\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_psj0rqc_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []interface{}:\n            max := lst.([]interface{})[0]\n            for _, v := range lst.([]interface{}) {\n                if len(v.([]interface{})) > len(max.([]interface{})) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpunbwn1jn_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max_len int\n        var max_element interface{}\n        for _, element := range lst.([]int) {\n            if len(fmt.Sprintf(\"%v\", element)) > max_len {\n                max_len = len(fmt.Sprintf(\"%v\", element))\n                max_element = element\n            }\n        }\n        return max_element\n    case []string:\n        var max_len int\n        var max_element interface{}\n        for _, element := range lst.([]string) {\n            if len(element) > max_len {\n                max_len = len(element)\n                max_element = element\n            }\n        }\n        return max_element\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpivjsh138_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.([]interface{})) > len(max.([]interface{})) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2753uti_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprifvy9fr_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuoua7uci_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            return Find_Max_int(lst.([]int))\n        case []float64:\n            return Find_Max_float(lst.([]float64))\n        case []string:\n            return Find_Max_string(lst.([]string))\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzaok_u8u_test.go:12:20: undefined: Find_Max_int\n/tmp/tmpzaok_u8u_test.go:14:20: undefined: Find_Max_float\n/tmp/tmpzaok_u8u_test.go:16:20: undefined: Find_Max_string\n/tmp/tmpzaok_u8u_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := \"\"\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []float64:\n            max := 0.0\n            for _, v := range lst.([]float64) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_ewnuobi_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        var max interface{}\n        for _, v := range lst.([]interface{}) {\n            if len(fmt.Sprintf(\"%v\", max)) < len(fmt.Sprintf(\"%v\", v)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return lst\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy7w84_nw_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4v4bwm61_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuoua7uci_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := lst.([]string)[0]\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := lst.([]int)[0]\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg43xeh1v_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    max := 0\n    max_item := 0\n    switch lst.(type) {\n    case []int:\n        for _, item := range lst.([]int) {\n            if len(fmt.Sprintf(\"%v\", item)) > max {\n                max = len(fmt.Sprintf(\"%v\", item))\n                max_item = item\n            }\n        }\n    case []string:\n        for _, item := range lst.([]string) {\n            if len(item) > max {\n                max = len(item)\n                max_item = item\n            }\n        }\n    }\n    return max_item\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpza09s_xg_test.go:24:26: cannot use item (type string) as type int in assignment\n/tmp/tmpza09s_xg_test.go:38:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            return Find_Max_int(lst.([]int))\n        case []string:\n            return Find_Max_string(lst.([]string))\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppbcnwo2x_test.go:12:20: undefined: Find_Max_int\n/tmp/tmppbcnwo2x_test.go:14:20: undefined: Find_Max_string\n/tmp/tmppbcnwo2x_test.go:27:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            var max_len int = 0\n            var max_str string = \"\"\n            for _, i := range lst.([]string) {\n                if len(i) > max_len {\n                    max_len = len(i)\n                    max_str = i\n                }\n            }\n            return max_str\n        case []int:\n            var max_int int = 0\n            for _, i := range lst.([]int) {\n                if i > max_int {\n                    max_int = i\n                }\n            }\n            return max_int\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjq71j6lt_test.go:41:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        max := 0.0\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppbt80avt_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt249w2tn_test.go:14:19: invalid argument v (type int) for len\n/tmp/tmpt249w2tn_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max_len int\n        var max_elem int\n        for _, elem := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", elem)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", elem))\n                max_elem = elem\n            }\n        }\n        return max_elem\n    case []string:\n        var max_len int\n        var max_elem string\n        for _, elem := range lst.([]string) {\n            if len(elem) > max_len {\n                max_len = len(elem)\n                max_elem = elem\n            }\n        }\n        return max_elem\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8d0jiwxc_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp27t0kfd_test.go:12:16: undefined: Find_Max_int\n/tmp/tmpp27t0kfd_test.go:14:16: undefined: Find_Max_string\n/tmp/tmpp27t0kfd_test.go:27:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max_len := 0\n        max_val := 0\n        for _, val := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", val)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", val))\n                max_val = val\n            }\n        }\n        return max_val\n    case []string:\n        max_len := 0\n        max_val := \"\"\n        for _, val := range lst.([]string) {\n            if len(val) > max_len {\n                max_len = len(val)\n                max_val = val\n            }\n        }\n        return max_val\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp17jbbrq9_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", v)) > len(fmt.Sprintf(\"%d\", max)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpni5nrriv_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max_len int = 0\n        var max_elem interface{}\n        for _, elem := range lst.([]int) {\n            if len(fmt.Sprintf(\"%v\", elem)) > max_len {\n                max_len = len(fmt.Sprintf(\"%v\", elem))\n                max_elem = elem\n            }\n        }\n        return max_elem\n    case []string:\n        var max_len int = 0\n        var max_elem interface{}\n        for _, elem := range lst.([]string) {\n            if len(elem) > max_len {\n                max_len = len(elem)\n                max_elem = elem\n            }\n        }\n        return max_elem\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphce904aa_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp27t0kfd_test.go:12:16: undefined: Find_Max_int\n/tmp/tmpp27t0kfd_test.go:14:16: undefined: Find_Max_string\n/tmp/tmpp27t0kfd_test.go:27:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        lst_str := lst.([]string)\n        max_str := lst_str[0]\n        for _, v := range lst_str {\n            if len(v) > len(max_str) {\n                max_str = v\n            }\n        }\n        return max_str\n    case []int:\n        lst_int := lst.([]int)\n        max_int := lst_int[0]\n        for _, v := range lst_int {\n            if v > max_int {\n                max_int = v\n            }\n        }\n        return max_int\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcz22tsg4_test.go:41:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := lst.([]interface{})[0]\n        for _, v := range lst.([]interface{}) {\n            if len(v.(string)) > len(max.(string)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm866_7_w_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max_len := 0\n        max_ele := 0\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprint(v)) > max_len {\n                max_len = len(fmt.Sprint(v))\n                max_ele = v\n            }\n        }\n        return max_ele\n    case []string:\n        max_len := 0\n        max_ele := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > max_len {\n                max_len = len(v)\n                max_ele = v\n            }\n        }\n        return max_ele\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpiih3qq3y_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f5gzz5s_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        max := lst.([]float64)[0]\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphbw870de_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if len(fmt.Sprintf(\"%d\", v)) > len(fmt.Sprintf(\"%d\", max)) {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            max := \"\"\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp63f3zp0k_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max_len := 0\n            max_str := \"\"\n            for _, str := range lst.([]string) {\n                if len(str) > max_len {\n                    max_len = len(str)\n                    max_str = str\n                }\n            }\n            return max_str\n        case []int:\n            max_num := 0\n            for _, num := range lst.([]int) {\n                if num > max_num {\n                    max_num = num\n                }\n            }\n            return max_num\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcru0ij_c_test.go:41:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        max := lst.([]float64)[0]\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7n7z0wxj_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4v4bwm61_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", v)) > len(fmt.Sprintf(\"%d\", max)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv4ecemr__test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            return Find_Max_int(lst.([]int))\n        case []string:\n            return Find_Max_string(lst.([]string))\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppbcnwo2x_test.go:12:20: undefined: Find_Max_int\n/tmp/tmppbcnwo2x_test.go:14:20: undefined: Find_Max_string\n/tmp/tmppbcnwo2x_test.go:27:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []float64:\n        max := 0\n        for _, v := range lst.([]float64) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt0ogh_wd_test.go:14:19: invalid argument v (type int) for len\n/tmp/tmpt0ogh_wd_test.go:15:26: invalid argument v (type int) for len\n/tmp/tmpt0ogh_wd_test.go:30:19: invalid argument v (type float64) for len\n/tmp/tmpt0ogh_wd_test.go:31:26: invalid argument v (type float64) for len\n/tmp/tmpt0ogh_wd_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprifvy9fr_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max_len := 0\n        max_str := \"\"\n        for _, str := range lst.([]string) {\n            if len(str) > max_len {\n                max_len = len(str)\n                max_str = str\n            }\n        }\n        return max_str\n    case []int:\n        max_len := 0\n        max_int := 0\n        for _, i := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", i)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", i))\n                max_int = i\n            }\n        }\n        return max_int\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvl95ebl__test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        var max interface{}\n        for _, item := range lst.([]interface{}) {\n            if len(fmt.Sprintf(\"%v\", item)) > len(fmt.Sprintf(\"%v\", max)) {\n                max = item\n            }\n        }\n        return max\n    default:\n        return lst\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp23kfoh0h_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprint(v)) > len(fmt.Sprint(max)) {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpynf40nq9_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst := lst.(type) {\n    case []interface{}:\n        if len(lst) == 0 {\n            return nil\n        }\n        max := lst[0]\n        for _, item := range lst {\n            if len(fmt.Sprintf(\"%v\", item)) > len(fmt.Sprintf(\"%v\", max)) {\n                max = item\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp06sil8qn_test.go:34:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []float64:\n        max := 0\n        for _, v := range lst.([]float64) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt0ogh_wd_test.go:14:19: invalid argument v (type int) for len\n/tmp/tmpt0ogh_wd_test.go:15:26: invalid argument v (type int) for len\n/tmp/tmpt0ogh_wd_test.go:30:19: invalid argument v (type float64) for len\n/tmp/tmpt0ogh_wd_test.go:31:26: invalid argument v (type float64) for len\n/tmp/tmpt0ogh_wd_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f5gzz5s_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []interface{}:\n            max := lst.([]interface{})[0]\n            for _, v := range lst.([]interface{}) {\n                if len(v.([]interface{})) > len(max.([]interface{})) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpunbwn1jn_test.go:31:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4v4bwm61_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4v4bwm61_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            var max string\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            var max int\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp13ifzazq_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        var max_len int\n        var max_str string\n        for _, str := range lst.([]string) {\n            if len(str) > max_len {\n                max_len = len(str)\n                max_str = str\n            }\n        }\n        return max_str\n    case []int:\n        var max_len int\n        var max_int int\n        for _, num := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", num)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", num))\n                max_int = num\n            }\n        }\n        return max_int\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa55hd_md_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max_len := 0\n            max_ele := 0\n            for _, ele := range lst.([]int) {\n                if len(fmt.Sprintf(\"%d\", ele)) > max_len {\n                    max_len = len(fmt.Sprintf(\"%d\", ele))\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        case []string:\n            max_len := 0\n            max_ele := \"\"\n            for _, ele := range lst.([]string) {\n                if len(ele) > max_len {\n                    max_len = len(ele)\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb43ul743_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5f5gzz5s_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp67butl4w_test.go:14:19: invalid argument v (type int) for len\n/tmp/tmp67butl4w_test.go:15:26: invalid argument v (type int) for len\n/tmp/tmp67butl4w_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprifvy9fr_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4v4bwm61_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            var max int\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            var max string\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr0q3xuuf_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max_len := 0\n        max_str := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > max_len {\n                max_len = len(v)\n                max_str = v\n            }\n        }\n        return max_str\n    case []int:\n        max_len := 0\n        max_int := 0\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", v)) > max_len {\n                max_len = len(fmt.Sprintf(\"%d\", v))\n                max_int = v\n            }\n        }\n        return max_int\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpem0psmxt_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        var max interface{}\n        for _, v := range lst.([]interface{}) {\n            if max == nil {\n                max = v\n            } else {\n                if len(v.([]interface{})) > len(max.([]interface{})) {\n                    max = v\n                }\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcec33v4u_test.go:35:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if len(v) > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            max := 0\n            for _, v := range lst.([]string) {\n                if len(v) > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaspbq10p_test.go:14:23: invalid argument v (type int) for len\n/tmp/tmpaspbq10p_test.go:23:25: cannot use v (type string) as type int in assignment\n/tmp/tmpaspbq10p_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvb_pdyv0_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if len(v) > max {\n                    max = len(v)\n                }\n            }\n            return max\n        case []string:\n            max := 0\n            for _, v := range lst.([]string) {\n                if len(v) > max {\n                    max = len(v)\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122650,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpul5c2y1q_test.go:14:23: invalid argument v (type int) for len\n/tmp/tmpul5c2y1q_test.go:15:30: invalid argument v (type int) for len\n/tmp/tmpul5c2y1q_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := \"\"\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfiwuggk2_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        return Find_Max_int(lst.([]int))\n    case []string:\n        return Find_Max_string(lst.([]string))\n    case []float64:\n        return Find_Max_float64(lst.([]float64))\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1bo_s8wl_test.go:12:16: undefined: Find_Max_int\n/tmp/tmp1bo_s8wl_test.go:14:16: undefined: Find_Max_string\n/tmp/tmp1bo_s8wl_test.go:16:16: undefined: Find_Max_float64\n/tmp/tmp1bo_s8wl_test.go:29:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        lst_int := lst.([]int)\n        max := lst_int[0]\n        for _, i := range lst_int {\n            if i > max {\n                max = i\n            }\n        }\n        return max\n    case []string:\n        lst_str := lst.([]string)\n        max := lst_str[0]\n        for _, i := range lst_str {\n            if len(i) > len(max) {\n                max = i\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1upyzpte_test.go:41:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            var max_len = 0\n            var max_ele interface{}\n            for _, ele := range lst.([]int) {\n                if len(ele) > max_len {\n                    max_len = len(ele)\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        case []string:\n            var max_len = 0\n            var max_ele interface{}\n            for _, ele := range lst.([]string) {\n                if len(ele) > max_len {\n                    max_len = len(ele)\n                    max_ele = ele\n                }\n            }\n            return max_ele\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptq5b_vnf_test.go:15:23: invalid argument ele (type int) for len\n/tmp/tmptq5b_vnf_test.go:16:34: invalid argument ele (type int) for len\n/tmp/tmptq5b_vnf_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := lst.([]int)[0]\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        max := lst.([]string)[0]\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfmvram4z_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []int:\n            var max int\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        case []string:\n            var max string\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr0q3xuuf_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            max := \"\"\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            max := 0\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfiwuggk2_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4v4bwm61_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        max := \"\"\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        max := 0.0\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppbt80avt_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510048,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgx5c7g2e_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return \"Invalid type\"\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1rboe1t4_test.go:14:19: invalid argument v (type int) for len\n/tmp/tmp1rboe1t4_test.go:15:26: invalid argument v (type int) for len\n/tmp/tmp1rboe1t4_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max := 0\n        for _, v := range lst.([]int) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []string:\n        max := 0\n        for _, v := range lst.([]string) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    case []float64:\n        max := 0\n        for _, v := range lst.([]float64) {\n            if len(v) > max {\n                max = len(v)\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122653,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt0ogh_wd_test.go:14:19: invalid argument v (type int) for len\n/tmp/tmpt0ogh_wd_test.go:15:26: invalid argument v (type int) for len\n/tmp/tmpt0ogh_wd_test.go:30:19: invalid argument v (type float64) for len\n/tmp/tmpt0ogh_wd_test.go:31:26: invalid argument v (type float64) for len\n/tmp/tmpt0ogh_wd_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n        case []string:\n            var max string\n            for _, v := range lst.([]string) {\n                if len(v) > len(max) {\n                    max = v\n                }\n            }\n            return max\n        case []int:\n            var max int\n            for _, v := range lst.([]int) {\n                if v > max {\n                    max = v\n                }\n            }\n            return max\n        default:\n            return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122648,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp13ifzazq_test.go:39:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []interface{}:\n        max := 0\n        max_element := lst.([]interface{})[0]\n        for _, element := range lst.([]interface{}) {\n            if len(element.([]interface{})) > max {\n                max = len(element.([]interface{}))\n                max_element = element\n            }\n        }\n        return max_element\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmv9kuscg_test.go:33:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if len(fmt.Sprintf(\"%d\", v)) > len(fmt.Sprintf(\"%d\", max)) {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        var max float64\n        for _, v := range lst.([]float64) {\n            if len(fmt.Sprintf(\"%f\", v)) > len(fmt.Sprintf(\"%f\", max)) {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpikqsb85i_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    max := 0\n    max_element := 0\n    switch lst.(type) {\n    case []int:\n        for _, element := range lst.([]int) {\n            if len(fmt.Sprintf(\"%v\", element)) > max {\n                max = len(fmt.Sprintf(\"%v\", element))\n                max_element = element\n            }\n        }\n    case []string:\n        for _, element := range lst.([]string) {\n            if len(element) > max {\n                max = len(element)\n                max_element = element\n            }\n        }\n    }\n    return max_element\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf8o536cy_test.go:24:29: cannot use element (type string) as type int in assignment\n/tmp/tmpf8o536cy_test.go:38:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        max_len := 0\n        max_ele := lst.([]int)[0]\n        for _, ele := range lst.([]int) {\n            if len(fmt.Sprint(ele)) > max_len {\n                max_len = len(fmt.Sprint(ele))\n                max_ele = ele\n            }\n        }\n        return max_ele\n    case []string:\n        max_len := 0\n        max_ele := lst.([]string)[0]\n        for _, ele := range lst.([]string) {\n            if len(ele) > max_len {\n                max_len = len(ele)\n                max_ele = ele\n            }\n        }\n        return max_ele\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmposoe2c3j_test.go:43:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package Find_Max_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the element of a list having maximum length.\nfunc Find_Max(lst interface{}) interface{} {\n    switch lst.(type) {\n    case []int:\n        var max int\n        for _, v := range lst.([]int) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    case []string:\n        var max string\n        for _, v := range lst.([]string) {\n            if len(v) > len(max) {\n                max = v\n            }\n        }\n        return max\n    case []float64:\n        var max float64\n        for _, v := range lst.([]float64) {\n            if v > max {\n                max = v\n            }\n        }\n        return max\n    default:\n        return nil\n    }\n}\n\nfunc TestFind_Max(t *testing.T) {\n  candidate := Find_Max\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]string{\"A\"}, []string{\"A\", \"B\"}, []string{\"A\", \"B\", \"C\"}}), expected: []string{\"A\", \"B\", \"C\"} },\n     { actual: candidate([][]int{[]int{1}, []int{1, 2}, []int{1, 2, 3}}), expected: []int{1, 2, 3} },\n     { actual: candidate([][]int{[]int{1, 1}, []int{1, 2, 3}, []int{1, 5, 6, 1}}), expected: []int{1, 5, 6, 1} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122655,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgcyg539u_test.go:47:42: cannot use []string{...} (type []string) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}