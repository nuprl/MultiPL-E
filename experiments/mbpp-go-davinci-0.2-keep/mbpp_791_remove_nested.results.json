{
  "name": "mbpp_791_remove_nested",
  "language": "go_test.go",
  "prompt": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_791_remove_nested.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpas_q8f9y_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpas_q8f9y_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpas_q8f9y_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpas_q8f9y_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(item.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, item)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp7m_ga0nh_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp7m_ga0nh_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp7m_ga0nh_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp7m_ga0nh_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        if _, ok := v.([]interface{}); !ok {\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        if _, ok := val.([]interface{}); !ok {\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpas_q8f9y_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpas_q8f9y_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpas_q8f9y_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpas_q8f9y_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    // Create a new list to hold the result.\n    result := make([]interface{}, 0)\n    // Iterate over the given tuple.\n    for _, item := range test_tup {\n        // If the item is a tuple, call the function recursively.\n        if t, ok := item.([]interface{}); ok {\n            result = append(result, remove_nested(t)...)\n        } else {\n            // Otherwise, append the item to the result.\n            result = append(result, item)\n        }\n    }\n    // Return the result.\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpn9t_usbw_test.go:42: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpn9t_usbw_test.go:42: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpn9t_usbw_test.go:42: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpn9t_usbw_test.go:42: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        if _, ok := v.([]interface{}); !ok {\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        if _, ok := v.([]interface{}); !ok {\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        if _, ok := v.([]interface{}); !ok {\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        if _, ok := val.([]interface{}); !ok {\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            ret_tup = append(ret_tup, remove_nested(val.([]interface{}))...)\n        default:\n            ret_tup = append(ret_tup, val)\n        }\n    }\n    return ret_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        if _, ok := v.([]interface{}); !ok {\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, item := range test_tup {\n        switch item.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(item.([]interface{}))...)\n        default:\n            result = append(result, item)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpas_q8f9y_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpas_q8f9y_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpas_q8f9y_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpas_q8f9y_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    // Create a new tuple.\n    new_tup := make([]interface{}, 0)\n    // Iterate over the given tuple.\n    for _, val := range test_tup {\n        // Check if the value is a tuple.\n        if tup, ok := val.([]interface{}); ok {\n            // If it is a tuple, then append the values of the tuple to the new tuple.\n            new_tup = append(new_tup, remove_nested(tup)...)\n        } else {\n            // If it is not a tuple, then append the value to the new tuple.\n            new_tup = append(new_tup, val)\n        }\n    }\n    // Return the new tuple.\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpu6so29yu_test.go:43: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpu6so29yu_test.go:43: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpu6so29yu_test.go:43: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpu6so29yu_test.go:43: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            ret_tup = append(ret_tup, remove_nested(val.([]interface{}))...)\n        default:\n            ret_tup = append(ret_tup, val)\n        }\n    }\n    return ret_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, elem := range test_tup {\n        switch elem.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(elem.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, elem)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpkf75gc76_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpkf75gc76_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpkf75gc76_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpkf75gc76_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(v.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpokuh3dr5_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(val.([]interface{}))...)\n        default:\n            result = append(result, val)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp9afhx13i_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            new_tup = append(new_tup, remove_nested(val.([]interface{}))...)\n        default:\n            new_tup = append(new_tup, val)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpqm4nbnt8_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var new_tup []interface{}\n    for _, v := range test_tup {\n        if _, ok := v.([]interface{}); !ok {\n            new_tup = append(new_tup, v)\n        }\n    }\n    return new_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            ret_tup = append(ret_tup, remove_nested(val.([]interface{}))...)\n        default:\n            ret_tup = append(ret_tup, val)\n        }\n    }\n    return ret_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var res []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            res = append(res, remove_nested(v.([]interface{}))...)\n        default:\n            res = append(res, v)\n        }\n    }\n    return res\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp8glgbcev_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp8glgbcev_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp8glgbcev_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp8glgbcev_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var ret_tup []interface{}\n    for _, val := range test_tup {\n        switch val.(type) {\n        case []interface{}:\n            ret_tup = append(ret_tup, remove_nested(val.([]interface{}))...)\n        default:\n            ret_tup = append(ret_tup, val)\n        }\n    }\n    return ret_tup\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123213,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmp13921r2o_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package remove_nested_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to remove tuples from the given tuple.\nfunc remove_nested(test_tup []interface{}) []interface{} {\n    var result []interface{}\n    for _, v := range test_tup {\n        switch v.(type) {\n        case []interface{}:\n            result = append(result, remove_nested(v.([]interface{}))...)\n        default:\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestRemove_Nested(t *testing.T) {\n  candidate := remove_nested\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, []interface{}{4, 6}, 10}), expected: []interface{}{1, 5, 7, 10} },\n     { actual: candidate([]interface{}{2, 6, 8, []interface{}{5, 7}, 11}), expected: []interface{}{2, 6, 8, 11} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, 12}), expected: []interface{}{3, 7, 9, 12} },\n     { actual: candidate([]interface{}{3, 7, 9, []interface{}{6, 8}, []interface{}{5, 12}, 12}), expected: []interface{}{3, 7, 9, 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517360,
      "stdout": "--- FAIL: TestRemove_Nested (0.00s)\n    --- FAIL: TestRemove_Nested/test_num__0 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=10)]', got '[%!s(int=1) %!s(int=5) %!s(int=7) %!s(int=4) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestRemove_Nested/test_num__1 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=11)]', got '[%!s(int=2) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestRemove_Nested/test_num__2 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=12)]'\n    --- FAIL: TestRemove_Nested/test_num__3 (0.00s)\n        tmpd_t5pvyq_test.go:38: expected '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=12)]', got '[%!s(int=3) %!s(int=7) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=5) %!s(int=12) %!s(int=12)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}