{
  "name": "mbpp_4_heap_queue_largest",
  "language": "go_test.go",
  "prompt": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_4_heap_queue_largest.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n\n    if n >= len(nums) {\n        return nums\n    }\n\n    // build max heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    // insert\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    // sort\n    for i := n - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap, 0, i)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplqph2_50_test.go:24:9: undefined: heapify\n/tmp/tmplqph2_50_test.go:31:13: undefined: heapify\n/tmp/tmplqph2_50_test.go:38:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n\n    // build a min heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    // insert the rest of the numbers into the heap\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    // sort the heap\n    for i := n-1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap, 0, i)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkgpdgrdj_test.go:20:9: undefined: heapify\n/tmp/tmpkgpdgrdj_test.go:27:13: undefined: heapify\n/tmp/tmpkgpdgrdj_test.go:34:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heap_adjust(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_adjust(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8x_4dsf3_test.go:18:9: undefined: heap_adjust\n/tmp/tmp8x_4dsf3_test.go:23:13: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp81mch94s_test.go:21:9: undefined: heapify\n/tmp/tmp81mch94s_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7ja5hys8_test.go:18:9: undefined: heapify\n/tmp/tmp7ja5hys8_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heap_queue_largest_heapify(nums, i, len(nums))\n    }\n    // extract the top n elements\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heap_queue_largest_heapify(nums, 0, i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpndwhe3vp_test.go:18:9: undefined: heap_queue_largest_heapify\n/tmp/tmpndwhe3vp_test.go:23:9: undefined: heap_queue_largest_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplapoxhxb_test.go:21:9: undefined: heapify\n/tmp/tmplapoxhxb_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return nil\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build a max heap\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop the max n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9r8gqmop_test.go:18:9: undefined: heapify\n/tmp/tmp9r8gqmop_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop the top n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums, 0, len(nums) - 1 - i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6vn_haiu_test.go:18:9: undefined: heapify\n/tmp/tmp6vn_haiu_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // extract the largest n elements\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_1drrkf_test.go:18:9: undefined: heapify\n/tmp/tmpx_1drrkf_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n\n    // build a min heap\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_queue_largest_heapify(nums, n, i)\n    }\n\n    // extract the top n elements\n    for i := n; i < len(nums); i++ {\n        if nums[i] > nums[0] {\n            nums[i], nums[0] = nums[0], nums[i]\n            heap_queue_largest_heapify(nums, n, 0)\n        }\n    }\n\n    return nums[:n]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt_5f7bm6_test.go:16:9: undefined: heap_queue_largest_heapify\n/tmp/tmpt_5f7bm6_test.go:23:13: undefined: heap_queue_largest_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nil\n    }\n    // build a max heap\n    for i := len(nums) / 2 - 1; i >= 0; i-- {\n        max_heapify(nums, i)\n    }\n    // extract the top n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - i - 1] = nums[len(nums) - i - 1], nums[0]\n        max_heapify(nums[:len(nums) - i - 1], 0)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc3td1ggi_test.go:15:9: undefined: max_heapify\n/tmp/tmpc3td1ggi_test.go:20:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    copy(heap, nums[:n])\n    for i := n/2 - 1; i >= 0; i-- {\n        heap_queue_largest_heapify(heap, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_queue_largest_heapify(heap, 0)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3cb3f19b_test.go:19:9: undefined: heap_queue_largest_heapify\n/tmp/tmp3cb3f19b_test.go:24:13: undefined: heap_queue_largest_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    copy(heap, nums[:n])\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6z01neix_test.go:16:9: undefined: heapify\n/tmp/tmp6z01neix_test.go:21:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp78jps8uu_test.go:21:9: undefined: heapify\n/tmp/tmp78jps8uu_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nums\n    }\n\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzgait_si_test.go:20:9: undefined: heapify\n/tmp/tmpzgait_si_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build a max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-i-1] = nums[len(nums)-i-1], nums[0]\n        heapify(nums, 0, len(nums)-i-1)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnyt9pzo3_test.go:18:9: undefined: heapify\n/tmp/tmpnyt9pzo3_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nums\n    }\n\n    // build a min heap\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // extract the root n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6wbq46zx_test.go:16:9: undefined: heapify\n/tmp/tmp6wbq46zx_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz1gbrewt_test.go:21:9: undefined: heapify\n/tmp/tmpz1gbrewt_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) <= n {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl__zzkd__test.go:18:9: undefined: heapify\n/tmp/tmpl__zzkd__test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    // create a max heap\n    heap := make([]int, 0)\n    for _, num := range nums {\n        heap = append(heap, num)\n        if len(heap) > n {\n            heap = heap[1:]\n        }\n        heap = heapify(heap)\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm76ixmx9_test.go:17:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        max := nums[0]\n        for _, num := range nums {\n            if num > max {\n                max = num\n            }\n        }\n        return []int{max}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build a min-heap\n    for i := n / 2; i >= 0; i-- {\n        heapify(nums, n, i)\n    }\n    // heap sort\n    for i := n - 1; i >= 0; i-- {\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n    }\n    return nums[:n]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjfhmgoae_test.go:27:9: undefined: heapify\n/tmp/tmpjfhmgoae_test.go:32:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nil\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        max_heapify(nums, i)\n    }\n\n    // extract the max n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        max_heapify(nums[:len(nums) - 1 - i], 0)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz_luklb0_test.go:16:9: undefined: max_heapify\n/tmp/tmpz_luklb0_test.go:22:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    var heap []int\n    for _, num := range nums {\n        if len(heap) < n {\n            heap = append(heap, num)\n            if len(heap) == n {\n                build_heap(heap)\n            }\n        } else {\n            if num > heap[0] {\n                heap[0] = num\n                heapify(heap, 0, n)\n            }\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxsevj6bm_test.go:18:17: undefined: build_heap\n/tmp/tmpxsevj6bm_test.go:23:17: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nil\n    }\n\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0aae7j8u_test.go:20:9: undefined: heapify\n/tmp/tmp0aae7j8u_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz1gbrewt_test.go:21:9: undefined: heapify\n/tmp/tmpz1gbrewt_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nil\n    }\n\n    // build a max heap\n    build_max_heap(nums)\n\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        max_heapify(nums, 0, len(nums) - 1 - i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_j7cgf5u_test.go:15:5: undefined: build_max_heap\n/tmp/tmp_j7cgf5u_test.go:20:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    heap := make([]int, 0)\n    for _, num := range nums {\n        if len(heap) < n {\n            heap = append(heap, num)\n        } else {\n            if num > heap[0] {\n                heap[0] = num\n            }\n        }\n        heap = heap_queue_heapify(heap, 0)\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0_wzzetx_test.go:19:16: undefined: heap_queue_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    // build a max heap\n    heap := make([]int, 0)\n    for _, num := range nums {\n        heap = append(heap, num)\n        // heapify up\n        i := len(heap) - 1\n        for i > 0 {\n            parent := (i - 1) / 2\n            if heap[i] > heap[parent] {\n                heap[i], heap[parent] = heap[parent], heap[i]\n                i = parent\n            } else {\n                break\n            }\n        }\n    }\n\n    // pop n times\n    res := make([]int, 0)\n    for i := 0; i < n; i++ {\n        res = append(res, heap[0])\n        heap[0] = heap[len(heap) - 1]\n        heap = heap[:len(heap) - 1]\n        // heapify down\n        i := 0\n        for i < len(heap) {\n            left := i * 2 + 1\n            right := i * 2 + 2\n            if left >= len(heap) {\n                break\n            }\n            if right >= len(heap) {\n                if heap[left] > heap[i] {\n                    heap[left], heap[i] = heap[i], heap[left]\n                    i = left\n                } else {\n                    break\n                }\n            } else {\n                if heap[left] > heap[right] {\n                    if heap[left] > heap[i] {\n                        heap[left], heap[i] = heap[i], heap[left]\n                        i = left\n                    } else {\n                        break\n                    }\n                } else {\n                    if heap[right] > heap[i] {\n                        heap[right], heap[i] = heap[i], heap[right]\n                        i = right\n                    } else {\n                        break\n                    }\n                }\n            }\n        }\n    }\n\n    return res\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build a max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0zpob3ob_test.go:18:9: undefined: heapify\n/tmp/tmp0zpob3ob_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_adjust(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_adjust(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbgi_nyxu_test.go:21:9: undefined: heap_adjust\n/tmp/tmpbgi_nyxu_test.go:26:13: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n\n    if n >= len(nums) {\n        return nums\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums, 0, len(nums) - 1 - i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123575,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9sj9j3rb_test.go:20:9: undefined: heapify\n/tmp/tmp9sj9j3rb_test.go:26:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510496,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7ja5hys8_test.go:18:9: undefined: heapify\n/tmp/tmp7ja5hys8_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    // heapify\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmps3z0hthz_test.go:12:9: undefined: heapify\n/tmp/tmps3z0hthz_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - i - 1] = nums[len(nums) - i - 1], nums[0]\n        heapify(nums, 0, len(nums) - i - 1)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa2jlabwv_test.go:18:9: undefined: heapify\n/tmp/tmpa2jlabwv_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 || n > len(nums) {\n        return []int{}\n    }\n    // build a max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop the largest n elements\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpt439sdwv_test.go:15:9: undefined: heapify\n/tmp/tmpt439sdwv_test.go:20:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build heap\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_queue_largest_heapify(nums, n, i)\n    }\n    // heap sort\n    for i := n - 1; i >= 0; i-- {\n        nums[i], nums[0] = nums[0], nums[i]\n        heap_queue_largest_heapify(nums, i, 0)\n    }\n    return nums[:n]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0ujbfvrw_test.go:18:9: undefined: heap_queue_largest_heapify\n/tmp/tmp0ujbfvrw_test.go:23:9: undefined: heap_queue_largest_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    h := make([]int, n)\n    for i := 0; i < n; i++ {\n        h[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(h, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > h[0] {\n            h[0] = nums[i]\n            heapify(h, 0, n)\n        }\n    }\n    return h\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyiz37vme_test.go:18:9: undefined: heapify\n/tmp/tmpyiz37vme_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 || len(nums) < n {\n        return nil\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        max_heapify(nums, i, len(nums))\n    }\n\n    // extract the max n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        max_heapify(nums, 0, len(nums)-1-i)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7wczn09o_test.go:16:9: undefined: max_heapify\n/tmp/tmp7wczn09o_test.go:22:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n\n    if n >= len(nums) {\n        return nums\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - i - 1] = nums[len(nums) - i - 1], nums[0]\n        heapify(nums, 0, len(nums) - i - 1)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpug1nmy0l_test.go:20:9: undefined: heapify\n/tmp/tmpug1nmy0l_test.go:26:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplapoxhxb_test.go:21:9: undefined: heapify\n/tmp/tmplapoxhxb_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return nil\n    }\n\n    if n >= len(nums) {\n        return nums\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // swap the first and last element, then heapify the rest\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7kb3extq_test.go:20:9: undefined: heapify\n/tmp/tmp7kb3extq_test.go:26:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build a max heap\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop the top n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpldgd6jw2_test.go:18:9: undefined: heapify\n/tmp/tmpldgd6jw2_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n\n    if n > len(nums) {\n        n = len(nums)\n    }\n\n    // Build a max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // Extract the max n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-i-1] = nums[len(nums)-i-1], nums[0]\n        heapify(nums, 0, len(nums)-i-1)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9jax7lfs_test.go:20:9: undefined: heapify\n/tmp/tmp9jax7lfs_test.go:26:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-i-1] = nums[len(nums)-i-1], nums[0]\n        heapify(nums, 0, len(nums)-i-1)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8eir3opg_test.go:18:9: undefined: heapify\n/tmp/tmp8eir3opg_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    var result []int\n    if n > len(nums) {\n        return result\n    }\n    for i := 0; i < n; i++ {\n        result = append(result, nums[i])\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(result, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > result[0] {\n            result[0] = nums[i]\n            heapify(result, 0, n)\n        }\n    }\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4w1kj1x7_test.go:18:9: undefined: heapify\n/tmp/tmp4w1kj1x7_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if len(nums) == 0 {\n        return []int{}\n    }\n    if len(nums) <= n {\n        return nums\n    }\n    // create a min heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        min_heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            min_heapify(heap, 0, n)\n        }\n    }\n    // sort the heap\n    for i := n - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        min_heapify(heap, 0, i)\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp21putrki_test.go:25:9: undefined: min_heapify\n/tmp/tmp21putrki_test.go:30:13: undefined: min_heapify\n/tmp/tmp21putrki_test.go:36:9: undefined: min_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_zgnq6ls_test.go:21:9: undefined: heapify\n/tmp/tmp_zgnq6ls_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build a min heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    // insert the rest of the numbers\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0nbo_2w5_test.go:22:9: undefined: heapify\n/tmp/tmp0nbo_2w5_test.go:28:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_queue_largest_heapify(result, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > result[0] {\n            result[0] = nums[i]\n            heap_queue_largest_heapify(result, 0, n)\n        }\n    }\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgfbddkxq_test.go:21:9: undefined: heap_queue_largest_heapify\n/tmp/tmpgfbddkxq_test.go:26:13: undefined: heap_queue_largest_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build heap\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(nums, i, n)\n    }\n    // heap sort\n    for i := n; i < len(nums); i++ {\n        if nums[i] > nums[0] {\n            nums[0], nums[i] = nums[i], nums[0]\n            heapify(nums, 0, n)\n        }\n    }\n    return nums[:n]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb1crf67l_test.go:18:9: undefined: heapify\n/tmp/tmpb1crf67l_test.go:24:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heap_adjust(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_adjust(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpug3cwy44_test.go:21:9: undefined: heap_adjust\n/tmp/tmpug3cwy44_test.go:26:13: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return nil\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_f969mao_test.go:21:9: undefined: heapify\n/tmp/tmp_f969mao_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    // build heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    // insert the rest of the numbers\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdhfm2bco_test.go:16:9: undefined: heapify\n/tmp/tmpdhfm2bco_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 || n > len(nums) {\n        return []int{}\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    build_heap(heap)\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppt9peslh_test.go:17:5: undefined: build_heap\n/tmp/tmppt9peslh_test.go:21:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build a min heap\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(nums, n, i)\n    }\n    // extract the top n elements\n    for i := n; i < len(nums); i++ {\n        if nums[i] > nums[0] {\n            nums[i], nums[0] = nums[0], nums[i]\n            heapify(nums, n, 0)\n        }\n    }\n    // reverse the result\n    for i, j := 0, n - 1; i < j; i, j = i + 1, j - 1 {\n        nums[i], nums[j] = nums[j], nums[i]\n    }\n    return nums[:n]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbt3xh8ux_test.go:18:9: undefined: heapify\n/tmp/tmpbt3xh8ux_test.go:24:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return nil\n    }\n\n    var result []int\n    for _, num := range nums {\n        if len(result) < n {\n            result = append(result, num)\n        } else {\n            if num > result[0] {\n                result[0] = num\n            }\n        }\n        heapify(result, 0)\n    }\n\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd0xbie4l_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    // init heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_adjust(heap, i, n)\n    }\n    // insert\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_adjust(heap, 0, n)\n        }\n    }\n    // sort\n    for i := n - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap_adjust(heap, 0, i)\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw1f9jwbe_test.go:16:9: undefined: heap_adjust\n/tmp/tmpw1f9jwbe_test.go:22:13: undefined: heap_adjust\n/tmp/tmpw1f9jwbe_test.go:28:9: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n\n    if n > len(nums) {\n        n = len(nums)\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        max_heapify(nums, i, len(nums))\n    }\n\n    // extract the max element n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        max_heapify(nums, 0, len(nums) - 1 - i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm4uo2rmy_test.go:20:9: undefined: max_heapify\n/tmp/tmpm4uo2rmy_test.go:26:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpr8n2bhwr_test.go:20:9: undefined: heapify\n/tmp/tmpr8n2bhwr_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = nums[i]\n    }\n    for i := n / 2; i >= 0; i-- {\n        heapify(result, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > result[0] {\n            result[0] = nums[i]\n            heapify(result, 0, n)\n        }\n    }\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpefftno98_test.go:18:9: undefined: heapify\n/tmp/tmpefftno98_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n < 1 || len(nums) < n {\n        return nil\n    }\n\n    // build a max heap\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmocxfcoe_test.go:16:9: undefined: heapify\n/tmp/tmpmocxfcoe_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n\n    if n >= len(nums) {\n        return nums\n    }\n\n    // build heap\n    for i := n / 2; i >= 0; i-- {\n        heapify(nums, i, n)\n    }\n\n    // heap sort\n    for i := n; i < len(nums); i++ {\n        if nums[i] > nums[0] {\n            nums[0], nums[i] = nums[i], nums[0]\n            heapify(nums, 0, n)\n        }\n    }\n\n    return nums[:n]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm4dtgl4l_test.go:20:9: undefined: heapify\n/tmp/tmpm4dtgl4l_test.go:27:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    // build a max heap\n    heap := make([]int, len(nums))\n    for i, num := range nums {\n        heap[i] = num\n        heap_up(heap, i)\n    }\n\n    // pop the top n elements\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = heap[0]\n        heap[0] = heap[len(heap) - 1]\n        heap = heap[:len(heap) - 1]\n        heap_down(heap, 0)\n    }\n\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdn7831mj_test.go:14:9: undefined: heap_up\n/tmp/tmpdn7831mj_test.go:23:9: undefined: heap_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nil\n    }\n\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n\n    for i := n / 2; i >= 0; i-- {\n        heap_adjust(heap, i, n)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_adjust(heap, 0, n)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptgiq7yhu_test.go:20:9: undefined: heap_adjust\n/tmp/tmptgiq7yhu_test.go:26:13: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nil\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_adjust(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_adjust(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphiixkdiz_test.go:18:9: undefined: heap_adjust\n/tmp/tmphiixkdiz_test.go:23:13: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    // insert\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    // sort\n    for i := n - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap, 0, i)\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2rzo5fio_test.go:22:9: undefined: heapify\n/tmp/tmp2rzo5fio_test.go:28:13: undefined: heapify\n/tmp/tmp2rzo5fio_test.go:34:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nil\n    }\n\n    // build a heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop n largest\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpypzumh31_test.go:16:9: undefined: heapify\n/tmp/tmpypzumh31_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n\n    // init heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heap_queue_largest_heapify(heap, i, n)\n    }\n\n    // insert\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_queue_largest_heapify(heap, 0, n)\n        }\n    }\n\n    // sort\n    for i := n - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap_queue_largest_heapify(heap, 0, i)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3j1ebl49_test.go:23:9: undefined: heap_queue_largest_heapify\n/tmp/tmp3j1ebl49_test.go:30:13: undefined: heap_queue_largest_heapify\n/tmp/tmp3j1ebl49_test.go:37:9: undefined: heap_queue_largest_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nil\n    }\n\n    // build a max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop n elements from the heap\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-i-1] = nums[len(nums)-i-1], nums[0]\n        heapify(nums, 0, len(nums)-i-1)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph01lhlce_test.go:16:9: undefined: heapify\n/tmp/tmph01lhlce_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123572,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4eq2wey9_test.go:18:9: undefined: heapify\n/tmp/tmp4eq2wey9_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{nums[0]}\n    }\n    if n == len(nums) {\n        return nums\n    }\n    if n > len(nums) {\n        return nums\n    }\n    // build a heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := (n - 1) / 2; i >= 0; i-- {\n        heapify(heap, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123587,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppy6prfpv_test.go:28:9: undefined: heapify\n/tmp/tmppy6prfpv_test.go:33:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n <= 0 {\n        return []int{}\n    }\n\n    // build a max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // extract the top n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-i-1] = nums[len(nums)-i-1], nums[0]\n        heapify(nums, 0, len(nums)-i-1)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpib84n784_test.go:16:9: undefined: heapify\n/tmp/tmpib84n784_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) <= n {\n        return nums\n    }\n\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphs9vqmrx_test.go:20:9: undefined: heapify\n/tmp/tmphs9vqmrx_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n == 0 {\n        return []int{}\n    }\n\n    // build a max heap\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop the largest n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbqmy1ahy_test.go:16:9: undefined: heapify\n/tmp/tmpbqmy1ahy_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    // init heap\n    h := make([]int, 0)\n    for _, num := range nums {\n        if len(h) < n {\n            h = append(h, num)\n            heapify_up(h)\n        } else if num > h[0] {\n            h[0] = num\n            heapify_down(h)\n        }\n    }\n    return h\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb66kw2kl_test.go:15:13: undefined: heapify_up\n/tmp/tmpb66kw2kl_test.go:18:13: undefined: heapify_down\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n\n    if n >= len(nums) {\n        return nums\n    }\n\n    // build heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // extract n largest\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqw1znmof_test.go:20:9: undefined: heapify\n/tmp/tmpqw1znmof_test.go:26:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvgxy_45v_test.go:21:9: undefined: heapify\n/tmp/tmpvgxy_45v_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9ho25d4y_test.go:21:9: undefined: heapify\n/tmp/tmp9ho25d4y_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build max heap\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdhvc20lb_test.go:18:9: undefined: heapify\n/tmp/tmpdhvc20lb_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    // build a heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    // compare the rest of the numbers with the root of the heap\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7xs3c4ze_test.go:19:9: undefined: heapify\n/tmp/tmp7xs3c4ze_test.go:25:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123582,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2_8bxlz5_test.go:18:9: undefined: heapify\n/tmp/tmp2_8bxlz5_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n\n    // Build a max heap\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // Extract the top n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcgvi9rzh_test.go:16:9: undefined: heapify\n/tmp/tmpcgvi9rzh_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        max_heapify(nums, i, len(nums))\n    }\n    // extract the top n elements\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        max_heapify(nums, 0, i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpydo39ory_test.go:18:9: undefined: max_heapify\n/tmp/tmpydo39ory_test.go:23:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_queue_largest_heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_queue_largest_heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ww1hifq_test.go:21:9: undefined: heap_queue_largest_heapify\n/tmp/tmp1ww1hifq_test.go:26:13: undefined: heap_queue_largest_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop the max n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums, 0, len(nums) - 1 - i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppxuah5md_test.go:16:9: undefined: heapify\n/tmp/tmppxuah5md_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) <= n {\n        return nums\n    }\n\n    // build max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // swap first and last\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg7pw6wlk_test.go:16:9: undefined: heapify\n/tmp/tmpg7pw6wlk_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heap_queue_largest_heapify(nums, i, len(nums))\n    }\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heap_queue_largest_heapify(nums, 0, len(nums)-1-i)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl6_b7jj0_test.go:18:9: undefined: heap_queue_largest_heapify\n/tmp/tmpl6_b7jj0_test.go:23:9: undefined: heap_queue_largest_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n\n    if n > len(nums) {\n        n = len(nums)\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // extract the top n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums, 0, len(nums) - 1 - i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_iknyuoj_test.go:20:9: undefined: heapify\n/tmp/tmp_iknyuoj_test.go:26:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) <= n {\n        return nums\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // swap the first and last element, and heapify the first n-1 elements\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9h8c0fqy_test.go:16:9: undefined: heapify\n/tmp/tmp9h8c0fqy_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n\n    if n >= len(nums) {\n        return nums\n    }\n\n    // build a max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop the top n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123577,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp02sb3mxs_test.go:20:9: undefined: heapify\n/tmp/tmp02sb3mxs_test.go:26:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw3b4haaw_test.go:21:9: undefined: heapify\n/tmp/tmpw3b4haaw_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i)\n    }\n    // pop n largest numbers\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums[:i], 0)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5su2h1t1_test.go:18:9: undefined: heapify\n/tmp/tmp5su2h1t1_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n < 1 || n > len(nums) {\n        return nil\n    }\n\n    heap := make([]int, n)\n    copy(heap, nums[:n])\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_adjust(heap, i, n)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_adjust(heap, 0, n)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm093u8f7_test.go:17:9: undefined: heap_adjust\n/tmp/tmpm093u8f7_test.go:23:13: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nil\n    }\n    var heap = make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdbkkbfut_test.go:18:9: undefined: heapify\n/tmp/tmpdbkkbfut_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n\n    if n > len(nums) {\n        n = len(nums)\n    }\n\n    // build a heap\n    for i := n/2; i >= 0; i-- {\n        heapify(nums, i, n)\n    }\n\n    // sort the heap\n    for i := n-1; i >= 1; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    }\n\n    return nums[:n]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnrfsf3g5_test.go:20:9: undefined: heapify\n/tmp/tmpnrfsf3g5_test.go:26:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    heap := nums[:n]\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpub22qle__test.go:18:9: undefined: heapify\n/tmp/tmpub22qle__test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build a min heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1hydvklt_test.go:22:9: undefined: heapify\n/tmp/tmp1hydvklt_test.go:27:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build a max heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    // insert the rest of the numbers\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    // sort the heap\n    for i := n - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap, 0, i)\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu_wb50c2_test.go:22:9: undefined: heapify\n/tmp/tmpu_wb50c2_test.go:28:13: undefined: heapify\n/tmp/tmpu_wb50c2_test.go:34:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // extract the top n elements\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpux59l39a_test.go:18:9: undefined: heapify\n/tmp/tmpux59l39a_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop the max n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums, 0, len(nums) - 1 - i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplo76afur_test.go:18:9: undefined: heapify\n/tmp/tmplo76afur_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build heap\n    for i := n / 2; i >= 0; i-- {\n        heapify(nums, i, n)\n    }\n    // heap sort\n    for i := n; i < len(nums); i++ {\n        if nums[i] > nums[0] {\n            nums[0], nums[i] = nums[i], nums[0]\n            heapify(nums, 0, n)\n        }\n    }\n    return nums[:n]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2bmkv4mr_test.go:18:9: undefined: heapify\n/tmp/tmp2bmkv4mr_test.go:24:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i)\n    }\n    // insert\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n    // sort\n    for i := n - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap[:i], 0)\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsgj5ybwl_test.go:22:9: undefined: heapify\n/tmp/tmpsgj5ybwl_test.go:28:13: undefined: heapify\n/tmp/tmpsgj5ybwl_test.go:34:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := (len(nums) - 1) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums, 0, len(nums) - 1 - i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpariwkat6_test.go:18:9: undefined: heapify\n/tmp/tmpariwkat6_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // extract the top n numbers\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa6f1tkk1_test.go:19:9: undefined: heapify\n/tmp/tmpa6f1tkk1_test.go:25:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n\n    var heap []int\n    for _, num := range nums {\n        heap = append(heap, num)\n        if len(heap) > n {\n            heap = heap[1:]\n        }\n        heap = heapify(heap)\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpizldcrb6_test.go:20:16: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    var result []int\n    for i := 0; i < n; i++ {\n        result = append(result, nums[i])\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(result, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > result[0] {\n            result[0] = nums[i]\n            heapify(result, 0)\n        }\n    }\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0dsj16n__test.go:18:9: undefined: heapify\n/tmp/tmp0dsj16n__test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i)\n    }\n    // pop n largest numbers\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums[:len(nums) - 1 - i], 0)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwakrrsxs_test.go:15:9: undefined: heapify\n/tmp/tmpwakrrsxs_test.go:20:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n\n    if n >= len(nums) {\n        return nums\n    }\n\n    // build a max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop the top n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123577,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp02sb3mxs_test.go:20:9: undefined: heapify\n/tmp/tmp02sb3mxs_test.go:26:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums, 0, len(nums) - 1 - i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2gjvkjju_test.go:15:9: undefined: heapify\n/tmp/tmp2gjvkjju_test.go:20:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build a heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq_f3yvdw_test.go:18:9: undefined: heapify\n/tmp/tmpq_f3yvdw_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums, 0, len(nums) - 1 - i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi0_ffevp_test.go:18:9: undefined: heapify\n/tmp/tmpi0_ffevp_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 || n > len(nums) {\n        return nil\n    }\n\n    heap := make([]int, n)\n    copy(heap, nums[:n])\n    heapify(heap)\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm7_u2tgb_test.go:16:5: undefined: heapify\n/tmp/tmpm7_u2tgb_test.go:21:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n\n    // init heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i)\n    }\n\n    // insert\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n\n    // sort\n    for i := n - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfig4xvcg_test.go:23:9: undefined: heapify\n/tmp/tmpfig4xvcg_test.go:30:13: undefined: heapify\n/tmp/tmpfig4xvcg_test.go:37:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n == 0 {\n        return nil\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build heap\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-i-1] = nums[len(nums)-i-1], nums[0]\n        heapify(nums, 0, len(nums)-i-1)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1ksrepah_test.go:18:9: undefined: heapify\n/tmp/tmp1ksrepah_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nil\n    }\n    // build a max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // extract the largest n elements\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph40zwkwg_test.go:15:9: undefined: heapify\n/tmp/tmph40zwkwg_test.go:20:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return nil\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    var result []int\n    for i := 0; i < n; i++ {\n        result = append(result, nums[i])\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heap_adjust(result, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > result[0] {\n            result[0] = nums[i]\n            heap_adjust(result, 0, n)\n        }\n    }\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkb9d7lvk_test.go:21:9: undefined: heap_adjust\n/tmp/tmpkb9d7lvk_test.go:26:13: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nums\n    }\n\n    // build a min heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums, 0, len(nums) - 1 - i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1i4gcne5_test.go:16:9: undefined: heapify\n/tmp/tmp1i4gcne5_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_adjust(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_adjust(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123585,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbgi_nyxu_test.go:21:9: undefined: heap_adjust\n/tmp/tmpbgi_nyxu_test.go:26:13: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) <= n {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl__zzkd__test.go:18:9: undefined: heapify\n/tmp/tmpl__zzkd__test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nil\n    }\n\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp70b7z2d__test.go:20:9: undefined: heapify\n/tmp/tmp70b7z2d__test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n <= 0 {\n        return []int{}\n    }\n\n    // build a max heap\n    heap := build_max_heap(nums)\n\n    // pop n times\n    for i := 0; i < n; i++ {\n        heap = pop_max(heap)\n    }\n\n    // return the result\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnvawzrtk_test.go:15:13: undefined: build_max_heap\n/tmp/tmpnvawzrtk_test.go:19:16: undefined: pop_max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplapoxhxb_test.go:21:9: undefined: heapify\n/tmp/tmplapoxhxb_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heap_queue_largest_heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_queue_largest_heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123592,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgkc4dub7_test.go:18:9: undefined: heap_queue_largest_heapify\n/tmp/tmpgkc4dub7_test.go:23:13: undefined: heap_queue_largest_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n\n    var result []int\n    for i := 0; i < n; i++ {\n        result = append(result, nums[i])\n    }\n\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(result, i, n)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > result[0] {\n            result[0] = nums[i]\n            heapify(result, 0, n)\n        }\n    }\n\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl450b2lv_test.go:20:9: undefined: heapify\n/tmp/tmpl450b2lv_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpewrdpqlh_test.go:21:9: undefined: heapify\n/tmp/tmpewrdpqlh_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // extract top n elements\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj7qyrth7_test.go:18:9: undefined: heapify\n/tmp/tmpj7qyrth7_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    // make a min heap\n    heap := make([]int, 0)\n    for _, num := range nums {\n        if len(heap) < n {\n            heap = append(heap, num)\n            // bubble up\n            i := len(heap) - 1\n            for i > 0 {\n                if heap[i] < heap[(i-1)/2] {\n                    heap[i], heap[(i-1)/2] = heap[(i-1)/2], heap[i]\n                    i = (i-1)/2\n                } else {\n                    break\n                }\n            }\n        } else {\n            if num > heap[0] {\n                heap[0] = num\n                // bubble down\n                i := 0\n                for i < len(heap) {\n                    if 2*i+1 < len(heap) {\n                        if 2*i+2 < len(heap) {\n                            if heap[2*i+1] < heap[2*i+2] {\n                                if heap[i] > heap[2*i+1] {\n                                    heap[i], heap[2*i+1] = heap[2*i+1], heap[i]\n                                    i = 2*i+1\n                                } else {\n                                    break\n                                }\n                            } else {\n                                if heap[i] > heap[2*i+2] {\n                                    heap[i], heap[2*i+2] = heap[2*i+2], heap[i]\n                                    i = 2*i+2\n                                } else {\n                                    break\n                                }\n                            }\n                        } else {\n                            if heap[i] > heap[2*i+1] {\n                                heap[i], heap[2*i+1] = heap[2*i+1], heap[i]\n                                i = 2*i+1\n                            } else {\n                                break\n                            }\n                        }\n                    } else {\n                        break\n                    }\n                }\n            }\n        }\n    }\n    // pop all elements\n    for i := 0; i < n/2; i\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp0rv0o_ka_test.go:64:27: expected '{', found newline\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // create a max heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpztaa_0d7_test.go:22:9: undefined: heapify\n/tmp/tmpztaa_0d7_test.go:27:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    // create a max heap\n    heap := make([]int, 0)\n    for _, num := range nums {\n        heap = append(heap, num)\n        heap = heap_queue_max_heapify(heap)\n    }\n    // extract the largest n numbers\n    result := make([]int, 0)\n    for i := 0; i < n; i++ {\n        result = append(result, heap[0])\n        heap = heap_queue_extract_max(heap)\n    }\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjj1m8q9g_test.go:14:16: undefined: heap_queue_max_heapify\n/tmp/tmpjj1m8q9g_test.go:20:16: undefined: heap_queue_extract_max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    // heapify\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i)\n    }\n\n    // pop\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - i - 1] = nums[len(nums) - i - 1], nums[0]\n        heapify(nums[:len(nums) - i - 1], 0)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpauh_6cb2_test.go:12:9: undefined: heapify\n/tmp/tmpauh_6cb2_test.go:18:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nil\n    }\n    var result []int\n    for i := 0; i < n; i++ {\n        result = append(result, nums[i])\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(result, n, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > result[0] {\n            result[0] = nums[i]\n            heapify(result, n, 0)\n        }\n    }\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn6gxst6l_test.go:18:9: undefined: heapify\n/tmp/tmpn6gxst6l_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123589,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvgxy_45v_test.go:21:9: undefined: heapify\n/tmp/tmpvgxy_45v_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heap_queue_largest_heapify(nums, i, len(nums))\n    }\n    // pop the max n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-i-1] = nums[len(nums)-i-1], nums[0]\n        heap_queue_largest_heapify(nums, 0, len(nums)-i-1)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgnpudd30_test.go:18:9: undefined: heap_queue_largest_heapify\n/tmp/tmpgnpudd30_test.go:23:9: undefined: heap_queue_largest_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n > len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop the top n elements\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeylwfwz2_test.go:18:9: undefined: heapify\n/tmp/tmpeylwfwz2_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 || n > len(nums) {\n        return nil\n    }\n\n    // create a max heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    // insert the rest of the numbers into the heap\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    // sort the heap\n    for i := n - 1; i > 0; i-- {\n        heap[i], heap[0] = heap[0], heap[i]\n        heapify(heap, 0, i)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkop2jrw2_test.go:20:9: undefined: heapify\n/tmp/tmpkop2jrw2_test.go:27:13: undefined: heapify\n/tmp/tmpkop2jrw2_test.go:34:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n == 0 {\n        return []int{}\n    }\n\n    if n > len(nums) {\n        n = len(nums)\n    }\n\n    // build a min heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    // insert the rest of the numbers into the heap\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    // sort the heap\n    for i := n - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap, 0, i)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc7gym2bv_test.go:24:9: undefined: heapify\n/tmp/tmpc7gym2bv_test.go:31:13: undefined: heapify\n/tmp/tmpc7gym2bv_test.go:38:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return nil\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_adjust(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_adjust(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxltx67wz_test.go:21:9: undefined: heap_adjust\n/tmp/tmpxltx67wz_test.go:26:13: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build heap\n    for i := n/2-1; i >= 0; i-- {\n        heapify(nums, i, n)\n    }\n    // heap sort\n    for i := n; i < len(nums); i++ {\n        if nums[i] > nums[0] {\n            nums[0], nums[i] = nums[i], nums[0]\n            heapify(nums, 0, n)\n        }\n    }\n    return nums[:n]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbcq6zobx_test.go:18:9: undefined: heapify\n/tmp/tmpbcq6zobx_test.go:24:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n\n    // build a max heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphooxb1xc_test.go:19:9: undefined: heapify\n/tmp/tmphooxb1xc_test.go:25:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nums\n    }\n    // build a heap\n    for i := len(nums)/2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4h0ruwwx_test.go:15:9: undefined: heapify\n/tmp/tmp4h0ruwwx_test.go:20:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n\n    if len(nums) <= n {\n        return nums\n    }\n\n    // build a max heap\n    heap := nums[:n]\n    for i := n/2; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp68ua0_k_test.go:21:9: undefined: heapify\n/tmp/tmpp68ua0_k_test.go:27:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 || n > len(nums) {\n        return nil\n    }\n\n    // build a min heap\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(nums, n, i)\n    }\n\n    // extract the top n elements\n    for i := n; i < len(nums); i++ {\n        if nums[i] > nums[0] {\n            nums[0], nums[i] = nums[i], nums[0]\n            heapify(nums, n, 0)\n        }\n    }\n\n    // reverse the result\n    for i := 0; i < n/2; i++ {\n        nums[i], nums[n-1-i] = nums[n-1-i], nums[i]\n    }\n\n    return nums[:n]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsas4zfbn_test.go:16:9: undefined: heapify\n/tmp/tmpsas4zfbn_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i)\n    }\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums[:len(nums) - 1 - i], 0)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpup8ej4sv_test.go:12:9: undefined: heapify\n/tmp/tmpup8ej4sv_test.go:17:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    copy(heap, nums[:n])\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdg2c4je9_test.go:19:9: undefined: heapify\n/tmp/tmpdg2c4je9_test.go:24:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    if n == len(nums) {\n        return heap_queue_sort(nums)\n    }\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = nums[i]\n    }\n    heap_queue_build(result)\n    for i := n; i < len(nums); i++ {\n        if nums[i] > result[0] {\n            result[0] = nums[i]\n            heap_queue_adjust(result, 0, n)\n        }\n    }\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3jul2enm_test.go:14:16: undefined: heap_queue_sort\n/tmp/tmp3jul2enm_test.go:20:5: undefined: heap_queue_build\n/tmp/tmp3jul2enm_test.go:24:13: undefined: heap_queue_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nil\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_queue_largest_heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_queue_largest_heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpodax2tkq_test.go:18:9: undefined: heap_queue_largest_heapify\n/tmp/tmpodax2tkq_test.go:23:13: undefined: heap_queue_largest_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n\n    if n > len(nums) {\n        n = len(nums)\n    }\n\n    // build a max heap\n    build_max_heap(nums)\n\n    // remove the largest n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        max_heapify(nums[:len(nums) - 1 - i], 0)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy6qvjq6q_test.go:19:5: undefined: build_max_heap\n/tmp/tmpy6qvjq6q_test.go:24:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf3x5fdaw_test.go:18:9: undefined: heapify\n/tmp/tmpf3x5fdaw_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    nums = append(nums, make([]int, n)...)\n    for i := len(nums) - 1; i >= 0; i-- {\n        nums[i] = nums[i / 2]\n    }\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[i] = nums[0]\n        nums[0] = nums[i]\n        for j := 0; j < i; j++ {\n            nums[j] = nums[j / 2]\n        }\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123596,
      "stdout": "--- FAIL: TestHeap_Queue_Largest (0.00s)\n    --- FAIL: TestHeap_Queue_Largest/test_num__0 (0.00s)\n        tmpv8bu4e6m_test.go:45: expected '[%!s(int=85) %!s(int=75) %!s(int=65)]', got '[%!s(int=25) %!s(int=25) %!s(int=25)]'\n    --- FAIL: TestHeap_Queue_Largest/test_num__1 (0.00s)\n        tmpv8bu4e6m_test.go:45: expected '[%!s(int=85) %!s(int=75)]', got '[%!s(int=25) %!s(int=25)]'\n    --- FAIL: TestHeap_Queue_Largest/test_num__2 (0.00s)\n        tmpv8bu4e6m_test.go:45: expected '[%!s(int=85) %!s(int=75) %!s(int=65) %!s(int=58) %!s(int=35)]', got '[%!s(int=25) %!s(int=25) %!s(int=25) %!s(int=25) %!s(int=25)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp78jps8uu_test.go:21:9: undefined: heapify\n/tmp/tmp78jps8uu_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := nums[:n]\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7nds3zpl_test.go:18:9: undefined: heapify\n/tmp/tmp7nds3zpl_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nil\n    }\n\n    // create a max heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    // insert the rest of the numbers\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    // sort the heap\n    for i := n-1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap, 0, i)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp5mf0t9z_test.go:20:9: undefined: heapify\n/tmp/tmpp5mf0t9z_test.go:27:13: undefined: heapify\n/tmp/tmpp5mf0t9z_test.go:34:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop the top n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpuvy96nex_test.go:15:9: undefined: heapify\n/tmp/tmpuvy96nex_test.go:20:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n <= 0 {\n        return []int{}\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - i - 1] = nums[len(nums) - i - 1], nums[0]\n        heapify(nums, 0, len(nums) - i - 1)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf8enswnq_test.go:16:9: undefined: heapify\n/tmp/tmpf8enswnq_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    // build a min heap\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i)\n    }\n    // pop the smallest n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums[:len(nums)-1-i], 0)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaq_fi8mz_test.go:15:9: undefined: heapify\n/tmp/tmpaq_fi8mz_test.go:20:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n\n    if n >= len(nums) {\n        return nums\n    }\n\n    // build a min heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i)\n    }\n\n    // insert the rest of the numbers into the heap\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n\n    // sort the heap\n    for i := n - 1; i >= 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzee6paae_test.go:24:9: undefined: heapify\n/tmp/tmpzee6paae_test.go:31:13: undefined: heapify\n/tmp/tmpzee6paae_test.go:38:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    var result []int\n    for i := 0; i < n; i++ {\n        result = append(result, nums[i])\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_adjust(result, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > result[0] {\n            result[0] = nums[i]\n            heap_adjust(result, 0, n)\n        }\n    }\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprewb0in7_test.go:18:9: undefined: heap_adjust\n/tmp/tmprewb0in7_test.go:23:13: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n\n    if n >= len(nums) {\n        return nums\n    }\n\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi_0xqauh_test.go:24:9: undefined: heapify\n/tmp/tmpi_0xqauh_test.go:30:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build a max heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_adjust(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_adjust(heap, 0, n)\n        }\n    }\n    // sort the heap\n    for i := n - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heap_adjust(heap, 0, i)\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo80os4uf_test.go:22:9: undefined: heap_adjust\n/tmp/tmpo80os4uf_test.go:27:13: undefined: heap_adjust\n/tmp/tmpo80os4uf_test.go:33:9: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510495,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpewrdpqlh_test.go:21:9: undefined: heapify\n/tmp/tmpewrdpqlh_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nil\n    }\n\n    // build a heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm_67e4fx_test.go:20:9: undefined: heapify\n/tmp/tmpm_67e4fx_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123573,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvum0e5ia_test.go:18:9: undefined: heapify\n/tmp/tmpvum0e5ia_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n\n    if n >= len(nums) {\n        return nums\n    }\n\n    // build a min heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_a4m99wz_test.go:25:9: undefined: heapify\n/tmp/tmp_a4m99wz_test.go:31:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n\n    // build a max heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    // insert the rest of the numbers into the heap\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    // sort the heap\n    for i := n - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap, 0, i)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz_xftido_test.go:23:9: undefined: heapify\n/tmp/tmpz_xftido_test.go:30:13: undefined: heapify\n/tmp/tmpz_xftido_test.go:37:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfo2ocihd_test.go:21:9: undefined: heapify\n/tmp/tmpfo2ocihd_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return nil\n    }\n\n    if n >= len(nums) {\n        return nums\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop the top n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums, 0, len(nums) - 1 - i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy452tjes_test.go:20:9: undefined: heapify\n/tmp/tmpy452tjes_test.go:26:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        max_heapify(nums, i, len(nums))\n    }\n\n    // extract the top n elements\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        max_heapify(nums, 0, i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsnaf2gux_test.go:16:9: undefined: max_heapify\n/tmp/tmpsnaf2gux_test.go:22:9: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    // build a max heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        max_heapify(heap, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            max_heapify(heap, 0)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplava0e5t_test.go:22:9: undefined: max_heapify\n/tmp/tmplava0e5t_test.go:27:13: undefined: max_heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplapoxhxb_test.go:21:9: undefined: heapify\n/tmp/tmplapoxhxb_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510497,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz1gbrewt_test.go:21:9: undefined: heapify\n/tmp/tmpz1gbrewt_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123570,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxsu2gnr3_test.go:21:9: undefined: heapify\n/tmp/tmpxsu2gnr3_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123572,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4eq2wey9_test.go:18:9: undefined: heapify\n/tmp/tmp4eq2wey9_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    copy(heap, nums[:n])\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4a1r6tnn_test.go:19:9: undefined: heapify\n/tmp/tmp4a1r6tnn_test.go:24:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nums\n    }\n\n    heap := make([]int, 0)\n    for _, num := range nums {\n        if len(heap) < n {\n            heap = append(heap, num)\n            if len(heap) == n {\n                build_heap(heap)\n            }\n        } else {\n            if num > heap[0] {\n                heap[0] = num\n                heapify(heap, 0)\n            }\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbbe1lg3d_test.go:19:17: undefined: build_heap\n/tmp/tmpbbe1lg3d_test.go:24:17: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nil\n    }\n\n    // build a min heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // extract the top n elements\n    ret := make([]int, n)\n    for i := 0; i < n; i++ {\n        ret[i] = nums[0]\n        nums[0] = nums[len(nums) - 1]\n        nums = nums[:len(nums) - 1]\n        heapify(nums, 0, len(nums))\n    }\n\n    return ret\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz6b4bq3__test.go:16:9: undefined: heapify\n/tmp/tmpz6b4bq3__test.go:25:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop the top n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - i - 1] = nums[len(nums) - i - 1], nums[0]\n        heapify(nums, 0, len(nums) - i - 1)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6739n1s1_test.go:15:9: undefined: heapify\n/tmp/tmp6739n1s1_test.go:20:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n\n    if n >= len(nums) {\n        return nums\n    }\n\n    var heap []int\n    for i := 0; i < n; i++ {\n        heap = append(heap, nums[i])\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj7xpjqeh_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_adjust(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_adjust(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo4w7f07l_test.go:21:9: undefined: heap_adjust\n/tmp/tmpo4w7f07l_test.go:26:13: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heap_adjust(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heap_adjust(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123597,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb8a7gzdr_test.go:18:9: undefined: heap_adjust\n/tmp/tmpb8a7gzdr_test.go:23:13: undefined: heap_adjust\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123598,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp93ukce_t_test.go:18:9: undefined: heapify\n/tmp/tmp93ukce_t_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123594,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpf3x5fdaw_test.go:18:9: undefined: heapify\n/tmp/tmpf3x5fdaw_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return nil\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap_queue_largest_helper(nums, n)\n    for i := n; i < len(nums); i++ {\n        if nums[i] > nums[0] {\n            nums[0] = nums[i]\n            heap_queue_largest_helper(nums[:n], n)\n        }\n    }\n    return nums[:n]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz6rmpk6a_test.go:16:5: undefined: heap_queue_largest_helper\n/tmp/tmpz6rmpk6a_test.go:20:13: undefined: heap_queue_largest_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    heap := make([]int, n)\n    copy(heap, nums[:n])\n    for i := n / 2; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv76c8iky_test.go:19:9: undefined: heapify\n/tmp/tmpv76c8iky_test.go:24:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n\n    // build a max heap\n    for i := len(nums) / 2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // pop the top n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums, 0, len(nums) - 1 - i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqm6tp6ld_test.go:16:9: undefined: heapify\n/tmp/tmpqm6tp6ld_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    result := make([]int, n)\n    for i := 0; i < n; i++ {\n        result[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(result, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > result[0] {\n            result[0] = nums[i]\n            heapify(result, 0, n)\n        }\n    }\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq5rbypkt_test.go:21:9: undefined: heapify\n/tmp/tmpq5rbypkt_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n == 0 {\n        return []int{}\n    }\n\n    if n > len(nums) {\n        n = len(nums)\n    }\n\n    // build a min heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    // sort the heap\n    for i := n - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap, 0, i)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcsedd_pm_test.go:24:9: undefined: heapify\n/tmp/tmpcsedd_pm_test.go:30:13: undefined: heapify\n/tmp/tmpcsedd_pm_test.go:37:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123575,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpc6jwwk2l_test.go:18:9: undefined: heapify\n/tmp/tmpc6jwwk2l_test.go:23:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{nums[0]}\n    }\n    if n == len(nums) {\n        return nums\n    }\n    if n > len(nums) {\n        return nums\n    }\n    // build a max heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    // compare the rest of the numbers with the root of the heap\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7bmrragz_test.go:28:9: undefined: heapify\n/tmp/tmp7bmrragz_test.go:34:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return nil\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build a min heap\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(nums, i, n)\n    }\n    // heapify the rest\n    for i := n; i < len(nums); i++ {\n        if nums[i] > nums[0] {\n            nums[0] = nums[i]\n            heapify(nums, 0, n)\n        }\n    }\n    // sort the heap\n    for i := n - 1; i > 0; i-- {\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, 0, i)\n    }\n    return nums[:n]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpftanag4k_test.go:18:9: undefined: heapify\n/tmp/tmpftanag4k_test.go:24:13: undefined: heapify\n/tmp/tmpftanag4k_test.go:30:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    // build a max heap\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i)\n    }\n    // pop n times\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums[:len(nums)-1-i], 0)\n    }\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0b6rc2c3_test.go:15:9: undefined: heapify\n/tmp/tmp0b6rc2c3_test.go:20:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n > len(nums) {\n        return nums\n    }\n    if n == len(nums) {\n        return nums\n    }\n    if n == 1 {\n        return []int{max(nums)}\n    }\n    if n == 0 {\n        return []int{}\n    }\n    result := make([]int, n)\n    result[0] = max(nums)\n    for i := 1; i < n; i++ {\n        result[i] = max(nums[:result[i-1]])\n    }\n    return result\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqo57c439_test.go:17:22: undefined: max\n/tmp/tmpqo57c439_test.go:23:17: undefined: max\n/tmp/tmpqo57c439_test.go:25:21: undefined: max\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 {\n        return []int{}\n    }\n    if n > len(nums) {\n        n = len(nums)\n    }\n    // build a max heap\n    for i := len(nums) / 2 - 1; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n    // pop the top n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums, 0, len(nums) - 1 - i)\n    }\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbmcwk9hh_test.go:18:9: undefined: heapify\n/tmp/tmpbmcwk9hh_test.go:23:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n <= 0 {\n        return []int{}\n    }\n\n    if n > len(nums) {\n        n = len(nums)\n    }\n\n    heap := make([]int, n)\n    copy(heap, nums[:n])\n\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmponvqepc4_test.go:22:9: undefined: heapify\n/tmp/tmponvqepc4_test.go:28:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n <= 0 {\n        return []int{}\n    }\n    if n >= len(nums) {\n        return nums\n    }\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123572,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphcq04zkk_test.go:21:9: undefined: heapify\n/tmp/tmphcq04zkk_test.go:26:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) == 0 || n == 0 {\n        return []int{}\n    }\n\n    // build a max heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n / 2 - 1; i >= 0; i-- {\n        heapify(heap, i)\n    }\n\n    // insert the rest of the numbers\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0)\n        }\n    }\n\n    // sort the heap\n    for i := n - 1; i > 0; i-- {\n        heap[0], heap[i] = heap[i], heap[0]\n        heapify(heap[:i], 0)\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4_5i7i2f_test.go:20:9: undefined: heapify\n/tmp/tmp4_5i7i2f_test.go:27:13: undefined: heapify\n/tmp/tmp4_5i7i2f_test.go:34:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) <= n {\n        return nums\n    }\n\n    // build a heap\n    heap := make([]int, n)\n    for i := 0; i < n; i++ {\n        heap[i] = nums[i]\n    }\n    for i := n/2 - 1; i >= 0; i-- {\n        heapify(heap, i, n)\n    }\n\n    // insert the rest of the numbers\n    for i := n; i < len(nums); i++ {\n        if nums[i] > heap[0] {\n            heap[0] = nums[i]\n            heapify(heap, 0, n)\n        }\n    }\n\n    return heap\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_9qoy_t_test.go:20:9: undefined: heapify\n/tmp/tmpx_9qoy_t_test.go:27:13: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nums\n    }\n\n    // build a max heap\n    for i := len(nums)/2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // extract the top n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums)-1-i] = nums[len(nums)-1-i], nums[0]\n        heapify(nums, 0, len(nums)-1-i)\n    }\n\n    return nums[len(nums)-n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4pg_qap3_test.go:16:9: undefined: heapify\n/tmp/tmp4pg_qap3_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if len(nums) < n {\n        return nil\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i, len(nums))\n    }\n\n    // extract the top n elements\n    for i := len(nums) - 1; i >= len(nums) - n; i-- {\n        nums[0], nums[i] = nums[i], nums[0]\n        heapify(nums, 0, i)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz6z7tz28_test.go:16:9: undefined: heapify\n/tmp/tmpz6z7tz28_test.go:22:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package heap_queue_largest_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the n largest integers from a given list of numbers, returned in descending order.\nfunc heap_queue_largest(nums []int, n int) []int {\n    if n < 1 {\n        return []int{}\n    }\n\n    if n > len(nums) {\n        n = len(nums)\n    }\n\n    // build a max heap\n    for i := len(nums) / 2; i >= 0; i-- {\n        heapify(nums, i)\n    }\n\n    // pop the largest n elements\n    for i := 0; i < n; i++ {\n        nums[0], nums[len(nums) - 1 - i] = nums[len(nums) - 1 - i], nums[0]\n        heapify(nums[:len(nums) - 1 - i], 0)\n    }\n\n    return nums[len(nums) - n:]\n}\n\nfunc TestHeap_Queue_Largest(t *testing.T) {\n  candidate := heap_queue_largest\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 3), expected: []int{85, 75, 65} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 2), expected: []int{85, 75} },\n     { actual: candidate([]int{25, 35, 22, 85, 14, 65, 75, 22, 58}, 5), expected: []int{85, 75, 65, 58, 35} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123599,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu_ydawio_test.go:20:9: undefined: heapify\n/tmp/tmpu_ydawio_test.go:26:9: undefined: heapify\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}