{
  "name": "mbpp_740_tuple_to_dict",
  "language": "go_test.go",
  "prompt": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_740_tuple_to_dict.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    if len(test_tup) % 2 != 0 {\n        panic(\"Tuple length must be even\")\n    }\n\n    test_dict := make(map[int]int)\n\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict map[int]int\n    test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[i] = i + 1\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "--- FAIL: TestTuple_To_Dict (0.00s)\n    --- FAIL: TestTuple_To_Dict/test_num__0 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=5) %!s(int=7):%!s(int=10) %!s(int=13):%!s(int=5)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__1 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=2) %!s(int=3):%!s(int=4) %!s(int=5):%!s(int=6)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__2 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=7):%!s(int=8) %!s(int=9):%!s(int=10) %!s(int=11):%!s(int=12)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict map[int]int = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    if len(test_tup) % 2 != 0 {\n        panic(\"Tuple length must be even\")\n    }\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    if len(test_tup) % 2 != 0 {\n        panic(\"Tuple must have an even number of elements\")\n    }\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[i] = i + 1\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "--- FAIL: TestTuple_To_Dict (0.00s)\n    --- FAIL: TestTuple_To_Dict/test_num__0 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=5) %!s(int=7):%!s(int=10) %!s(int=13):%!s(int=5)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__1 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=2) %!s(int=3):%!s(int=4) %!s(int=5):%!s(int=6)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__2 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=7):%!s(int=8) %!s(int=9):%!s(int=10) %!s(int=11):%!s(int=12)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_map = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_map[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_map\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    result := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict map[int]int\n    test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    result := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[i] = i + 1\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "--- FAIL: TestTuple_To_Dict (0.00s)\n    --- FAIL: TestTuple_To_Dict/test_num__0 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=5) %!s(int=7):%!s(int=10) %!s(int=13):%!s(int=5)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__1 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=2) %!s(int=3):%!s(int=4) %!s(int=5):%!s(int=6)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__2 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=7):%!s(int=8) %!s(int=9):%!s(int=10) %!s(int=11):%!s(int=12)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[i] = i + 1\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "--- FAIL: TestTuple_To_Dict (0.00s)\n    --- FAIL: TestTuple_To_Dict/test_num__0 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=5) %!s(int=7):%!s(int=10) %!s(int=13):%!s(int=5)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__1 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=2) %!s(int=3):%!s(int=4) %!s(int=5):%!s(int=6)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__2 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=7):%!s(int=8) %!s(int=9):%!s(int=10) %!s(int=11):%!s(int=12)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result map[int]int = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict map[int]int\n    test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    if len(test_tup) % 2 != 0 {\n        panic(\"Odd number of elements in tuple\")\n    }\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i+=2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i+=2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.008s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict map[int]int\n    test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var new_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        new_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return new_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    // Create a map to store the key-value pairs.\n    test_dict := make(map[int]int)\n\n    // Iterate through the tuple.\n    for i := 0; i < len(test_tup); i += 2 {\n        // Add the key-value pair to the map.\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n\n    // Return the map.\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result map[int]int = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return result_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[i] = i + 1\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "--- FAIL: TestTuple_To_Dict (0.00s)\n    --- FAIL: TestTuple_To_Dict/test_num__0 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=5) %!s(int=7):%!s(int=10) %!s(int=13):%!s(int=5)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__1 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=2) %!s(int=3):%!s(int=4) %!s(int=5):%!s(int=6)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__2 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=7):%!s(int=8) %!s(int=9):%!s(int=10) %!s(int=11):%!s(int=12)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict map[int]int\n    test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i+=2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    // Create a map to store the key-value pairs\n    test_map := make(map[int]int)\n\n    // Iterate through the tuple\n    for i := 0; i < len(test_tup); i += 2 {\n        // Add the key-value pair to the map\n        test_map[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n\n    // Return the map\n    return test_map\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    if len(test_tup) % 2 != 0 {\n        panic(\"The tuple must have an even number of elements\")\n    }\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    if len(test_tup) % 2 != 0 {\n        return nil\n    }\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    if len(test_tup) % 2 != 0 {\n        panic(\"Tuple must have an even number of elements\")\n    }\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[i] = i + 1\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "--- FAIL: TestTuple_To_Dict (0.00s)\n    --- FAIL: TestTuple_To_Dict/test_num__0 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=5) %!s(int=7):%!s(int=10) %!s(int=13):%!s(int=5)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__1 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=2) %!s(int=3):%!s(int=4) %!s(int=5):%!s(int=6)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__2 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=7):%!s(int=8) %!s(int=9):%!s(int=10) %!s(int=11):%!s(int=12)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    if len(test_tup) % 2 != 0 {\n        panic(\"Tuple length must be even\")\n    }\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122720,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[i] = i + 1\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "--- FAIL: TestTuple_To_Dict (0.00s)\n    --- FAIL: TestTuple_To_Dict/test_num__0 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=5) %!s(int=7):%!s(int=10) %!s(int=13):%!s(int=5)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__1 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=2) %!s(int=3):%!s(int=4) %!s(int=5):%!s(int=6)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__2 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=7):%!s(int=8) %!s(int=9):%!s(int=10) %!s(int=11):%!s(int=12)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    result := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var result = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        result[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return result\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict map[int]int = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122720,
      "stdout": "ok  \tcommand-line-arguments\t0.005s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.006s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    test_dict := make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[i] = i + 1\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517229,
      "stdout": "--- FAIL: TestTuple_To_Dict (0.00s)\n    --- FAIL: TestTuple_To_Dict/test_num__0 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=5) %!s(int=7):%!s(int=10) %!s(int=13):%!s(int=5)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__1 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=1):%!s(int=2) %!s(int=3):%!s(int=4) %!s(int=5):%!s(int=6)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\n    --- FAIL: TestTuple_To_Dict/test_num__2 (0.00s)\n        tmpna0wy7ot_test.go:32: expected 'map[%!s(int=7):%!s(int=8) %!s(int=9):%!s(int=10) %!s(int=11):%!s(int=12)]', got 'map[%!s(int=0):%!s(int=1) %!s(int=2):%!s(int=3) %!s(int=4):%!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    if len(test_tup) % 2 != 0 {\n        return nil\n    }\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122720,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i+1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665517228,
      "stdout": "ok  \tcommand-line-arguments\t0.002s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package tuple_to_dict_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\nfunc tuple_to_dict(test_tup []interface{}) map[int]int {\n    var test_dict = make(map[int]int)\n    for i := 0; i < len(test_tup); i += 2 {\n        test_dict[test_tup[i].(int)] = test_tup[i + 1].(int)\n    }\n    return test_dict\n}\n\nfunc TestTuple_To_Dict(t *testing.T) {\n  candidate := tuple_to_dict\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]interface{}{1, 5, 7, 10, 13, 5}), expected: map[int]int{1: 5, 7: 10, 13: 5} },\n     { actual: candidate([]interface{}{1, 2, 3, 4, 5, 6}), expected: map[int]int{1: 2, 3: 4, 5: 6} },\n     { actual: candidate([]interface{}{7, 8, 9, 10, 11, 12}), expected: map[int]int{7: 8, 9: 10, 11: 12} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122719,
      "stdout": "ok  \tcommand-line-arguments\t0.007s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}