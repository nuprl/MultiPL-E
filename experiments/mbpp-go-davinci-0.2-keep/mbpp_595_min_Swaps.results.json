{
  "name": "mbpp_595_min_Swaps",
  "language": "go_test.go",
  "prompt": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    if len(str1) != len(str2) {\n        return \"Invalid Input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp89c43jq1_test.go:38: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp89c43jq1_test.go:38: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmp1an_yd3h_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    if len(str1) != len(str2) {\n        return \"Not Possible\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpio0m7e_8_test.go:38: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpio0m7e_8_test.go:38: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpxxv916sq_test.go:28: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpxxv916sq_test.go:28: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpxxv916sq_test.go:28: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Invalid Input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpr4w1mgtw_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpr4w1mgtw_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpt_er3q3u_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpt_er3q3u_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpt_er3q3u_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Invalid Input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count/2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpsdc2aho9_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpsdc2aho9_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmp1an_yd3h_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmp1an_yd3h_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    // return \"Not Implemented\"\n    if len(str1) != len(str2) {\n        return \"Not Implemented\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp6jdfrv_2_test.go:39: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp6jdfrv_2_test.go:39: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    // return \"Not Implemented\"\n    if len(str1) != len(str2) {\n        return \"Invalid Input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpkdzva48z_test.go:39: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpkdzva48z_test.go:39: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmp1an_yd3h_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmp1an_yd3h_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmp1an_yd3h_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Not Possible\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpfkgw278w_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpfkgw278w_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    if len(str1) != len(str2) {\n        return \"Invalid input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpsq1hyn1e_test.go:38: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpsq1hyn1e_test.go:38: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.010s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpt_er3q3u_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpt_er3q3u_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpt_er3q3u_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Invalid Input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpr4w1mgtw_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpr4w1mgtw_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpt_er3q3u_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpt_er3q3u_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpt_er3q3u_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return -1\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpwtw01o7h_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpwtw01o7h_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmp1an_yd3h_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // TODO: implement\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpw3yvkz6i_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpw3yvkz6i_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpw3yvkz6i_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Invalid input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpwu37knbv_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpwu37knbv_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"The length of the two strings must be the same\"\n    }\n    var count int\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpcvz9src0_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpcvz9src0_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    if len(str1) != len(str2) {\n        return \"Invalid input\"\n    }\n    count := 0\n    for i := 0; i < len(str1); i++ {\n        if str1[i] != str2[i] {\n            count++\n        }\n    }\n    return count / 2\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666122558,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpwu37knbv_test.go:37: expected 'Not Possible', got '%!s(int=1)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpwu37knbv_test.go:37: expected 'Not Possible', got '%!s(int=0)'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code goes here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmp1an_yd3h_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmp1an_yd3h_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package min_Swaps_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1 string, str2 string) interface{} {\n    // Your code here\n    return nil\n}\n\nfunc TestMin_Swaps(t *testing.T) {\n  candidate := min_Swaps\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"1101\", \"1110\"), expected: 1 },\n     { actual: candidate(\"111\", \"000\"), expected: \"Not Possible\" },\n     { actual: candidate(\"111\", \"110\"), expected: \"Not Possible\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665509823,
      "stdout": "--- FAIL: TestMin_Swaps (0.00s)\n    --- FAIL: TestMin_Swaps/test_num__0 (0.00s)\n        tmpg99mjgpn_test.go:29: expected '%!s(int=1)', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__1 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\n    --- FAIL: TestMin_Swaps/test_num__2 (0.00s)\n        tmpg99mjgpn_test.go:29: expected 'Not Possible', got '%!s(<nil>)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}