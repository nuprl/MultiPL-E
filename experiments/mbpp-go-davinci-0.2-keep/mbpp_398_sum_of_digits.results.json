{
  "name": "mbpp_398_sum_of_digits",
  "language": "go_test.go",
  "prompt": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_398_sum_of_digits.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    }\n    if sum < 10 {\n        return sum\n    }\n    return sum_of_digits(sum)\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppbh718g9_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprsopukh6_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, ch := range num {\n                sum += int(ch - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvrm_ojd8_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums := nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for nums > 0 {\n            sum += nums % 10\n            nums /= 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unsupported type: %T\", nums))\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj3a622mn_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpby3i21ev_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []float64:\n        for _, num := range nums.([]float64) {\n            for num > 0 {\n                sum += int(num) % 10\n                num /= 10\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8bokbux_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = sum_of_digits_int(nums.(int))\n    case []int:\n        sum = sum_of_digits_slice(nums.([]int))\n    default:\n        sum = 0\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpskrxhyj__test.go:13:15: undefined: sum_of_digits_int\n/tmp/tmpskrxhyj__test.go:15:15: undefined: sum_of_digits_slice\n/tmp/tmpskrxhyj__test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6rvs7_o1_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n    case []string:\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm01vpy_5_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int = 0\n    switch nums.(type) {\n    case int:\n        num := nums.(int)\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpta0kkcul_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpby3i21ev_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n    case []string:\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0v88qbv0_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    sum := 0\n    switch nums.(type) {\n    case int:\n        num := nums.(int)\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3u2rt2jr_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpby3i21ev_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpno3ftfcc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2ye232_r_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp15h6pc5f_test.go:21:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    sum := 0\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzpa6jcuu_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n        return sum\n    case int:\n        var sum int\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphlb1e2oc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44dn4r_9_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n        case []int:\n            for _, num := range nums.([]int) {\n                for num > 0 {\n                    sum += num % 10\n                    num /= 10\n                }\n            }\n        case []string:\n            for _, num := range nums.([]string) {\n                for _, digit := range num {\n                    sum += int(digit - '0')\n                }\n            }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu4109zjz_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbzh5_ion_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpno3ftfcc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case int:\n        sum := 0\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx_nbq88m_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            for v > 0 {\n                sum += v % 10\n                v /= 10\n            }\n        }\n    case []string:\n        for _, v := range nums.([]string) {\n            for _, c := range v {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl2swv4cm_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int = 0\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7u3zza4s_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpno3ftfcc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpno3ftfcc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2ye232_r_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []float64:\n        for _, num := range nums.([]float64) {\n            sum += int(num)\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjawou927_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num != 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, char := range num {\n                sum += int(char - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpro4f3ojc_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4y_pcyso_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit) - 48\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9l_eaucq_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1s7pr51__test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, n := range num {\n                sum += int(n - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpioqwmzi9_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprsopukh6_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, num := range nums.([]string) {\n            for _, char := range num {\n                sum += int(char - '0')\n            }\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3cwecfsf_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp47nopiit_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n        case []int:\n            var sum int\n            for _, num := range nums.([]int) {\n                sum += sum_of_digits(num)\n            }\n            return sum\n        case int:\n            var sum int\n            for num := nums.(int); num > 0; num /= 10 {\n                sum += num % 10\n            }\n            return sum\n        default:\n            return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaqwihq4o_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            for n > 0 {\n                sum += n % 10\n                n /= 10\n            }\n        }\n    case []string:\n        for _, n := range nums.([]string) {\n            for _, c := range n {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph2ke3_iv_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    }\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp331apu4_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpno3ftfcc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpeop1v_fv_test.go:39:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbzh5_ion_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            for n > 0 {\n                sum += n % 10\n                n /= 10\n            }\n        }\n    case []string:\n        for _, n := range nums.([]string) {\n            for _, c := range n {\n                sum += int(c - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmph2ke3_iv_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = 0\n        for nums > 0 {\n            sum += nums % 10\n            nums /= 10\n        }\n    case []int:\n        sum = 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case []interface{}:\n        sum = 0\n        for _, num := range nums.([]interface{}) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjm4duozn_test.go:14:18: invalid operation: nums > 0 (operator > not defined on interface)\n/tmp/tmpjm4duozn_test.go:15:25: invalid operation: nums % 10 (mismatched types interface {} and int)\n/tmp/tmpjm4duozn_test.go:16:18: invalid operation: nums /= 10 (mismatched types interface {} and int)\n/tmp/tmpjm4duozn_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprsopukh6_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplpeyks4k_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n    case []string:\n        for _, v := range nums.([]string) {\n            sum += sum_of_digits(v)\n        }\n    case string:\n        for _, v := range nums.(string) {\n            sum += sum_of_digits(v)\n        }\n    case rune:\n        sum = int(nums.(rune) - '0')\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphh0y8puf_test.go:40:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, n := range nums.([]int) {\n            for n > 0 {\n                sum += n % 10\n                n /= 10\n            }\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, n := range nums.([]string) {\n            for _, c := range n {\n                sum += int(c - '0')\n            }\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqsenmae2_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, v := range nums.([]int) {\n        for v > 0 {\n            sum += v % 10\n            v /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi5zgzqn3_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int = 0\n    switch nums.(type) {\n    case int:\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxqd49tap_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_riq8r28_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    if sum < 10 {\n        return sum\n    } else {\n        return sum_of_digits(sum)\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjkqgru4r_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprsopukh6_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"Unsupported type: %T\", nums))\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpsjofy2jo_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcxyukfri_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case [][]int:\n        for _, v := range nums.([][]int) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpl_wgns_v_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0byxav9g_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphwy322th_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprsopukh6_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []float64:\n        for _, num := range nums.([]float64) {\n            for num > 0 {\n                sum += int(num) % 10\n                num /= 10\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8bokbux_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    if sum < 10 {\n        return sum\n    }\n    return sum_of_digits(sum)\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9qwdsk_p_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        panic(\"invalid type\")\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3kfhi14b_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6rvs7_o1_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        for nums != 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm9mr66vb_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    }\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp331apu4_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []float64:\n        for _, num := range nums.([]float64) {\n            sum += int(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpggnvxmtw_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp44dn4r_9_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int = 0\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7u3zza4s_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjoipuzqy_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    }\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3hxjsau7_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6rvs7_o1_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw0fvyp4w_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []float64:\n        for _, num := range nums.([]float64) {\n            for num > 0 {\n                sum += int(num) % 10\n                num /= 10\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpy8bokbux_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unexpected type: %T\", nums))\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpn4mbzjyr_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        for nums != 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm9mr66vb_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, n := range nums.([]int) {\n        for n > 0 {\n            sum += n % 10\n            n /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6rvs7_o1_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprsopukh6_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []float64:\n        sum := 0.0\n        for _, v := range nums.([]float64) {\n            sum += v\n        }\n        return int(sum)\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4m58yfdl_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2ye232_r_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n    case []string:\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjd2ma98o_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums := nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for nums > 0 {\n            sum += nums % 10\n            nums /= 10\n        }\n        return sum\n    }\n    return 0\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2e27nogw_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphwy322th_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2g8ww3zv_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n        return sum\n    case int:\n        var sum int\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphlb1e2oc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case int:\n        return sum_of_digits_int(nums.(int))\n    case []int:\n        return sum_of_digits_int_slice(nums.([]int))\n    case []interface{}:\n        return sum_of_digits_interface_slice(nums.([]interface{}))\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcneu545p_test.go:12:16: undefined: sum_of_digits_int\n/tmp/tmpcneu545p_test.go:14:16: undefined: sum_of_digits_int_slice\n/tmp/tmpcneu545p_test.go:16:16: undefined: sum_of_digits_interface_slice\n/tmp/tmpcneu545p_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    }\n    if sum > 9 {\n        return sum_of_digits(sum)\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp85ifu7vs_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int = 0\n    switch nums.(type) {\n    case int:\n        for nums.(int) > 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxqd49tap_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []float64:\n        for _, num := range nums.([]float64) {\n            sum += int(num)\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    default:\n        fmt.Println(\"Unsupported type\")\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8uhbxxl2_test.go:38:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxiv_hh48_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        for nums != 0 {\n            sum += nums.(int) % 10\n            nums = nums.(int) / 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            for num != 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvyhy1hsx_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int = 0\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7u3zza4s_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, char := range num {\n                sum += int(char - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfkyofa0r_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    default:\n        fmt.Println(\"Invalid input\")\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpq7hdtn2s_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpby3i21ev_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    default:\n        panic(\"Unsupported type\")\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmfr86wcj_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxiv_hh48_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n        case []int:\n            var sum int\n            for _, num := range nums.([]int) {\n                sum += sum_of_digits(num)\n            }\n            return sum\n        case int:\n            var sum int\n            for num := nums.(int); num > 0; num /= 10 {\n                sum += num % 10\n            }\n            return sum\n        default:\n            return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpaqwihq4o_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unexpected type: %T\", nums))\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpujuwkdcx_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa9wqyd___test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, n := range nums.([]int) {\n            sum += n\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, n := range nums.([]string) {\n            sum += len(n)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123621,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphwy322th_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n        return sum\n    case int:\n        var sum int\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unexpected type: %T\", nums))\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpw6l50m8d_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            for _, c := range num {\n                sum += int(c - '0')\n            }\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123624,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcxyukfri_test.go:41:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int = 0\n    switch nums.(type) {\n        case []int:\n            for _, num := range nums.([]int) {\n                sum += sum_of_digits(num)\n            }\n        case int:\n            for num := nums.(int); num > 0; num /= 10 {\n                sum += num % 10\n            }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyl1nu679_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvr9q3kgb_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        sum := 0\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpno3ftfcc_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unsupported type: %T\", nums))\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyfw_m57l_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxiv_hh48_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        for nums > 0 {\n            sum += nums % 10\n            nums /= 10\n        }\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    default:\n        fmt.Println(\"Unsupported type!\")\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgqyflp5u_test.go:13:18: invalid operation: nums > 0 (operator > not defined on interface)\n/tmp/tmpgqyflp5u_test.go:14:25: invalid operation: nums % 10 (mismatched types interface {} and int)\n/tmp/tmpgqyflp5u_test.go:15:18: invalid operation: nums /= 10 (mismatched types interface {} and int)\n/tmp/tmpgqyflp5u_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2ye232_r_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n        return sum\n    case int:\n        var sum int\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n        return sum\n    default:\n        panic(fmt.Sprintf(\"unexpected type: %T\", nums))\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpujuwkdcx_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpbzh5_ion_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []float64:\n        sum := 0.0\n        for _, num := range nums.([]float64) {\n            sum += num\n        }\n        return int(sum)\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqvnq6m4a_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n        return sum\n    case int:\n        sum := 0\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv6tkkbn2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    for _, num := range nums.([]int) {\n        for num > 0 {\n            sum += num % 10\n            num /= 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6khbgtym_test.go:28:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    }\n    if sum < 10 {\n        return sum\n    }\n    return sum_of_digits(sum)\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppbh718g9_test.go:33:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxuck4pnh_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []float64:\n        sum := 0.0\n        for _, num := range nums.([]float64) {\n            sum += num\n        }\n        return int(sum)\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpqvnq6m4a_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_riq8r28_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, n := range nums.([]int) {\n            sum += sum_of_digits(n)\n        }\n        return sum\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6g3waxyv_test.go:35:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case int:\n        for n := nums.(int); n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_riq8r28_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        var sum int\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        var sum int\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510609,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprsopukh6_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n        return sum\n    case []float64:\n        sum := 0.0\n        for _, v := range nums.([]float64) {\n            sum += v\n        }\n        return int(sum)\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4m58yfdl_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpg2zy_i03_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    sum := 0\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            for num > 0 {\n                sum += num % 10\n                num /= 10\n            }\n        }\n    case []string:\n        for _, num := range nums.([]string) {\n            for _, digit := range num {\n                sum += int(digit - '0')\n            }\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpx5rnf762_test.go:37:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    switch nums.(type) {\n    case []int:\n        sum := 0\n        for _, num := range nums.([]int) {\n            sum += num\n        }\n        return sum\n    case []string:\n        sum := 0\n        for _, num := range nums.([]string) {\n            sum += len(num)\n        }\n        return sum\n    default:\n        return 0\n    }\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123617,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5epuq2b2_test.go:36:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123619,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6fb0s14m_test.go:30:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case int:\n        sum = nums.(int)\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += sum_of_digits(v)\n        }\n    case []interface{}:\n        for _, v := range nums.([]interface{}) {\n            sum += sum_of_digits(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxiv_hh48_test.go:34:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch v := nums.(type) {\n    case []int:\n        for _, n := range v {\n            sum += sum_of_digits(n)\n        }\n    case int:\n        for n := v; n > 0; n /= 10 {\n            sum += n % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpu411j7vz_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, v := range nums.([]int) {\n            sum += v\n        }\n    case []string:\n        for _, v := range nums.([]string) {\n            sum += len(v)\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1666123626,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpm7g3yy88_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package sum_of_digits_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to compute the sum of digits of each number of a given list.\nfunc sum_of_digits(nums interface{}) int {\n    var sum int\n    switch nums.(type) {\n    case []int:\n        for _, num := range nums.([]int) {\n            sum += sum_of_digits(num)\n        }\n    case int:\n        for num := nums.(int); num > 0; num /= 10 {\n            sum += num % 10\n        }\n    }\n    return sum\n}\n\nfunc TestSum_Of_Digits(t *testing.T) {\n  candidate := sum_of_digits\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{10, 2, 56}), expected: 14 },\n     { actual: candidate([][]int{[]interface{}{10, 20, 4, 5, \"b\", 70, \"a\"}}), expected: 19 },\n     { actual: candidate([]int{10, 20, -4, 5, -70}), expected: 19 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1665510608,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpgu8htzy7_test.go:32:47: cannot use []interface {}{...} (type []interface {}) as type []int in slice literal\n",
      "exit_code": 2,
      "status": "SyntaxError"
    }
  ]
}