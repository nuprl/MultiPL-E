{
  "name": "mbpp_780_find_combinations",
  "language": "go_test.go",
  "prompt": "package find_combinations_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\nfunc find_combinations(test_list [][]interface{}) [][]interface{} {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_780_find_combinations.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Combinations(t *testing.T) {\n  candidate := find_combinations\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([][]int{[]interface{}{2, 4}, []interface{}{6, 7}, []interface{}{5, 1}, []interface{}{6, 10}}), expected: [][]int{[]interface{}{8, 11}, []interface{}{7, 5}, []interface{}{8, 14}, []interface{}{11, 8}, []interface{}{12, 17}, []interface{}{11, 11}} },\n     { actual: candidate([][]int{[]interface{}{3, 5}, []interface{}{7, 8}, []interface{}{6, 2}, []interface{}{7, 11}}), expected: [][]int{[]interface{}{10, 13}, []interface{}{9, 7}, []interface{}{10, 16}, []interface{}{13, 10}, []interface{}{14, 19}, []interface{}{13, 13}} },\n     { actual: candidate([][]int{[]interface{}{4, 6}, []interface{}{8, 9}, []interface{}{7, 3}, []interface{}{8, 12}}), expected: [][]int{[]interface{}{12, 15}, []interface{}{11, 9}, []interface{}{12, 18}, []interface{}{15, 12}, []interface{}{16, 21}, []interface{}{15, 15}} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for _, tuple := range test_list {\n        var temp_list []interface{}\n        for _, item := range tuple {\n            temp_list = append(temp_list, item)\n        }\n        result = append(result, temp_list)\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if len(test_list[i]) == len(test_list[j]) {\n                var temp_list []interface{}\n                for k := 0; k < len(test_list[i]); k++ {\n                    temp_list = append(temp_list, test_list[i][k] + test_list[j][k])\n                }\n                result = append(result, temp_list)\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    var sum int\n    for _, tuple := range test_list {\n        sum = 0\n        for _, value := range tuple {\n            sum += value.(int)\n        }\n        if sum == 0 {\n            result = append(result, tuple)\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1] == test_list[j][1] {\n                result = append(result, []interface{}{test_list[i][0], test_list[j][0]})\n            }\n        }\n    }\n    return result\n}\n",
    "    result := [][]interface{}{}\n    for _, tuple := range test_list {\n        if len(tuple) == 1 {\n            result = append(result, []interface{}{tuple[0]})\n        } else {\n            for i := 0; i < len(tuple); i++ {\n                for _, sub_tuple := range find_combinations(test_list[i+1:]) {\n                    result = append(result, append([]interface{}{tuple[i]}, sub_tuple...))\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][1].(int) + test_list[j][1].(int) == test_list[i][0].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i + 1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n",
    "    var result [][]interface{}\n    for i := 0; i < len(test_list); i++ {\n        for j := i+1; j < len(test_list); j++ {\n            if test_list[i][0].(int) + test_list[j][0].(int) == test_list[i][1].(int) + test_list[j][1].(int) {\n                result = append(result, []interface{}{test_list[i], test_list[j]})\n            }\n        }\n    }\n    return result\n}\n"
  ]
}