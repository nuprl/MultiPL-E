{
  "name": "mbpp_11_remove_Occ",
  "language": "go_test.go",
  "prompt": "package remove_Occ_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to remove first and last occurrence of a given character from the string.\nfunc remove_Occ(s string, ch string) string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_11_remove_Occ.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestRemove_Occ(t *testing.T) {\n  candidate := remove_Occ\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"hello\", \"l\"), expected: \"heo\" },\n     { actual: candidate(\"abcda\", \"a\"), expected: \"bcd\" },\n     { actual: candidate(\"PHP\", \"P\"), expected: \"H\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    if len(s) == 0 {\n        return s\n    }\n    if len(ch) == 0 {\n        return s\n    }\n    if len(ch) > 1 {\n        return s\n    }\n    var result string\n    var first bool\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && !first {\n            first = true\n            continue\n        }\n        result += string(s[i])\n    }\n    if len(result) == 0 {\n        return result\n    }\n    if result[len(result) - 1] == rune(ch[0]) {\n        result = result[:len(result) - 1]\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) != ch {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n",
    "    if len(s) < 1 {\n        return s\n    }\n    if len(ch) != 1 {\n        return s\n    }\n    var result string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) {\n            if i == 0 {\n                result = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                result = s[:len(s) - 1]\n                break\n            } else {\n                result = s[:i] + s[i + 1:]\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            res += string(s[i])\n        } else {\n            res += string(s[i+1:])\n            break\n        }\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        result += string(s[i])\n    }\n    return result\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s)-1]\n                break\n            } else {\n                res = s[:i] + s[i+1:]\n                break\n            }\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            if i == 0 {\n                res = s[1:]\n            } else if i == len(s) - 1 {\n                res = s[:len(s)-1]\n            } else {\n                res = s[:i] + s[i+1:]\n            }\n            break\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if s[i] == rune(ch[0]) && i == 0 {\n            continue\n        } else if s[i] == rune(ch[0]) && i == len(s) - 1 {\n            continue\n        } else {\n            res += string(s[i])\n        }\n    }\n    return res\n}\n",
    "    var new_s string\n    for i := 0; i < len(s); i++ {\n        if s[i] != rune(ch[0]) {\n            new_s += string(s[i])\n        }\n    }\n    return new_s\n}\n",
    "    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            res = s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i]\n            break\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res) - 1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            res = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(res)-1; i >= 0; i-- {\n        if string(res[i]) == ch {\n            res = res[:i] + res[i+1:]\n            break\n        }\n    }\n    return res\n}\n",
    "    var res string\n    for i, v := range s {\n        if string(v) == ch {\n            if i == 0 {\n                res = s[1:]\n                break\n            } else if i == len(s) - 1 {\n                res = s[:len(s) - 1]\n                break\n            } else {\n                res = s[:i] + s[i + 1:]\n                break\n            }\n        }\n    }\n    return res\n}\n",
    "    var res string\n    var flag bool\n    for i := 0; i < len(s); i++ {\n        if s[i:i+1] == ch {\n            if flag == false {\n                flag = true\n                continue\n            }\n        }\n        res += s[i:i+1]\n    }\n    return res\n}\n",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n",
    "    var i int\n    var j int\n    var k int\n    var l int\n    var m int\n    var n int\n    var o int\n    var p int\n    var q int\n    var r int\n    var t string\n    var u string\n    var v string\n    var w string\n    var x string\n    var y string\n    var z string\n    var aa string\n    var bb string\n    var cc string\n    var dd string\n    var ee string\n    var ff string\n    var gg string\n    var hh string\n    var ii string\n    var jj string\n    var kk string\n    var ll string\n    var mm string\n    var nn string\n    var oo string\n    var pp string\n    var qq string\n    var rr string\n    var ss string\n    var tt string\n    var uu string\n    var vv string\n    var ww string\n    var xx string\n    var yy string\n    var zz string\n    var aaa string\n    var bbb string\n    var ccc string\n    var ddd string\n    var eee string\n    var fff string\n    var ggg string\n    var hhh string\n    var iii string\n    var jjj string\n    var kkk string\n    var lll string\n    var mmm string\n    var nnn string\n    var ooo string\n    var ppp string\n    var qqq string\n    var rrr string\n    var sss string\n    var ttt string\n    var uuu string\n    var vvv string\n    var www string\n    var xxx string\n    var yyy string\n    var zzz string\n    var aaaa string\n    var bbbb string\n    var cccc string\n    var dddd string\n    var eeee string\n    var ffff string\n    var gggg string\n    var hhhh string\n    var iiii string\n    var jjjj string\n    var kkkk string\n    var llll string\n    var mmmm string\n    var nnnn string\n    var oooo string\n    var pppp string\n    var qqqq string\n    var rrrr string\n    var ssss string",
    "    var res string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            continue\n        }\n        res += string(s[i])\n    }\n    return res\n}\n",
    "    var result string\n    for i := 0; i < len(s); i++ {\n        if string(s[i]) == ch {\n            result = s[:i] + s[i+1:]\n            break\n        }\n    }\n    for i := len(result)-1; i >= 0; i-- {\n        if string(result[i]) == ch {\n            result = result[:i] + result[i+1:]\n            break\n        }\n    }\n    return result\n}\n"
  ]
}