{
  "name": "mbpp_57_find_Max_Num",
  "language": "go_test.go",
  "prompt": "package find_Max_Num_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a python function to find the largest number that can be formed with the given list of digits.\nfunc find_Max_Num(arr []int) int {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_57_find_Max_Num.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestFind_Max_Num(t *testing.T) {\n  candidate := find_Max_Num\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3}), expected: 321 },\n     { actual: candidate([]int{4, 5, 6, 1}), expected: 6541 },\n     { actual: candidate([]int{1, 2, 3, 9}), expected: 9321 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    // sort the array\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    // convert the array to a string\n    var str string\n    for _, v := range arr {\n        str += fmt.Sprintf(\"%d\", v)\n    }\n    // convert the string to an int\n    var num int\n    fmt.Sscanf(str, \"%d\", &num)\n    return num\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    if len(arr) == 0 {\n        return 0\n    }\n    max := arr[0]\n    for i := 1; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max += arr[i] * int(math.Pow10(i))\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        for j := i + 1; j < len(arr); j++ {\n            if arr[i] < arr[j] {\n                arr[i], arr[j] = arr[j], arr[i]\n            }\n        }\n    }\n    for i := 0; i < len(arr); i++ {\n        max = max * 10 + arr[i]\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for _, num := range arr {\n        if num > max {\n            max = num\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n",
    "    var max int\n    for i := 0; i < len(arr); i++ {\n        if arr[i] > max {\n            max = arr[i]\n        }\n    }\n    return max\n}\n"
  ]
}