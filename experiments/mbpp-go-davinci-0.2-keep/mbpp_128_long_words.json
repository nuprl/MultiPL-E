{
  "name": "mbpp_128_long_words",
  "language": "go_test.go",
  "prompt": "package long_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function to find words that are longer than n characters from a given list of words.\nfunc long_words(n int, str string) []string {\n",
  "doctests": "keep",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_128_long_words.py",
  "prompt_terminology": "verbatim",
  "tests": "func TestLong_Words(t *testing.T) {\n  candidate := long_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(3, \"python is a programming language\"), expected: []string{\"python\", \"programming\", \"language\"} },\n     { actual: candidate(2, \"writing a program\"), expected: []string{\"writing\", \"program\"} },\n     { actual: candidate(5, \"sorting list\"), expected: []string{\"sorting\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "completions": [
    "    var words []string\n    for _, word := range(strings.Split(str, \" \")) {\n        if len(word) > n {\n            words = append(words, word)\n        }\n    }\n    return words\n}\n",
    "    var r []string\n    for _, word := range(strings.Split(str, \" \")) {\n        if len(word) > n {\n            r = append(r, word)\n        }\n    }\n    return r\n}\n",
    "    var result []string\n    for _, word := range(strings.Split(str, \" \")) {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range(strings.Fields(str)) {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range str {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range(strings.Split(str, \" \")) {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range(strings.Split(str, \" \")) {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    for _, word := range(strings.Split(str, \" \")) {\n        if len(word) > n {\n            words = append(words, word)\n        }\n    }\n    return words\n}\n",
    "    var result []string\n    for _, word := range str {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range str {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range str {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range(strings.Split(str, \" \")) {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range(strings.Split(str, \" \")) {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range(strings.Split(str, \" \")) {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range(strings.Split(str, \" \")) {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range(strings.Split(str, \" \")) {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range str {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range str {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range str {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for _, word := range str {\n        if len(word) > n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n"
  ]
}