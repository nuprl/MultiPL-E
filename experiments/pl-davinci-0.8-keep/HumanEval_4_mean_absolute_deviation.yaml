name: HumanEval_4_mean_absolute_deviation
language: pl
prompt: "# For a given list of input numbers, calculate Mean Absolute Deviation\n\
  # around the mean of this dataset.\n# Mean Absolute Deviation is the average absolute\
  \ difference between each\n# element and a centerpoint (mean in this case):\n# MAD\
  \ = average | x - x_mean |\n# >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n\
  # 1.0\nsub mean_absolute_deviation {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&mean_absolute_deviation;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0]),0.5)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0, 3.0, 4.0]),1.0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0,\
  \ 2.0, 3.0, 4.0, 5.0]),1.2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my $mean = mean($numbers);\n    my $total_absolute_deviation =\
    \ sum([ map { abs($_ - $mean) } @$numbers ]);\n    return $total_absolute_deviation\
    \ / scalar(@$numbers);\n}", "    my($num_items) = scalar(@$numbers);\n    my($mean)\
    \ = mean($numbers);\n    my($running_sum) = 0;\n    for my $num (@$numbers) {\n\
    \        $running_sum += abs($num - $mean);\n    }\n    return $running_sum /\
    \ $num_items;\n}", "    my $mean = mean($numbers);\n    my $sum = 0;\n    foreach\
    \ my $number (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n   \
    \ my $count = scalar(@$numbers);\n    return $sum / $count;\n}", "    my $x_mean\
    \ = mean($numbers);\n    my $sum = 0;\n    my $N = scalar(@$numbers);\n    for\
    \ (my $i = 0; $i < $N; $i++) {\n        $sum += abs($numbers->[$i] - $x_mean);\n\
    \    }\n    return $sum / $N;\n}", "    my $count = @$numbers;\n    die \"Can't\
    \ calculate MAD of zero length array\" if ($count == 0);\n    return 0 if ($count\
    \ == 1);\n    my $mean = average($numbers);\n    my $total = 0;\n    foreach my\
    \ $number (@$numbers) {\n        $total += abs($number - $mean);\n    }\n    return\
    \ $total / $count;\n}", "    my $mean = mean($numbers);\n    my $total = 0;\n\
    \    my $n = 0;\n    foreach my $number (@$numbers) {\n        $total += abs($number\
    \ - $mean);\n        $n++;\n    }\n    return $total / $n;\n}", "    my($count)\
    \ = @$numbers;\n    my($mean) = mean($numbers);\n    my($dev) = 0;\n    foreach\
    \ my $i (@$numbers) {\n        $dev += abs($i - $mean);\n    }\n    return $dev\
    \ / $count;\n}", "    my $sum = 0;\n    my $mean = mean($numbers);\n    foreach\
    \ my $number (@$numbers) {\n        $sum += abs($number - $mean);\n    }\n   \
    \ return $sum / scalar(@$numbers);\n}", "    return undef unless ref($numbers)\
    \ eq 'ARRAY';\n    return undef unless @$numbers;\n    my $s = @$numbers;\n  \
    \  my $mean = sum($numbers) / $s;\n    return 0 unless $mean;\n    my $deviations\
    \ = [];\n    foreach my $x (@$numbers) {\n        push @$deviations, abs($x -\
    \ $mean);\n    }\n    return sum($deviations) / $s;\n}", "    my $number_of_inputs\
    \ = @$numbers;\n    my $mean = sum($numbers) / $number_of_inputs;\n    my $absolute_deviations\
    \ = [map {abs($_ - $mean)} @$numbers];\n    return sum($absolute_deviations) /\
    \ $number_of_inputs;\n}", "    return undef unless $numbers && @$numbers;\n  \
    \  my $mean = mean($numbers);\n    return undef unless defined $mean;\n    my\
    \ $deviations = [map {abs($_ - $mean)} @$numbers];\n    return mean($deviations);\n\
    }", "    my $mean = mean($numbers);\n    my $absolute_differences = [];\n    foreach\
    \ my $n (@$numbers) {\n        push @$absolute_differences, abs($n - $mean);\n\
    \    }\n    return mean($absolute_differences);\n}", "    if ( not @$numbers )\
    \ {\n        return 0;\n    }\n    my $average = average($numbers);\n    my $deviations\
    \ = [ map { abs($_ - $average) } @$numbers ];\n    return average($deviations);\n\
    }", "    return if (!defined($numbers) || (scalar(@$numbers) == 0));\n    my $mean\
    \ = mean($numbers);\n    return mean(abs(scalar_sub($numbers, $mean)));\n}", " \
    \   my $mean = mean($numbers);\n    my $mad = mean(map { abs($_ - $mean) } @$numbers);\n\
    \    return $mad;\n}", "    return mean_absolute_difference($numbers, [mean($numbers)]);\n\
    }", "    my($deviation) = 0;\n    my($element);\n    my($mean) = mean($numbers);\n\
    \    foreach $element (@$numbers) {\n        $deviation += abs($element - $mean);\n\
    \    }\n    return $deviation / @$numbers;\n}", "    # Calculate mean of the dataset\n\
    \    my $mean = mean($numbers);\n    # Calculate the absolute difference between\
    \ each element and the\n    # centerpoint.\n    my @absolute_deviations = map\
    \ { abs($_ - $mean) } @$numbers;\n    # Calculate the mean of the absolute deviations.\n\
    \    return mean(\\@absolute_deviations);\n}", "    if (ref($numbers) ne 'ARRAY')\
    \ {\n        croak \"mean_absolute_deviation: got a non-array ref argument!\"\
    ;\n    }\n    my $mean = mean($numbers);\n    my $sum = 0;\n    my $n = 0;\n \
    \   foreach my $x (@$numbers) {\n        my $diff = abs($x - $mean);\n       \
    \ $sum += $diff;\n        $n++;\n    }\n    my $mad = $sum / $n;\n    return $mad;\n\
    }", "    croak(\"Can't calculate Mean Absolute Deviation of empty list\") unless\
    \ @$numbers;\n    my $mean = mean($numbers);\n    my $sum = 0;\n    foreach my\
    \ $i (@$numbers) {\n        $sum += abs($i - $mean);\n    }\n    return $sum /\
    \ @$numbers;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
