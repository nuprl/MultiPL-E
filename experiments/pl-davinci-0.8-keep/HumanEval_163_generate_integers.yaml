name: HumanEval_163_generate_integers
language: pl
prompt: "# Given two positive integers a and b, return the even digits between a\n\
  # and b, in ascending order.\n# For example:\n# generate_integers(2, 8) => [2, 4,\
  \ 6, 8]\n# generate_integers(8, 2) => [2, 4, 6, 8]\n# generate_integers(10, 14)\
  \ => []\nsub generate_integers {\n    my($a, $b) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&generate_integers;\n\
  \        if(eq_deeply($candidate->(2, 10),[2, 4, 6, 8])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10, 2),[2,\
  \ 4, 6, 8])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(132, 2),[2, 4, 6, 8])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(17, 89),[])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @result;\n    for my $i ($a .. $b) {\n        if ($i % 2 ==\
    \ 0) {\n            push @result, $i;\n        }\n    }\n    return @result;\n\
    }", "    return () if $a > $b;\n    return () if $a < 2;\n    my @result;\n  \
    \  for (my $i = $a; $i <= $b; $i++) {\n        push @result, $i if $i % 2 == 0;\n\
    \    }\n    return @result;\n}", "    my($x, $y) = sort { $a <=> $b } ($a, $b);\n\
    \    map { my $n = $_; $n if $n % 2 == 0 } ($x .. $y);\n}", "    my @r;\n    if\
    \ ($a > $b) {\n        my $tmp = $a;\n        $a = $b;\n        $b = $tmp;\n \
    \   }\n    for my $i ($a..$b) {\n        push @r, $i if $i % 2 == 0;\n    }\n\
    \    return @r;\n}", "    my @r = ();\n    my $i = $a;\n    while (1) {\n    \
    \    if ($i % 2 == 0) {\n            push @r, $i;\n        }\n        if ($i ==\
    \ $b) {\n            last;\n        }\n        $i = $i < $b ? $i + 1 : $i - 1;\n\
    \    }\n    return @r;\n}", "    my @r = ();\n    if ($a > $b) {\n        $a =\
    \ $b + $a;\n        $b = $a - $b;\n        $a = $a - $b;\n    }\n    push @r,\
    \ $_ while (++$a <= $b);\n    @r = grep { $_ % 2 == 0 } @r;\n    return @r;\n}",
  "    my @range = ($a .. $b);\n    return grep { ($_ % 2) == 0 } @range;\n}", " \
    \   return if $a % 2 != 0;\n    return if $b % 2 != 0;\n    my @res;\n    for\
    \ my $i ($a..$b) {\n        push @res, $i if $i % 2 == 0;\n    }\n    return \\\
    @res;\n}", "    return unless $a > 0 && $b > 0;\n    my @result;\n    ($a, $b)\
    \ = ($b, $a) if $a > $b;", "    my @integers;\n    if ($a > $b) {\n        my\
    \ $c = $a;\n        $a = $b;\n        $b = $c;\n    }\n    foreach my $i ($a..$b)\
    \ {\n        if ($i % 2 == 0) {\n            push @integers, $i;\n        }\n\
    \    }\n    return @integers;\n}", "    return $a > $b ? () : $a % 2 == 0 ? ($a,\
    \ generate_integers($a + 2, $b)) : generate_integers($a + 1, $b);\n}", "    my\
    \ $min = ($a < $b) ? $a : $b;\n    my $max = ($a > $b) ? $a : $b;\n    my @result;\n\
    \    for (my $i = $min; $i <= $max; $i++) {\n        push @result, $i if ($i %\
    \ 2 == 0);\n    }\n    return @result;\n}", "    return sort { $a <=> $b } grep\
    \ { $_ % 2 == 0 } ($a..$b);\n}", "    my %nums;\n    if ($a > $b) { ($a, $b) =\
    \ ($b, $a) }\n    for ($a..$b) {\n        $nums{$_} = 1 if $_ % 2 == 0;\n    }\n\
    \    return sort { $a <=> $b } keys %nums;\n}", "    return () if $a > $b;\n \
    \   return () if $a % 2 != 0;\n    my @sorted = sort { $a <=> $b } ($a, $b);\n\
    \    my @range = $sorted[0] .. $sorted[1];\n    my @even = grep { $_ % 2 == 0\
    \ } @range;\n    return @even;\n}", "    my @list;\n    for ($a..$b) {\n     \
    \   push @list, $_ if $_ % 2 == 0;\n    }\n    return @list;\n}", "    my @array;\n\
    \    if ($a < $b) {\n        for ($a..$b) {\n            if ($_ % 2 == 0) {\n\
    \                push @array, $_;\n            }\n        }\n    }\n    else {\n\
    \        for ($b..$a) {\n            if ($_ % 2 == 0) {\n                push\
    \ @array, $_;\n            }\n        }\n    }\n    return @array;\n}", "    my\
    \ $begin = ($a < $b) ? $a : $b;\n    my $end = ($a > $b) ? $a : $b;\n    my @arr;\n\
    \    for (my $i = $begin; $i <= $end; $i++) {\n        if ($i % 2 == 0) {\n  \
    \          push @arr, $i;\n        }\n    }\n    return @arr;\n}", "    my($t,\
    \ @res);\n    if ($a > $b) {\n        $t = $a;\n        $a = $b;\n        $b =\
    \ $t;\n    }\n    for (my $i = $a; $i <= $b; $i++) {\n        if (!($i & 1)) {\n\
    \            push @res, $i;\n        }\n    }\n    return @res;\n}", "    $a,\
    \ $b = ($b, $a) if $a > $b;\n    my @numbers = ();\n    while ($a <= $b) {\n \
    \       push @numbers, $a if ($a % 2 == 0);\n        $a += 1;\n    }\n    return\
    \ @numbers;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
