name: HumanEval_150_x_or_y
language: pl
prompt: "# A simple program which should return the value of x if n is \n# a prime\
  \ number and should return the value of y otherwise.\n# Examples:\n# for x_or_y(7,\
  \ 34, 12) == 34\n# for x_or_y(15, 8, 5) == 5\nsub x_or_y {\n    my($n, $x, $y) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&x_or_y;\n\
  \        if(eq_deeply($candidate->(7, 34, 12),34)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 5),5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3,\
  \ 33, 5212),33)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->(1259, 3, 52),3)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(7919, -1, 12),-1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3609,\
  \ 1245, 583),583)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(91, 56, 129),129)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 34, 1234),1234))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ 2, 0),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(2, 2, 0),2)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return $n <= 2 ? $y : $x;\n}", "    my $return = $x;\n    if (is_prime($n))\
    \ {\n        $return = $y;\n    }\n    return $return;\n}", "    return $x if\
    \ is_prime($n);\n    return $y;\n}", "    if (is_prime($n)) {\n        return\
    \ $x;\n    } else {\n        return $y;\n    }\n}", "    $x_or_y;\n}", "    \n\
    \    my $result = $x;", "    my $p = prime($n);\n    return $p ? $x : $y;\n}",
  "    if ($n % 2 == 0) {\n        $x;\n    } else {\n        $y;\n    }\n}", "  \
    \  # Start with a guess of X\n    my $ret = $x;\n    # If $n is not prime then\
    \ return $y\n    unless (is_prime($n)) {\n        $ret = $y;\n    }\n    return\
    \ $ret;\n}", "    # This line is just to verify that the method has been\n   \
    \ # defined and is a method of the current class\n    my $ctx = shift;\n    if\
    \ ($n <= 2 || $n % 2 == 0) {\n        return $y;\n    } else {\n        for (my\
    \ $i = 3; $i <= sqrt($n); $i += 2) {\n            if ($n % $i == 0) {\n      \
    \          return $y;\n            }\n        }\n        return $x;\n    }\n}",
  "    if($n%2 == 0) {\n        return $y;\n    }\n    else {\n        for($i = 3;\
    \ $i*$i <= $n; $i+=2) {\n            if($n%$i == 0) {\n                return\
    \ $y;\n            }\n        }\n        return $x;\n    }\n}", "    my $ret =\
    \ $x;\n    for(my $i = 2; $i < $n; $i++) {\n        if($n % $i == 0) {\n     \
    \       $ret = $y;\n            last;\n        }\n    }\n    return $ret;\n}",
  "    $n % 2 == 0 ? $y : $x;\n}", "    return ($n == 2 || $n == 3 || $n == 5 || $n\
    \ == 7) ? $x : $y;\n}", "    foreach(2..sqrt($n)){\n        return $y if $n %\
    \ $_ == 0;\n    }\n    return $x;\n}", "    if (is_prime($n)) {\n        return\
    \ $x;\n    } else {\n        return $y;\n    }\n}", "    return $x if is_prime($n);\n\
    \    return $y;\n}", "    return $x if $n % 1 == 0 && $n % $n == 0 && $n % 2 !=\
    \ 0;\n    return $y;\n}\nprint x_or_y(7, 34, 12);", "    # Your code here\n}",
  "    my $div;\n    for ($div = 2; $div < $n; $div++) {\n        if ($n % $div ==\
    \ 0) {\n            return $y;\n        }\n    }\n    return $x;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
