name: HumanEval_35_max_element
language: pl
prompt: "# Return maximum element in the list.\n# >>> max_element([1, 2, 3])\n# 3\n\
  # >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n# 123\nsub max_element\
  \ {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&max_element;\n\
  \        if(eq_deeply($candidate->([1, 2, 3]),3)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 3, -5, 2, -3,\
  \ 3, 9, 0, 124, 1, -10]),124)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n}\n\ntesthumaneval();"
completions: ["    my($max) = $l->[0];\n    for (my $i = 1; $i < @$l; $i++) {\n  \
    \      $max = $l->[$i] if $l->[$i] > $max;\n    }\n    return $max;\n}", "   \
    \ my $i = 0;\n    my $m = $l->[0];\n    my $leng = scalar @$l;\n    for ( $i =\
    \ 1; $i < $leng; $i++ ) {\n        $m = $l->[$i] if $l->[$i] > $m;\n    }\n  \
    \  return $m;\n}", "    my $max = 0;\n    for(@$l) {\n        $max = $_ if $_\
    \ > $max;\n    }\n    return $max;\n}", "    my $max = $l->[0];\n    for my $i\
    \ (1 .. $#$l) {\n        $max = $l->[$i] if $l->[$i] > $max;\n    }\n    return\
    \ $max;\n}", "    my $max = $l->[0];\n    foreach (@$l) {\n        $max = $_ if\
    \ $_ > $max;\n    }\n    return $max;\n}", "    my $max = $l->[0];\n    foreach\
    \ my $val (@$l) {\n        $max = $val if $val > $max;\n    }\n    return $max;\n\
    }", "    my $max = @$l[0];\n    foreach my $e (@$l) {\n        if ($e > $max)\
    \ {\n            $max = $e;\n        }\n    }\n    return $max;\n}", "    return\
    \ reduce { $a > $b ? $a : $b } @$l;\n}", "    my $m = shift(@$l);\n    for my\
    \ $x (@$l) {\n        $m = $x if $x > $m;\n    }\n    return $m;\n}", "    my($result)\
    \ = $l->[0];\n    foreach my $e (@$l) {\n        $result = $e if $e > $result;\n\
    \    }\n    return $result;\n}", "    my $max = $l->[0];\n    for (my $i = 1;\
    \ $i < @$l; $i++) {\n        $max = $l->[$i] if $l->[$i] > $max;\n    }\n    return\
    \ $max;\n}", "    my($max) = $l->[0];\n    for(my($i) = 1; $i < scalar(@$l); $i++)\
    \ {\n        if($l->[$i] > $max) {\n            $max = $l->[$i];\n        }\n\
    \    }\n    return $max;\n}", "    if (scalar(@$l) == 0) { return undef; }\n \
    \   return $l->[0] if scalar(@$l) == 1;\n    my $max = $l->[0];\n    for (@$l)\
    \ { $max = $_ if $_ > $max; }\n    return $max;\n}", "    return undef if not\
    \ defined $l;\n    return $l if ref($l) ne 'ARRAY';\n    return undef if not @$l;\n\
    \    my $m = $l->[0];\n    foreach my $e (@$l) {\n        $m = $e if $e > $m;\n\
    \    }\n    return $m;\n}", "    my $max = $l->[0];\n    for my $i (1 .. $#$l)\
    \ {\n        $max = $l->[$i] if $l->[$i] > $max;\n    }\n    return $max;\n}",
  "    my $max = $l->[0];\n    for (@$l) {\n        $max = $_ if $_ > $max;\n    }\n\
    \    return $max;\n}", "    my $max = undef;\n    for my $e (@$l) {\n        $max\
    \ = $e if !defined($max) || $e > $max;\n    }\n    return $max;\n}", "    my $max\
    \ = @$l[0];\n    foreach (@$l) {\n        $max = $_ if $_ > $max;\n    }\n   \
    \ return $max;\n}", "    return $l->[$#$l];\n}", "    my $max = $l->[0];\n   \
    \ for (@$l) {\n        $max = $_ if $_ > $max;\n    }\n    return $max;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
