name: HumanEval_79_decimal_to_binary
language: pl
prompt: "# You will be given a number in decimal form and your task is to convert\
  \ it to\n# binary format. The function should return a string, with each character\
  \ representing a binary\n# number. Each character in the string will be '0' or '1'.\n\
  # There will be an extra couple of characters 'db' at the beginning and at the end\
  \ of the string.\n# The extra characters are there to help with the format.\n# Examples:\n\
  # decimal_to_binary(15)   # returns \"db1111db\"\n# decimal_to_binary(32)   # returns\
  \ \"db100000db\"\nsub decimal_to_binary {\n    my($decimal) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&decimal_to_binary;\n\
  \        if(eq_deeply($candidate->(0),\"db0db\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(32),\"db100000db\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(103),\"\
  db1100111db\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(15),\"db1111db\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $binary = \"db\";\n    while ($decimal > 0) {\n        $binary\
    \ .= $decimal % 2;\n        $decimal = int($decimal / 2);\n    }\n    return $binary\
    \ . \"db\";\n}", "    my $binary = 'db';\n    while ($decimal > 0) {\n       \
    \ my $digit = $decimal % 2;\n        $binary = $digit . $binary;\n        $decimal\
    \ = $decimal / 2;\n    }\n    $binary .= 'db';\n    return $binary;\n}", "   \
    \ my $binary = \"db\";\n    while($decimal > 0) {\n        $binary .= ($decimal\
    \ % 2 == 0) ? \"0\" : \"1\";\n        $decimal = int($decimal / 2);\n    }\n \
    \   $binary .= \"db\";\n    return $binary;\n}", "    my $binary = \"db\";\n \
    \   while($decimal > 0) {\n        $binary .= ($decimal%2 == 0) ? \"0\" : \"1\"\
    ;\n        $decimal = int($decimal/2);\n    }\n    $binary .= \"db\";\n    return\
    \ reverse($binary);\n}", "    return \"db\" . unpack(\"B*\", pack(\"N\", $decimal))\
    \ . \"db\";\n}", "    return 'db' . decimal_to_binary_helper($decimal) . 'db';\n\
    }", "    my $bin = '';\n    my $ref = {};\n    my $bits = 0;\n    while ($decimal\
    \ != 0) {\n        my $remainder = $decimal % 2;\n        $decimal = int($decimal\
    \ / 2);\n        $bin = $remainder . $bin;\n        $bits++;\n    }\n    my $left_zeros\
    \ = 8 - $bits;\n    if ($left_zeros > 0) {\n        my $zeros = 0 x $left_zeros;\n\
    \        $bin = $zeros . $bin;\n    }\n    $bin = 'db' . $bin . 'db';\n    return\
    \ $bin;\n}", "    return \"db$decimal$db\";\n}", "    my $binary = \"db\";\n \
    \   while ($decimal > 0) {\n        $binary .= $decimal % 2;\n        $decimal\
    \ = int($decimal / 2);\n    }\n    $binary .= \"db\";\n    return reverse($binary);\n\
    }", "    my @binary;\n    my $binary;\n    my $value = $decimal;\n    for (; $value\
    \ > 0;) {\n        my $remainder = $value % 2;\n        $value = int($value /\
    \ 2);\n        unshift @binary, $remainder;\n    }\n    $binary = \"db\" . join\
    \ (\"\", @binary) . \"db\";\n    return $binary;\n}", "    my @bin_array = ();\n\
    \    # Convert decimal to binary and\n    # reverse the binary numbers\n    for(my\
    \ $i = $decimal; $i > 0; $i /= 2) {\n        my $remainder = $i % 2;\n       \
    \ unshift(@bin_array, $remainder);\n    }\n    # Prepend extra 0's if array count\
    \ is less than\n    # 7\n    if(scalar(@bin_array) < 7) {\n        my $extra_zeros\
    \ = 7 - scalar(@bin_array);\n        for(my $i = 0; $i < $extra_zeros; $i++) {\n\
    \            unshift(@bin_array, 0);\n        }\n    }\n    # Convert the binary\
    \ numbers array to string\n    my $bin_string = join('', @bin_array);\n    return\
    \ \"db\" . $bin_string . \"db\";\n}", "    return 'db' . unpack('B32', pack('N',\
    \ $decimal)) . 'db';\n}", "    my $binary = sprintf(\"%b\", $decimal);\n    return\
    \ \"db\" . $binary . \"db\";\n}", "    # your code here\n    $decimal = \"db\"\
    \ . sprintf(\"%b\", $decimal) . \"db\";\n    return $decimal;\n}", "    my $binary\
    \ = '';\n    while($decimal > 0) {\n        my $remainder = $decimal % 2;\n  \
    \      $binary = \"$remainder$binary\";\n        $decimal = int($decimal / 2);\n\
    \    }\n    return 'db' . $binary . 'db';\n}", "    my $binary = sprintf(\"%b\"\
    , $decimal);\n    return \"db$binary\".\"db\";\n}", "    my @binary = (0);\n \
    \   my $binary_str = \"db\";\n    while($decimal > 0) {\n        unshift(@binary,\
    \ $decimal % 2);\n        $decimal = int($decimal / 2);\n    }\n    $binary_str\
    \ .= join(\"\", @binary);\n    $binary_str .= \"db\";\n    return $binary_str;\n\
    }", "    # your code here\n    $decimal =~ s/[0-9]//g;\n    return \"db$decimaldb\"\
    ;\n}", "    my $binary = \"db\";\n    # Note: the '2' in the first parameter is\
    \ the base\n    $binary .= join(\"\", reverse(split(//, unpack(\"B32\", pack(\"\
    N\", $decimal)))));\n    $binary .= \"db\";\n    return $binary;\n}", "    my\
    \ $binary = 'db';\n    while ($decimal > 0) {\n        my $remainder = $decimal\
    \ % 2;\n        $binary = $remainder . $binary;\n        $decimal = int($decimal\
    \ / 2);\n    }\n    $binary .= 'db';\n    return $binary;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
