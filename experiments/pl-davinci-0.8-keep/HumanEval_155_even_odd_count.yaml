name: HumanEval_155_even_odd_count
language: pl
prompt: "# Given an integer. return a tuple that has the number of even and odd digits\
  \ respectively.\n# Example:\n# even_odd_count(-12) ==> (1, 1)\n# even_odd_count(123)\
  \ ==> (1, 2)\nsub even_odd_count {\n    my($num) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&even_odd_count;\n\
  \        if(eq_deeply($candidate->(7),[0, 1])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(-78),[1, 1])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3452),[2,\
  \ 2])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(346211),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-345821),[3,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-2),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(-45347),[2,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1,\
  \ 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $even_count = 0;\n    my $odd_count = 0;\n    foreach my $digit\
    \ ( split //, $num ) {\n        if ( $digit % 2 == 0 ) {\n            $even_count++;\n\
    \        }\n        else {\n            $odd_count++;\n        }\n    }\n    return\
    \ ($even_count, $odd_count);\n}", "    return (substr($num, -1) % 2 == 0 ? 1 :\
    \ 0, $num =~ s/([13579])//g)\n}", "    my $n_even = 0;\n    my $n_odd = 0;\n \
    \   while($num){\n        $num % 2 ? $n_odd++ : $n_even++;\n        $num /= 10;\n\
    \    }\n    return ($n_even, $n_odd);\n}", "    my $even = 0;\n    my $odd = 0;\n\
    \    while ($num) {\n        my $rem = $num % 10;\n        if ($rem % 2 == 0)\
    \ {\n            $even++;\n        } else {\n            $odd++;\n        }\n\
    \        $num = int($num / 10);\n    }\n    return ($even, $odd);\n}", "    my($even,\
    \ $odd) = (0, 0);\n    while ($num) {\n        if ($num % 2 == 0) {\n        \
    \    $even++;\n        } else {\n            $odd++;\n        }\n        $num\
    \ = int($num / 10);\n    }\n    return ($even, $odd);\n}", "    my ($even, $odd)\
    \ = (0, 0);\n    while ($num != 0) {\n        if ($num % 2 == 0) {\n         \
    \   $even += 1;\n        } else {\n            $odd += 1;\n        }\n       \
    \ $num = int($num / 10);\n    }\n    return ($even, $odd);\n}", "    my $is_negative\
    \ = $num < 0;\n    $num = abs($num);\n    my $even = 0;\n    my $odd = 0;\n  \
    \  while ($num) {\n        my $digit = $num % 10;\n        if ($digit % 2 == 0)\
    \ {\n            $even += 1;\n        } else {\n            $odd += 1;\n     \
    \   }\n        $num = int($num / 10);\n    }\n    return($even, $odd);\n}", " \
    \   my $even_cnt = 0;\n    my $odd_cnt = 0;\n    if ($num < 0) {\n        $num\
    \ = -$num;\n    }\n    while ($num > 0) {\n        my $rem = $num % 10;\n    \
    \    if ($rem % 2 == 0) {\n            $even_cnt++;\n        } else {\n      \
    \      $odd_cnt++;\n        }\n        $num = int($num / 10);\n    }\n    return\
    \ ($even_cnt, $odd_cnt);\n}", "    my $even = 0;\n    my $odd = 0;\n    while\
    \ ($num) {\n        if ($num % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n        $num = int($num / 10);\n    }\n \
    \   return ($even, $odd);\n}", "    my $even_num = 0;\n    my $odd_num = 0;\n\
    \    while ($num > 0) {\n        my $digit = $num % 10;\n        if ($digit %\
    \ 2 == 0) {\n            $even_num++;\n        } else {\n            $odd_num++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return ($even_num, $odd_num);\n\
    }", "    my $even = 0;\n    my $odd = 0;\n    while ($num) {\n        if ($num\
    \ % 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n \
    \       }\n        $num = int $num / 10;\n    }\n    return ($even, $odd);\n}",
  "    my $count_even = 0;\n    my $count_odd = 0;\n    while ($num > 0) {\n     \
    \   my $digit = $num % 10;\n        if ($digit % 2 == 0) {\n            $count_even++;\n\
    \        } else {\n            $count_odd++;\n        }\n        $num = int($num\
    \ / 10);\n    }\n    return ($count_even, $count_odd);\n}", "    my $even = 0;\n\
    \    my $odd = 0;\n    while($num > 0) {\n        my $digit = $num % 10;\n   \
    \     if ($digit % 2 == 0) {\n            $even++;\n        } else {\n       \
    \     $odd++;\n        }\n        $num = int($num / 10);\n    }\n    return ($even,\
    \ $odd);\n}", "    my ($odd, $even) = (0, 0);\n    foreach (split //, abs($num))\
    \ {\n        if ($_ % 2 == 0) {\n            $even++;\n        } else {\n    \
    \        $odd++;\n        }\n    }\n    return ($even, $odd);\n}", "    my $even_cnt\
    \ = 0;\n    my $odd_cnt = 0;\n    while($num != 0) {\n        if(abs($num % 10)\
    \ % 2 == 0) {\n            $even_cnt++;\n        } else {\n            $odd_cnt++;\n\
    \        }\n        $num = int($num / 10);\n    }\n    return ($even_cnt, $odd_cnt);\n\
    }", "    my($odd, $even) = (0, 0);\n    $num =~ s/-//;\n    for my $digit (split(//,\
    \ $num)) {\n        if ($digit % 2 == 0) {\n            $even++;\n        } else\
    \ {\n            $odd++;\n        }\n    }\n    return ($even, $odd);\n}", " \
    \   my $even = 0;\n    my $odd = 0;\n    foreach my $digit (split(//, abs($num)))\
    \ {\n        if ($digit % 2 == 0) {\n            $even += 1;\n        } else {\n\
    \            $odd += 1;\n        }\n    }\n    return ($even, $odd);\n}", "  \
    \  my $count = 0;\n    my $odd_count = 0;\n    my $even_count = 0;\n    my $last_digit\
    \ = 0;\n    while ($num != 0) {\n        $last_digit = $num % 10;\n        if\
    \ ($last_digit % 2 == 0) {\n            $even_count++;\n        } else {\n   \
    \         $odd_count++;\n        }\n        $num = int($num / 10);\n    }\n  \
    \  return ($even_count, $odd_count);\n}\nmy ($even_count, $odd_count) = even_odd_count(-12);\n\
    print \"Num even digits = $even_count, num odd digits = $odd_count\\n\";\n($even_count,\
    \ $odd_count) = even_odd_count(123);\nprint \"Num even digits = $even_count, num\
    \ odd digits = $odd_count\\n\";", "    my ($even, $odd) = (0, 0);\n    for my\
    \ $n (split(//, $num)) {\n        if ($n % 2 == 0) {\n            $even++;\n \
    \       } else {\n            $odd++;\n        }\n    }\n    return ($even, $odd);\n\
    }", "    my($odd, $even) = (0, 0);\n    while ($num > 0) {\n        if ($num %\
    \ 2 == 0) {\n            $even++;\n        } else {\n            $odd++;\n   \
    \     }\n        $num = int($num / 10);\n    }\n    return ($even, $odd);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
