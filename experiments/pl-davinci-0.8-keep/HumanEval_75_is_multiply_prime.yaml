name: HumanEval_75_is_multiply_prime
language: pl
prompt: "# Write a function that returns true if the given number is the multiplication\
  \ of 3 prime numbers\n# and false otherwise.\n# Knowing that (a) is less then 100.\
  \ \n# Example:\n# is_multiply_prime(30) == True\n# 30 = 2 * 3 * 5\nsub is_multiply_prime\
  \ {\n    my($a) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_multiply_prime;\n\
  \        if(eq_deeply($candidate->(5),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(30),1)) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(125),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(105),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(126),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(729),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(891),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1001),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $b = 0;\n    my $c = 0;\n    my $d = 0;\n    for ($b = 2; $b\
    \ <= $a/2; $b++) {\n        for ($c = 2; $c <= $a/2; $c++) {\n            for\
    \ ($d = 2; $d <= $a/2; $d++) {\n                if ($b * $c * $d == $a and is_prime($b)\
    \ and is_prime($c) and is_prime($d)) {\n                    return 1;\n      \
    \          }\n            }\n        }\n    }\n    return 0;\n}", "    my $i =\
    \ 2;\n    my $r = 0;\n    my $c = 0;\n    my $n = 0;\n    while ($a > 1){\n  \
    \      if ($a % $i == 0){\n            $a = $a / $i;\n            $n = 1;\n  \
    \          for ($r = 2; $r <= $i / 2; $r++){\n                if ($i % $r == 0){\n\
    \                    $n = 0;\n                    last;\n                }\n \
    \           }\n            if ($n == 1){\n                $c++;\n            }\n\
    \        }\n        else{\n            $i++;\n        }\n    }\n    if ($c ==\
    \ 3){\n        return 1;\n    }\n    else{\n        return 0;\n    }\n}", "  \
    \  my $counter = 0;\n    foreach my $num (@prime_numbers) {\n        last if $num\
    \ > $a;\n        $counter += 1 if $a % $num == 0;\n    }\n    return $counter\
    \ == 3;\n}", "    my $result = prime_factors($a);\n    if(scalar @$result > 3){\n\
    \        return 0;\n    }\n    else{\n        return 1;\n    }\n}", "    #assuming\
    \ we need to return false if non-prime\n    if (is_prime($a)) {\n        return\
    \ 0;\n    }\n    #assuming that a is less than 100\n    for (my $i = 2; $i < $a;\
    \ $i++) {\n        if ($a % $i == 0) {\n            if (is_prime($i)) {\n    \
    \            for (my $j = 2; $j < $a; $j++) {\n                    if ($a % $j\
    \ == 0) {\n                        if (is_prime($j)) {\n                     \
    \       return 1;\n                        }\n                    }\n        \
    \        }\n            }\n        }\n    }\n    return 0;\n}", "    return 0\
    \ if $a == 1;\n    return 0 if $a == 2;\n    return 0 if $a == 3;\n    my $flag\
    \ = 0;\n    my @arr = ();\n    for(my $i = 3; $i <= $a; $i++){\n        for(my\
    \ $j = 2; $j <= $i; $j++){\n            if($i % $j == 0){\n                $flag\
    \ = 1;\n                last;\n            }\n        }\n        if($flag == 0){\n\
    \            push @arr, $i;\n        }\n        $flag = 0;\n    }\n    my $arr_size\
    \ = @arr;\n    for(my $i = 1; $i < $arr_size - 1; $i++){\n        for(my $j =\
    \ $i + 1; $j < $arr_size; $j++){\n            if($a % ($arr[$i] * $arr[$j]) ==\
    \ 0){\n                return 1;\n            }\n        }\n    }\n    return\
    \ 0;\n}\nprint is_multiply_prime(30);\nprint \"\\n\";\nprint is_multiply_prime(100);\n\
    print \"\\n\";", "    return 0 unless($a);\n    my @p;\n    my @arr = get_primes($a);\n\
    \    for (my $i = 0; $i < @arr; $i++) {\n        for (my $j = $i + 1; $j < @arr;\
    \ $j++) {\n            for (my $k = $j + 1; $k < @arr; $k++) {\n             \
    \   my $s = $arr[$i] * $arr[$j] * $arr[$k];\n                if ($s == $a) {\n\
    \                    return 1;\n                }\n            }\n        }\n\
    \    }\n    return 0;\n}", "    my($i);\n    for ($i = 1; $i <= $a; $i++) {\n\
    \        if ($a % $i == 0) {\n            print \"$i\\n\";\n        }\n    }\n\
    }", "    my $range = 100;\n    my $prime_number = 0;\n    foreach my $i (2..$range)\
    \ {\n        if (is_prime($i)) {\n            $prime_number = $i;\n          \
    \  foreach my $j (2..$range) {\n                if (is_prime($j)) {\n        \
    \            $prime_number = $j;\n                    foreach my $k (2..$range)\
    \ {\n                        if (is_prime($k)) {\n                           \
    \ $prime_number = $k;\n                            if ($a == $prime_number * $j\
    \ * $i) {\n                                return 1;\n                       \
    \     }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return 0;\n}", "    my @prime;\n    my $n=0;\n\
    \    for ($n=2; $n<$a; $n++) {\n\tif (is_prime($n)) {\n\t    push @prime, $n;\n\
    \t}\n    }\n    my $i=0;\n    my $count=0;\n    my $j=0;\n    my $len=@prime;\n\
    \    while ($i<$len) {\n\t$j=0;\n\twhile ($j<$len) {\n\t    if (($prime[$i]*$prime[$j])\
    \ == $a) {\n\t\t$count++;\n\t    }\n\t    $j++;\n\t}\n\t$i++;\n    }\n    if ($count\
    \ >0) {\n\treturn 1;\n    }\n    else {\n\treturn 0;\n    }\n}", "    my @prime_numbers\
    \ = ();\n    for my $prime_number (2..$a) {\n        if( is_prime($prime_number)\
    \ ) {\n            push @prime_numbers, $prime_number;\n        }\n    }\n   \
    \ return 0 == $a % $prime_numbers[0] * $prime_numbers[1] * $prime_numbers[2];\n\
    }", "    my %prime = map {$_ => 1} (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    for my $i (1..$a/2)\
    \ {\n        my $j = $a - $i;\n        if (exists $prime{$i} && exists $prime{$j})\
    \ {\n            return 1;\n        }\n    }\n    return 0;\n}", "    my($result,\
    \ $i, $divider);\n    $result = 0;\n    $i = 0;\n    $divider = 0;\n    for ($i\
    \ = 2; $i < $a; $i++) {\n        if (is_prime($i)) {\n            $divider++;\n\
    \            $result += $i;\n            if ($result == $a) {\n              \
    \  return $result;\n            }\n        }\n    }\n    return 0;\n}", "    for\
    \ my $i (2..$a) {\n        for my $j (2..$a) {\n            for my $k (2..$a)\
    \ {\n                if ($i * $j * $k == $a) {\n                    return 1 if\
    \ is_prime($i) and is_prime($j) and is_prime($k);\n                }\n       \
    \     }\n        }\n    }\n    return 0;\n}\nprint is_multiply_prime(12),\"\\\
    n\";\nprint is_multiply_prime(30),\"\\n\";\nprint is_multiply_prime(23),\"\\n\"\
    ;", "    if ($a == 2) {\n        return 1;\n    }\n    my $counter = 0;\n    for\
    \ (my $i = 2; $i < $a; $i++) {\n        if ($a % $i == 0) {\n            $counter\
    \ += 1;\n        }\n    }\n    if ($counter > 1) {\n        return 0;\n    }\n\
    \    return 1;\n}", "    my $r = 1;\n    my $p = 2;\n    my $n = $a;\n    do {\n\
    \        if( $n % $p == 0 ) {\n            $r *= $p;\n            $n /= $p;\n\
    \        } else {\n            $p++;\n        }\n    } until ( $n == 1 );\n  \
    \  if( $r == $a ) {\n        return 1;\n    } else {\n        return 0;\n    }\n\
    }", "    my($x, $y, $z);\n    for ($x = 2; $x < $a; $x++) {\n\tif ($a % $x ==\
    \ 0) {\n\t    for ($y = 2; $y < $a; $y++) {\n\t\tif ($x % $y == 0) {\n\t\t   \
    \ goto NEXTX;\n\t\t}\n\t    }\n\t    for ($z = 2; $z < $a; $z++) {\n\t\tif ($z\
    \ % $y == 0) {\n\t\t    goto NEXTX;\n\t\t}\n\t    }\n\t    return 1;\n\t}\n  \
    \  }\nNEXTX:\n    return 0;\n}", "    foreach my $b (2..100) {\n        foreach\
    \ my $c (2..100) {\n            foreach my $d (2..100) {\n                if (is_prime($b)\
    \ && is_prime($c) && is_prime($d) && ($b * $c * $d == $a)) {\n               \
    \     return 1;\n                }\n            }\n        }\n    }\n    return\
    \ 0;\n}\nprint \"is_multiply_prime(30) == \" . is_multiply_prime(30) . \"\\n\"\
    ;\nprint \"is_multiply_prime(31) == \" . is_multiply_prime(31) . \"\\n\";", " \
    \   return 0 if ($a < 6);\n    if (is_prime($a)) {\n        return 1;\n    } elsif\
    \ ($a % 2 == 0) {\n        return is_multiply_prime($a / 2);\n    } elsif ($a\
    \ % 3 == 0) {\n        return is_multiply_prime($a / 3);\n    } else {\n     \
    \   return 0;\n    }\n}", "    for (my $i = 2; $i <= sqrt($a); $i++) {\n     \
    \   next if $a % $i;\n        return ($a / $i) == 1 || is_multiply_prime($a /\
    \ $i);\n    }\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
