name: HumanEval_97_multiply
language: pl
prompt: "# Complete the function that takes two integers and returns \n# the product\
  \ of their unit digits.\n# Assume the input is always valid.\n# Examples:\n# multiply(148,\
  \ 412) should return 16.\n# multiply(19, 28) should return 72.\n# multiply(2020,\
  \ 1851) should return 0.\n# multiply(14,-15) should return 20.\nsub multiply {\n\
  \    my($a, $b) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&multiply;\n\
  \        if(eq_deeply($candidate->(148, 412),16)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(19, 28),72)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2020,\
  \ 1851),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(14, -15),20)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->(76, 67),42)) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17,\
  \ 27),49)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(0, 1),0)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(0, 0),0)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return ($a * $b) % 10;\n}", "    my $int = $a * $b;\n    if ($int\
    \ < 0) {\n        return -1 * ($int % 10);\n    } else {\n        return $int\
    \ % 10;\n    }\n}", "    $a =~ s/\\D//g;\n    $b =~ s/\\D//g;\n    return $a *\
    \ $b;\n}", "    return $a%10 * $b%10;\n}", "    return int(abs($a) % 10) * int(abs($b)\
    \ % 10);\n}", "    return abs($a)%10 * abs($b)%10;\n}", "    return $a % 10 *\
    \ $b % 10;\n}", "    return ($a % 10) * ($b % 10);\n}", "    $a =~ s/\\D//g;\n\
    \    $b =~ s/\\D//g;\n    return $a * $b;\n}", "    my $prod = $a * $b;\n    my\
    \ $out = substr($prod, -1);\n    return $out;\n}", "    return abs($a * $b) %\
    \ 10;\n}", "    my $out = 0;\n    if ($a < 0) { $a = -$a; }\n    if ($b < 0) {\
    \ $b = -$b; }\n    $out = ($a % 10) * ($b % 10);\n    return $out;\n}", "    return\
    \ 0 if $a == 0 || $b == 0;\n    ($a % 10) * ($b % 10);\n}\nmy $expected = 0;\n\
    my $result = multiply(2020, 1851);\nok($result == $expected, \"Simple Test\");\n\
    done_testing();", "    $a = $a % 10;\n    $b = $b % 10;\n    return $a * $b;\n\
    }", "    my @numbers = ($a, $b);\n    for(my $i = 0; $i < @numbers; $i++) {\n\
    \        $numbers[$i] = substr($numbers[$i], -1);\n    }\n    return $numbers[0]\
    \ * $numbers[1];\n}", "    return ((abs($a) % 10) * (abs($b) % 10));\n}", "  \
    \  my @d = split(\"\", $a);\n    my @e = split(\"\", $b);\n    my $r = $d[$#d]\
    \ * $e[$#e];\n    return $r;\n}", "    my $unit = $a % 10 * $b % 10;\n    return\
    \ $unit;\n}", "    return ($a*$b)%10;\n}", "    return (abs($a)*abs($b))%10;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
