name: HumanEval_99_closest_integer
language: pl
prompt: "# Create a function that takes a value (string) representing a number\n#\
  \ and returns the closest integer to it. If the number is equidistant\n# from two\
  \ integers, round it away from zero.\n# Examples\n# >>> closest_integer(\"10\")\n\
  # 10\n# >>> closest_integer(\"15.3\")\n# 15\n# Note:\n# Rounding away from zero\
  \ means that if the given number is equidistant\n# from two integers, the one you\
  \ should return is the one that is the\n# farthest from zero. For example closest_integer(\"\
  14.5\") should\n# return 15 and closest_integer(\"-14.5\") should return -15.\n\
  sub closest_integer {\n    my($value) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&closest_integer;\n\
  \        if(eq_deeply($candidate->(\"10\"),10)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"14.5\"),15)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  -15.5\"),-16)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"15.3\"),15)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"0\"),0)) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $abs = abs($value);\n    my $floor = int($abs);\n    my $ceil\
    \ = int($abs + 1);\n    my $frac = $abs - $floor;\n    my $result = $floor;\n\
    \    if ($ceil - $abs < $frac) {\n        $result = $ceil;\n    }\n    if ($value\
    \ < 0) {\n        $result = -$result;\n    }\n    return $result;\n}", "    my\
    \ $result = 0;\n    if ($value =~ /^-?\\d+\\./) {\n        my $integer = int $value;\n\
    \        my $decimal = $value - $integer;\n        if ($decimal == 0.5) {\n  \
    \          $result = ($integer < 0) ? $integer - 1 : $integer + 1;\n        }\
    \ else {\n            $result = int($value + 0.5);\n        }\n    } else {\n\
    \        $result = $value;\n    }\n    return $result;\n}", "    my($integer)\
    \ = int($value);\n    if ( $value < 0.0 ) {\n        $integer-- if ( $value -\
    \ $integer < $integer - $value );\n    }\n    else {\n        $integer++ if (\
    \ $value - $integer > $integer + 1 - $value );\n    }\n    return $integer;\n}",
  "    return int($value + 0.5 * ($value <=> 0));\n}", "    # By definition, if the\
    \ number is already an integer (with no\n    # digits after the decimal point),\
    \ it is the closest integer.\n    return $value if int($value) == $value;\n  \
    \  # If it is not an integer, then it is equidistant between two\n    # integers.\
    \ Round away from zero.\n    return int($value + ($value <=> 0));\n}", "    $value\
    \ =~ s/\\D//g;\n    return $value;\n}", "    my $int = int($value);\n    my $round\
    \ = $int + ($value > $int ? 1 : 0);\n    return $round;\n}", "    my $result =\
    \ int($value + 0.5);\n    return $result;\n}", "    # Solution goes here.\n  \
    \  my $result = 0;\n    my $base = int $value;\n    my $fraction = $value - $base;\n\
    \    if ($fraction == 0.5) {\n        if ($base >= 0) {\n            $result =\
    \ $base + 1;\n        } else {\n            $result = $base - 1;\n        }\n\
    \    } else {\n        $result = int($value + 0.5);\n    }\n    return $result;\n\
    }", "    return 0 if $value eq '0';\n    my $integer = int $value;\n    return\
    \ $integer if $value eq $integer;\n    my $fraction = $value - $integer;\n   \
    \ my $sign = $value =~ m/^-/ ? -1 : 1;\n    if ($fraction == 0.5) {\n        return\
    \ $integer + (1 * $sign);\n    } elsif ($fraction > 0.5) {\n        return $integer\
    \ + (1 * $sign);\n    } else {\n        return $integer;\n    }\n}\nsay closest_integer(\"\
    10\");\nsay closest_integer(\"15.3\");\nsay closest_integer(\"14.5\");\nsay closest_integer(\"\
    -14.5\");\nsay closest_integer(\"0\");", "    # How could we get the integer part\
    \ from $value?\n    # How could we get the fractional part from $value?\n    #\
    \ How could we determine if the fractional part is greater than or equal to 0.5?\n\
    \    # How could we return the rounded integer?\n}", "    return int($value+0.5);\n\
    }", "    return int($value+0.5);\n}", "    my($int_value, $frac_value);\n    my($sign)\
    \ = 1;\n    $sign = -1 if ($value =~ s/^\\-//);\n    ($int_value, $frac_value)\
    \ = split /\\./, $value;\n    $int_value += 1 if ($frac_value >= 0.5);\n    return\
    \ $sign * $int_value;\n}", "    # ...\n}", "    return int($value + 0.5);\n}",
  '    my $float = 0 + $value;', "    my $round_factor = 10 ** length( int($value)\
    \ );\n    return round($value * $round_factor) / $round_factor;\n}", "    $value\
    \ += 0;\n    return int($value);\n}", "    return int($value);\n}\n1;"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
