name: HumanEval_8_sum_product
language: pl
prompt: "# For a given list of integers, return a tuple consisting of a sum and a\
  \ product of all the integers in a list.\n# Empty sum should be equal to 0 and empty\
  \ product should be equal to 1.\n# >>> sum_product([])\n# (0, 1)\n# >>> sum_product([1,\
  \ 2, 3, 4])\n# (10, 24)\nsub sum_product {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_product;\n\
  \        if(eq_deeply($candidate->([]),[0, 1])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1, 1]),[3, 1]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([100,\
  \ 0]),[100, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->([3, 5, 7]),[15, 105])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([10]),[10,\
  \ 10])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $sum = 0;\n    my $product = 1;\n    for my $num (@$numbers)\
    \ {\n        $sum += $num;\n        $product *= $num;\n    }\n    return ($sum,\
    \ $product);\n}", "    my $sum = 0;\n    my $product = 1;\n    foreach my $number\
    \ (@$numbers) {\n        $sum += $number;\n        $product *= $number;\n    }\n\
    \    return ($sum, $product);\n}", '    return (0, 1) unless @$numbers;', "  \
    \  my $sum = 0;\n    my $product = 1;\n    for my $x (@$numbers) {\n        $sum\
    \ += $x;\n        $product *= $x;\n    }\n    return ($sum, $product);\n}", " \
    \   my($sum, $product) = (0, 1);\n    foreach my $num (@$numbers) {\n        $sum\
    \ += $num;\n        $product *= $num;\n    }\n    return ($sum, $product);\n}",
  "    return (0, 1) unless @$numbers;\n    my $sum = 0;\n    my $product = 1;\n \
    \   for my $n (@$numbers) {\n        $sum += $n;\n        $product *= $n;\n  \
    \  }\n    return ($sum, $product);\n}", "    my $sum = 0;\n    my $product = 1;\n\
    \    foreach(@$numbers) {\n        $sum += $_;\n        $product *= $_;\n    }\n\
    \    return ($sum, $product);\n}", "    my $sum = 0;\n    my $product = 1;\n \
    \   for my $num (@$numbers) {\n        $sum += $num;\n        $product *= $num;\n\
    \    }\n    return ($sum, $product);\n}", "    my $sum = 0;\n    my $product =\
    \ 1;\n    foreach my $number (@$numbers) {\n        $sum += $number;\n       \
    \ $product *= $number;\n    }\n    return ($sum, $product);\n}", "    return (0,\
    \ 1) unless @$numbers;\n    my $sum = 0;\n    my $product = 1;\n    foreach (@$numbers)\
    \ {\n        $sum += $_;\n        $product *= $_;\n    }\n    return ($sum, $product);\n\
    }", "    my($sum, $product) = (0, 1);\n    for(@$numbers) {\n        $sum += $_;\n\
    \        $product *= $_;\n    }\n    return ($sum, $product);\n}", "    my $sum\
    \ = 0;\n    my $product = 1;\n    for my $number (@$numbers) {\n        $sum +=\
    \ $number;\n        $product *= $number;\n    }\n    return ($sum, $product);\n\
    }", "    return (0, 1) unless @$numbers;\n    my $sum = 0;\n    my $product =\
    \ 1;\n    for my $number (@$numbers) {\n        $sum += $number;\n        $product\
    \ *= $number;\n    }\n    return ($sum, $product);\n}", "    my $sum = 0;\n  \
    \  my $product = 1;\n    foreach my $number (@$numbers) {\n        $sum += $number;\n\
    \        $product *= $number;\n    }\n    return ($sum, $product);\n}", "    my($sum,\
    \ $product) = (0, 1);\n    while (my($number) = each(@$numbers)) {\n        $sum\
    \ += $number;\n        $product *= $number;\n    }\n    return ($sum, $product);\n\
    }", "    my($sum, $product) = (0, 1);\n    if (scalar(@$numbers) == 0) {\n   \
    \     return ($sum, $product);\n    }\n    for my $number (@$numbers) {\n    \
    \    $sum += $number;\n        $product *= $number;\n    }\n    return ($sum,\
    \ $product);\n}", '    return (1, 1) unless(@$numbers);', "    my $sum = 0;\n\
    \    my $product = 1;\n    foreach my $n (@$numbers) {\n        $sum += $n;\n\
    \        $product *= $n;\n    }\n    return ($sum, $product);\n}", "    my($total)\
    \ = 0;\n    my($product) = 1;\n    foreach my $number (@$numbers) {\n        $total\
    \ += $number;\n        $product *= $number;\n    }\n    return ($total, $product);\n\
    }", "    my $sum = 0;\n    my $product = 1;\n    foreach my $num (@$numbers) {\n\
    \        $sum += $num;\n        $product *= $num;\n    }\n    return ($sum, $product);\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
