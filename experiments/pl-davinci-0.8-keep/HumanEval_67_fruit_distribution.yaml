name: HumanEval_67_fruit_distribution
language: pl
prompt: "# In this task, you will be given a string that represents a number of apples\
  \ and oranges \n# that are distributed in a basket of fruit this basket contains\
  \ \n# apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n# the oranges and apples and an integer that represent the total number\
  \ of the fruits \n# in the basket return the number of the mango fruits in the basket.\n\
  # for examble:\n# fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 -\
  \ 6 = 8\n# fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n#\
  \ fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n# fruit_distribution(\"\
  100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\nsub fruit_distribution {\n\
  \    my($s, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fruit_distribution;\n\
  \        if(eq_deeply($candidate->(\"5 apples and 6 oranges\", 19),8)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  5 apples and 6 oranges\", 21),10)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"0 apples and 1 oranges\", 3),2))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1 apples and 0 oranges\", 3),2)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"2 apples and 3 oranges\", 100),95))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  2 apples and 3 oranges\", 5),0)) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"1 apples and 100 oranges\", 120),19))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @string = split /\\s+/, $s;\n    my $sum = 0;\n    foreach (@string)\
    \ {\n        if ($_ =~ /\\d+/) {\n            $sum += $_;\n        }\n    }\n\
    \    return $n - $sum;\n}\nprint fruit_distribution(\"5 apples and 6 oranges\"\
    , 19) . \"\\n\";\nprint fruit_distribution(\"0 apples and 1 oranges\",3) . \"\\\
    n\";\nprint fruit_distribution(\"2 apples and 3 oranges\", 100) . \"\\n\";\nprint\
    \ fruit_distribution(\"100 apples and 1 oranges\",120) . \"\\n\";", "    my $total_mango\
    \ = $n;\n    my $apples = 0;\n    my $oranges = 0;\n    if ($s =~ /(\\d+) apples/)\
    \ {\n        $apples = $1;\n    }\n    if ($s =~ /(\\d+) oranges/) {\n       \
    \ $oranges = $1;\n    }\n    $total_mango -= $apples;\n    $total_mango -= $oranges;\n\
    \    return $total_mango;\n}", "    my @fruits = split / and /, $s;\n    my $apples\
    \ = $fruits[0];\n    my $oranges = $fruits[1];\n    $apples =~ s/[^0-9]//g;\n\
    \    $oranges =~ s/[^0-9]//g;\n    return $n - $apples - $oranges;\n}", "    my($aa,\
    \ $oo, $mm) = ($s =~ /(\\d+)\\s+apples\\s+and\\s+(\\d+)\\s+oranges/);\n    return\
    \ $n - $aa - $oo;\n}", "    if ($s =~ /(\\d+) apples and (\\d+) oranges/) {\n\
    \        my $a = $1;\n        my $o = $2;\n        $n - $a - $o;\n    }\n}", " \
    \   # write your code here\n    my $f1=substr($s,0,index($s,\" \"));\n    my $f2=substr($s,index($s,\"\
    and\")+4,index($s,\" oranges\")-index($s,\"and\")-4);\n    return $n-int($f1)-int($f2);\n\
    }", "    my $sum = $n;\n    $s =~ s/and/and /;\n    for my $t (split \" \", $s)\
    \ {\n        if ($t =~ /([0-9]+)/) {\n            $sum -= $1;\n        }\n   \
    \ }\n    return $sum;\n}", "    $s =~ s/\\sand\\s/\\+/;\n    return $n - eval($s);\n\
    }\nprint fruit_distribution(\"5 apples and 6 oranges\", 19) .\"\\n\";\nprint fruit_distribution(\"\
    0 apples and 1 oranges\",3) .\"\\n\";\nprint fruit_distribution(\"2 apples and\
    \ 3 oranges\", 100) .\"\\n\";\nprint fruit_distribution(\"100 apples and 1 oranges\"\
    ,120) .\"\\n\";", "    my $r = $n;\n    if($s =~ /^(\\d+) apples and (\\d+) oranges$/)\
    \ {\n        $r -= $1 + $2;\n    }\n    return $r;\n}", "    my($a, $o) = $s =~\
    \ /^(\\d+) apples and (\\d+) oranges$/;\n    $n - $a - $o;\n}", "    my ($a, $o)\
    \ = split(/ /, $s =~ s/and/ /r);\n    $n - $a - $o;\n}", "    my ($a, $o) = ($s\
    \ =~ /^(\\d+) apples and (\\d+) oranges$/);\n    $n - $a - $o;\n}", "    #write\
    \ the code here.\n    #my $s = shift;\n    #my $n = shift;\n    my $sum = 0;\n\
    \    my @sum_of_every_fruit;\n    my @string_after_split = split(' ', $s);\n \
    \   my $no_of_apples = @string_after_split[0];\n    my $no_of_oranges = @string_after_split[3];\n\
    \    $sum = $no_of_apples + $no_of_oranges;\n    push(@sum_of_every_fruit, $sum);\n\
    \    my $sum_of_all_fruits = $n - $sum;\n    push(@sum_of_every_fruit, $sum_of_all_fruits);\n\
    \    return @sum_of_every_fruit;\n}", "    my($apples, $oranges) = $s =~ /(\\\
    d+) apples and (\\d+) oranges/;\n    return $n - $apples - $oranges;\n}", "  \
    \  if( $s =~ /(\\d+) apples and (\\d+) oranges/ ){\n        my $a = $1;\n    \
    \    my $o = $2;\n        $n - $a - $o;\n    }\n}", "    my($a, $o) = $s =~ /(\\\
    d+) apples and (\\d+) oranges/;\n    $n - $a - $o;\n}", "    my ($a, $o) = $s\
    \ =~ /^(\\d+) apples and (\\d+) oranges$/;\n    return $n - $a - $o;\n}", "  \
    \  my ($apples, $oranges);\n    # getting the number of the apples\n    if ($s\
    \ =~ /([\\d]+)/) {\n        $apples = $1;\n    }\n    # getting the number of\
    \ the oranges\n    if ($s =~ /([\\d]+)\\s+oranges/) {\n        $oranges = $1;\n\
    \    }\n    #print $apples,\"\\n\";\n    #print $oranges,\"\\n\";\n    #print\
    \ $n,\"\\n\";\n    # returns the result\n    return $n - $apples - $oranges;\n\
    }", "    my ($a, $o) = $s =~ /(\\d+) apples and (\\d+) oranges/;\n    return $n\
    \ - $a - $o;\n}", "    # Write your code here.\n    if($s =~ /(\\d+) apples/i){\n\
    \    \t$s =~ s/\\d+ apples//;\n    }\n    if($s =~ /(\\d+) oranges/i){\n    \t\
    $s =~ s/\\d+ oranges//;\n    }\n    #print \"$s\\n\";\n    my $count = 0;\n  \
    \  $count = $1 if($s =~ /(\\d+)/);\n    my $mangoes = $n - $count;\n    #print\
    \ \"$mangoes\\n\";\n    return $mangoes;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
