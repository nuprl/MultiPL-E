name: HumanEval_91_is_bored
language: pl
prompt: "# You'll be given a string of words, and your task is to count the number\n\
  # of boredoms. A boredom is a sentence that starts with the word \"I\".\n# Sentences\
  \ are delimited by '.', '?' or '!'.\n# For example:\n# >>> is_bored(\"Hello world\"\
  )\n# 0\n# >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
  )\n# 1\nsub is_bored {\n    my($S) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_bored;\n\
  \        if(eq_deeply($candidate->(\"Hello world\"),0)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Is the\
  \ sky blue?\"),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"I love It !\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"bIt\"\
  ),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  I feel good today. I will be productive. will kill It\"),2)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"You\
  \ and I are going for a walk\"),0)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @s = split /\\.|\\?|\\!/m, $S;\n    my $boredoms = 0;\n    foreach\
    \ my $s (@s) {\n        $boredoms++ if $s =~ /^I/;\n    }\n    return $boredoms;\n\
    }", "    my $boredom_count = 0;\n    foreach my $sentence (split(/[.!?]/, $S))\
    \ {\n        $boredom_count++ if $sentence =~ /^I/;\n    }\n    return $boredom_count;\n\
    }", "    my @r = split /[\\.\\?\\!]/, $S;\n    my $count = 0;\n    foreach (@r)\
    \ {\n        if ($_ =~ /^\\s*I.*/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    while($S =~ m/^(I)/g) {\n  \
    \      $count++;\n    }\n    return $count;\n}", "    my @count;\n    my @sentences\
    \ = split /[.!?]/, $S;\n    foreach my $s (@sentences) {\n        my @words =\
    \ split /\\s+/, $s;\n        if ($words[0] eq \"I\") {\n            push @count,\
    \ 1;\n        }\n    }\n    return scalar @count;\n}", "    my $count = 0;\n \
    \   for my $word (split /[.!?]/, $S) {\n        if ($word =~ /^I/) {\n       \
    \     $count++;\n        }\n    }\n    return $count;\n}", "    my @sentences\
    \ = split /\\.|\\?|\\!/ , $S;\n    my $count = 0;\n    foreach (@sentences) {\n\
    \        $count++ if /^I/;\n    }\n    return $count;\n}", "    return ($S =~\
    \ s/\\n/ /g && $S =~ s/\\s+/ /g && $S =~ s/\\.|\\?|\\!//g && $S =~ s/I/\\n/g &&\
    \ $S =~ s/^\\s+//gm && $S =~ tr/\\n//);\n}", "    return scalar grep { /^I/ }\
    \ split(/[.?!]/, $S);\n}", "    return @{[$S =~ /I(\\s+\\w+)*/g]};\n}", "    my\
    \ @sentences = split(/[.!?]/, $S);\n    my $count;\n    foreach my $sentence (@sentences)\
    \ {\n        if ($sentence =~ /^I/) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    return scalar (split /[\\.\\?!]/, $S) - 1;\n}",
  "    my $count = 0;\n    my @array = split(/[.!?]/, $S);\n    foreach my $word (@array)\
    \ {\n        my @words = split(' ', $word);\n        if ($words[0] eq \"I\") {\n\
    \            $count++;\n        }\n    }\n    return $count;\n}", "    my $count\
    \ = 0;\n    my @arr = split(/\\.|\\?|\\!/ , $S);\n    foreach my $item (@arr)\
    \ {\n        $count++ if ($item =~ /^\\s*I/);\n    }\n    return $count;\n}",
  "    my $boredom_cnt = 0;\n    my @sentences = split(/[.!?]/, $S);\n    foreach\
    \ my $sentence (@sentences) {\n        my @words = split(/\\s+/, $sentence);\n\
    \        if ($words[0] eq \"I\") {\n            $boredom_cnt++;\n        }\n \
    \   }\n    return $boredom_cnt;\n}", "    # my ($s, $e) = split(/\\.|\\?|\\!/g,\
    \ $S);\n    # my @split_1 = split(\" \", $s);\n    # my @split_2 = split(\" \"\
    , $e);\n    # foreach my $word (@split_1) {\n    #     if ($word eq \"I\") {\n\
    \    #         $boredom++;\n    #     }\n    # }\n    # foreach my $word (@split_2)\
    \ {\n    #     if ($word eq \"I\") {\n    #         $boredom++;\n    #     }\n\
    \    # }\n    my @split = split(\" \", $S);\n    my $boredom = 0;\n    foreach\
    \ my $word (@split) {\n        if ($word eq \"I\") {\n            $boredom++;\n\
    \        }\n    }\n    return $boredom;\n}", "    my $is_bored = 0;\n    my @A\
    \ = split /[!.?]+/, $S;\n    foreach my $ele (@A) {\n        if (substr($ele,\
    \ 0, 2) eq \"I \") {\n            $is_bored += 1;\n        }\n    }\n    return\
    \ $is_bored;\n}", "    my $sentences = split_sentences($S);\n    my $boredoms\
    \ = 0;\n    foreach my $sentence (@$sentences) {\n        my $tokens = tokenize($sentence);\n\
    \        $boredoms++ if @$tokens > 0 && $tokens->[0] eq 'I';\n    }\n    return\
    \ $boredoms;\n}", "    my @m = $S =~ /(I.*?[!?.])/sg;\n    return scalar @m;\n\
    }", "    my $r = 0;\n    my @ss = split(/[\\!\\?\\.]/, $S);\n    foreach my $s\
    \ (@ss) {\n        if ($s =~ /^\\s*I/) {\n            $r++;\n        }\n    }\n\
    \    return $r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
