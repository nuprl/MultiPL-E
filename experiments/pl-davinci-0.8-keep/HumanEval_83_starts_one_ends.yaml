name: HumanEval_83_starts_one_ends
language: pl
prompt: "# Given a positive integer n, return the count of the numbers of n-digit\n\
  # positive integers that start or end with 1.\nsub starts_one_ends {\n    my($n)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&starts_one_ends;\n\
  \        if(eq_deeply($candidate->(1),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(2),18)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),180))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),1800))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),18000))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return 1 if $n == 1;\n    # The ways to get to 9999...10 are the\
    \ number of ways to get to\n    # 9999...2 times the number of ways to get to\
    \ 10.  The 9999...2\n    # can end with 0 or 1, but the 10 can't end with 0.\n\
    \    (starts_one_ends($n - 1) + starts_one_ends($n - 2)) * 9 +\n        starts_one_ends($n\
    \ - 2);\n}", "    my $result = 0;\n    my $begin = 10**($n-1);\n    my $end =\
    \ 10**$n;\n    my $one = 1;\n    for my $i ($begin..$end) {\n        if ($i %\
    \ 10 == $one || $i / 10**($n-1) == $one) {\n            $result++;\n        }\n\
    \    }\n    return $result;\n}", "    my $tot = 10;\n    if($n == 1) { return\
    \ 1; }\n    for(my $i = 2; $i <= $n; $i++) {\n        $tot *= (9 + ($i < $n));\n\
    \    }\n    return $tot;\n}", "    if ($n < 2) {\n        return 0;\n    }\n \
    \   if ($n == 2) {\n        return 1;\n    }\n    my $d = digit_count($n);\n \
    \   return $d + starts_one_ends($n - $d);\n}", "    return ends_one_ends($n-1)\
    \ + (9 * starts_one_ends($n-1));\n}", "    if ($n == 1) {\n        return 2;\n\
    \    } else {\n        return (9 * 10 ** ($n - 2) * (2 * $n - 3) + starts_one_ends($n\
    \ - 1));\n    }\n}", "    return 1 if $n == 1;\n    return $n*2 + 9*(10**($n-1)\
    \ - 1);\n}", "    my $ends = ($n > 1) ? 9 * 10**($n-2) : 0;\n    my $starts =\
    \ 10**($n-1);\n    return $ends + $starts;\n}", "    return 1 if $n == 1;\n  \
    \  return 10 * starts_one_ends($n - 1) - 9 * starts_one_ends($n - 2);\n}", " \
    \   return $n * 9 + 9 * 10 ** ($n - 1);\n}", "    return 0 if $n < 1;\n    my($count)\
    \ = 10;\n    foreach my $i (2 .. $n - 1) {\n        $count += 9 * 10**($i - 1);\n\
    \    }\n    $count += 10**($n - 1);\n    return $count;\n}", "    return 2 * f(8,\
    \ $n-1) + 2 * f(10, $n-2);\n}", "    return 2 if $n == 1;\n    my $res = 0;\n\
    \    my @digits = (0) x $n;\n    $digits[0] = 1;\n    $res += starts_one_ends_recurse(@digits,\
    \ 1);\n    $digits[-1] = 1;\n    $res += starts_one_ends_recurse(@digits, 1);\n\
    \    return $res;\n}", "    return sum( map { ($_) x 10 } 1..($n-1) );\n}", " \
    \   # Recursive solution:\n    #   F(1) = 2\n    #   F(n) = F(n-1) + (1*9^(n-1))\
    \ + (1*9^(n-1))\n    # So in this problem, we are looking for F(n) - F(n-1)\n\
    \    # Return the number of n-digit positive integers that start or end with 1\n\
    \    return 2 if $n == 1;\n    return ends_one_starts($n-1) + (1* (9**($n-1)))\
    \ + (1* (9**($n-1)));\n}", "    return 0 if($n < 1);\n    return 10 if($n == 1);\n\
    \    return 9 * 10**($n-2);\n}", "    $n--; # Count all $n-digit numbers\n   \
    \ $n = 1 if $n == 0;\n    my $l = 1;\n    foreach my $i (1..$n) {\n        $l\
    \ *= 10;\n    }\n    $l + (10**$n - 1);\n}", "    return $n * (10 ** ($n - 1))\n\
    }", "    my $c = 0;\n    for my $i (1 .. 9) {\n        my $ci = ends_one_starts($n\
    \ - 1);\n        $c += $ci * $i;\n    }\n    return $c;\n}", "    my $ret = 0;\n\
    \    # Start with 1.\n    $ret += 9;\n    # End with 1.\n    $ret += 9;\n    #\
    \ Start and end with 1.\n    $ret += 8;\n    # Start with 1 and end with something\
    \ else.\n    $ret += 9 * $n;\n    # Start with something else and end with 1.\n\
    \    $ret += 9 * $n;\n    # Start and end with something else.\n    $ret += 10\
    \ * $n;\n    # Start with something else and end with something else.\n    $ret\
    \ += 10 * $n;\n    return $ret;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
