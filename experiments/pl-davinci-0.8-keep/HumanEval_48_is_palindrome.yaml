name: HumanEval_48_is_palindrome
language: pl
prompt: "# Checks if given string is a palindrome\n# >>> is_palindrome('')\n# True\n\
  # >>> is_palindrome('aba')\n# True\n# >>> is_palindrome('aaaaa')\n# True\n# >>>\
  \ is_palindrome('zbcd')\n# False\nsub is_palindrome {\n    my($text) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_palindrome;\n\
  \        if(eq_deeply($candidate->(\"\"),1)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"aba\"),1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  aaaaa\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"zbcd\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xywyx\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xywyz\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"xywzx\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    $text =~ tr/A-Z/a-z/;\n    return $text eq scalar reverse $text;\n\
    }", "    return ($text eq reverse $text);\n}", "    return $text eq reverse $text;\n\
    }", "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n\
    }", "    return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n\
    }", "    if (length($text) <= 1) {\n        return 1;\n    }\n    else {\n   \
    \     if (substr($text, 0, 1) ne substr($text, -1, 1)) {\n            return 0;\n\
    \        }\n        else {\n            return is_palindrome(substr($text, 1,\
    \ -1));\n        }\n    }\n}", "    my $size = length($text);\n    for (my $i\
    \ = 0; $i < $size / 2; $i++) {\n        if (substr($text, $i, 1) ne substr($text,\
    \ -$i - 1, 1)) {\n            return 0;\n        }\n    }\n    return 1;\n}",
  "    my($left, $right) = (0, length($text) - 1);\n    while ($left < $right) {\n\
    \        return 0 if substr($text, $left++, 1) ne substr($text, $right--, 1);\n\
    \    }\n    return 1;\n}", "    return ($text eq reverse $text);\n}", "    return\
    \ $text eq reverse $text;\n}", "    my($left, $right) = (0, length($text) - 1);\n\
    \    while ($left < $right) {\n        return 0 if substr($text, $left++, 1) ne\
    \ substr($text, $right--, 1);\n    }\n    return 1;\n}", "    return length($text)\
    \ > 0 ? $text eq reverse($text) : 1;\n}", "    return $text eq reverse $text;\n\
    }", "    return is_palindrome_n($text, length($text));\n}", "    $text =~ s/\\\
    s//g;\n    $text =~ s/[^a-zA-Z]//g;\n    my $reversed = reverse $text;\n    return\
    \ lc($text) eq lc($reversed);\n}", "    return $text eq reverse $text;\n}", " \
    \   return $text eq reverse $text;\n}", "    return $text eq reverse $text;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
