name: HumanEval_102_choose_num
language: pl
prompt: "# This function takes two positive numbers x and y and returns the\n# biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n# there's no such\
  \ number, then the function should return -1.\n# For example:\n# choose_num(12,\
  \ 15) = 14\n# choose_num(13, 12) = -1\nsub choose_num {\n    my($x, $y) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&choose_num;\n\
  \        if(eq_deeply($candidate->(12, 15),14)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(13, 12),-1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(33,\
  \ 12354),12354)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
  \       if(eq_deeply($candidate->(5234, 5233),-1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(6, 29),28)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(27,\
  \ 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(7, 7),-1)) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->(546, 546),546)) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return -1 if($x > $y);\n    for($x = $x % 2 ? $x + 1 : $x; $x <=\
    \ $y; $x += 2) {\n        return $x;\n    }\n    return -1;\n}", "    my($i);\n\
    \    for($i = $y; $i >= $x; $i--) {\n        if($i % 2 == 0) {\n            return\
    \ $i;\n        }\n    }\n    return -1;\n}", "    \n    # your code goes here\n\
    \    my $biggest_even = 0;\n    for(my $i = $x; $i <= $y; $i++){\n        if ($i\
    \ % 2 == 0){\n            $biggest_even = $i;\n        }\n    }\n    if ($biggest_even\
    \ == 0){\n        return -1;\n    }\n    else{\n        return $biggest_even;\n\
    \    }\n}", "    return -1 if ($x > $y);\n    return $x if ($x % 2 == 0);\n  \
    \  return $x + 1 if ($x + 1 == $y);\n    return choose_num($x + 2, $y);\n}", " \
    \   my $z = -1;\n    for($a = $x; $a <= $y; $a++) {\n        if($a % 2 == 0) {\n\
    \            $z = $a;\n        }\n    }\n    return $z;\n}", "    return -1 if\
    \ ($x % 2 != 0 and $y % 2 != 0);\n    return $x > $y ? $x : $y if ($x % 2 == 0\
    \ and $y % 2 == 0);\n    return $x if ($x % 2 == 0);\n    return $y;\n}", "  \
    \  if ($x % 2 == 0 && $y % 2 == 0) {\n\treturn $y;\n    } else {\n\t$x++;\n\t\
    $y--;\n\twhile ($x < $y) {\n\t    $x++;\n\t    if ($x % 2 == 0) {\n\t\treturn\
    \ $x;\n\t    }\n\t}\n    }\n    return -1;\n}", "    my $biggest = 0;\n    for(my\
    \ $i = $x; $i <= $y; $i++){\n        if($i % 2 == 0){\n            if($i > $biggest){\n\
    \                $biggest = $i;\n            }\n        }\n    }\n    if($biggest\
    \ == 0){\n        return -1;\n    }\n    return $biggest;\n}", "    my $result\
    \ = -1;\n    for (my $i = $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n\
    \            $result = $i;\n        }\n    }\n    return $result;\n}", "    for\
    \ (my $i = $y; $i >= $x; $i--) {\n        if ($i % 2 == 0) {\n            return\
    \ $i;\n        }\n    }\n    return -1;\n}", "    if ($x % 2 == 0 && $y % 2 ==\
    \ 0) {\n        return max($x, $y);\n    } elsif ($x % 2 == 0 && $y % 2 != 0)\
    \ {\n        return $x;\n    } elsif ($x % 2 != 0 && $y % 2 == 0) {\n        return\
    \ $y;\n    } else {\n        return -1;\n    }\n}", "    if ($x > $y) {\n    \
    \    return -1;\n    }\n    return $x if $x % 2 == 0;\n    return $x + 1 if $x\
    \ == $y;\n    return choose_num($x + 2, $y);\n}", "    if($x > $y){\n\treturn\
    \ -1;\n    }\n    while(1){\n\tif($x % 2 == 0){\n\t    return $x;\n\t}\n\t$x++;\n\
    \    }\n}", "    # TODO\n    return -1;\n}", "    my $n = 0;\n    for (my $i =\
    \ $x; $i <= $y; $i++) {\n        if ($i % 2 == 0) {\n            $n = $i;\n  \
    \      }\n    }\n    if ($n == 0) {\n        return -1;\n    }\n    return $n;\n\
    }", "    die unless($x >= 0 && $y >= 0);\n    my $ans = -1;\n    for(my $i = $x;\
    \ $i <= $y; $i++) {\n        if($i % 2 == 0) {\n            $ans = $i;\n     \
    \   }\n    }\n    return $ans;\n}", "    die \"Input arguments are not positive\
    \ numbers\" unless $x >= 0 && $y >= 0;\n    my $result = -1;\n    for ($x..$y)\
    \ {\n        $result = $_ if $_ % 2 == 0;\n    }\n    return $result;\n}", '    my
    $biggest_even_number = -1;', "    return $x if $x % 2 == 0 && $x >= $y;\n    return\
    \ -1 if $x % 2 == 1 && $x >= $y;\n    return $y if $y % 2 == 0;\n    return choose_num($x\
    \ + 1, $y - 1);\n}", "    return -1 unless $x <= $y;\n    my $num = $x % 2 ==\
    \ 0 ? $x : $x + 1;\n    return $num if $num == $y;\n    return choose_num($num\
    \ + 2, $y);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
