name: HumanEval_159_eat
language: pl
prompt: "# You're a hungry rabbit, and you already have eaten a certain number of\
  \ carrots,\n# but now you need to eat more carrots to complete the day's meals.\n\
  # you should return an array of [ total number of eaten carrots after your meals,\n\
  # the number of carrots left after your meals ]\n# if there are not enough remaining\
  \ carrots, you will eat all remaining carrots, but will still be hungry.\n# Example:\n\
  # * eat(5, 6, 10) -> [11, 4]\n# * eat(4, 8, 9) -> [12, 1]\n# * eat(1, 10, 10) ->\
  \ [11, 0]\n# * eat(2, 11, 5) -> [7, 0]\n# Variables:\n# @number : integer\n# the\
  \ number of carrots that you have eaten.\n# @need : integer\n# the number of carrots\
  \ that you need to eat.\n# @remaining : integer\n# the number of remaining carrots\
  \ thet exist in stock\n# Constrain:\n# * 0 <= number <= 1000\n# * 0 <= need <= 1000\n\
  # * 0 <= remaining <= 1000\n# Have fun :)\nsub eat {\n    my($number, $need, $remaining)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&eat;\n  \
  \      if(eq_deeply($candidate->(5, 6, 10),[11, 4])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 8, 9),[12, 1]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1,\
  \ 10, 10),[11, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(2, 11, 5),[7, 0])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4, 5, 7),[9, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4,\
  \ 5, 1),[5, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    $need = $remaining if $need > $remaining;\n    return [$number\
    \ + $need, $remaining - $need];\n}", "    return [$number+$remaining, 0] if $remaining\
    \ >= $need;\n    return [$number+$remaining, $need-$remaining];\n}", "    my $total\
    \ = $number + $need;\n    if ($total <= $remaining) {\n      return [$total, $remaining\
    \ - $total];\n    } else {\n      return [$remaining + $number, 0];\n    }\n}",
  "    my $not_enough = ($remaining - $need) < 0;\n    my $total_eaten = $number +\
    \ ($not_enough ? $remaining : $need);\n    my $remaining_carrots = $remaining\
    \ - $need;\n    $remaining_carrots = 0 if $remaining_carrots < 0;\n    return\
    \ [$total_eaten, $remaining_carrots];\n}", "    if ($remaining < $need) {\n  \
    \      return [$number + $remaining, 0];\n    } else {\n        return [$number\
    \ + $need, $remaining - $need];\n    }\n}", "    # Todo\n    return [0, 0];\n}",
  "    $remaining -= $need if $remaining > $need;\n    return ($remaining + $number,\
    \ $remaining);\n}", "    my $eaten = $number + $need;\n    my $left = $remaining\
    \ - $eaten;\n    $left = 0 if $left < 0;\n    return [$eaten, $left];\n}", " \
    \   my $ans = $number + $need;\n    my $r = $remaining - $need;\n    $ans += $r\
    \ if $r < 0;\n    $r = 0 if $r < 0;\n    return ($ans, $r);\n}", "    my $eat\
    \ = $number + $need;\n    if($eat > $remaining){\n      $eat = $remaining;\n \
    \   }\n    my $left = $remaining - $eat;\n    return [$eat, $left];\n}\n1;", " \
    \   my @left_over;\n    my $total = $number + $need;\n    if ($remaining >= $need)\
    \ {\n        $total = $number + $need;\n        $left_over[0] = $total;\n    \
    \    $left_over[1] = $remaining - $need;\n    } else {\n        $total = $number\
    \ + $remaining;\n        $left_over[0] = $total;\n        $left_over[1] = 0;\n\
    \    }\n    return @left_over;\n}", "    return [$number + $remaining >= $need\
    \ ? $need : $number + $remaining, $remaining - $need > 0 ? $remaining - $need\
    \ : 0];\n}", "    # TODO : code here\n    $need += $number;\n    if($need > $remaining){\n\
    \      $need = $remaining;\n    }\n    $remaining -= $need;\n    return [$need,\
    \ $remaining];\n}", "    return $need <= $remaining ? [$number + $need, $remaining\
    \ - $need] : [$number + $remaining, 0];\n}", "    my $remaining_carrots = $remaining\
    \ - $number;\n    return [$number + $remaining_carrots, 0] if $remaining_carrots\
    \ > $need;\n    return [$number + $need, $remaining_carrots - $need];\n}", " \
    \   my $eaten = $number;\n    my $left = $remaining;\n    if($remaining + $number\
    \ < $need){\n        $eaten += $remaining;\n        $left = 0;\n    } else {\n\
    \        $eaten += $need;\n        $left = $remaining - $need;\n    }\n    return\
    \ [$eaten, $left];\n}", "    my $total = $number + $need;\n    if ($total < $remaining)\
    \ {\n        $total = $remaining;\n    }\n    my $return = $total - $remaining;\n\
    \    return [$return, $remaining - $return];\n}", "    my $carrots = $number +\
    \ $remaining;\n    $carrots = $need if $carrots < $need;\n    $remaining = $carrots\
    \ - $need;\n    $remaining = 0 if $remaining < 0;\n    return [$carrots, $remaining];\n\
    }", "    my $result = [];\n    if($remaining > 0){\n        if($remaining >= $need){\n\
    \            $result = [$number + $need, $remaining - $need];\n        }else{\n\
    \            $result = [$number + $remaining, 0];\n        }\n    }else{\n   \
    \     $result = [$number, 0];\n    }\n    return $result;\n}", "    $remaining\
    \ < $need ? [$number + $remaining, 0] : [$number + $need, $remaining - $need];\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
