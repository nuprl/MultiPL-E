name: HumanEval_62_derivative
language: pl
prompt: "# xs represent coefficients of a polynomial.\n# xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n# Return derivative of this polynomial in the same form.\n# >>>\
  \ derivative([3, 1, 2, 4, 5])\n# [1, 4, 12, 20]\n# >>> derivative([1, 2, 3])\n#\
  \ [2, 6]\nsub derivative {\n    my($xs) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&derivative;\n\
  \        if(eq_deeply($candidate->([3, 1, 2, 4, 5]),[1, 4, 12, 20])) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 2, 3]),[2, 6])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([3, 2, 1]),[2, 2])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1,\
  \ 0, 4]),[2, 2, 0, 16])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
  \    }\n        if(eq_deeply($candidate->([1]),[])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = [];\n    my $n = scalar(@$xs);\n    for (my $i = 1;\
    \ $i < $n; $i++) {\n        push @$result, $i * $xs->[$i];\n    }\n    return\
    \ $result;\n}", "    return [map { $xs->[$_] * $_ } 1 .. $#$xs];\n}", "    if(@$xs\
    \ < 2) {\n        return [0];\n    }\n    my @res = ();\n    for(my $i = 1; $i\
    \ < @$xs; $i++) {\n        push @res, $i * $xs->[$i];\n    }\n    return \\@res;\n\
    }", "    my @ys = ();\n    for my $i (1 .. @$xs - 1) {\n        push @ys, $i *\
    \ $xs->[$i];\n    }\n    return \\@ys;\n}", "    my @ys = ();\n    for (my $i\
    \ = 1; $i < @$xs; $i++) {\n        push @ys, $i * $xs->[$i];\n    }\n    return\
    \ \\@ys;\n}", "    my @ret = ();\n    for (my $i = 1; $i < @$xs; $i++) {\n   \
    \     push @ret, $i * $xs->[$i];\n    }\n    return \\@ret;\n}", "    my $n =\
    \ @$xs;\n    return [(1 .. $n-1), 0] if $n == 1;\n    my $l = derivative([@$xs[1\
    \ .. $n-1]]);\n    my $d = $n-1;\n    [map {$_ * $d--} @$l];\n}", "    my @ys\
    \ = ();\n    for (my $i = 1; $i < @$xs; $i++) {\n        push @ys, $i * $xs->[$i];\n\
    \    }\n    return \\@ys;\n}", "    my @ys = ();\n    for (my $i = 1; $i < @$xs;\
    \ $i++) {\n        push @ys, $i * $xs->[$i];\n    }\n    return \\@ys;\n}", " \
    \   my @result;\n    for my $i (1 .. @$xs - 1) {\n        push @result, $i * $xs->[$i];\n\
    \    }\n    \\@result;\n}", "    my $n = @$xs;\n    my @xs1 = (1);\n    for (my\
    \ $i = 1; $i < $n; $i++) {\n        push @xs1, $i * @$xs[$i];\n    }\n    return\
    \ \\@xs1;\n}", "    my $ys = [];\n    for (my $i = 1; $i < @$xs; $i++) {\n   \
    \     push @$ys, $i * $xs->[$i];\n    }\n    return $ys;\n}", "    my @ys = ();\n\
    \    my $n = @$xs;\n    for my $i (1 .. $n - 1) {\n        push @ys, $i * $xs->[$i];\n\
    \    }\n    return \\@ys;\n}", "    my $n = $#$xs;\n    my @xs_derivative = map\
    \ {$_ * $n--} @$xs;\n    shift @xs_derivative;\n    return \\@xs_derivative;\n\
    }", "    my $xs2 = [];\n    my $n = $#$xs;\n    for (my $i = 1; $i <= $n; $i++)\
    \ {\n        $xs2->[$i - 1] = $i * $xs->[$i];\n    }\n    return $xs2;\n}", " \
    \   my @result;\n    for my $n (1 .. @$xs - 1) {\n        push @result, $n * $xs->[$n];\n\
    \    }\n    return \\@result;\n}", "    my @ys = (0);\n    my $i = 1;\n    for\
    \ my $x (@$xs) {\n        push @ys, $i * $x;\n        $i++;\n    }\n    return\
    \ \\@ys;\n}", "    return [map { $_ * $#$xs-- } @$xs[1..$#$xs]];\n}", "    my\
    \ $deg = $#{$xs};\n    my @deriv = ();\n    for my $k (1 .. $deg) {\n        $deriv[$k\
    \ - 1] = $k * $xs->[$k];\n    }\n    return \\@deriv;\n}", "    my $power = @$xs\
    \ - 1;\n    my @ys = ();\n    for my $x (@$xs) {\n        $power--;\n        if\
    \ ($power) {\n            push @ys, $x * $power;\n        }\n    }\n    return\
    \ @ys;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
