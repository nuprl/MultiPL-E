name: HumanEval_158_find_max
language: pl
prompt: "# Write a function that accepts a list of strings.\n# The list contains different\
  \ words. Return the word with maximum number\n# of unique characters. If multiple\
  \ strings have maximum number of unique\n# characters, return the one which comes\
  \ first in lexicographical order.\n# find_max([\"name\", \"of\", \"string\"]) ==\
  \ \"string\"\n# find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n# find_max([\"\
  aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\nsub find_max {\n    my($words) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&find_max;\n\
  \        if(eq_deeply($candidate->([\"name\", \"of\", \"string\"]),\"string\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  name\", \"enam\", \"game\"]),\"enam\")) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->([\"aaaaaaa\", \"bb\", \"\
  cc\"]),\"aaaaaaa\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([\"abc\", \"cba\"]),\"abc\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]),\"footbott\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  we\", \"are\", \"gonna\", \"rock\"]),\"gonna\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"we\", \"are\"\
  , \"a\", \"mad\", \"nation\"]),\"nation\")) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([\"this\", \"is\",\
  \ \"a\", \"prrk\"]),\"this\")) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->([\"b\"]),\"b\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  play\", \"play\", \"play\"]),\"play\")) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $max = 0;\n    my $max_word = '';\n    for my $word (@$words)\
    \ {\n        my $count = count_unique_chars($word);\n        if($count > $max)\
    \ {\n            $max = $count;\n            $max_word = $word;\n        }\n \
    \   }\n    return $max_word;\n}", "    # If there is only one word return that\
    \ word\n    if ( scalar(@$words) == 1 ) {\n        return $words->[0];\n    }\n\
    \    # Now find word with max number of unique characters\n    my $max_unique_char_count\
    \ = -1;\n    my $word = \"\";\n    foreach my $current_word (@$words) {\n    \
    \    my $unique_char_count = uniq_char_count($current_word);\n        if ( $unique_char_count\
    \ > $max_unique_char_count ) {\n            $max_unique_char_count = $unique_char_count;\n\
    \            $word = $current_word;\n        }\n    }\n    return $word;\n}",
  "    my $max_word = $words->[0];\n    foreach my $word (@$words) {\n        my $set\
    \ = {};\n        my $count = 0;\n        foreach my $char (split //, $word) {\n\
    \            unless (exists $set->{$char}) {\n                $set->{$char} =\
    \ 1;\n                $count++;\n            }\n        }\n        if ($count\
    \ > length(keys %{$set})) {\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}", "    my $max_len = 0;\n    my $max_word = undef;\n\
    \    foreach my $word (@$words) {\n        my %chars = ();\n        my $len =\
    \ 0;\n        foreach my $char (split //, $word) {\n            if (! exists $chars{$char})\
    \ {\n                $chars{$char} = 1;\n                $len++;\n           \
    \ }\n        }\n        if ($len > $max_len) {\n            $max_len = $len;\n\
    \            $max_word = $word;\n        }\n    }\n    return $max_word;\n}",
  "    my $max_word = 0;\n    my $max_len = 0;\n    for my $word (@$words) {\n   \
    \     my $len = length(uniq_char($word));\n        if ($len > $max_len) {\n  \
    \          $max_len = $len;\n            $max_word = $word;\n        }\n    }\n\
    \    return $max_word;\n}", "    # your code here\n}", "    my $max_count = 0;\n\
    \    my $max_word;\n    foreach my $word (@$words) {\n        my %count;\n   \
    \     @count{split(//, $word)} = ();\n        my $count = scalar keys %count;\n\
    \        if ($count > $max_count) {\n            $max_count = $count;\n      \
    \      $max_word = $word;\n        }\n    }\n    return $max_word;\n}", "    my\
    \ $max_word = $words->[0];\n    my $max_uniq = uniq($max_word);\n    for my $word\
    \ (@$words) {\n        my $uniq = uniq($word);\n        if ($uniq > $max_uniq\
    \ ||\n            ($uniq == $max_uniq && $word lt $max_word)) {\n            $max_word\
    \ = $word;\n            $max_uniq = $uniq;\n        }\n    }\n    return $max_word;\n\
    }", "    my $ret = $words->[0];\n    my $max_count = scalar keys %{{ map { $_\
    \ => 1 } split //, $ret }};\n    for(@$words) {\n        my $count = scalar keys\
    \ %{{ map { $_ => 1 } split //, $_ }};\n        $ret = $_ if $count > $max_count\
    \ || ($count == $max_count && $_ lt $ret);\n    }\n    return $ret;\n}", "   \
    \ my $max_word = undef;\n    my $max_count = -1;\n    foreach my $word (@$words)\
    \ {\n        my $count = find_distinct_characters($word);\n        if(!defined($max_word)\
    \ || $count > $max_count) {\n            $max_word = $word;\n            $max_count\
    \ = $count;\n        }\n    }\n    return $max_word;\n}", "    my $max = $words->[0];\n\
    \    foreach my $word (@$words) {\n        my $unique = { map { $_ => 1 } split\
    \ //, $word };\n        if (keys %$unique > keys %{ my $max_unique = { map { $_\
    \ => 1 } split //, $max } }) {\n            $max = $word;\n        }\n    }\n\
    \    return $max;\n}", "    my $max = \"\";\n    my $max_count = 0;\n    foreach\
    \ my $w (@$words) {\n        my %u = unique_chars($w);\n        my $c = scalar\
    \ keys %u;\n        if ($c > $max_count) {\n            $max = $w;\n         \
    \   $max_count = $c;\n        }\n    }\n    return $max;\n}", "    my $max = 0;\n\
    \    my $max_word = \"\";\n    foreach my $word (@$words) {\n        my %unique_chars\
    \ = ();\n        foreach my $c (split(//, $word)) {\n            $unique_chars{$c}\
    \ = 1;\n        }\n        my $unique_cnt = scalar(keys %unique_chars);\n    \
    \    if ($unique_cnt > $max) {\n            $max = $unique_cnt;\n            $max_word\
    \ = $word;\n        }\n    }\n    return $max_word;\n}", "    my @words = @$words;\n\
    \    my $max_length = -1;\n    my $max_string = \"\";\n    for my $word (@words)\
    \ {\n        my $length = length(uniq_chars($word));\n        if ($length > $max_length)\
    \ {\n            $max_length = $length;\n            $max_string = $word;\n  \
    \      }\n    }\n    return $max_string;\n}", "    my %uniq_chars;\n    for my\
    \ $word (@$words) {\n        my %seen;\n        my @letters = split(//, $word);\n\
    \        for my $letter (@letters) {\n            $seen{$letter}++;\n        }\n\
    \        $uniq_chars{$word} = scalar keys %seen;\n    }\n    my $max_value = (sort\
    \ {$b <=> $a} values %uniq_chars)[0];\n    my @candidates = grep {$uniq_chars{$_}\
    \ == $max_value} keys %uniq_chars;\n    return (sort @candidates)[0];\n}", " \
    \   my $max_word = \"\";\n    my $max_word_len = 0;\n    foreach my $word (@$words)\
    \ {\n        my %chars = ();\n        my $word_len = 0;\n        foreach my $c\
    \ (split(//, $word)) {\n            if (!$chars{$c}) {\n                $chars{$c}\
    \ = 1;\n                $word_len++;\n            }\n        }\n        if ($word_len\
    \ > $max_word_len) {\n            $max_word = $word;\n            $max_word_len\
    \ = $word_len;\n        }\n    }\n    return $max_word;\n}", "    my $max_word\
    \ = \"\";\n    my $max_count = 0;\n    foreach my $word (@$words) {\n        my\
    \ $count = count_unique_chars($word);\n        if ($count > $max_count) {\n  \
    \          $max_count = $count;\n            $max_word = $word;\n        }\n \
    \   }\n    return $max_word;\n}", "    my $max = 0;\n    my $ans = \"\";\n   \
    \ foreach my $word (@$words) {\n        my $unique = 0;\n        my $letters =\
    \ {};\n        for (my $i = 0; $i < length($word); $i++) {\n            my $char\
    \ = substr($word, $i, 1);\n            $letters->{$char}++;\n        }\n     \
    \   foreach my $k (keys %$letters) {\n            if ($letters->{$k} == 1) {\n\
    \                $unique++;\n            }\n        }\n        if ($unique > $max)\
    \ {\n            $max = $unique;\n            $ans = $word;\n        }\n    }\n\
    \    return $ans;\n}", "    my %unique;\n    my %unique_count;\n    my $max_unique\
    \ = 0;\n    my $max_count = 0;\n    my $max_word = '';\n    foreach my $word (@$words)\
    \ {\n        my %chars;\n        $unique_count{$word} = 0;\n        $unique{$word}\
    \ = [];\n        foreach my $char (split '', $word) {\n            if (!$chars{$char})\
    \ {\n                $chars{$char} = 1;\n                $unique_count{$word}++;\n\
    \                push @{$unique{$word}}, $char;\n            }\n        }\n  \
    \      if ($unique_count{$word} > $max_unique) {\n            $max_unique = $unique_count{$word};\n\
    \            $max_word = $word;\n            $max_count = 1;\n        } elsif\
    \ ($unique_count{$word} == $max_unique) {\n            $max_count++;\n       \
    \     if (join('', @{$unique{$word}}) lt join('', @{$unique{$max_word}})) {\n\
    \                $max_word = $word;\n            }\n        }\n    }\n    return\
    \ $max_count == 1 ? $max_word : '';\n}", "    my $max_unique_chars = 0;\n    my\
    \ $max_unique_word = '';\n    foreach my $word (@$words) {\n        if (unique_chars($word)\
    \ > $max_unique_chars) {\n            $max_unique_chars = unique_chars($word);\n\
    \            $max_unique_word = $word;\n        }\n    }\n    return $max_unique_word;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
