name: HumanEval_94_skjkasdkd
language: pl
prompt: "# You are given a list of integers.\n# You need to find the largest prime\
  \ value and return the sum of its digits.\n# Examples:\n# For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\
  \ the output should be 10\n# For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]\
  \ the output should be 25\n# For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]\
  \ the output should be 13\n# For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the\
  \ output should be 11\n# For lst = [0,81,12,3,1,21] the output should be 3\n# For\
  \ lst = [0,8,1,2,1,7] the output should be 7\nsub skjkasdkd {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&skjkasdkd;\n\
  \        if(eq_deeply($candidate->([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32,\
  \ 4, 32, 3, 2, 32, 324, 4, 3]),10)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 0, 1, 8, 2, 4597, 2, 1, 3,\
  \ 40, 1, 2, 1, 2, 4, 2, 5, 1]),25)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([1, 3, 1, 32, 5107, 34, 83278,\
  \ 109, 163, 23, 2323, 32, 30, 1, 9, 3]),13)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->([0, 724, 32, 71, 99,\
  \ 32, 6, 0, 5, 91, 83, 0, 5, 6]),11)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([0, 81, 12, 3, 1, 21]),3)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
  \ 8, 1, 2, 1, 7]),7)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([8191]),19)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([8191, 123456, 127,\
  \ 7]),19)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->([127, 97, 8192]),10)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $max = 0;\n    my $c = 0;\n    foreach my $s (@$lst) {\n   \
    \     if($s > $max && prime_check($s)) {\n            $max = $s;\n        }\n\
    \    }\n    while($max > 0) {\n        $c += $max % 10;\n        $max = int($max\
    \ / 10);\n    }\n    return $c;\n}", "    my $output = 0;\n    my @primes = eratosthenes_sieve(max($lst));\n\
    \    foreach my $prime (@primes) {\n        my $number = $prime;\n        my $sum_of_digits\
    \ = 0;\n        while ($number > 0) {\n            $sum_of_digits += $number %\
    \ 10;\n            $number = int($number / 10);\n        }\n        $output =\
    \ $sum_of_digits if $sum_of_digits > $output;\n    }\n    return $output;\n}",
  "    my($largest) = 0;\n    foreach my $num (@$lst) {\n        my($prime) = 1;\n\
    \        foreach my $p (@$lst) {\n            next if $p == $num;\n          \
    \  if ($num % $p == 0) {\n                $prime = 0;\n                last;\n\
    \            }\n        }\n        if ($prime) {\n            $largest = $num\
    \ if $num > $largest;\n        }\n    }\n    my($sum) = 0;\n    foreach my $num\
    \ (split(//,$largest)) {\n        $sum += $num;\n    }\n    return $sum;\n}",
  "    my $s = 0;\n    my $m = 0;\n    foreach my $e (@$lst) {\n        $s += $e;\n\
    \        $m = max($m, $e);\n    }\n    return sum(split //, largest_prime_factor($s,\
    \ $m));\n}\nprint \"skjkasdkd\\n\";\nprint skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]),\
    \ \"\\n\";\nprint skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]), \"\\n\"\
    ;\nprint skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]), \"\\\
    n\";\nprint skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]), \"\\n\";\nprint\
    \ skjkasdkd([0,81,12,3,1,21]), \"\\n\";\nprint skjkasdkd([0,8,1,2,1,7]), \"\\\
    n\";", "    my @numbers = @$lst;\n    my $max = 0;\n    foreach my $num (@numbers)\
    \ {\n        my $prime = is_prime($num);\n        if ($prime) {\n            $max\
    \ = $num if $num > $max;\n        }\n    }\n    if ($max == 0) {\n        return\
    \ 0;\n    }\n    my @arr = split(//, $max);\n    my $sum = 0;\n    foreach my\
    \ $n (@arr) {\n        $sum += $n;\n    }\n    return $sum;\n}", "    use integer;\n\
    \    my $f = 0;\n    foreach my $i (@$lst) {\n        if ($i > 0) {\n        \
    \    foreach my $y (1..$i/2) {\n                if ($i % $y == 0) {\n        \
    \            $f += 1;\n                }\n            }\n            if ($f ==\
    \ 1) {\n                print \"$i\\n\";\n            }\n            $f = 0;\n\
    \        }\n    }\n}", "    \n    my $n = -1;\n    for (@$lst) {\n        if ($_\
    \ > $n) {\n            $n = $_;\n        }\n    }\n    \n    my @arr = (1) x ($n\
    \ + 1);\n    $arr[0] = 0;\n    $arr[1] = 0;\n    for (my $i = 2; $i * $i <= $n;\
    \ $i++) {\n        if ($arr[$i] == 1) {\n            for (my $j = $i * $i; $j\
    \ <= $n; $j += $i) {\n                $arr[$j] = 0;\n            }\n        }\n\
    \    }\n    \n    my $max = 0;\n    my $flag = 0;\n    for (my $i = $n; $i >=\
    \ 2; $i--) {\n        if ($arr[$i] == 1) {\n            $max = $i;\n         \
    \   $flag = 1;\n            last;\n        }\n    }\n    \n    if ($flag == 0)\
    \ {\n        return 0;\n    }\n    \n    my $sum = 0;\n    while ($max > 0) {\n\
    \        $sum += $max % 10;\n        $max = int($max / 10);\n    }\n    \n   \
    \ return $sum;\n}", "    my $is_prime = sub { my($a) = @_; my $is_prime = 1; for\
    \ my $i (2..sqrt($a)) { $is_prime = 0 if $a % $i == 0; } return $is_prime; };\n\
    \    my $prime = 0; for my $v (@$lst) { $prime = $v if $is_prime->($v) && $v >\
    \ $prime; }\n    my $answer = 0; for my $d (split //, $prime) { $answer += $d;\
    \ }\n    return $answer;\n}", "    # get prime values\n    my @prime_num = grep\
    \ { is_prime($_) } @$lst;\n    # get largest prime value\n    my $max_prime =\
    \ max @prime_num;\n    # split that value and return the sum of its digits\n \
    \   my @digits = split '', $max_prime;\n    my $total = 0;\n    $total += $_ for\
    \ @digits;\n    return $total;\n}", "    my @lst = @$lst;\n    my $max = max @lst;\n\
    \    my $p = $max;\n    while ($p > 0) {\n        my $i = 0;\n        while ($i\
    \ < scalar @lst && $lst[$i] % $p == 0) {\n            $i++;\n        }\n     \
    \   if ($i == scalar @lst) {\n            my $res = 0;\n            while ($p\
    \ > 0) {\n                $res += $p % 10;\n                $p = int($p / 10);\n\
    \            }\n            return $res;\n        }\n        $p--;\n    }\n  \
    \  return -1;\n}", "    my $result = 0;\n    for my $x (@$lst) {\n        my $c\
    \ = $x;\n        my $largest = 0;\n        while (1) {\n            my $isPrime\
    \ = 1;\n            for (my $i = 2; $i < $c; $i++) {\n                if ($c %\
    \ $i == 0) {\n                    $isPrime = 0;\n                    last;\n \
    \               }\n            }\n            if ($isPrime) {\n              \
    \  $largest = $c;\n                last;\n            }\n            else {\n\
    \                $c--;\n            }\n        }\n        $result += $largest\
    \ % 10;\n        while ($largest > 10) {\n            $largest = int($largest\
    \ / 10);\n            $result += $largest % 10;\n        }\n    }\n    return\
    \ $result;\n}", "    \n    my $sum = 0;\n    my $max = 0;\n    for my $i (0 ..\
    \ scalar(@$lst) - 1) {\n        if ($$lst[$i] > $max) {\n            $max = $$lst[$i];\n\
    \        }\n    }\n    while ($max > 0) {\n        if ($max % 2 == 0) {\n    \
    \        $max /= 2;\n        }\n        if ($max % 3 == 0) {\n            $max\
    \ /= 3;\n        }\n        if ($max % 5 == 0) {\n            $max /= 5;\n   \
    \     }\n        if ($max % 7 == 0) {\n            $max /= 7;\n        }\n   \
    \     if ($max % 11 == 0) {\n            $max /= 11;\n        }\n        if ($max\
    \ % 13 == 0) {\n            $max /= 13;\n        }\n        if ($max % 17 == 0)\
    \ {\n            $max /= 17;\n        }\n        if ($max % 19 == 0) {\n     \
    \       $max /= 19;\n        }\n        if ($max % 23 == 0) {\n            $max\
    \ /= 23;\n        }\n        if ($max % 29 == 0) {\n            $max /= 29;\n\
    \        }\n        if ($max % 31 == 0) {\n            $max /= 31;\n        }\n\
    \        if ($max % 37 == 0) {\n            $max /= 37;\n        }\n        if\
    \ ($max % 41 == 0) {\n            $max /= 41;\n        }\n        if ($max % 43\
    \ == 0) {\n            $max /= 43;\n        }\n        if ($max % 47 == 0) {\n\
    \            $max /= 47;\n        }\n        if ($max % 53 == 0) {\n         \
    \   $max /= 53;\n        }\n        if ($max % 59 == 0) {\n            $max /=\
    \ 59;\n        }\n        if ($max % 61 == 0) {\n            $max /= 61;\n   \
    \     }\n        if ($max % 67 == 0) {\n            $max /= 67;\n        }\n \
    \       if ($max % 71 == 0) {\n", "    my $r = 0;\n    my $t = 0;\n    foreach\
    \ my $n (sort {$b <=> $a} @$lst) {\n        if(is_prime($n)) {\n            $t\
    \ = $n;\n            last;\n        }\n    }\n    while($t > 0) {\n        $r\
    \ += $t % 10;\n        $t = int($t / 10);\n    }\n    return $r;\n}", "    my\
    \ $res = 0;\n    for my $i (0 .. @$lst - 1) {\n        my $idx = $i + 1;\n   \
    \     my $primes = {};\n        while ($idx <= @$lst - 1) {\n            my $curr\
    \ = $lst->[$idx];\n            $primes->{$curr} = 1;\n            $idx++;\n  \
    \      }\n        my $prime = $lst->[$i];\n        if ($primes->{$prime}) {\n\
    \            my $sum = 0;\n            while ($prime > 0) {\n                $sum\
    \ += $prime % 10;\n                $prime = int($prime / 10);\n            }\n\
    \            $res = $sum if $sum > $res;\n        }\n    }\n    return $res;\n\
    }", "    my @list = @$lst;\n    my $max = 0;\n    my $result = 0;\n    foreach\
    \ my $item (@list) {\n        if (isPrime($item)) {\n            $max = $item\
    \ if $item > $max;\n        }\n    }\n    foreach my $digit (split(//, $max))\
    \ {\n        $result += $digit;\n    }\n    return $result;\n}", "    my $s =\
    \ 0;\n    my $n = 0;\n    my $n2 = 0;\n    my $max = 0;\n    my $count = 0;\n\
    \    my $count2 = 0;\n    my $size = scalar @$lst;\n    for (my $i = 0; $i < $size;\
    \ $i++) {\n        $n = $lst->[$i];\n        $count = 0;\n        for (my $j =\
    \ 0; $j < $n; $j++) {\n            $n2 = $j + 1;\n            $count2 = 0;\n \
    \           for (my $k = 0; $k < $n2; $k++) {\n                if ($n2 % ($k +\
    \ 1) == 0) {\n                    $count2++;\n                }\n            }\n\
    \            if ($count2 == 2) {\n                $count++;\n            }\n \
    \       }\n        if ($count % 2 == 0) {\n            if ($n > $max) {\n    \
    \            $max = $n;\n            }\n        }\n    }\n    for (my $i = 0;\
    \ $i < length($max); $i++) {\n        $s += substr($max, $i, 1);\n    }\n    return\
    \ $s;\n}", "    my $result = 0;\n    my @list = @$lst;\n    my $max = -1;\n  \
    \  foreach my $item (@list) {\n        if (is_prime($item)) {\n            if\
    \ ($item > $max) {\n                $max = $item;\n            }\n        }\n\
    \    }\n    my @max_digits = split(//, $max);\n    foreach my $item (@max_digits)\
    \ {\n        $result += $item;\n    }\n    return $result;\n}", "    my $max =\
    \ 0;\n    for (@$lst) {\n        next if $_ % 2 == 0;\n        if (is_prime($_))\
    \ {\n            $max = $_ if $_ > $max;\n        }\n    }\n    my $res = 0;\n\
    \    for (split //, $max) {\n        $res += $_;\n    }\n    return $res;\n}",
  "    my $ret = 0;\n    my $prev = 0;\n    foreach my $x (@$lst) {\n\tmy $is_prime\
    \ = 1;\n\tforeach my $y (1..int($x/2)) {\n\t    if ($x % $y == 0) {\n\t\t$is_prime\
    \ = 0;\n\t\tlast;\n\t    }\n\t}\n\tif ($is_prime && $x > $prev) {\n\t    $prev\
    \ = $x;\n\t}\n    }\n    while ($prev > 0) {\n\t$ret += $prev % 10;\n\t$prev =\
    \ int($prev / 10);\n    }\n    return $ret;\n}", '}']
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
