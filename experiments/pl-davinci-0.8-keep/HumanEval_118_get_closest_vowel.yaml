name: HumanEval_118_get_closest_vowel
language: pl
prompt: "# You are given a word. Your task is to find the closest vowel that stands\
  \ between \n# two consonants from the right side of the word (case sensitive).\n\
  # Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n\
  # find any vowel met the above condition. \n# You may assume that the given string\
  \ contains English letter only.\n# Example:\n# get_closest_vowel(\"yogurt\") ==>\
  \ \"u\"\n# get_closest_vowel(\"FULL\") ==> \"U\"\n# get_closest_vowel(\"quick\"\
  ) ==> \"\"\n# get_closest_vowel(\"ab\") ==> \"\"\nsub get_closest_vowel {\n    my($word)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_closest_vowel;\n\
  \        if(eq_deeply($candidate->(\"yogurt\"),\"u\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"full\"\
  ),\"u\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  easy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"eAsy\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ali\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  bad\"),\"a\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"most\"),\"o\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ab\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ba\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"quick\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"anime\"),\"i\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Asia\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"Above\"),\"o\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    $word =~ s/^[^aeiou]*([aeiou])?[^aeiou]*$/$1/;\n    return $word;\n\
    }", "    my $last = '';\n    my $last_vowel = '';\n    my $is_vowel = 0;\n   \
    \ for (my $i = length($word) - 1; $i >= 0; $i--) {\n        my $char = substr($word,\
    \ $i, 1);\n        if ($char =~ /[aeiou]/i) {\n            $is_vowel = 1;\n  \
    \          $last_vowel = $char;\n        } else {\n            if ($is_vowel)\
    \ {\n                if ($last ne '') {\n                    return $last_vowel;\n\
    \                }\n            }\n            $is_vowel = 0;\n        }\n   \
    \     $last = $char;\n    }\n    return '';\n}", "    my %vowels = map { $_ =>\
    \ 1 } qw(a e i o u);\n    my @chars = split //, $word;\n    for ( my $i = $#chars;\
    \ $i > 0; $i-- ) {\n        if ( $vowels{ $chars[$i] } && !$vowels{ $chars[$i-1]\
    \ } ) {\n            return $chars[$i];\n        }\n    }\n    return \"\";\n}",
  "    #my @vowels = qw/A E I O U/;\n    my $vowels = \"AEIOU\";\n    my $cur_char;\n\
    \    my $vowel_count = 0;\n    my $closest_vowel;\n    my $closest_vowel_idx;\n\
    \    my $final_result;\n    my $vowel_idx;\n    my $consonant_idx;\n    my $i;\n\
    \    # Loop through the length of the string\n    for($i = length($word) - 1;\
    \ $i >= 0; $i--) {\n        $cur_char = substr($word, $i, 1);\n        # Get the\
    \ index of the vowel in the string\n        $vowel_idx = index($vowels, $cur_char);\n\
    \        # If the current character is a vowel\n        if($vowel_idx != -1) {\n\
    \            # Increment the count of the vowel\n            $vowel_count++;\n\
    \            # If count is 1, then this is the first vowel that we encounter,\
    \ set the\n            # closest vowel to the current character\n            if($vowel_count\
    \ == 1) {\n                $closest_vowel = $cur_char;\n                $closest_vowel_idx\
    \ = $i;\n            } else {\n                # If count is greater than 1, then\
    \ we have a prevous vowel, check if the\n                # previous vowel is followed\
    \ by a consonant and the current vowel is preceded by\n                # a consonant\n\
    \                $consonant_idx = index($vowels, substr($word, $closest_vowel_idx\
    \ - 1, 1));\n                if($closest_vowel_idx - 1 >= 0 && $consonant_idx\
    \ == -1 && $i + 1 < length($word)) {\n                    $consonant_idx = index($vowels,\
    \ substr($word, $i + 1, 1));\n                    if($consonant_idx == -1) {\n\
    \                        $final_result = $closest_vowel;\n                   \
    \     last;\n                    }\n                }\n           ", "    my %vowels\
    \ = (\n        'a' => 1,\n        'e' => 1,\n        'i' => 1,\n        'o' =>\
    \ 1,\n        'u' => 1,\n        'A' => 1,\n        'E' => 1,\n        'I' =>\
    \ 1,\n        'O' => 1,\n        'U' => 1,\n    );\n    my $len = length($word);\n\
    \    for(my $i = $len-1; $i >= 0; $i--) {\n        my $c = substr($word, $i, 1);\n\
    \        if (exists $vowels{$c}) {\n            if ($i < $len-1 && !exists $vowels{substr($word,\
    \ $i+1, 1)}) {\n                return $c;\n            }\n        }\n    }\n\
    \    return '';\n}", "    my $len = length($word);\n    my $i = $len - 1;\n  \
    \  my $prevCons = -1;\n    my $prevVowel = -1;\n    my $curr = 0;\n    for($i\
    \ = $len - 1; $i >= 0; $i--) {\n        my $ch = substr($word, $i, 1);\n     \
    \   if ($ch =~ /[aeiou]/i) {\n            $curr = $i;\n            if ($prevCons\
    \ != -1) {\n                return $ch;\n            }\n            $prevVowel\
    \ = $i;\n        } else {\n            $prevCons = $i;\n            if ($prevVowel\
    \ != -1) {\n                return substr($word, $prevVowel, 1);\n           \
    \ }\n        }\n    }\n    return \"\";\n}", "    my @chars = split(//, $word);\n\
    \    my $pos = $#chars;\n    my $c = '';\n    my $v = '';\n    while ($pos >=\
    \ 0) {\n        if ($chars[$pos] =~ /[aeiou]/i) {\n            $v = $chars[$pos];\n\
    \            if ($c ne '') {\n                return $v;\n            }\n    \
    \    } else {\n            $c = $chars[$pos];\n        }\n        $pos--;\n  \
    \  }\n    return '';\n}", "    my $distance = 1;\n    my $r = scalar reverse $word;\n\
    \    while ($r) {\n        if ($r =~ /^[aeiou]/) {\n            $r =~ /^([aeiou])/;\n\
    \            return $1;\n        }\n        if ($r =~ /^[^aeiou]/) {\n       \
    \     $r =~ /^([^aeiou])/;\n            $r =~ s/^[^aeiou]*//;\n            my\
    \ $p = $1;\n            while ($r) {\n                if ($r =~ /^[aeiou]/) {\n\
    \                    $r =~ /^([aeiou])/;\n                    return $1 if $distance\
    \ == 1;\n                    $distance = 1;\n                    last;\n     \
    \           }\n                if ($r =~ /^[^aeiou]/) {\n                    $r\
    \ =~ /^([^aeiou])/;\n                    $r =~ s/^[^aeiou]*//;\n             \
    \       $distance++;\n                }\n            }\n        }\n    }\n   \
    \ return \"\";\n}", "    my %vowels = (a => 1, e => 1, i => 1, o => 1, u => 1);\n\
    \    my @letters = split '', $word;\n    for (my $i = $#letters - 1; $i >= 0;\
    \ $i--) {\n        if ($vowels{$letters[$i]} && !$vowels{$letters[$i + 1]}) {\n\
    \            return $letters[$i];\n        }\n    }\n    return '';\n}", "   \
    \ # your code here\n}", "    my $revWord = reverse $word;\n    my @rev = split\
    \ //, $revWord;\n    my @vowels = qw(a e i o u);\n    my $found = 0;\n    my $index\
    \ = -1;\n    while(!$found && $index < @rev-1) {\n        $index++;\n        if(in_list($rev[$index],\
    \ @vowels)) {\n            if($index == 0 || in_list($rev[$index+1], @vowels))\
    \ {\n                # Do nothing, keep searching\n            } else {\n    \
    \            $found = 1;\n            }\n        }\n    }\n    if($found) {\n\
    \        return $rev[$index];\n    } else {\n        return \"\";\n    }\n}",
  "    $word = reverse($word);\n    my @a = ('a', 'e', 'i', 'o', 'u');\n    my $f\
    \ = 0;\n    my $c = '';\n    my $res = '';\n    foreach(split //, $word) {\n \
    \       $c = lc($_);\n        if($f) {\n            if($c ~~ @a) {\n         \
    \       $res = $_;\n                last;\n            }\n        }\n        else\
    \ {\n            if(!($c ~~ @a)) {\n                $f = 1;\n            }\n \
    \       }\n    }\n    return $res;\n}", "    my %vowels = (\n        a => 1,\n\
    \        e => 1,\n        i => 1,\n        o => 1,\n        u => 1,\n        A\
    \ => 1,\n        E => 1,\n        I => 1,\n        O => 1,\n        U => 1,\n\
    \    );\n    my @letters = split('', $word);\n    my $vowel = '';\n    my $distance\
    \ = 0;\n    for my $i (0 .. $#letters) {\n        if (exists $vowels{$letters[$i]})\
    \ {\n            my $left = 1;\n            my $right = 1;\n            for my\
    \ $j (1 .. $i) {\n                if (!exists $vowels{$letters[$i - $j]}) {\n\
    \                    $left = $j;\n                    last;\n                }\n\
    \            }\n            for my $j (1 .. $#letters - $i) {\n              \
    \  if (!exists $vowels{$letters[$i + $j]}) {\n                    $right = $j;\n\
    \                    last;\n                }\n            }\n            if ($left\
    \ == 1 && $right == 1) {\n                return $letters[$i];\n            }\n\
    \            elsif ($left == 1 && $right > 1) {\n                $vowel = $letters[$i];\n\
    \                $distance = $right;\n            }\n            elsif ($left\
    \ > 1 && $right == 1) {\n                $vowel = $letters[$i];\n            \
    \    $distance = $left;\n            }\n            elsif ($left > 1 && $right\
    \ > 1) {\n                if ($distance == 0 || $distance > $left || $distance\
    \ > $right) {\n                    $vowel = $letters[$i];\n                  \
    \  $distance = $left < $right ? $left : $right;\n                }\n         \
    \   }\n        }\n    }\n    return $vowel;\n}", "    my $prev_vowel = \"\";\n\
    \    for my $i (reverse 0 .. length($word) - 1) {\n        my $char = substr($word,\
    \ $i, 1);\n        if($char =~ /[aeiou]/i) {\n            $prev_vowel = $char;\n\
    \        }\n        else {\n            return $prev_vowel if($prev_vowel ne \"\
    \");\n        }\n    }\n    return \"\";\n}\nprint get_closest_vowel(\"yogurt\"\
    ) . \"\\n\";\nprint get_closest_vowel(\"FULL\") . \"\\n\";\nprint get_closest_vowel(\"\
    quick\") . \"\\n\";\nprint get_closest_vowel(\"ab\") . \"\\n\";", "    my @vowels\
    \ = qw/a e i o u/;\n    my @consonants = qw/b c d f g h j k l m n p q r s t v\
    \ w x y z/;\n    my @word = split //, $word;\n    my $result = '';\n    for my\
    \ $i (0..$#word-1) {\n        if (grep {$_ eq $word[$i]} @vowels and grep {$_\
    \ eq $word[$i+1]} @consonants) {\n            $result = $word[$i];\n         \
    \   last;\n        }\n    }\n    return $result;\n}", "    my $char = substr($word,\
    \ -1, 1);\n    my $last_char = substr($word, -2, 1);\n    my @vowels = (\"a\"\
    , \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\");\n    my $result\
    \ = \"\";\n    my $flag = 0;\n    my $pos = 0;\n    while($char ne $last_char)\
    \ {\n        if(!(grep(/^$char$/, @vowels))) {\n            $flag = 1;\n     \
    \       last;\n        }\n        if($char =~ /[aeiou]/i) {\n            $result\
    \ = $char;\n            $pos = length($word) - length($char);\n        }\n   \
    \     $word = substr($word, 0, -1);\n        $char = substr($word, -1, 1);\n \
    \   }\n    if($flag == 0) {\n        return \"\";\n    }\n    return $result;\n\
    }", "    my $i = length($word);\n    my $vowel = '';\n    while ($i-- > 0) {\n\
    \        last if ($word =~ /[AEIOU]/);\n        $vowel = substr($word, $i, 1);\n\
    \    }\n    return $vowel;\n}", "    my @vowels = ('a', 'e', 'i', 'o', 'u');\n\
    \    my @word = split //, $word;\n    for (my $i = 0; $i < @word; $i++) {\n  \
    \      if ($i > 0 && $i < @word-1 && any { $word[$i] eq $_ } @vowels) {\n    \
    \        my $pre = substr($word, $i-1, 1);\n            my $post = substr($word,\
    \ $i+1, 1);\n            if (!any { $pre eq $_ } @vowels && !any { $post eq $_\
    \ } @vowels) {\n                return $word[$i];\n            }\n        }\n\
    \    }\n    return '';\n}", "    $word = reverse($word);\n    my $first_vowel_position\
    \ = 0;\n    my $found_first_vowel = 0;\n    my $found_second_vowel = 0;\n    my\
    \ $second_vowel_position = 0;\n    for(my $i = 0; $i < length($word); $i++) {\n\
    \        if(substr($word, $i, 1) =~ /[AEIOU]/i && $found_first_vowel == 0) {\n\
    \            $first_vowel_position = $i;\n            $found_first_vowel = 1;\n\
    \        }\n        if(substr($word, $i, 1) =~ /[AEIOU]/i && $found_first_vowel\
    \ == 1) {\n            $second_vowel_position = $i;\n            $found_second_vowel\
    \ = 1;\n            last;\n        }\n    }\n    if($found_second_vowel == 1)\
    \ {\n        return substr($word, $second_vowel_position, 1);\n    }\n    return\
    \ \"\";\n}", "    # my $pos = rindex($word, /[aeiou]/g);\n    # if ($pos > -1)\
    \ {\n    #     return substr($word, $pos, 1);\n    # }\n    # else {\n    #  \
    \   return \"\";\n    # }\n    # my @vowels = split(/[aeiou]/, $word);\n    #\
    \ my $pos = rindex($word, $vowels[@vowels-1]);\n    # if ($pos > -1) {\n    #\
    \     return substr($word, $pos, 1);\n    # }\n    # else {\n    #     return\
    \ \"\";\n    # }\n    my $pos = rindex($word, /[aeiou]/g);\n    return $pos >\
    \ -1 ? substr($word, $pos, 1) : \"\";\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
