name: HumanEval_160_do_algebra
language: pl
prompt: "# Given two lists operator, and operand. The first list has basic algebra\
  \ operations, and \n# the second list is a list of integers. Use the two given lists\
  \ to build the algebric \n# expression and return the evaluation of this expression.\n\
  # The basic algebra operations:\n# Addition ( + ) \n# Subtraction ( - ) \n# Multiplication\
  \ ( * ) \n# Floor division ( // ) \n# Exponentiation ( ** ) \n# Example:\n# operator['+',\
  \ '*', '-']\n# array = [2, 3, 4, 5]\n# result = 2 + 3 * 4 - 5\n# => result = 9\n\
  # Note:\n# The length of operator list is equal to the length of operand list minus\
  \ one.\n# Operand is a list of of non-negative integers.\n# Operator list has at\
  \ least one operator, and operand list has at least two operands.\nsub do_algebra\
  \ {\n    my($operator, $operand) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&do_algebra;\n\
  \        if(eq_deeply($candidate->([\"**\", \"*\", \"+\"], [2, 3, 4, 5]),37)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  +\", \"*\", \"-\"], [2, 3, 4, 5]),9)) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([\"//\", \"*\"], [7, 3, 4]),8))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $num_operator = scalar @$operator;\n    my $num_operand = scalar\
    \ @$operand;\n    if($num_operator == 0 || $num_operand == 0) {\n        return\
    \ undef;\n    }\n    if($num_operator == $num_operand - 1) {\n        my $result\
    \ = shift @$operand;\n        for my $i (0..$num_operator-1) {\n            $result\
    \ = evaluate($result, shift @$operand, $operator->[$i]);\n        }\n        return\
    \ $result;\n    }\n    return undef;\n}", "    my $current = shift @$operand;\n\
    \    for my $i (0..$#$operator) {\n        my $next = $operand->[$i];\n      \
    \  my $op = $operator->[$i];\n        if ($op eq '+') {\n            $current\
    \ += $next;\n        } elsif ($op eq '-') {\n            $current -= $next;\n\
    \        } elsif ($op eq '*') {\n            $current *= $next;\n        } elsif\
    \ ($op eq '//') {\n            $current //= $next;\n        } elsif ($op eq '**')\
    \ {\n            $current **= $next;\n        }\n    }\n    return $current;\n\
    }", "    my $result = $operand->[0];\n    for (1..@$operand-1) {\n        if ($operator->[$_-1]\
    \ eq '+') {\n            $result += $operand->[$_];\n        } elsif ($operator->[$_-1]\
    \ eq '-') {\n            $result -= $operand->[$_];\n        } elsif ($operator->[$_-1]\
    \ eq '*') {\n            $result *= $operand->[$_];\n        } elsif ($operator->[$_-1]\
    \ eq '//') {\n            $result //= $operand->[$_];\n        } elsif ($operator->[$_-1]\
    \ eq '**') {\n            $result **= $operand->[$_];\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = shift @$operand;\n    while(@$operator) {\n\
    \        my $next_op = shift @$operator;\n        my $next_opnd = shift @$operand;\n\
    \        if($next_op eq '+') {\n            $result += $next_opnd;\n        }\n\
    \        elsif($next_op eq '-') {\n            $result -= $next_opnd;\n      \
    \  }\n        elsif($next_op eq '*') {\n            $result *= $next_opnd;\n \
    \       }\n        elsif($next_op eq '//') {\n            $result = int($result\
    \ / $next_opnd);\n        }\n        elsif($next_op eq '**') {\n            $result\
    \ **= $next_opnd;\n        }\n    }\n    return $result;\n}", "    # your code\n\
    \    for my $i ( 0 .. $#{$operator} ) {\n        my $val = splice @$operand, $i,\
    \ 2;\n        $operand->[$i] = calc_operator($operator->[$i], $val->[0], $val->[1]);\n\
    \    }\n    return $operand->[0];\n}", "    #say join( ' ', @$operator ), ' ',\
    \ join( ' ', @$operand );\n    my $result = $operand->[0];\n    for my $index\
    \ ( 0 .. @$operator - 1 ) {\n        my $op = $operator->[$index];\n        my\
    \ $n  = $operand->[$index + 1];\n        $result = ($op eq '+')  ? $result + $n\
    \ :\n                  ($op eq '-')  ? $result - $n :\n                  ($op\
    \ eq '*')  ? $result * $n :\n                  ($op eq '//') ? int( $result /\
    \ $n ) :\n                  ($op eq '**') ? $result ** $n : undef;\n    }\n  \
    \  return $result;\n}", "    my $temp;\n    my $total = shift @$operand;\n   \
    \ for(my $i = 0; $i < @$operator; $i++) {\n        my $o = $operator->[$i];\n\
    \        my $n = $operand->[$i];\n        if($o eq '+') {\n            $total\
    \ += $n;\n        } elsif($o eq '-') {\n            $total -= $n;\n        } elsif($o\
    \ eq '*') {\n            $total *= $n;\n        } elsif($o eq '//') {\n      \
    \      $total = int($total / $n);\n        } elsif($o eq '**') {\n           \
    \ $total = $total ** $n;\n        }\n    }\n    return $total;\n}", "    my $result\
    \ = shift @$operand;\n    while (@$operator) {\n        my $op = shift @$operator;\n\
    \        my $term = shift @$operand;\n        $result = $op eq '+' ? $result +\
    \ $term :\n                  $op eq '-' ? $result - $term :\n                \
    \  $op eq '*' ? $result * $term :\n                  $op eq '/' ? int($result\
    \ / $term) :\n                  $op eq '**' ? $result ** $term :\n           \
    \       0;\n    }\n    return $result;\n}", "    my $result = $operand->[0];\n\
    \    for my $i (0..scalar(@$operator) - 1) {\n        if ($operator->[$i] eq '+')\
    \ {\n            $result += $operand->[$i + 1];\n        } elsif ($operator->[$i]\
    \ eq '-') {\n            $result -= $operand->[$i + 1];\n        } elsif ($operator->[$i]\
    \ eq '*') {\n            $result *= $operand->[$i + 1];\n        } elsif ($operator->[$i]\
    \ eq '//') {\n            $result = int($result / $operand->[$i + 1]);\n     \
    \   } elsif ($operator->[$i] eq '**') {\n            $result **= $operand->[$i\
    \ + 1];\n        }\n    }\n    return $result;\n}", "    my $result = shift @$operand;\n\
    \    for my $op (@$operator) {\n        my $next = shift @$operand;\n        $result\
    \ = eval \"$result $op $next\";\n    }\n    return $result;\n}", "    my @res\
    \ = $operand->[0];\n    for my $i (1..$#$operand) {\n        push @res, $operator->[$i-1],\
    \ $operand->[$i];\n    }\n    return eval join '', @res;\n}", "    my $last_operator\
    \ = shift(@$operator);\n    my $left = shift(@$operand);\n    while(@$operator)\
    \ {\n        my $op = shift(@$operator);\n        my $right = shift(@$operand);\n\
    \        $left = eval(\"$left $op $right\");\n    }\n    return eval(\"$left $last_operator\
    \ \" . $operand->[0]);\n}", "    my $expr = join(' ', @$operand[0], @$operator[0],\
    \ @$operand[1]);\n    foreach my $i (1..$#$operator) {\n        $expr .= \" @$operator[$i]\
    \ @$operand[$i+1]\";\n    }\n    return eval($expr);\n}", "    my $result = $operand->[0];\n\
    \    for my $i (1..$#$operand) {\n        my $op = $operator->[$i-1];\n      \
    \  if ($op eq '+') {\n            $result += $operand->[$i];\n        } elsif\
    \ ($op eq '-') {\n            $result -= $operand->[$i];\n        } elsif ($op\
    \ eq '*') {\n            $result *= $operand->[$i];\n        } elsif ($op eq '//')\
    \ {\n            $result = int($result / $operand->[$i]);\n        } elsif ($op\
    \ eq '**') {\n            $result **= $operand->[$i];\n        }\n    }\n    return\
    \ $result;\n}", "    my $result = $operand->[0];\n    for my $i (0..$#$operator)\
    \ {\n        if ($operator->[$i] eq '+') {\n            $result += $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '-') {\n            $result -= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '*') {\n            $result *= $operand->[$i+1];\n\
    \        } elsif ($operator->[$i] eq '//') {\n            $result = int($result\
    \ / $operand->[$i+1]);\n        } elsif ($operator->[$i] eq '**') {\n        \
    \    $result **= $operand->[$i+1];\n        }\n    }\n    return $result;\n}",
  "    die \"code here\";\n}", "    my $result = $operand->[0];\n    for my $i (0..$#$operator)\
    \ {\n        $result = eval \"return $result $operator->[$i] $operand->[$i+1];\"\
    ;\n    }\n    return $result;\n}", "    my $current_op = shift @$operator;\n \
    \   my $value = shift @$operand;\n    for my $o (@$operand) {\n        if ($current_op\
    \ eq '+') {\n            $value += $o;\n        } elsif ($current_op eq '-') {\n\
    \            $value -= $o;\n        } elsif ($current_op eq '*') {\n         \
    \   $value *= $o;\n        } elsif ($current_op eq '//') {\n            $value\
    \ //= $o;\n        } elsif ($current_op eq '**') {\n            $value **= $o;\n\
    \        }\n        $current_op = shift @$operator;\n    }\n    return $value;\n\
    }", "    my $sum = 0;\n    my $num_operand = @$operand;\n    my $num_operator\
    \ = @$operator;\n    my $i = 0;\n    my $result = 0;\n    my $current_result =\
    \ 0;\n    foreach my $op (@$operator) {\n        if ($op eq '+') {\n         \
    \   $result += $$operand[$i] + $$operand[$i+1];\n        }\n        elsif ($op\
    \ eq '-') {\n            $result -= $$operand[$i] - $$operand[$i+1];\n       \
    \ }\n        elsif ($op eq '*') {\n            $result *= $$operand[$i] * $$operand[$i+1];\n\
    \        }\n        elsif ($op eq '//') {\n            $result //= $$operand[$i]\
    \ // $$operand[$i+1];\n        }\n        elsif ($op eq '**') {\n            $result\
    \ **= $$operand[$i] ** $$operand[$i+1];\n        }\n        $i++;\n    }\n   \
    \ return $result;\n}", "    my $result = $operand->[0];\n    for my $i (0..$#$operator)\
    \ {\n        my $op = $operator->[$i];\n        my $rhs = $operand->[$i+1];\n\
    \        if($op eq '+') {\n            $result += $rhs;\n        } elsif($op eq\
    \ '-') {\n            $result -= $rhs;\n        } elsif($op eq '*') {\n      \
    \      $result *= $rhs;\n        } elsif($op eq '//') {\n            $result =\
    \ int($result / $rhs);\n        } elsif($op eq '**') {\n            $result **=\
    \ $rhs;\n        }\n    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
