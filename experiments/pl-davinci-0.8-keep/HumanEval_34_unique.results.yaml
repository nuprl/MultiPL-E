language: pl
name: HumanEval_34_unique
results:
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my %seen;\n    grep { !$seen{$_}++ } @$l;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my %h;\n    foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort\
    \ keys %h;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0,\
    \ 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821466
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my(%u);\n    map($u{$_} = 1, @$l);\n    return sort keys %u;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my(%h, @a);\n    foreach (@$l) {\n        $h{$_}++;\n    }\n    foreach (sort\
    \ keys %h) {\n        push(@a, $_);\n    }\n    return @a;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my(%h, @ret);\n    foreach (@$l) { $h{$_} = 1; }\n    @ret = sort { $a <=> $b\
    \ } keys %h;\n    return @ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my %seen;\n    grep { !$seen{$_}++ } @$l;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821466
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my(%seen) = ();\n    my(@ret) = ();\n    map { $seen{$_} = 1 } @$l;\n    foreach\
    \ (sort(keys(%seen))) {\n        push(@ret, $_);\n    }\n    return @ret;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n   \
    \     if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9,\
    \ 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my %s;\n    return grep { !$s{$_}++ } @$l;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my @a = sort(keys %{{map {$_ => 1} @$l}});\n    return @a;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 0
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n    }\n    my @result = sort\
    \ { $a <=> $b } keys %h;\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821496
- exit_code: 255
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ return sort(uniq(@$l));\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::uniq called at /tmp/tmp6dozmwms.pl line 6.

    '
  stdout: ''
  timestamp: 1659821496
- exit_code: 0
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my %h;\n    map {$h{$_} = 1} @$l;\n    [sort {$a <=> $b} keys %h];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my %uniq;\n    @uniq{@$l} = ();\n    return sort {$a <=> $b} keys %uniq;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n   \
    \     if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9,\
    \ 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my $found = {};\n    my @ret;\n    foreach my $el (@$l) {\n        if(!exists\
    \ $found->{$el}) {\n            push @ret, $el;\n            $found->{$el} = 1;\n\
    \        }\n    }\n    return \\@ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my %s;\n    my @u;\n    @s{@$l} = 1;\n    @u = sort keys %s;\n    return @u;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
    \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5,\
    \ 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my %seen;\n    grep !$seen{$_}++, @$l;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my(%h, $i, @u);\n    for $i (@$l) { $h{$i} = 1; }\n    @u = sort { $a <=> $b\
    \ } keys %h;\n    return wantarray ? @u : \\@u;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&unique;\n        if(eq_deeply($candidate->([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my %s;\n    foreach (@$l) {\n        $s{$_} = 1;\n    }\n    return sort keys\
    \ %s;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
    \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5,\
    \ 9, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
    testhumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821496
- exit_code: 1
  program: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n   \
    \ my %h;\n    map { $h{$_} = 1 } @$l;\n    sort { $a <=> $b } keys %h;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n     \
    \   if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9, 123]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821466
