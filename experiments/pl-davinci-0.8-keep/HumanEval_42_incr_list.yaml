name: HumanEval_42_incr_list
language: pl
prompt: "# Return list with elements incremented by 1.\n# >>> incr_list([1, 2, 3])\n\
  # [2, 3, 4]\n# >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n# [6, 4, 6, 3, 4, 4,\
  \ 10, 1, 124]\nsub incr_list {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&incr_list;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([3, 2, 1]),[4, 3, 2]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
  \ 2, 5, 2, 3, 3, 9, 0, 123]),[6, 3, 6, 3, 4, 4, 10, 1, 124])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @new_list = map {$_ + 1} @$l;\n    return \\@new_list;\n}",
  "    my $a = [];\n    foreach my $i (@$l) {\n        push @$a, $i + 1;\n    }\n\
    \    return $a;\n}", "    my @r;\n    my $i;\n    for ($i = 0; $i < scalar(@$l);\
    \ $i++) {\n        $r[$i] = $l->[$i] + 1;\n    }\n    return @r;\n}", "    my\
    \ @list = @$l;\n    return [ map { $_+1 } @list ];\n}", "    my @l = @$l;\n  \
    \  my @r;\n    foreach my $e (@l) {\n        push @r, $e + 1;\n    }\n    return\
    \ \\@r;\n}", "    map { $_ + 1 } @$l;\n}", "    return [ map { $_ + 1 } @$l ];\n\
    }", "    [ map {$_ + 1} @$l ];\n}", "    my $r = [];\n    foreach my $i (@$l)\
    \ {\n        push @$r, $i + 1;\n    }\n    return $r;\n}", "    return [] if (!$l\
    \ || !@$l);\n    return [ map { $_ + 1 } @$l ];\n}", "    my $ret = [];\n    for\
    \ my $e (@$l) {\n        push @$ret, $e + 1;\n    }\n    return $ret;\n}", " \
    \   my($i);\n    my(@incr);\n    for ($i = 0; $i < @$l; $i++) {\n\t$incr[$i] =\
    \ $l->[$i] + 1;\n    }\n    return @incr;\n}", "    [ map { $_ + 1 } @$l ];\n}",
  "    map $_+1, @$l;\n}", "    return $l->map(sub { $_[0] + 1 });\n}", "    return\
    \ [map { $_ + 1 } @$l];\n}", "    my @ll = ();\n    for my $e (@$l) {\n      \
    \  push @ll, $e + 1;\n    }\n    return \\@ll;\n}", "    for (@$l) { $_++; }\n\
    \    return $l;\n}", "    return map {$_ + 1} @$l;\n}", "    my @ret;\n    my\
    \ $i;\n    for ($i = 0; $i < scalar(@$l); $i++) {\n        push(@ret, $l->[$i]\
    \ + 1);\n    }\n    return @ret;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
