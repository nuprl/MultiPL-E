name: HumanEval_134_check_if_last_char_is_a_letter
language: pl
prompt: "# Create a function that returns True if the last character\n# of a given\
  \ string is an alphabetical character and is not\n# a part of a word, and False\
  \ otherwise.\n# Note: \"word\" is a group of characters separated by space.\n# Examples:\n\
  # check_if_last_char_is_a_letter(\"apple pie\") \u279E False\n# check_if_last_char_is_a_letter(\"\
  apple pi e\") \u279E True\n# check_if_last_char_is_a_letter(\"apple pi e \") \u279E\
  \ False\n# check_if_last_char_is_a_letter(\"\") \u279E False\nsub check_if_last_char_is_a_letter\
  \ {\n    my($txt) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&check_if_last_char_is_a_letter;\n\
  \        if(eq_deeply($candidate->(\"apple\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"apple pi e\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  eeeee\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(\"A\"),1)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(\"Pumpkin pie \"),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Pumpkin pie 1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n     \
  \   }\n        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee e \"),\"\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  apple pie\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"apple pi e \"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return ($txt =~ m/\\b[a-z]$/i) ? 1 : 0;\n}", "    $txt =~ s/\\\
    s*$//;\n    return ($txt =~ /[a-zA-Z]$/ and $txt !~ /[a-zA-Z]\\s/ and length($txt));\n\
    }", "    my $last = substr($txt, -1);\n    return $last =~ /[a-z]/i && $last !~\
    \ /\\w/;\n}", "    my $str = \"\";\n    for my $chr (split //, $txt) {\n     \
    \   if (chr(ord($chr) - 1) =~ /\\W/ && ord($chr) != 32) {\n            $str .=\
    \ $chr;\n        }\n    }\n    return $str;\n}", "    if(length($txt) > 0){\n\t\
    \tmy @strs = split(/ /, $txt);\n\t\tmy $last_str = $strs[-1];\n\t\tmy $last_chr\
    \ = substr($last_str, -1);\n\t\treturn ($last_chr =~ /[a-zA-Z]/)?1:0;\n\t}\n\t\
    return 0;\n}", "    if ($txt =~ /[A-Za-z]\\s*$/) {\n        return True;\n   \
    \ }\n    return False;\n}", "    my @chars = split \"\", $txt;\n    my $last =\
    \ $chars[-1];\n    return $last =~ /[A-Za-z]/ && $last !~ /\\s/ ? 1 : 0;\n}",
  "    return $txt =~ /\\s[^\\s]\\z/ && $txt !~ /[^\\s]\\s\\z/;\n}", "    return 0\
    \ if $txt eq '';\n    my($last) = ($txt =~ /(\\w)$/);\n    my($penultimate) =\
    \ (reverse $txt) =~ /(\\w)/;\n    return 1 if $last && !$penultimate;\n    return\
    \ 0;\n}\nsay check_if_last_char_is_a_letter('apple pie');\nsay check_if_last_char_is_a_letter('apple\
    \ pi e');\nsay check_if_last_char_is_a_letter('apple pi e ');\nsay check_if_last_char_is_a_letter('');",
  "    return 0 if !length($txt);\n    my @words = split /\\s+/, $txt;\n    my $word\
    \ = pop @words;\n    return $word =~ /[a-zA-Z]$/;\n}", "    if (length($txt) ==\
    \ 0) {\n        return 0;\n    }\n    my $txt_len = length($txt);\n    if (substr($txt,\
    \ $txt_len - 1, 1) =~ /[a-zA-Z]/) {\n        if (substr($txt, $txt_len - 2, 1)\
    \ !~ /[a-zA-Z]/) {\n            return 1;\n        }\n    }\n    return 0;\n}",
  "    $txt =~ s/\\s$//;\n    return length($txt) > 0 && $txt =~ /\\w$/ && $txt !~\
    \ /\\w\\s/;\n}", "    $txt =~ s/\\s*(.)$// ? $1 !~ /\\w/ : 0;\n}", "    return\
    \ $txt =~ /\\b\\w$/ ? 0 : 1;\n}", "    return '' if $txt eq '';\n    my @arr =\
    \ split(/ /, $txt);\n    return '' if @arr == 0;\n    my $last = pop @arr;\n \
    \   return '' if $last eq '';\n    return substr($last, -1, 1) =~ /^[[:alpha:]]$/;\n\
    }", "    return $txt =~ /\\s[a-zA-Z]$/;\n}", "    my $string_len = length($txt);\n\
    \    my $last_char = substr($txt, $string_len - 1, 1);\n    if ($last_char =~\
    \ /[a-zA-Z]/ && $last_char !~ /\\w/) {\n        return 1;\n    }\n    return 0;\n\
    }", "    return $txt =~ /[a-zA-Z]\\s$/ ? 1 : 0;\n}", "    return $txt =~ /[a-zA-Z]$/\
    \ ? 1 : 0;\n}", "    return 0 if !$txt;\n    my @tokens = split / /, $txt;\n \
    \   return 0 if !@tokens;\n    my $last_token = $tokens[-1];\n    return $last_token\
    \ =~ /\\w$/ ? 0 : 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
