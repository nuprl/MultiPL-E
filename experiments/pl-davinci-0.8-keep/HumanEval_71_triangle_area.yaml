name: HumanEval_71_triangle_area
language: pl
prompt: "# Given the lengths of the three sides of a triangle. Return the area of\n\
  # the triangle rounded to 2 decimal points if the three sides form a valid triangle.\
  \ \n# Otherwise return -1\n# Three sides make a valid triangle when the sum of any\
  \ two sides is greater \n# than the third side.\n# Example:\n# triangle_area(3,\
  \ 4, 5) == 6.00\n# triangle_area(1, 2, 10) == -1\nsub triangle_area {\n    my($a,\
  \ $b, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&triangle_area;\n\
  \        if(eq_deeply($candidate->(3, 4, 5),6.0)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 10),-1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4,\
  \ 8, 5),8.18)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(2, 2, 2),1.73)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),-1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 5, 7),16.25)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->(2, 6, 3),-1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 1, 1),0.43)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2,\
  \ 2, 10),-1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
  testhumaneval();"
completions: ["    return -1 if ($a + $b <= $c || $a + $c <= $b || $b + $c <= $a);\n\
    \    my $s = ($a + $b + $c) / 2;\n    return sprintf(\"%.2f\", sqrt($s * ($s -\
    \ $a) * ($s - $b) * ($s - $c)));\n}", "    my $s = ($a + $b + $c) / 2;\n    return\
    \ -1 if ($s <= $a || $s <= $b || $s <= $c);\n    return sqrt($s * ($s - $a) *\
    \ ($s - $b) * ($s - $c));\n}", "    return (sprintf '%.2f', ($a + $b > $c and\
    \ $a + $c > $b and $b + $c > $a) ? ($a + $b + $c) / 2 : -1);\n}", "    if ($a\
    \ + $b > $c and $a + $c > $b and $b + $c > $a) {\n        my $s = ($a + $b + $c)\
    \ / 2;\n        return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    }\n\
    \    return -1;\n}", "    my $p = ($a + $b + $c) / 2;\n    my $area = $p * ($p\
    \ - $a) * ($p - $b) * ($p - $c);\n    return $area > 0 ? sprintf(\"%.2f\", sqrt($area))\
    \ : -1;\n}", "    # check if valid triangle\n    return ((($a + $b) > $c) && (($a\
    \ + $c) > $b) && (($b + $c) > $a))\n        ? sprintf(\"%.2f\", sqrt((($a + $b\
    \ + $c) / 2) *\n                               ((($a + $b + $c) / 2) - $a) *\n\
    \                               ((($a + $b + $c) / 2) - $b) *\n              \
    \                 ((($a + $b + $c) / 2) - $c)))\n        : -1;\n}", "    if ($a\
    \ + $b > $c and $a + $c > $b and $b + $c > $a) {\n        my $p = ($a + $b + $c)\
    \ / 2;\n        return sqrt($p * ($p - $a) * ($p - $b) * ($p - $c));\n    }\n\
    \    return -1;\n}", "    return -1 if ($a + $b <= $c) || ($a + $c <= $b) || ($b\
    \ + $c <= $a);\n    my $p = ($a + $b + $c) / 2;\n    return sqrt($p * ($p - $a)\
    \ * ($p - $b) * ($p - $c));\n}", "    return -1 if $a + $b <= $c || $a + $c <=\
    \ $b || $b + $c <= $a;\n    my $s = ($a + $b + $c) / 2;\n    return sprintf('%.2f',\
    \ sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)));\n}", "    return -1 if $a + $b\
    \ <= $c || $a + $c <= $b || $b + $c <= $a;\n    my $s = ($a + $b + $c) / 2;\n\
    \    return sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n}", "    return -1\
    \ if $a + $b <= $c || $a + $c <= $b || $b + $c <= $a;\n    return sprintf(\"%.2f\"\
    , sqrt(($a + $b + $c) * ($a + $b - $c) * ($a - $b + $c) * (-$a + $b + $c)) / 4);\n\
    }", "    my $s = ($a + $b + $c) / 2;\n    my $area = 0;\n    if ($s - $a > 0 &&\
    \ $s - $b > 0 && $s - $c > 0) {\n        $area = sqrt($s * ($s - $a) * ($s - $b)\
    \ * ($s - $c));\n    }\n    else {\n        $area = -1;\n    }\n    return $area;\n\
    }", "    my $p = ($a + $b + $c) / 2;\n    return $p * ($p - $a) * ($p - $b) *\
    \ ($p - $c) > 0 ?\n        sqrt($p * ($p - $a) * ($p - $b) * ($p - $c)) : -1;\n\
    }", "    # edge cases\n    if( $a == 0 || $b == 0 || $c == 0 ) {\n        return\
    \ -1;\n    }\n    # is it a valid triangle?\n    if( $a + $b <= $c || $a + $c\
    \ <= $b || $b + $c <= $a ) {\n        return -1;\n    }\n    # heron's formula\n\
    \    my $s = ($a + $b + $c) / 2;\n    return sqrt($s * ($s - $a) * ($s - $b) *\
    \ ($s - $c));\n}", "    return -1 if $a + $b <= $c || $a + $c <= $b || $b + $c\
    \ <= $a;\n    return ($a + $b + $c) / 2;\n}", "    return ($a + $b > $c and $a\
    \ + $c > $b and $b + $c > $a) ?\n        sprintf(\"%.2f\", sqrt((($a + $b + $c)\
    \ / 2) * (($a + $b + $c) / 2 - $a) * (($a + $b + $c) / 2 - $b) * (($a + $b + $c)\
    \ / 2 - $c))) : -1;\n}", "    my $s = ($a + $b + $c) / 2;\n    return $s * ($s\
    \ - $a) * ($s - $b) * ($s - $c) >= 0 ?\n            sprintf(\"%.2f\", sqrt($s\
    \ * ($s - $a) * ($s - $b) * ($s - $c))) : -1;\n}", "    my $s = ($a + $b + $c)\
    \ / 2;\n    my $area = sqrt($s * ($s - $a) * ($s - $b) * ($s - $c));\n    return\
    \ sprintf(\"%.2f\", $area) if $area > 0;\n    return -1;\n}", "    return -1 if\
    \ $a + $b <= $c || $a + $c <= $b || $b + $c <= $a;\n    my $p = ($a + $b + $c)\
    \ / 2;\n    return sprintf(\"%.2f\", sqrt($p * ($p - $a) * ($p - $b) * ($p - $c)));\n\
    }", "    my $s = ($a + $b + $c) / 2;\n    return $s > $a && $s > $b && $s > $c\
    \ ? \n        sqrt($s * ($s - $a) * ($s - $b) * ($s - $c)) : -1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
