name: HumanEval_82_prime_length
language: pl
prompt: "# Write a function that takes a string and returns True if the string\n#\
  \ length is a prime number or False otherwise\n# Examples\n# prime_length('Hello')\
  \ == True\n# prime_length('abcdcba') == True\n# prime_length('kittens') == True\n\
  # prime_length('orange') == False\nsub prime_length {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_length;\n\
  \        if(eq_deeply($candidate->(\"Hello\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdcba\"),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  kittens\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"orange\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"wow\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  world\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->(\"MadaM\"),1)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"Wow\"),1)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
  \ if(eq_deeply($candidate->(\"HI\"),1)) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"go\"),1)) {\n       \
  \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  gogo\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"aaaaaaaaaaaaaaa\"),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Madam\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  M\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"0\"),\"\")) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return is_prime(length($string));\n}", "    return 0 if $string\
    \ =~ /\\d/;\n    my $length = length($string);\n    return 1 if $length == 2;\n\
    \    return 0 if ($length % 2 == 0);\n    my $mid = int($length / 2);\n    for\
    \ (my $i = 3; $i <= $mid; $i++) {\n        if ($length % $i == 0) {\n        \
    \    return 0;\n        }\n    }\n    return 1;\n}", "    my $length = length($string);\n\
    \    return $length if $length < 2;\n    return ($length % 2) ? all { $length\
    \ % $_ } (3 .. sqrt($length)) : 0;\n}", "    my $length = length($string);\n \
    \   if ( $length <= 3 ) {\n        return 1;\n    }\n    for my $i ( 2 .. $length\
    \ / 2 ) {\n        if ( $length % $i == 0 ) {\n            return 0;\n       \
    \ }\n    }\n    return 1;\n}", "    my($length) = length($string);\n    foreach\
    \ my $i (2..int($length/2)) {\n        return 0 if ($length % $i == 0);\n    }\n\
    \    return 1;\n}", "    my $length = length($string);\n    foreach my $i (2..$length-1)\
    \ {\n        return 0 if !($length % $i);\n    }\n    return 1;\n}", "    my $length\
    \ = length($string);\n    return is_prime($length);\n}", "    return is_prime(length($string));\n\
    }", "    my $count = 0;\n    for my $i (1..length($string)) {\n        if (length($string)\
    \ % $i == 0) {\n            $count++;\n        }\n    }\n    return $count ==\
    \ 2;\n}", "    my $len = length($string);\n    return not_prime($len);\n}", " \
    \   my $length = length($string);\n    return is_prime($length);\n}", "    return\
    \ is_prime(length($string));\n}", "    return not grep { length($string) % $_\
    \ == 0 } 2..int(sqrt(length($string)));\n}", "    if (is_prime(length($string)))\
    \ {\n        return 'True';\n    } else {\n        return 'False';\n    }\n}",
  "    my $length = length($string);\n    return is_prime($length);\n}", "    my $len\
    \ = length($string);\n    foreach my $i (2..int(sqrt($len))) {\n        return\
    \ 0 if $len % $i == 0;\n    }\n    return 1;\n}", "    my $length = length($string);\n\
    \    for my $i (2..sqrt($length)) {\n        return 0 if ($length % $i == 0);\n\
    \    }\n    return 1;\n}", "    if (is_prime(length($string))) {\n        return\
    \ 1;\n    }\n    return 0;\n}", "    my @primes = (1, 2, 3, 5, 7, 11, 13, 17,\
    \ 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,\
    \ 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181,\
    \ 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271,\
    \ 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373,\
    \ 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463,\
    \ 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577,\
    \ 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673,\
    \ 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787,\
    \ 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887,\
    \ 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997);\n   \
    \ return (grep {$string =~ /^.{$_}$/} @primes)[0];\n}", "    return is_prime(length($string));\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
