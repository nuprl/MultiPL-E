name: HumanEval_63_fibfib
language: pl
prompt: "# The FibFib number sequence is a sequence similar to the Fibbonacci sequnece\
  \ that's defined as follows:\n# fibfib(0) == 0\n# fibfib(1) == 0\n# fibfib(2) ==\
  \ 1\n# fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n# Please write a function\
  \ to efficiently compute the n-th element of the fibfib number sequence.\n# >>>\
  \ fibfib(1)\n# 0\n# >>> fibfib(5)\n# 4\n# >>> fibfib(8)\n# 24\nsub fibfib {\n  \
  \  my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fibfib;\n\
  \        if(eq_deeply($candidate->(2),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(1),0)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),4))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),24))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),81))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),274))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(14),927))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @fibfib;\n    for (0..$n) {\n        if ($_ < 3) {\n       \
    \     push @fibfib, $_;\n        } else {\n            push @fibfib, $fibfib[$_\
    \ - 1] + $fibfib[$_ - 2] + $fibfib[$_ - 3];\n        }\n    }\n    return $fibfib[$n];\n\
    }", "    if ($n == 0) { return 0; }\n    if ($n == 1) { return 0; }\n    if ($n\
    \ == 2) { return 1; }\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    }", "    my @s = (0, 0, 1);\n    while (scalar @s < $n) {\n        push @s, $s[-1]\
    \ + $s[-2] + $s[-3];\n    }\n    return $s[$n-1];\n}", "    my @a = (0, 0, 1);\n\
    \    for (3..$n) {\n        push @a, $a[-1] + $a[-2] + $a[-3];\n    }\n    return\
    \ $a[$n];\n}", "    my $x = 0;\n    my $y = 0;\n    my $z = 1;\n    for(my $i\
    \ = 0; $i < $n; $i++) {\n        $x = $y;\n        $y = $z;\n        $z = $x +\
    \ $y + $z;\n    }\n    return $x;\n}", "    my(@F) = (0, 0, 1);\n    for (my $i\
    \ = 3; $i <= $n; $i++) {\n        $F[$i] = $F[$i-1] + $F[$i-2] + $F[$i-3];\n \
    \   }\n    return $F[$n];\n}", "    if ($n == 0) {\n        return 0;\n    } elsif\
    \ ($n == 1) {\n        return 0;\n    } elsif ($n == 2) {\n        return 1;\n\
    \    } else {\n        return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n  \
    \  }\n}", "    if ( $n == 0 ) {\n        return 0;\n    }\n    elsif ( $n == 1\
    \ ) {\n        return 0;\n    }\n    elsif ( $n == 2 ) {\n        return 1;\n\
    \    }\n    else {\n        return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    \    }\n}", "    my($x, $y, $z) = (0, 0, 1);\n    for(my $i = 0; $i < $n; $i++)\
    \ {\n        ($x, $y, $z) = ($y, $z, $y + $z + $x);\n    }\n    return $x;\n}",
  "    my $i;\n    my @fibs = (0, 0, 1);\n    for($i = 3; $i <= $n; $i++) {\n    \
    \    $fibs[$i] = $fibs[$i-1] + $fibs[$i-2] + $fibs[$i-3];\n    }\n    return $fibs[$n];\n\
    }", "    return 0 if $n == 0;\n    return 0 if $n == 1;\n    return 1 if $n ==\
    \ 2;\n    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}", "    return\
    \ 0 if ($n == 0);\n    return 0 if ($n == 1);\n    return 1 if ($n == 2);\n  \
    \  return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}", "    return 1 if $n==2;\n\
    \    my ($f1, $f2, $f3) = (0, 0, 1);\n    for (1..$n-2) {\n        ($f1, $f2,\
    \ $f3) = ($f2, $f3, $f1+$f2+$f3);\n    }\n    return $f3;\n}", "    if($n == 0)\
    \ { return 0; }\n    if($n == 1) { return 0; }\n    if($n == 2) { return 1; }\n\
    \    return fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n}", "    my(@array) =\
    \ (0, 0, 1);\n    while ($n-- > 2) {\n        push @array, $array[-1] + $array[-2]\
    \ + $array[-3];\n        shift @array;\n    }\n    return $array[2];\n}", "  \
    \  return 0 if $n == 0;\n    return 0 if $n == 1;\n    return 1 if $n == 2;\n\
    \    my $ret = 0;\n    my @hist = (0, 0, 1);\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        $ret = $hist[0] + $hist[1] + $hist[2];\n        @hist = ($hist[1],\
    \ $hist[2], $ret);\n    }\n    return $ret;\n}", "    return 0 if $n <= 0;\n \
    \   return 1 if $n == 1;\n    return 2 if $n == 2;\n    return fibfib($n-1) +\
    \ fibfib($n-2) + fibfib($n-3);\n}", "    return 0 if $n < 3;\n    return 1 if\
    \ $n == 3;\n    my $a = 0;\n    my $b = 0;\n    my $c = 1;\n    my $d = 1;\n \
    \   for (my $i = 4; $i <= $n; $i++) {\n        $d = $a + $b + $c;\n        $a\
    \ = $b;\n        $b = $c;\n        $c = $d;\n    }\n    return $d;\n}", "    return\
    \ 0 if $n < 2;\n    return 1 if $n == 2;\n    my($prev1, $prev2, $prev3) = (0,\
    \ 0, 1);\n    my($curr) = undef;\n    for (my($i) = 3; $i <= $n; $i++) {\n   \
    \     $curr = $prev1 + $prev2 + $prev3;\n        $prev1 = $prev2;\n        $prev2\
    \ = $prev3;\n        $prev3 = $curr;\n    }\n    return $curr;\n}", "    my $ret\
    \ = 0;\n    if ($n > 2) {\n        $ret = fibfib($n-1) + fibfib($n-2) + fibfib($n-3);\n\
    \    }\n    else {\n        $ret = $n-1;\n    }\n    return $ret;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
