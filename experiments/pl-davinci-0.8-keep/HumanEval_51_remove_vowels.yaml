name: HumanEval_51_remove_vowels
language: pl
prompt: "# remove_vowels is a function that takes string and returns string without\
  \ vowels.\n# >>> remove_vowels('')\n# ''\n# >>> remove_vowels('abcdef')\n# 'bcdf'\n\
  # >>> remove_vowels('aaaaa')\n# ''\n# >>> remove_vowels('aaBAA')\n# 'B'\n# >>> remove_vowels('zbcd')\n\
  # 'zbcd'\nsub remove_vowels {\n    my($text) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_vowels;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcdef\nghijklm\"\
  ),\"bcdf\nghjklm\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"fedcba\"),\"fdcb\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"eeeee\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  acBAA\"),\"cB\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"EcBOO\"),\"cB\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"ybcd\"\
  ),\"ybcd\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
  testhumaneval();"
completions: ["    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    $text\
    \ =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}",
  "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    return $text =~ s/[aeiou]//gr;\n\
    }", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    $text =~ s/[aeiou]//g;\n\
    \    return $text;\n}", "    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}",
  "    $text =~ s/[aeiou]//gi;\n    return $text;\n}", "    $text =~ s/[AEIOUaeiou]//g;\n\
    \    return $text;\n}", "    my $result = \"\";\n    for my $c (split //, $text)\
    \ {\n        $result .= $c if ($c !~ /[aeiou]/i);\n    }\n    return $result;\n\
    }", "    $text =~ s/[aeiou]//g;\n    return $text;\n}", "    my @list = split\
    \ //, $text;\n    my @result = ();\n    for my $i (@list) {\n        if (not(is_vowel($i)))\
    \ {\n            push @result, $i;\n        }\n    }\n    return join('', @result);\n\
    }", "    return '' if $text eq '';\n    my @chars = split(//, $text);\n    my\
    \ @output;\n    for my $c (@chars) {\n        if (index('aeiouAEIOU', $c) == -1)\
    \ {\n            push @output, $c;\n        }\n    }\n    return join('', @output);\n\
    }", "    my $stripped = \"\";\n    for my $letter (split //, $text) {\n      \
    \  if ($letter =~ /[aeiou]/i) {\n            next;\n        }\n        $stripped\
    \ .= $letter;\n    }\n    return $stripped;\n}", "    return '' if $text eq '';\n\
    \    $text =~ s/[aeiouAEIOU]//g;\n    return $text;\n}", "    $text =~ s/[AEIOUaeiou]//g;\n\
    \    return $text;\n}", "    return $text =~ s/[aeiou]//ig;\n}", "    my $result\
    \ = \"\";\n    my @vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n\
    \    my @letters = split(\"\", $text);\n    for(my $i = 0; $i < scalar(@letters);\
    \ $i++) {\n        my $curr = $letters[$i];\n        if(!(&contains($curr, @vowels)))\
    \ {\n            $result = $result . $curr;\n        }\n    }\n    return $result;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
