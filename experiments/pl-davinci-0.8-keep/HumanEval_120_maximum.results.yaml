language: pl
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @result = (0) x $k;\n    my $i\
    \ = 0;\n    for(; $i < $k; $i++) {\n        $result[$i] = $arr->[$i];\n    }\n\
    \    for(; $i < $n; $i++) {\n        my $min = $result[0];\n        my $min_i\
    \ = 0;\n        for(my $j = 1; $j < $k; $j++) {\n            if($result[$j] <\
    \ $min) {\n                $min = $result[$j];\n                $min_i = $j;\n\
    \            }\n        }\n        if($arr->[$i] > $min) {\n            $result[$min_i]\
    \ = $arr->[$i];\n        }\n    }\n    return @result;\n}\nuse Test::More;\nis_deeply([maximum([-3,\
    \ -4, 5], 3)], [-4, -3, 5], 'example 1');\nis_deeply([maximum([4, -4, 4], 2)],\
    \ [4, 4], 'example 2');\nis_deeply([maximum([-3, 2, 1, 2, -1, -2, 1], 1)], [2],\
    \ 'example 3');\ndone_testing();\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5],\
    \ 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: '#   Failed test ''example 1''

    #   at /tmp/tmpp6svdpav.pl line 40.

    #     Structures begin differing at:

    #          $got->[0] = ''-3''

    #     $expected->[0] = ''-4''

    # Looks like your test exited with 1 just after 3.

    '
  stdout: 'not ok 1 - example 1

    ok 2 - example 2

    ok 3 - example 3

    1..3

    '
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    push @res, shift @$arr while @res < $k && @$arr;\n\
    \    @res = sort {$b <=> $a} @res;\n    while (@$arr) {\n        my $n = shift\
    \ @$arr;\n        next if $n < $res[-1];\n        $res[-1] = $n;\n        my $i\
    \ = $#res - 1;\n        while ($i >= 0 && $res[$i] < $res[$i + 1]) {\n       \
    \     ($res[$i], $res[$i + 1]) = ($res[$i + 1], $res[$i]);\n            $i -=\
    \ 1;\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    for my $elem (@$arr) {\n        if (@res == $k)\
    \ {\n            my $i = 0;\n            my $l = scalar(@res);\n            while\
    \ ($i < $l and $res[$i] > $elem) {\n                $i++;\n            }\n   \
    \         if ($i < $l) {\n                splice(@res, $i, 0, $elem);\n      \
    \          pop(@res);\n            }\n        } else {\n            push(@res,\
    \ $elem);\n        }\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $i = $k;\n    my $n = @$arr;\n    my $t = 0;\n    return $arr\
    \ if $k >= $n;\n    # TODO: implement\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my $n = scalar(@$arr);\n    my @indices = 0..($n-1);\n    my\
    \ @sorted = sort {$$arr[$b] <=> $$arr[$a]} @indices;\n    my @ans;\n    for (my\
    \ $i = 0; $i < $k; $i++) {\n        push @ans, $$arr[$sorted[$i]];\n    }\n  \
    \  return @ans;\n}\nprint \"maximum(arr = [-3, -4, 5], k = 3) = [\", join(\",\
    \ \", maximum(\\@arr, 3)), \"]\\n\";\nprint \"maximum(arr = [4, -4, 4], k = 2)\
    \ = [\", join(\", \", maximum(\\@arr2, 2)), \"]\\n\";\nprint \"maximum(arr = [-3,\
    \ 2, 1, 2, -1, -2, 1], k = 1) = [\", join(\", \", maximum(\\@arr3, 1)), \"]\\\
    n\";\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: 'maximum(arr = [-3, -4, 5], k = 3) = [, , ]

    maximum(arr = [4, -4, 4], k = 2) = [, ]

    maximum(arr = [-3, 2, 1, 2, -1, -2, 1], k = 1) = []

    '
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @result;\n    my $begin = 0;\n    my $end = @$arr - 1;\n \
    \   while ($begin <= $end) {\n        my $pivot = $arr->[$end];\n        my $left\
    \ = $begin;\n        my $right = $end - 1;\n        while ($left <= $right) {\n\
    \            if ($arr->[$left] >= $pivot) {\n                $left++;\n      \
    \      }\n            elsif ($arr->[$right] < $pivot) {\n                $right--;\n\
    \            }\n            else {\n                my $temp = $arr->[$left];\n\
    \                $arr->[$left] = $arr->[$right];\n                $arr->[$right]\
    \ = $temp;\n                $left++;\n                $right--;\n            }\n\
    \        }\n        my $temp = $arr->[$left];\n        $arr->[$left] = $arr->[$end];\n\
    \        $arr->[$end] = $temp;\n        if ($left + 1 == $k) {\n            last;\n\
    \        }\n        elsif ($left + 1 < $k) {\n            $begin = $left + 1;\n\
    \        }\n        else {\n            $end = $left - 1;\n        }\n    }\n\
    \    for (my $i = 0; $i < $k; $i++) {\n        push @result, $arr->[$i];\n   \
    \ }\n    return @result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 255
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @heap = ();\n    my $size = 0;\n    my $index = 0;\n    while($index\
    \ < @$arr and $size < $k) {\n        $heap[$size] = $arr->[$index];\n        $size++;\n\
    \        $index++;\n    }\n    for(my $i = ($size - 1) / 2; $i >= 0; $i--) {\n\
    \        heapify($heap, $size, $i);\n    }\n    while($index < @$arr) {\n    \
    \    if($arr->[$index] > $heap[0]) {\n            $heap[0] = $arr->[$index];\n\
    \            heapify($heap, $size, 0);\n        }\n        $index++;\n    }\n\
    \    return [reverse sort {$a <=> $b} @heap];\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::heapify called at /tmp/tmp29l6r8lb.pl line
    27.

    '
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my %freq;\n    my @res;\n    foreach my $item (@$arr) {\n   \
    \     $freq{$item}++;\n    }\n    my @sorted_arr = sort {$b <=> $a} keys %freq;\n\
    \    my $i = 0;\n    while ($i < $k) {\n        push @res, $sorted_arr[$i];\n\
    \        $i++;\n    }\n    return \\@res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @maxs;\n    for my $num (@$arr) {\n        if (@maxs < $k)\
    \ {\n            push @maxs, $num;\n            @maxs = sort {$b <=> $a} @maxs;\n\
    \        } else {\n            if ($num > $maxs[$k - 1]) {\n                shift\
    \ @maxs;\n                push @maxs, $num;\n                @maxs = sort {$b\
    \ <=> $a} @maxs;\n            }\n        }\n    }\n    return \\@maxs;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n    \
    \    if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @list = ();\n    for(@$arr) {\n        if(!@list) {\n    \
    \        push @list, $_;\n        }\n        else {\n            if(@list < $k)\
    \ {\n                my $i = $#list;\n                while($i >= 0 && $list[$i]\
    \ < $_) {\n                    if($i < $k - 1) {\n                        $list[$i\
    \ + 1] = $list[$i];\n                    }\n                    $i--;\n      \
    \          }\n                if($i + 1 < $k) {\n                    $list[$i\
    \ + 1] = $_;\n                }\n            }\n            else {\n         \
    \       my $i = $#list;\n                while($i >= 0 && $list[$i] < $_) {\n\
    \                    $i--;\n                }\n                if($i + 1 < $k)\
    \ {\n                    $list[$i + 1] = $_;\n                }\n            }\n\
    \        }\n    }\n    return \\@list;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @arr = sort {$b <=> $a} @$arr;\n    return [@arr[0..$k-1]];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my @stack;\n    for my $i (0..@$arr-1) {\n    \
    \    while(@stack>0 && $arr->[$stack[-1]]<$arr->[$i]) {\n            pop @stack;\n\
    \        }\n        push @stack, $i;\n        if ($i>=$k-1) {\n            push\
    \ @res, $arr->[$stack[0]];\n            if ($stack[0]==$i-$k+1) {\n          \
    \      shift @stack;\n            }\n        }\n    }\n    return @res;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n    \
    \    if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    @$arr = sort {$b <=> $a} @$arr;\n    splice @$arr, $k;\n    return\
    \ $arr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @arr = sort {$b <=> $a} @$arr;\n    return splice(@arr, 0,\
    \ $k);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    @$arr = sort {$b <=> $a} @$arr;\n    return splice(@$arr, 0,\
    \ $k);\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @ret;\n    return @ret if($k == 0);\n    push @ret, shift\
    \ @$arr while(@$arr > 0);\n    @ret = sort {$b <=> $a} @ret;\n    while(@ret >\
    \ $k) {\n        pop @ret;\n    }\n    return @ret;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @res;\n    my $hash = {};\n    my $max = -1000;\n    for my\
    \ $e (@$arr) {\n        if(exists $hash->{$e}) {\n            $hash->{$e}++;\n\
    \        } else {\n            $hash->{$e} = 1;\n        }\n        $max = $e\
    \ if $e > $max;\n    }\n    for my $i (1..$k) {\n        $res[$i-1] = $max;\n\
    \        $hash->{$max}--;\n        $max = -1000;\n        for my $e (keys %$hash)\
    \ {\n            if($hash->{$e} > 0 && $e > $max) {\n                $max = $e;\n\
    \            }\n        }\n    }\n    return @res;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3,\
    \ -4, 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @maximum;\n    my $i = 0;\n    my $j = @$arr - 1;\n    while($k\
    \ > 0) {\n        if ($arr->[$i] > $arr->[$j]) {\n            push @maximum, $arr->[$i];\n\
    \            $i++;\n        }\n        else {\n            push @maximum, $arr->[$j];\n\
    \            $j--;\n        }\n        $k--;\n    }\n    return \\@maximum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
    \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
    \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1,\
    \ 2, -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13,\
    \ -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
    \     }\n        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
    \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n     \
    \   }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    return [] if @$arr == 0 || $k == 0;\n    return [sort {$b <=>\
    \ $a} @$arr] if $k == @$arr;\n    my @result = ();\n    foreach my $item (@$arr)\
    \ {\n        if(@result == 0) {\n            push @result, $item;\n        } elsif(@result\
    \ < $k) {\n            if($item > $result[-1]) {\n                $result[-1]\
    \ = $item;\n            }\n            @result = sort {$b <=> $a} @result;\n \
    \       } else {\n            if($item > $result[-1]) {\n                $result[-1]\
    \ = $item;\n                @result = sort {$b <=> $a} @result;\n            }\n\
    \        }\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4,\
    \ 5], 3),[-4, -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3,\
    \ 2, 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3],\
    \ 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
- exit_code: 1
  program: "# Given an array arr of integers and a positive integer k, return a sorted\
    \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
    \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr\
    \ = [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2,\
    \ 1, 2, -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array\
    \ will be in the range of [1, 1000].\n# 2. The elements in the array will be in\
    \ the range of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr,\
    \ $k) = @_;\n    my @sortArr = sort {$b <=> $a} @$arr;\n    my @newArr = ();\n\
    \    for (my $i = 0; $i < $k; $i++) {\n        push @newArr, $sortArr[$i];\n \
    \   }\n    return @newArr;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&maximum;\n        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4,\
    \ -3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([4, -4, 4], 2),[4, 4])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-3, 2,\
    \ 1, 2, -1, -2, 1], 1),[2])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([123, -123, 20, 0, 1, 2, -3], 3),[2,\
    \ 20, 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([-123, 20, 0, 1, 2, -3], 4),[0, 1, 2, 20])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5,\
    \ 15, 0, 3, -13, -8, 0], 7),[-13, -8, 0, 0, 3, 5, 15])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 0,\
    \ 2, 5, 3, -10], 2),[3, 5])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 0, 5, -7], 1),[5])) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ -4], 2),[-4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
    \ }\n        if(eq_deeply($candidate->([-10, 10], 2),[-10, 10])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, -23, 243, -400, 0], 0),[])) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012991
