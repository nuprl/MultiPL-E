name: HumanEval_90_next_smallest
language: pl
prompt: "# You are given a list of integers.\n# Write a function next_smallest() that\
  \ returns the 2nd smallest element of the list.\n# Return None if there is no such\
  \ element.\n# next_smallest([1, 2, 3, 4, 5]) == 2\n# next_smallest([5, 1, 4, 3,\
  \ 2]) == 2\n# next_smallest([]) == None\n# next_smallest([1, 1]) == None\nsub next_smallest\
  \ {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&next_smallest;\n\
  \        if(eq_deeply($candidate->([1, 2, 3, 4, 5]),2)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5, 1, 4,\
  \ 3, 2]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->([1, 1]),undef)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 1, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([1, 1]),undef)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([-35, 34, 12, -45]),-35))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: []
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
