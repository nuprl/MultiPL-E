name: HumanEval_120_maximum
language: pl
prompt: "# Given an array arr of integers and a positive integer k, return a sorted\
  \ list \n# of length k with the maximum k numbers in arr.\n# Example 1:\n# Input:\
  \ arr = [-3, -4, 5], k = 3\n# Output: [-4, -3, 5]\n# Example 2:\n# Input: arr =\
  \ [4, -4, 4], k = 2\n# Output: [4, 4]\n# Example 3:\n# Input: arr = [-3, 2, 1, 2,\
  \ -1, -2, 1], k = 1\n# Output: [2]\n# Note:\n# 1. The length of the array will be\
  \ in the range of [1, 1000].\n# 2. The elements in the array will be in the range\
  \ of [-1000, 1000].\n# 3. 0 <= k <= len(arr)\nsub maximum {\n    my($arr, $k) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&maximum;\n\
  \        if(eq_deeply($candidate->([-3, -4, 5], 3),[-4, -3, 5])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ -4, 4], 2),[4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([-3, 2, 1, 2, -1, -2, 1], 1),[2])) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([123,\
  \ -123, 20, 0, 1, 2, -3], 3),[2, 20, 123])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([-123, 20, 0, 1, 2,\
  \ -3], 4),[0, 1, 2, 20])) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([5, 15, 0, 3, -13, -8, 0], 7),[-13, -8,\
  \ 0, 0, 3, 5, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([-1, 0, 2, 5, 3, -10], 2),[3, 5])) {\n      \
  \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 0, 5, -7], 1),[5])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([4, -4], 2),[-4, 4])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-10,\
  \ 10], 2),[-10, 10])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([1, 2, 3, -23, 243, -400, 0], 0),[])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: []
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
