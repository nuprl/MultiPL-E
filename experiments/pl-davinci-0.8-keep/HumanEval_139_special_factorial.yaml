name: HumanEval_139_special_factorial
language: pl
prompt: "# The Brazilian factorial is defined as:\n# brazilian_factorial(n) = n! *\
  \ (n-1)! * (n-2)! * ... * 1!\n# where n > 0\n# For example:\n# >>> special_factorial(4)\n\
  # 288\n# The function will receive an integer as input and should return the special\n\
  # factorial of this integer.\nsub special_factorial {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&special_factorial;\n\
  \        if(eq_deeply($candidate->(4),288)) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->(5),34560)) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),125411328000))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = 1;\n    while($n > 0) {\n        $result *= factorial($n);\n\
    \        $n--;\n    }\n    return $result;\n}", "    # Write code here\n}", " \
    \   # Your code here\n}", "    my $acc = 1;\n    my $prod = 1;\n    for (1..$n)\
    \ {\n        $acc *= $_;\n        $prod *= $acc;\n    }\n    return $prod;\n}",
  "    my $fact = 1;\n    for (1..$n) {\n        $fact *= factorial($_);\n    }\n\
    \    return $fact;\n}", "    my $retval = 1;\n    for(my $i = $n; $i > 0; $i--)\
    \ {\n        $retval *= $i;\n    }\n    return $retval;\n}", "    return 1 if\
    \ $n == 0;\n    return $n * special_factorial($n - 1);\n}", "    my $factorial\
    \ = 1;\n    while($n > 0){\n        $factorial *= factorial($n);\n        $n--;\n\
    \    }\n    return $factorial;\n}", "    my $result = 1;\n    my $i = $n;\n  \
    \  while($i > 0) {\n        $result *= $i;\n        $i--;\n    }\n    my $j =\
    \ $n - 1;\n    while($j > 0) {\n        $result *= $j;\n        $j--;\n    }\n\
    \    return $result;\n}", "    my $result = 1;\n    while ($n > 0) {\n       \
    \ $result *= factorial($n);\n        $n--;\n    }\n    return $result;\n}", " \
    \   return nth_factorial($n) * nth_factorial($n-1);\n}", "    my $result = 1;\n\
    \    for (1..$n) {\n        $result *= factorial($_);\n    }\n    return $result;\n\
    }", "    my $x = 1;\n    my $y = 1;\n    if ($n <= 0) {\n        return 0;\n \
    \   }\n    for (1..$n) {\n        $x *= $_;\n    }\n    for ($n-1..1) {\n    \
    \    $y *= $_;\n    }\n    return $x * $y;\n}", "    if($n == 0){\n        return\
    \ 1;\n    }\n    return $n * special_factorial($n-1);\n}", "    # your code here\n\
    }", "    # TODO return the special factorial of $n\n    my $result = 1;\n    foreach\
    \ (1..$n) {\n        $result *= $_;\n    }\n    foreach (1..$n-1) {\n        $result\
    \ *= $_;\n    }\n    return $result;\n}", "    # ...\n}", "    my $factorial =\
    \ 1;\n    for (my $i = $n; $i > 0; $i--) {\n        $factorial *= $i;\n    }\n\
    \    return $factorial * special_factorial($n - 1);\n}", "    # Your code here\n\
    \    my $f=1;\n    while($n>0){\n        $f=$f*factorial($n);\n        $n--;\n\
    \    }\n    return $f;\n}", "    return $n if $n == 1;\n    return $n * special_factorial($n\
    \ - 1);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
