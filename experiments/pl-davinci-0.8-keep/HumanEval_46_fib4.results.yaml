language: pl
name: HumanEval_46_fib4
results:
- exit_code: 0
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    if ($n == 0) { return\
    \ 0; }\n    if ($n == 1) { return 0; }\n    if ($n == 2) { return 2; }\n    if\
    \ ($n == 3) { return 0; }\n    my $prev4 = 0;\n    my $prev3 = 0;\n    my $prev2\
    \ = 2;\n    my $prev1 = 0;\n    my $i = 4;\n    while ($i <= $n) {\n        my\
    \ $fib = $prev4 + $prev3 + $prev2 + $prev1;\n        $prev4 = $prev3;\n      \
    \  $prev3 = $prev2;\n        $prev2 = $prev1;\n        $prev1 = $fib;\n      \
    \  $i++;\n    }\n    return $prev1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821150
- exit_code: 1
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my $a = 0;\n    my\
    \ $b = 0;\n    my $c = 2;\n    my $d = 0;\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c\
    \ = $d;\n    }\n    return $d;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821062
- exit_code: 1
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my $i = 0;\n    my\
    \ $a = 0;\n    my $b = 0;\n    my $c = 2;\n    my $d = 0;\n    my $result = 0;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        $result = $a + $b + $c + $d;\n   \
    \     $a = $b;\n        $b = $c;\n        $c = $d;\n        $d = $result;\n  \
    \  }\n    return $result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821150
- exit_code: 0
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my @seq = (0, 0, 2,\
    \ 0);\n    for (my $i = 4; $i <= $n; $i++) {\n        push @seq, $seq[$i-1] +\
    \ $seq[$i-2] + $seq[$i-3] + $seq[$i-4];\n    }\n    return $seq[$i-1];\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n       \
    \ if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\" }else{\n        exit\
    \ 1;\n        }\n        if(eq_deeply($candidate->(8),28)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821150
- exit_code: 1
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my $cache = { 0 =>\
    \ 0, 1 => 0, 2 => 2, 3 => 0};\n    my $fib4;\n    foreach my $i (4..$n) {\n  \
    \      $fib4 += $cache->{$i-1} + $cache->{$i-2} + $cache->{$i-3} + $cache->{$i-4};\n\
    \        $cache->{$i} = $fib4;\n    }\n    return $fib4;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821150
- exit_code: 0
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    if($n == 0) {\n  \
    \      return 0;\n    }\n    if($n == 1) {\n        return 0;\n    }\n    if($n\
    \ == 2) {\n        return 2;\n    }\n    if($n == 3) {\n        return 0;\n  \
    \  }\n    my @fibs = (0, 0, 2, 0);\n    my $i = 4;\n    while($i <= $n) {\n  \
    \      push(@fibs, $fibs[$i-1] + $fibs[$i-2] + $fibs[$i-3] + $fibs[$i-4]);\n \
    \       $i += 1;\n    }\n    return $fibs[$i-1];\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821150
- exit_code: 0
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    # We have a cache\
    \ of the first four results...\n    my @cache = (0, 0, 2, 0);\n    my $fib;\n\
    \    # We'll return this if the input is bad...\n    my $ret = -1;\n    # If the\
    \ input is out of bounds, we'll catch that here...\n    if ($n < 0 || $n > 3)\
    \ {\n        for (my $i = 4; $i <= $n; $i++) {\n            $fib = ($cache[($i\
    \ - 1) % 4] + $cache[($i - 2) % 4] + $cache[($i - 3) % 4] + $cache[($i - 4) %\
    \ 4]);\n            # We maintain a cache of size 4.\n            $cache[$i %\
    \ 4] = $fib;\n        }\n        $ret = $fib;\n    } else {\n        $ret = $cache[$n];\n\
    \    }\n    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821150
- exit_code: 1
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my $a = 0;\n    my\
    \ $b = 0;\n    my $c = 2;\n    my $d = 0;\n    for(my $i = 3; $i <= $n; $i++)\
    \ {\n        $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c\
    \ = $d;\n    }\n    return $d;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821090
- exit_code: 1
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my($i,$a,$b,$c,$d,$e);\n\
    \    $i = 0;\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    $e = 0;\n\
    \    while ($i < $n) {\n        $e = $a + $b + $c + $d;\n        $a = $b;\n  \
    \      $b = $c;\n        $c = $d;\n        $d = $e;\n        $i = $i + 1;\n  \
    \  }\n    return $e;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&fib4;\n        if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821150
- exit_code: 0
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    return 0 if $n ==\
    \ 0;\n    return 0 if $n == 1;\n    return 2 if $n == 2;\n    return 0 if $n ==\
    \ 3;\n    my ($n2, $n3, $n4, $n5) = (0, 0, 2, 0);\n    my $temp;\n    foreach\
    \ my $i (4..$n) {\n        $temp = $n2 + $n3 + $n4 + $n5;\n        $n2 = $n3;\n\
    \        $n3 = $n4;\n        $n4 = $n5;\n        $n5 = $temp;\n    }\n    return\
    \ $temp;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &fib4;\n        if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28)) {\n   \
    \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821150
- exit_code: 0
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    if ($n == 0) {\n \
    \       return 0;\n    } elsif ($n == 1) {\n        return 0;\n    } elsif ($n\
    \ == 2) {\n        return 2;\n    } elsif ($n == 3) {\n        return 0;\n   \
    \ } else {\n        return fib4($n-1) + fib4($n-2) + fib4($n-3) + fib4($n-4);\n\
    \    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n\
    \        if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(8),28)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821150
- exit_code: 1
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    \n    my ($f0, $f1,\
    \ $f2, $f3, $f4) = (0, 0, 2, 0, 0);\n    while($n-- > 0) {\n        $f4 = $f3\
    \ + $f2 + $f1 + $f0;\n        $f0 = $f1;\n        $f1 = $f2;\n        $f2 = $f3;\n\
    \        $f3 = $f4;\n    }\n    return $f4;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821150
- exit_code: 1
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my($n_minus_1, $n_minus_2,\
    \ $n_minus_3, $n_minus_4) = (0, 0, 2, 0);\n    my($val);\n    my($i);\n    for($i\
    \ = 4; $i <= $n; $i++) {\n        $val = $n_minus_1 + $n_minus_2 + $n_minus_3\
    \ + $n_minus_4;\n        $n_minus_4 = $n_minus_3;\n        $n_minus_3 = $n_minus_2;\n\
    \        $n_minus_2 = $n_minus_1;\n        $n_minus_1 = $val;\n    }\n    return\
    \ $val;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n\
    \        if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\" }else{\n  \
    \      exit 1;\n        }\n        if(eq_deeply($candidate->(8),28)) {\n     \
    \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!
  timestamp: 1659821150
- exit_code: 1
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my(@fib4) = (0, 0,\
    \ 2, 0);\n    my($i) = 3;\n    while ($i < $n) {\n        push(@fib4, $fib4[$i-1]\
    \ + $fib4[$i-2] + $fib4[$i-3] + $fib4[$i-4]);\n        $i++;\n    }\n    return\
    \ $fib4[$n];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&fib4;\n        if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821150
- exit_code: 1
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my @fib4_nums = (0,\
    \ 0, 2, 0);\n    if ($n < 4) {\n        return $fib4_nums[$n];\n    }\n    else\
    \ {\n        my $i = 4;\n        while ($i <= $n) {\n            $fib4_nums[$i\
    \ % 4] = $fib4_nums[($i - 1) % 4] + $fib4_nums[($i - 2) % 4] + $fib4_nums[($i\
    \ - 3) % 4] + $fib4_nums[($i - 4) % 4];\n            $i++;\n        }\n      \
    \  return $fib4_nums[($n + 3) % 4];\n    }\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821150
- exit_code: 0
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my(@fib) = (0, 0,\
    \ 2, 0);\n    my($i);\n    for ($i = 4; $i <= $n; $i++) {\n        $fib[$i] =\
    \ $fib[$i-1] + $fib[$i-2] + $fib[$i-3] + $fib[$i-4];\n    }\n    return $fib[$n];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n  \
    \      if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(8),28)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821150
- exit_code: 0
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my @fibs = (0, 0,\
    \ 2, 0);\n    while ($n >= @fibs) {\n        push @fibs, $fibs[-1] + $fibs[-2]\
    \ + $fibs[-3] + $fibs[-4];\n    }\n    return $fibs[$n];\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821150
- exit_code: 0
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my @fibs = (0, 0,\
    \ 2, 0);\n    while ($n >= 4) {\n        push @fibs, $fibs[-1] + $fibs[-2] + $fibs[-3]\
    \ + $fibs[-4];\n        shift @fibs;\n        $n--;\n    }\n    return $fibs[$n];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n  \
    \      if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\" }else{\n    \
    \    exit 1;\n        }\n        if(eq_deeply($candidate->(8),28)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821150
- exit_code: 1
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my($a, $b, $c, $d,\
    \ $i, $t);\n    $a = 0;\n    $b = 0;\n    $c = 2;\n    $d = 0;\n    for ($i =\
    \ 3; $i <= $n; $i++) {\n        $t = $a + $b + $c + $d;\n        $a = $b;\n  \
    \      $b = $c;\n        $c = $d;\n        $d = $t;\n    }\n    return $d;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib4;\n     \
    \   if(eq_deeply($candidate->(5),4)) {\n        print \"ok!\" }else{\n       \
    \ exit 1;\n        }\n        if(eq_deeply($candidate->(8),28)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821150
- exit_code: 1
  program: "# The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece\
    \ that's defined as follows:\n# fib4(0) -> 0\n# fib4(1) -> 0\n# fib4(2) -> 2\n\
    # fib4(3) -> 0\n# fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\
    # Please write a function to efficiently compute the n-th element of the fib4\
    \ number sequence.  Do not use recursion.\n# >>> fib4(5)\n# 4\n# >>> fib4(6)\n\
    # 8\n# >>> fib4(7)\n# 14\nsub fib4 {\n    my($n) = @_;\n    my $a = 0;\n    my\
    \ $b = 0;\n    my $c = 2;\n    my $d = 0;\n    for (my $i = 3; $i <= $n; $i++)\
    \ {\n        $d = $a + $b + $c;\n        $a = $b;\n        $b = $c;\n        $c\
    \ = $d;\n    }\n    return $d;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&fib4;\n        if(eq_deeply($candidate->(5),4)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),104))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),386))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821062
