name: HumanEval_117_select_words
language: pl
prompt: "# Given a string s and a natural number n, you have been tasked to implement\
  \ \n# a function that returns a list of all words from string s that contain exactly\
  \ \n# n consonants, in order these words appear in the string s.\n# If the string\
  \ s is empty then the function should return an empty list.\n# Note: you may assume\
  \ the input string contains only letters and spaces.\n# Examples:\n# select_words(\"\
  Mary had a little lamb\", 4) ==> [\"little\"]\n# select_words(\"Mary had a little\
  \ lamb\", 3) ==> [\"Mary\", \"lamb\"]\n# select_words(\"simple white space\", 2)\
  \ ==> []\n# select_words(\"Hello world\", 4) ==> [\"world\"]\n# select_words(\"\
  Uncle sam\", 3) ==> [\"Uncle\"]\nsub select_words {\n    my($s, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&select_words;\n\
  \        if(eq_deeply($candidate->(\"Mary had a little lamb\", 4),[\"little\"]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Mary had a little lamb\", 3),[\"Mary\", \"lamb\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"simple white space\"\
  , 2),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  Hello world\", 4),[\"world\"])) {\n        print \"ok!\" }else{\n        exit 1;\n\
  \        }\n        if(eq_deeply($candidate->(\"Uncle sam\", 3),[\"Uncle\"])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  \", 4),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(\"a b c d e f\", 1),[\"b\", \"c\", \"d\", \"f\"]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my(@words) = split(/\\s+/, $s);\n    my(@result) = ();\n    foreach\
    \ my $word (@words) {\n        my($consonants) = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        if ($consonants == $n) {\n            push(@result, $word);\n       \
    \ }\n    }\n    return @result;\n}", "    my @words = split / /, $s;\n    my @result;\n\
    \    for my $word (@words) {\n        my $count = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n\
    \        push @result, $word if $count == $n;\n    }\n    return @result;\n}\n\
    print join ', ', select_words(\"Mary had a little lamb\", 4);", "    my @words\
    \ = split / /, $s;\n    my @result;\n    for my $word (@words) {\n        my $consonants\
    \ = 0;\n        for my $c (split //, $word) {\n            $consonants++ if $c\
    \ =~ /[^aeiou]/i;\n        }\n        push @result, $word if $consonants == $n;\n\
    \    }\n    return @result;\n}", "    return [] if $s eq '';\n    my @words =\
    \ split /\\s+/, $s;\n    my @consonants = grep {/[^aeiou]/i} split //, $s;\n \
    \   my @res = ();\n    for (@words) {\n        my $l = grep {/[^aeiou]/i} split\
    \ //, $_;\n        push @res, $_ if $l == $n;\n    }\n    return @res;\n}", " \
    \   my @words = split /\\s+/, $s;\n    my @selected;\n    for my $word (@words)\
    \ {\n        my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n        if\
    \ ($consonants == $n) {\n            push @selected, $word;\n        }\n    }\n\
    \    return @selected;\n}", "    my @words = split / /, $s;\n    my @matches;\n\
    \    foreach my $word (@words) {\n        my $count = 0;\n        my @chars =\
    \ split //, $word;\n        foreach my $char (@chars) {\n            $count++\
    \ if ($char =~ /[^aeiou]/i);\n        }\n        push @matches, $word if ($count\
    \ == $n);\n    }\n    return @matches;\n}", "    my @result = ();\n    foreach\
    \ my $word (split(/\\s+/, $s)) {\n        next if ($word =~ /^\\s*$/);\n     \
    \   my $num_consonants = ($word =~ tr/bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ//);\n\
    \        push(@result, $word) if ($num_consonants == $n);\n    }\n    return @result;\n\
    }", "    my @result = ();\n    my @words = split(/\\s+/, $s);\n    my $regex =\
    \ qr/^[^aeiou]{$n}$/;\n    foreach my $word (@words) {\n        if ($word =~ $regex)\
    \ {\n            push @result, $word;\n        }\n    }\n    return @result;\n\
    }", "    my @consonants = qw(b c d f g h j k l m n p q r s t v w x y z);\n   \
    \ my @selected_words;\n    my @words = split(' ', $s);\n    foreach my $word (@words)\
    \ {\n        my $counter = 0;\n        my @letters = split('', $word);\n     \
    \   foreach my $letter (@letters) {\n            if(grep(/^$letter$/, @consonants))\
    \ {\n                $counter++;\n            }\n        }\n        if($counter\
    \ == $n) {\n            push(@selected_words, $word);\n        }\n    }\n    return\
    \ @selected_words;\n}", "    my @arr;\n    my @string = split(\" \", $s);\n  \
    \  for (my $i = 0; $i < scalar @string; $i++) {\n        if (&count($string[$i])\
    \ == $n) {\n            push(@arr, $string[$i]);\n        }\n    }\n    return\
    \ @arr;\n}", "    return [] if $s eq '';\n    my @words = split(' ', $s);\n  \
    \  my @result;\n    foreach my $word (@words) {\n        my $count = 0;\n    \
    \    my @chars = split('', $word);\n        foreach my $char (@chars) {\n    \
    \        $count++ if $char =~ /[bcdfghjklmnpqrstvwxyz]/i;\n        }\n       \
    \ push @result, $word if $count == $n;\n    }\n    return \\@result;\n}", "  \
    \  my @words = split(/\\s+/, $s);\n    my @result;\n    for my $word (@words)\
    \ {\n        my $c = ($word =~ tr/aoyeui//);\n        push @result, $word if $c\
    \ == $n;\n    }\n    return @result;\n}", "    my @str = split(/ /, $s);\n   \
    \ my @result;\n    for my $i (@str) {\n        my $count = ($i =~ tr/bcdfghjklmnpqrstvwxyz/bcdfghjklmnpqrstvwxyz/);\n\
    \        push @result, $i if $count == $n;\n    }\n    return @result;\n}", " \
    \   my @words = split(' ', $s);\n    return [grep { n_consonants($_) == $n } @words];\n\
    }", "    my @res;\n    my @words = split(\" \", $s);\n    foreach my $word (@words)\
    \ {\n        if (has_n_consonants($word, $n)) {\n            push(@res, $word);\n\
    \        }\n    }\n    return @res;\n}", "    my @vowels = ('a'..'z', 'A'..'Z');\n\
    \    my @words = split(\" \", $s);\n    my @results;\n    foreach my $word (@words)\
    \ {\n        my $consonants = 0;\n        my @letters = split(\"\", $word);\n\
    \        foreach my $letter (@letters) {\n            if(!($letter ~~ @vowels))\
    \ {\n                $consonants++;\n            }\n        }\n        if($consonants\
    \ == $n) {\n            push(@results, $word);\n        }\n    }\n    return @results;\n\
    }", "    $s =~ s/\\b(\\w*?[^aeiou]{$n}\\w*?)\\b/$1 /g;\n    return $s =~ /\\b(\\\
    w*?)\\b/g;\n}\nprint \"['little'] ==> [\".(join \",\", select_words(\"Mary had\
    \ a little lamb\", 4)).\"]\\n\";\nprint \"['Mary', 'lamb'] ==> [\".(join \",\"\
    , select_words(\"Mary had a little lamb\", 3)).\"]\\n\";\nprint \"[] ==> [\".(join\
    \ \",\", select_words(\"simple white space\", 2)).\"]\\n\";\nprint \"['world']\
    \ ==> [\".(join \",\", select_words(\"Hello world\", 4)).\"]\\n\";\nprint \"['Uncle']\
    \ ==> [\".(join \",\", select_words(\"Uncle sam\", 3)).\"]\\n\";", "    my @words\
    \ = split(/\\s+/, $s);\n    my @result;\n    foreach my $word (@words) {\n   \
    \     my $consonants = $word =~ tr/bcdfghjklmnpqrstvwxyz//;\n        push @result,\
    \ $word if $consonants == $n;\n    }\n    return @result;\n}", "    my @words\
    \ = split(/\\s+/, $s);\n    my @return;\n    for my $w(@words) {\n        push\
    \ @return, $w if $w =~ tr/bcdfghjklmnpqrstvwxyz// == $n;\n    }\n    return @return;\n\
    }", "    my @s = split(\" \", $s);\n    my @r;\n    foreach (@s) {\n        push\
    \ @r, $_ if (length($_) - () = $_ =~ /[^aeiou]/gi) == $n;\n    }\n    return @r;\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
