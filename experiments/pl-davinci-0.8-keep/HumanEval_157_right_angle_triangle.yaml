name: HumanEval_157_right_angle_triangle
language: pl
prompt: "# Given the lengths of the three sides of a triangle. Return True if the\
  \ three\n# sides form a right-angled triangle, False otherwise.\n# A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n# 90 degree.\n#\
  \ Example:\n# right_angle_triangle(3, 4, 5) == True\n# right_angle_triangle(1, 2,\
  \ 3) == False\nsub right_angle_triangle {\n    my($a, $b, $c) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&right_angle_triangle;\n\
  \        if(eq_deeply($candidate->(3, 4, 5),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(1, 2, 3),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 6, 8),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n      \
  \  if(eq_deeply($candidate->(2, 2, 2),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(7, 24, 25),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10,\
  \ 5, 7),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(5, 12, 13),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(15, 8, 17),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(48,\
  \ 55, 73),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(1, 1, 1),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(2, 2, 10),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $max = max($a, $b, $c);\n    my $sum = $a + $b + $c;\n    my\
    \ $rest = $sum - $max;\n    return $max*$max == $rest*$rest;\n}", "    ($a, $b,\
    \ $c) = sort { $a <=> $b } ($a, $b, $c);\n    return $a**2 + $b**2 == $c**2 ?\
    \ 1 : 0;\n}", "    my $ab = $a ** 2 + $b ** 2;\n    my $bc = $b ** 2 + $c ** 2;\n\
    \    my $ac = $a ** 2 + $c ** 2;\n    if (($ab == $c ** 2) || ($bc == $a ** 2)\
    \ || ($ac == $b ** 2)) {\n        return 1;\n    } else {\n        return 0;\n\
    \    }\n}", "    return sqrt($a ** 2 + $b ** 2) == $c or\n           sqrt($a **\
    \ 2 + $c ** 2) == $b or\n           sqrt($b ** 2 + $c ** 2) == $a;\n}", "    return\
    \ ($a**2 + $b**2 == $c**2);\n}", "    my $m = 0;\n    my $n = 0;\n    my $p =\
    \ 0;\n    if ($a > $b && $a > $c) {\n\t$m = $a;\n\t$n = $b;\n\t$p = $c;\n    }\
    \ elsif ($b > $a && $b > $c) {\n\t$m = $b;\n\t$n = $a;\n\t$p = $c;\n    } else\
    \ {\n\t$m = $c;\n\t$n = $a;\n\t$p = $b;\n    }\n    if (($m * $m) == (($n * $n)\
    \ + ($p * $p))) {\n\treturn 1;\n    } else {\n\treturn 0;\n    }\n}", "    my\
    \ $is_right_angle = 0;\n    if ($a < $b && $a < $c) {\n        if ($a**2 + $b**2\
    \ == $c**2) {\n            $is_right_angle = 1;\n        }\n    }\n    elsif ($b\
    \ < $a && $b < $c) {\n        if ($b**2 + $c**2 == $a**2) {\n            $is_right_angle\
    \ = 1;\n        }\n    }\n    elsif ($c < $a && $c < $b) {\n        if ($c**2\
    \ + $a**2 == $b**2) {\n            $is_right_angle = 1;\n        }\n    }\n  \
    \  return $is_right_angle;\n}", "    my $m = max($a, $b, $c);\n    my $s = $a\
    \ + $b + $c - $m;\n    return ($m ** 2 == $s ** 2);\n}", "    my $is_right_angle\
    \ = 0;\n    if( $a >= $b ) {\n        if( $a >= $c ) {\n            $is_right_angle\
    \ = 1 if $a*$a == $b*$b + $c*$c;\n        }\n        else {\n            $is_right_angle\
    \ = 1 if $c*$c == $a*$a + $b*$b;\n        }\n    }\n    else {\n        if( $b\
    \ >= $c ) {\n            $is_right_angle = 1 if $b*$b == $a*$a + $c*$c;\n    \
    \    }\n        else {\n            $is_right_angle = 1 if $c*$c == $a*$a + $b*$b;\n\
    \        }\n    }\n    return $is_right_angle;\n}", "    if ($a > $b) {\n    \
    \    if ($a > $c) {\n            return $a * $a == $b * $b + $c * $c;\n      \
    \  } else {\n            return $c * $c == $a * $a + $b * $b;\n        }\n   \
    \ } else {\n        if ($b > $c) {\n            return $b * $b == $a * $a + $c\
    \ * $c;\n        } else {\n            return $c * $c == $a * $a + $b * $b;\n\
    \        }\n    }\n}", "    die \"Invalid arguments\" if ($a <= 0 or $b <= 0 or\
    \ $c <= 0);\n    my($temp, $max);\n    $temp = ($a**2 + $b**2) == $c**2;\n   \
    \ $max = $a > $b ? $a : $b;\n    $max = $max > $c ? $max : $c;\n    if ($max ==\
    \ $a) {\n        return $temp;\n    }\n    $temp = ($a**2 + $c**2) == $b**2;\n\
    \    if ($max == $b) {\n        return $temp;\n    }\n    $temp = ($b**2 + $c**2)\
    \ == $a**2;\n    return $temp;\n}", "    my @lengths = sort {$a <=> $b} ($a, $b,\
    \ $c);\n    return $lengths[0] ** 2 + $lengths[1] ** 2 == $lengths[2] ** 2;\n}",
  "    ($a**2 + $b**2 == $c**2) or\n    ($a**2 + $c**2 == $b**2) or\n    ($b**2 +\
    \ $c**2 == $a**2);\n}", "    my $hyp = max($a, $b, $c);\n    my $adj = ($a ==\
    \ $hyp) ? $b : $a;\n    my $opp = ($c == $hyp) ? $b : $c;\n    $adj ** 2 + $opp\
    \ ** 2 == $hyp ** 2;\n}", "    my @sides = sort {$a <=> $b} ($a, $b, $c);\n  \
    \  return ($sides[0]**2 + $sides[1]**2 == $sides[2]**2);\n}", "    $a * $a + $b\
    \ * $b == $c * $c;\n}", "    return ($a**2 + $b**2 == $c**2) or\n           ($a**2\
    \ + $c**2 == $b**2) or\n           ($b**2 + $c**2 == $a**2);\n}", "    return\
    \ ($a**2 + $b**2 == $c**2 or $a**2 + $c**2 == $b**2 or $b**2 + $c**2 == $a**2);\n\
    }", "    return $a**2 + $b**2 == $c**2 ? 1 : 0;\n}", "    ($a ** 2 + $b ** 2 ==\
    \ $c ** 2 || $a ** 2 + $c ** 2 == $b ** 2 || $b ** 2 + $c ** 2 == $a ** 2) ? 'True'\
    \ : 'False';\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
