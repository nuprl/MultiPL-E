name: HumanEval_39_prime_fib
language: pl
prompt: "# prime_fib returns n-th number that is a Fibonacci number and it's also\
  \ prime.\n# >>> prime_fib(1)\n# 2\n# >>> prime_fib(2)\n# 3\n# >>> prime_fib(3)\n\
  # 5\n# >>> prime_fib(4)\n# 13\n# >>> prime_fib(5)\n# 89\nsub prime_fib {\n    my($n)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prime_fib;\n\
  \        if(eq_deeply($candidate->(1),2)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(2),3)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(3),5))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),13))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),89))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(6),233))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),1597))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),28657))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),514229))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),433494437))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @prime_fibs = (2, 3, 5, 13, 89);\n    return $prime_fibs[$n-1];\n\
    }", "    #TODO\n}", "    if( $n == 1 ) {\n        return 2;\n    }\n    elsif(\
    \ $n == 2 ) {\n        return 3;\n    }\n    else {\n        my($n_1) = 3;\n \
    \       my($n_2) = 2;\n        my($n_3) = 0;\n        my($i) = 3;\n        while(\
    \ $i <= $n ) {\n            $n_3 = $n_1 + $n_2;\n            if( is_prime($n_3)\
    \ ) {\n                if( $i == $n ) {\n                    return $n_3;\n  \
    \              }\n                else {\n                    $i = $i + 1;\n \
    \               }\n            }\n            $n_1 = $n_2;\n            $n_2 =\
    \ $n_3;\n        }\n    }\n}", "    my $fib_n = fib($n);\n    my $prime_fib_n\
    \ = $fib_n;\n    my $is_prime = is_prime($fib_n);\n    while (!$is_prime) {\n\
    \        $n += 1;\n        $fib_n = fib($n);\n        $is_prime = is_prime($fib_n);\n\
    \        $prime_fib_n = $fib_n if $is_prime;\n    }\n    return $prime_fib_n;\n\
    }", "    my @seq = (2, 3);\n    while(1) {\n        my $next = $seq[-1] + $seq[-2];\n\
    \        if(is_prime($next)) {\n            push @seq, $next;\n        }\n   \
    \     last if @seq == $n;\n    }\n    return $seq[-1];\n}", "    return 0 if $n\
    \ < 1;\n    my($fib, $prev_fib) = (1, 0);\n    my($count) = 0;\n    my($result)\
    \ = 0;\n    while ($count < $n) {\n        $result = $fib;\n        $fib += $prev_fib;\n\
    \        $prev_fib = $result;\n        $count++ if is_prime($result);\n    }\n\
    \    return $result;\n}", "    my($i) = 0;\n    my($x) = 2;\n    while ($i < $n)\
    \ {\n        if (is_prime($x) && is_fib($x)) {\n            $i++;\n        }\n\
    \        $x++;\n    }\n    return $x - 1;\n}", "    my $i = 1;\n    my $count\
    \ = 0;\n    while ($count < $n) {\n        if (is_prime(fib($i))) {\n        \
    \    $count++;\n        }\n        $i++;\n    }\n    return fib($i-1);\n}", " \
    \   # Do not use recursion.\n    my $fib1=1;\n    my $fib2=1;\n    my $fib;\n\
    \    my $i=1;\n    while($i<$n){\n      $fib=$fib1+$fib2;\n      $fib1=$fib2;\n\
    \      $fib2=$fib;\n      if(is_prime($fib)){\n        $i++;\n      }\n    }\n\
    \    return $fib;\n}", "    my $i = 1;\n    my $fib = 1;\n    while (1) {\n  \
    \      $fib = fib($i);\n        if (is_prime($fib)) {\n            $n--;\n   \
    \         last if $n == 0;\n        }\n        $i++;\n    }\n    return $fib;\n\
    }", "    my @fibs = (2, 3);\n    my $current_fib = 2;\n    for(my $i = 2; $i <=\
    \ $n; $i++) {\n        $current_fib = next_prime_fib($current_fib);\n        push\
    \ @fibs, $current_fib;\n    }\n    return $fibs[$n-1];\n}", "    my $i = 0;\n\
    \    my $f = 0;\n    my $p = 0;\n    my $j = 1;\n    while ( $i < $n ) {\n   \
    \     $f = fib($j);\n        if ( is_prime($f) ) {\n            $p = $f;\n   \
    \         $i++;\n        }\n        $j++;\n    }\n    return $p;\n}", "    my\
    \ $fib = 0;\n    my $i = 1;\n    for (;;) {\n        $fib = fib($i);\n       \
    \ return $fib if is_prime($fib) && ($n-- == 1);\n        $i++;\n    }\n}", " \
    \   my($fib, $prime_fib_n) = 1;\n    my($i) = 1;\n    my($count) = 0;\n    while\
    \ ($count < $n) {\n        if(is_prime($fib)) {\n            $count++;\n     \
    \       $prime_fib_n = $fib;\n        }\n        $i++;\n        $fib = fib($i);\n\
    \    }\n    return $prime_fib_n;\n}", "    my @prime_fib;\n    @prime_fib = prime_fib_do(7,\
    \ @prime_fib);\n    return ($prime_fib[$n - 1]);\n}", "    my($fib) = 0;\n   \
    \ my($cnt) = 0;\n    while (1) {\n        $fib = fib($cnt);\n        last if (is_prime($fib));\n\
    \        $cnt++;\n    }\n    return $fib;\n}", "    my($fib, $index) = (1, 1);\n\
    \    while($index <= $n) {\n        $fib += $fib[-2];\n        push @fib, $fib;\n\
    \        $index++ if is_prime($fib);\n    }\n    return $fib;\n}", "    if ($n\
    \ <= 0) {\n        return 0;\n    }\n    my $count = 0;\n    my $cur = 1;\n  \
    \  my $prev = 1;\n    while ($count < $n) {\n        ($cur, $prev) = ($cur + $prev,\
    \ $cur);\n        $count++ if is_prime($cur);\n    }\n    return $cur;\n}", " \
    \   my($fib, $i) = (0, 1);\n    $fib++ until _is_prime_fib($fib) and $n-- == 0;\n\
    \    return $fib;\n}", "    return(2) if $n == 1;\n    my($a, $b) = (2, 3);\n\
    \    my($i) = 2;\n    while (1) {\n        ($a, $b) = ($b, $a + $b);\n       \
    \ $i++;\n        if ($i == $n) {\n            return($a) if is_prime($a);\n  \
    \      }\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
