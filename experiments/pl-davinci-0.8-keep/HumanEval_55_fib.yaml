name: HumanEval_55_fib
language: pl
prompt: "# Return n-th Fibonacci number.\n# >>> fib(10)\n# 55\n# >>> fib(1)\n# 1\n\
  # >>> fib(8)\n# 21\nsub fib {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&fib;\n  \
  \      if(eq_deeply($candidate->(10),55)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(1),1)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(8),21))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),89))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(12),144))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    if ($n <= 1) {\n        return $n;\n    }\n    my $i = 1;\n   \
    \ my $x = 1;\n    my $y = 1;\n    while ($i < $n) {\n        ($x, $y) = ($y, $x\
    \ + $y);\n        $i++;\n    }\n    return $x;\n}", "    if ($n < 2) {\n     \
    \   return $n;\n    } else {\n        return fib($n-1) + fib($n-2);\n    }\n}",
  "    my($a, $b) = (0, 1);\n    while ($n-- > 0) {\n        ($a, $b) = ($b, $a +\
    \ $b);\n    }\n    return $a;\n}", "    return $n if $n <= 1;\n    return fib($n-1)\
    \ + fib($n-2);\n}", "    return ($n < 2) ? $n : fib($n-1) + fib($n-2);\n}", " \
    \   return 0 if $n < 1;\n    return 1 if $n < 3;\n    my $last = 1;\n    my $lastlast\
    \ = 1;\n    my $current = 0;\n    for (my $i = 2; $i < $n; $i++) {\n        $current\
    \ = $last + $lastlast;\n        $lastlast = $last;\n        $last = $current;\n\
    \    }\n    return $current;\n}", "    if ($n == 0) {\n        return 0;\n   \
    \ } elsif ($n == 1) {\n        return 1;\n    }\n    return fib($n-1) + fib($n-2);\n\
    }\nprint fib(10), \"\\n\";", "    # your code goes here!\n    my $a = 0;\n   \
    \ my $b = 1;\n    my $c = 0;\n    while ($n>1) {\n        $c = $a + $b;\n    \
    \    $a = $b;\n        $b = $c;\n        $n--;\n    }\n    return $c;\n}", " \
    \   return $n if $n < 2;\n    return fib($n-1) + fib($n-2);\n}", "    die \"Fibonacci:\
    \ argument must be positive integer, not [$n]\"\n      unless $n =~ /^\\d+$/ and\
    \ $n > 0;\n    $n < 3 ? 1 : fib($n-1) + fib($n-2);\n}", "    return 0 if $n ==\
    \ 0;\n    return 1 if $n == 1;\n    return (fib($n-1) + fib($n-2));\n}", "   \
    \ return 0 if $n < 1;\n    return 1 if $n < 3;\n    my($f1, $f2) = (1, 1);\n \
    \   while (--$n) {\n        ($f1, $f2) = ($f2, $f1 + $f2);\n    }\n    return\
    \ $f2;\n}", '    my($i, $f1, $f2);', "    return 0 if ($n < 1);\n    return 1\
    \ if ($n == 1 || $n == 2);\n    return fib($n-1) + fib($n-2);\n}", "    my $fib_nm1\
    \ = 1;\n    my $fib_nm2 = 0;\n    my $fib;\n    foreach my $i (0..$n-1) {\n  \
    \      $fib = $fib_nm1 + $fib_nm2;\n        $fib_nm2 = $fib_nm1;\n        $fib_nm1\
    \ = $fib;\n    }\n    return $fib;\n}", "    if ($n == 0 || $n == 1) {\n     \
    \   return $n;\n    }\n    return fib($n - 1) + fib($n - 2);\n}", "    die(\"\
    Use a natural number\") if $n !~ /^\\d+$/;\n    return ($n <= 2) ? 1 : fib($n-1)\
    \ + fib($n-2);\n}", "    return $n if $n < 2;\n    return fib($n-1) + fib($n-2);\n\
    }", "    if($n < 2) {\n        return $n;\n    } else {\n        return fib($n-1)\
    \ + fib($n-2);\n    }\n}", "    if($n < 2) {\n        return $n;\n    } else {\n\
    \        return fib($n-1) + fib($n-2);\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
