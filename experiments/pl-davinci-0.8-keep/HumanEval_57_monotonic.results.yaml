language: pl
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my $r = 0;\n    my $c;\n    my $i = 0;\n    while (++$i < scalar(@$l)) {\n\
    \        $c = $$l[$i] <=> $$l[$i-1];\n        if ($r and $c) {\n            if\
    \ ($r != $c) {\n                return 0;\n            }\n        } else {\n \
    \           $r = $c;\n        }\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   if( @$l > 1 ) {\n        my($prev) = $l->[0];\n        my($i);\n        my($increasing)\
    \ = 1;\n        my($decreasing) = 1;\n        for( $i = 1; $i < @$l; $i++ ) {\n\
    \            if( $l->[$i] > $prev ) {\n                $decreasing = 0;\n    \
    \        } elsif( $l->[$i] < $prev ) {\n                $increasing = 0;\n   \
    \         }\n            $prev = $l->[$i];\n        }\n        return $increasing\
    \ || $decreasing;\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   if (@$l == 0) { return 1; }\n    if (@$l == 1) { return 1; }\n    my $mon\
    \ = $l->[0] <=> $l->[1];\n    if ($mon == 0) { return monotonic([@$l[1..$#$l]]);\
    \ }\n    for (my $i = 1; $i < @$l; $i++) {\n        if (($l->[$i] <=> $l->[$i+1])\
    \ != $mon) { return 0; }\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my $mono = 1;\n    for (my $i = 1; $i < @$l; $i++) {\n        if ($l->[$i]\
    \ < $l->[$i-1]) {\n            $mono = 0;\n            last;\n        }\n    }\n\
    \    return $mono;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my $l1 = $$l[0];\n    my $m = 0;\n    foreach my $e (@$l) {\n\tmy $c = $e\
    \ <=> $l1;\n\t$m = $c if !$m;\n\treturn 0 if $c != $m;\n\t$l1 = $e;\n    }\n \
    \   return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 255
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   return scalar(@$l) == 0 || scalar(@$l) == 1 || monotonic_elements($l);\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5,\
    \ 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::monotonic_elements called at /tmp/tmpivpbyyv6.pl
    line 10.

    '
  stdout: ''
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my $v = $l->[0];\n    for my $i (1 .. @$l - 1) {\n        if ($l->[$i] < $v)\
    \ {\n            return 0 if $v - $l->[$i] > $l->[$i - 1] - $v;\n        }\n \
    \       else {\n            return 0 if $l->[$i] - $v > $v - $l->[$i - 1];\n \
    \       }\n        $v = $l->[$i];\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my $d = 0;\n    my $previous = undef;\n    foreach (@$l) {\n        $d = $_\
    \ - $previous;\n        if(defined($previous) && !(abs($d) == 0 || abs($d) ==\
    \ 1)) {\n            return 0;\n        }\n        $previous = $_;\n    }\n  \
    \  return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my $inc = 0;\n    my $dec = 0;\n    for (my $i = 1; $i < @$l; $i++) {\n  \
    \      if ($l->[$i] > $l->[$i-1]) {\n            $inc = 1;\n        }\n      \
    \  if ($l->[$i] < $l->[$i-1]) {\n            $dec = 1;\n        }\n    }\n   \
    \ return $inc + $dec == 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my $inc = 0;\n    my $dec = 0;\n    my $prev = undef;\n    for my $v (@$l)\
    \ {\n        if (defined $prev) {\n            if ($v > $prev) {\n           \
    \     $inc++;\n            } elsif ($v < $prev) {\n                $dec++;\n \
    \           }\n        }\n        $prev = $v;\n    }\n    return $inc == @$l -\
    \ 1 || $dec == @$l - 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my($s) = 1;\n    my($x) = 0;\n    foreach (@$l) {\n        if ($_ < $x) {\n\
    \            if ($s < 0) {\n                return 0;\n            }\n       \
    \     $s = -1;\n        } elsif ($_ > $x) {\n            if ($s > 0) {\n     \
    \           return 0;\n            }\n            $s = 1;\n        }\n       \
    \ $x = $_;\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4,\
    \ 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my $inc = -1;\n    my $i = 0;\n    while ($i < @$l) {\n        if ($i == 0)\
    \ {\n            $inc = $l->[$i + 1] > $l->[$i] ? 1 : -1;\n        }\n       \
    \ else {\n            return 0 if $inc * ($l->[$i + 1] - $l->[$i]) < 0;\n    \
    \    }\n        $i++;\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821459
- exit_code: 0
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my($i, $j);\n    my $n = scalar(@$l);\n    for ($i = 0; $i < $n - 1; $i++)\
    \ {\n        $j = $i + 1;\n        if ($l->[$i] <= $l->[$j]) {\n            while\
    \ ($j < $n && $l->[$i] <= $l->[$j]) {\n                $i++;\n               \
    \ $j++;\n            }\n            return $j == $n;\n        } else {\n     \
    \       while ($j < $n && $l->[$i] >= $l->[$j]) {\n                $i++;\n   \
    \             $j++;\n            }\n            return $j == $n;\n        }\n\
    \    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!ok!ok!ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   return 0 if @$l < 2;\n    my $d = $l->[1] - $l->[0];\n    for (my $i = 1;\
    \ $i < @$l - 1; $i++) {\n        my $d1 = $l->[$i + 1] - $l->[$i];\n        return\
    \ 0 if $d * $d1 < 0;\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my $d = 0;\n    for my $i (1 .. $#$l) {\n        my $d1 = $l->[$i] - $l->[$i-1];\n\
    \        if($d) {\n            return 0 if ($d1 < 0 && $d > 0) || ($d1 > 0 &&\
    \ $d < 0);\n        } else {\n            $d = $d1;\n        }\n    }\n    return\
    \ 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&monotonic;\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 5,\
    \ 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my $l_length = $#$l;\n    return 1 if $l_length < 2;\n    my $sign = [0, $l->[1]\
    \ - $l->[0]]->[$l->[1] - $l->[0] != 0];\n    for (my $i = 2; $i <= $l_length;\
    \ $i++) {\n        my $sign2 = [0, $l->[$i] - $l->[$i - 1]]->[$l->[$i] - $l->[$i\
    \ - 1] != 0];\n        return undef if $sign2 && $sign2 != $sign;\n    }\n   \
    \ return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n    \
    \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my $n = @$l;\n    my $i = 1;\n    my $b;\n    while ($i < $n) {\n        my\
    \ $c = ($l->[$i] <=> $l->[$i-1]);\n        if ($i == 1) {\n            $b = $c;\n\
    \        }\n        if ($c != $b) {\n            return 0;\n        }\n      \
    \  $i++;\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4,\
    \ 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my($prev) = shift @$l;\n    my($sign);\n    foreach my $x (@$l) {\n      \
    \  if(defined $sign) {\n            return 0 if($sign == 0 || $sign != ($x <=>\
    \ $prev));\n        } else {\n            $sign = $x <=> $prev;\n        }\n \
    \       $prev = $x;\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20,\
    \ 4, 10]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 0, -10]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 1,\
    \ 1, 0]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 5, 60]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4, 5, 60]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([9, 9, 9, 9]),1)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1659821459
- exit_code: 255
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   return scalar(@$l) < 2 || ( $l->[0] > $l->[1] ? monotonic_decreasing($l) :\
    \ monotonic_increasing($l) );\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n \
    \   my $candidate = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4,\
    \ 10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->([1, 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: 'Undefined subroutine &main::monotonic_increasing called at /tmp/tmpmyo5jauk.pl
    line 10.

    '
  stdout: ''
  timestamp: 1659821459
- exit_code: 1
  program: "# Return True is list elements are monotonically increasing or decreasing.\n\
    # >>> monotonic([1, 2, 4, 20])\n# True\n# >>> monotonic([1, 20, 4, 10])\n# False\n\
    # >>> monotonic([4, 1, 0, -10])\n# True\nsub monotonic {\n    my($l) = @_;\n \
    \   my $r = (ref $l) || '';\n    die \"monotonic() called with wrong parameter\"\
    \n        unless $r eq 'ARRAY';\n    my $x = @$l;\n    return 1 if $x < 2;\n \
    \   return 0 if $x > 3;\n    return 1 if (@$l[0] < @$l[-1]) ^ (@$l[1] < @$l[0]);\n\
    \    return 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&monotonic;\n        if(eq_deeply($candidate->([1, 2, 4, 10]),1)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 4, 20]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([1, 20, 4, 10]),\"\")) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 1, 0, -10]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 1, 1, 0]),1)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2,\
    \ 3, 2, 5, 60]),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n    \
    \    }\n        if(eq_deeply($candidate->([1, 2, 3, 4, 5, 60]),1)) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
    \ 9, 9, 9]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821459
