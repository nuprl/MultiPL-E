language: pl
name: HumanEval_29_filter_by_prefix
results:
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    return grep(/^$prefix/, @$strings);\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
    \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"\
    xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012921
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    return grep { substr($_, 0, length($prefix))\
    \ eq $prefix } @$strings;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&filter_by_prefix;\n        if(eq_deeply($candidate->([], \"\
    john\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012838
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    my @result = grep { $_ =~ /^$prefix/ } @$strings;\n\
    \    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_by_prefix;\n        if(eq_deeply($candidate->([], \"john\"),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012921
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    my @filtered;\n    foreach my $string (@$strings)\
    \ {\n        push @filtered, $string if substr($string, 0, length($prefix)) eq\
    \ $prefix;\n    }\n    return \\@filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_by_prefix;\n        if(eq_deeply($candidate->([],\
    \ \"john\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012921
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    return [grep {substr($_, 0, length($prefix))\
    \ eq $prefix} @$strings];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&filter_by_prefix;\n        if(eq_deeply($candidate->([], \"\
    john\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012921
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    return [ grep { /^$prefix/ } @$strings ];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
    \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"\
    xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012838
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    return [ grep { m/^\\Q$prefix\\E/ } @$strings\
    \ ];\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
    \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"\
    xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012838
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    my @filtered;\n    foreach my $string (@$strings)\
    \ {\n        if($string =~ /^$prefix/) {\n            push @filtered, $string;\n\
    \        }\n    }\n    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_by_prefix;\n        if(eq_deeply($candidate->([],\
    \ \"john\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012921
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    return [grep(/^$prefix/, @$strings)];\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
    \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"\
    xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012921
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    my @ret;\n    foreach my $s (@$strings) {\n\
    \        push @ret, $s if $s =~ /^\\Q$prefix\\E/;\n    }\n    return @ret;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
    \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"\
    xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012921
- exit_code: 0
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    return [grep {m{^\\Q$prefix\\E}} @$strings];\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
    \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"\
    xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660012921
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    my @filtered = grep { /^$prefix/ } @$strings;\n\
    \    return @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&filter_by_prefix;\n        if(eq_deeply($candidate->([], \"john\"),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012838
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    my @filtered;\n    for my $str (@$strings)\
    \ {\n        push @filtered, $str if $str =~ /^\\Q$prefix/;\n    }\n    return\
    \ @filtered;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&filter_by_prefix;\n        if(eq_deeply($candidate->([], \"john\"),[])) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\"\
    , \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
    \      }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012921
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    my @ret;\n    for my $word (@$strings) {\n\
    \        push @ret, $word if $word =~ /^\\Q$prefix/;\n    }\n    return @ret;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
    \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"\
    xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012921
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    return grep {m/^\\Q$prefix\\E/} @$strings;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
    \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"\
    xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012921
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    my @out;\n    push @out, $_ for grep { /^\\\
    Q$prefix/ } @$strings;\n    return @out;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&filter_by_prefix;\n        if(eq_deeply($candidate->([],\
    \ \"john\"),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"\
    xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"xxx\"])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012921
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    return grep(/^$prefix/, @$strings);\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
    \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"\
    xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012921
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    return grep { /^\\Q$prefix/ } @$strings;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
    \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"\
    xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012838
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    return grep { /^\\Q$prefix/ } @$strings;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
    \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"\
    xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012838
- exit_code: 1
  program: "# Filter an input list of strings only for ones that start with a given\
    \ prefix.\n# >>> filter_by_prefix([], 'a')\n# []\n# >>> filter_by_prefix(['abc',\
    \ 'bcd', 'cde', 'array'], 'a')\n# ['abc', 'array']\nsub filter_by_prefix {\n \
    \   my($strings, $prefix) = @_;\n    return grep {/^$prefix/} @$strings;\n}\n\
    use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_prefix;\n\
    \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\"\
    , \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"\
    xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
    \  }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660012921
