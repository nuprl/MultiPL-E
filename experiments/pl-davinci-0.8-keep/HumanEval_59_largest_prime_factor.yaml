name: HumanEval_59_largest_prime_factor
language: pl
prompt: "# Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  # >>> largest_prime_factor(13195)\n# 29\n# >>> largest_prime_factor(2048)\n# 2\n\
  sub largest_prime_factor {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&largest_prime_factor;\n\
  \        if(eq_deeply($candidate->(15),5)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->(27),3)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(63),7))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(330),11))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13195),29))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $p = 2;\n    my $m = int($n / $p);\n    while ($m * $p == $n)\
    \ {\n        $p = 2;\n        $m = int($n / $p);\n        while ($m * $p != $n)\
    \ {\n            $p++;\n            $m = int($n / $p);\n        }\n        $n\
    \ = $m;\n    }\n    return $n;\n}", "    my @factors = factor($n);\n    return\
    \ $factors[$#factors];\n}", "    my $max = 2;\n    while ($n % 2 == 0) {\n   \
    \     $n /= 2;\n    }\n    my $i = 3;\n    while ($i <= $n) {\n        if ($n\
    \ % $i == 0) {\n            $max = $i;\n            $n /= $i;\n        } else\
    \ {\n            $i += 2;\n        }\n    }\n    return $max;\n}", "    my $max\
    \ = 0;\n    for (prime_factors($n)) {\n        $max = $_ if $_ > $max;\n    }\n\
    \    return $max;\n}", "    my $factor = int(sqrt($n));\n    while ($factor >\
    \ 1) {\n        if ($n % $factor == 0) {\n            if (is_prime($factor)) {\n\
    \                return $factor;\n            }\n        }\n        $factor--;\n\
    \    }\n    return 0;\n}", "    my $i = 2;\n    while ($i < $n) {\n        if\
    \ ($n % $i == 0) {\n            $n /= $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $n;\n}", "    my $factor = 2;\n    my $factorized\
    \ = $n;\n    while ($factorized != 1) {\n        while ($factorized % $factor\
    \ == 0) {\n            $factorized /= $factor;\n        }\n        $factor +=\
    \ 1;\n    }\n    return $factor - 1;\n}", "    if(prime($n)) {\n        return\
    \ $n;\n    } else {\n        my $i = 2;\n        while($i < $n) {\n          \
    \  my $f = $n / $i;\n            if(prime($f)) {\n                return $f;\n\
    \            }\n            $i++;\n        }\n    }\n}", "    return $n if $n\
    \ == 2;\n    return 1 if $n == 1;\n    return largest_prime_factor(int($n / 2))\n\
    \        if $n % 2 == 0;\n    my $limit = sqrt($n);\n    my $i = 3;\n    while($i\
    \ <= $limit) {\n        if($n % $i == 0) {\n            return largest_prime_factor(int($n\
    \ / $i));\n        }\n        $i += 2;\n    }\n    return $n;\n}", "    my $prime\
    \ = 2;\n    while ($n > 1) {\n        if ($n % $prime == 0) {\n            $n\
    \ /= $prime;\n        } else {\n            $prime++;\n        }\n    }\n    return\
    \ $prime;\n}", "    my @primes = (2, 3);\n    while ($n > 1) {\n        my $prime\
    \ = shift @primes;\n        if ($n % $prime == 0) {\n            $n /= $prime;\n\
    \            unshift @primes, $prime;\n        }\n        else {\n           \
    \ push @primes, 2 * $prime + 1;\n        }\n    }\n    return $primes[0];\n}",
  "    my @primes = map primes($_, $n), (1..$n);\n    pop @primes;\n    return $primes[-1];\n\
    }", "    my $candidate = 2;\n    my $largest = $candidate;\n    while ($n > 1)\
    \ {\n        while ($n % $candidate == 0) {\n            $n /= $candidate;\n \
    \           $largest = $candidate;\n        }\n        $candidate++;\n    }\n\
    \    return $largest;\n}", "    foreach my $d (reverse 2..int sqrt $n) {\n   \
    \     return $d if $n % $d == 0 and is_prime($d);\n    }\n}", "    return 1 if\
    \ $n == 1;\n    return $n if is_prime($n);\n    my $max_factor = int(sqrt($n));\n\
    \    for my $f (2..$max_factor) {\n        if ($n % $f == 0) {\n            return\
    \ max(largest_prime_factor($f),\n                       largest_prime_factor($n/$f));\n\
    \        }\n    }\n    die \"can't happen\";\n}", "    return if !$n;\n    my\
    \ @factors = prime_factors($n);\n    return pop @factors;\n}", "    foreach my\
    \ $i (reverse 2..$n) {\n        next unless $n % $i == 0;\n        return $i if\
    \ is_prime($i);\n    }\n}", "    my $p = 2;\n    my $lpf = 1;\n    while ($p <\
    \ $n) {\n        $lpf = $p unless $n % $p;\n        $p++;\n    }\n    return $lpf;\n\
    }", "    my $p = 2;\n    while ($n % $p == 0) {\n        $n /= $p;\n    }\n  \
    \  $p += 1;\n    while ($p*$p <= $n) {\n        while ($n % $p == 0) {\n     \
    \       $n /= $p;\n        }\n        $p += 2;\n    }\n    return $n;\n}", " \
    \   my $factor = 2;\n    while($n > 1) {\n        if($n % $factor == 0) {\n  \
    \          $n /= $factor;\n        } else {\n            $factor += 1;\n     \
    \   }\n    }\n    return $factor;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
