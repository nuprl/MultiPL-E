name: HumanEval_147_get_max_triples
language: pl
prompt: "# You are given a positive integer n. You have to create an integer array\
  \ a of length n.\n# For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i\
  \ - i + 1.\n# Return the number of triples (a[i], a[j], a[k]) of a where i < j <\
  \ k, \n# and a[i] + a[j] + a[k] is a multiple of 3.\n# Example :\n# Input: n = 5\n\
  # Output: 1\n# Explanation: \n# a = [1, 3, 7, 13, 21]\n# The only valid triple is\
  \ (1, 7, 13).\nsub get_max_triples {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&get_max_triples;\n\
  \        if(eq_deeply($candidate->(5),1)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(6),4)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),36))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(100),53361))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $max_triples = 0;\n    for (my $i = 1; $i < $n; $i++) {\n  \
    \      for (my $j = $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1;\
    \ $k < $n; $k++) {\n                if (($i * $i - $i + 1 + $j * $j - $j + 1 +\
    \ $k * $k - $k + 1) % 3 == 0) {\n                    $max_triples++;\n       \
    \         }\n            }\n        }\n    }\n    return $max_triples;\n}", " \
    \   my $max_triples = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        my $num1\
    \ = $i * $i - $i + 1;\n        for (my $j = $i + 1; $j < $n; $j++) {\n       \
    \     my $num2 = $j * $j - $j + 1;\n            for (my $k = $j + 1; $k < $n;\
    \ $k++) {\n                my $num3 = $k * $k - $k + 1;\n                if (($num1\
    \ + $num2 + $num3) % 3 == 0) {\n                    $max_triples++;\n        \
    \        }\n            }\n        }\n    }\n    return $max_triples;\n}", " \
    \   return 0 if $n < 3;\n    my @a = map { $_ * $_ - $_ + 1 } (1..$n);\n    my\
    \ $k = 0;\n    for my $i (0..$#a-2) {\n        for my $j ($i+1..$#a-1) {\n   \
    \         if (($a[$i] + $a[$j]) % 3 == 0) {\n                for my $k ($j+1..$#a)\
    \ {\n                    if (($a[$j] + $a[$k]) % 3 == 0) {\n                 \
    \       ++$k;\n                    }\n                }\n            }\n     \
    \   }\n    }\n    return $k;\n}", "    # Write your code here\n    my $triples\
    \ = 0;\n    if($n < 3){\n        return $triples;\n    }\n    my @a = (1);\n \
    \   for(my $i = 2; $i < $n; $i++){\n        my $value = $i * $i - $i + 1;\n  \
    \      push @a, $value;\n    }\n    my $k = 0;\n    my $j = 0;\n    my $i = 0;\n\
    \    for($i = 2; $i < scalar @a; $i++){\n        for($j = 1; $j < $i; $j++){\n\
    \            for($k = 0; $k < $j; $k++){\n                if(($a[$i] + $a[$j]\
    \ + $a[$k]) % 3 == 0){\n                    $triples++;\n                }\n \
    \           }\n        }\n    }\n    return $triples;\n}", "    my $count = 0;\n\
    \    for(my $i = 0; $i < $n; $i++) {\n        my $v1 = $i * $i - $i + 1;\n   \
    \     for(my $j = $i + 1; $j < $n; $j++) {\n            my $v2 = $j * $j - $j\
    \ + 1;\n            my $sum = $v1 + $v2;\n            for(my $k = $j + 1; $k <\
    \ $n; $k++) {\n                my $v3 = $k * $k - $k + 1;\n                if(($sum\
    \ + $v3) % 3 == 0) {\n                    $count++;\n                }\n     \
    \       }\n        }\n    }\n    return $count;\n}", "    my $i = 1;\n    my $counter\
    \ = 0;\n    while($i < $n) {\n        my $j = $i + 1;\n        while($j < $n)\
    \ {\n            my $k = $j + 1;\n            while($k < $n) {\n             \
    \   my $a_i = $i * $i - $i + 1;\n                my $a_j = $j * $j - $j + 1;\n\
    \                my $a_k = $k * $k - $k + 1;\n                if(($a_i + $a_j\
    \ + $a_k) % 3 == 0) {\n                    $counter++;\n                }\n  \
    \              $k++;\n            }\n            $j++;\n        }\n        $i++;\n\
    \    }\n    return $counter;\n}", "    my $triples = 0;\n    my $i = 0;\n    while\
    \ ($i < $n - 2) {\n        my $a_i = $i * $i - $i + 1;\n        my $j = $i + 1;\n\
    \        while ($j < $n - 1) {\n            my $a_j = $j * $j - $j + 1;\n    \
    \        my $sum = $a_i + $a_j;\n            my $k = $j + 1;\n            while\
    \ ($k < $n) {\n                my $a_k = $k * $k - $k + 1;\n                if\
    \ (($sum + $a_k) % 3 == 0) {\n                    ++$triples;\n              \
    \  }\n                ++$k;\n            }\n            ++$j;\n        }\n   \
    \     ++$i;\n    }\n    return $triples;\n}", "    return 0 if($n < 3);\n    my\
    \ $max_triples = ($n-2)*($n-1)*($n)/6;\n    my $ones = int($n/3);\n    my $twos\
    \ = int($n/3);\n    $ones -= 1 if($n % 3 == 1);\n    my $threes = $n - $ones -\
    \ $twos;\n    $max_triples -= $ones*$twos*$threes;\n    return $max_triples;\n\
    }", "    my @arr = ();\n    for(my $i = 1; $i <= $n; $i++){\n        push @arr,\
    \ $i * $i - $i + 1;\n    }\n    my $count = 0;\n    for(my $i = 0; $i < $n - 2;\
    \ $i++){\n        for(my $j = $i + 1; $j < $n - 1; $j++){\n            for(my\
    \ $k = $j + 1; $k < $n; $k++){\n                if(($arr[$i] + $arr[$j] + $arr[$k])\
    \ % 3 == 0){\n                    $count++;\n                }\n            }\n\
    \        }\n    }\n    return $count;\n}", "    my @a = map {my $i = $_; ($i *\
    \ $i - $i + 1) % 3 == 0} (1..$n);\n    # print \"a = @a\\n\";\n    my %map;\n\
    \    my @b;\n    foreach my $i (0..$#a) {\n        my $x = $a[$i];\n        if\
    \ (exists $map{$x}) {\n            $map{$x}->{$i} = 1;\n        } else {\n   \
    \         $map{$x} = {$i => 1};\n        }\n    }\n    foreach my $i (0..$#a)\
    \ {\n        my $x = $a[$i];\n        next if ($x == 0);\n        my $y = 3 -\
    \ $x;\n        my $z = $y + $x;\n        # print \"($x, $y, $z)\\n\";\n      \
    \  next if (!exists $map{$y});\n        next if (!exists $map{$z});\n        my\
    \ $hash = $map{$y};\n        foreach my $k (keys %$hash) {\n            next if\
    \ ($k <= $i);\n            $b[$k] = 1;\n        }\n        $hash = $map{$z};\n\
    \        foreach my $k (keys %$hash) {\n            next if ($k <= $i);\n    \
    \        $b[$k] = 1;\n        }\n    }\n    # print \"b = @b\\n\";\n    my $count\
    \ = 0;\n    foreach my $x (@b) {\n        $count++ if (defined $x);\n    }\n \
    \   return $count;\n}", "    my @a = ();\n    for(my $i = 1; $i <= $n; $i++) {\n\
    \        push @a, ($i * $i - $i + 1);\n    }\n    my $max_triples = 0;\n    my\
    \ $cur_triples = 0;\n    my $mod = 0;\n    for(my $i = 0; $i < scalar(@a); $i++)\
    \ {\n        $mod = $a[$i] % 3;\n        for(my $j = $i + 1; $j < scalar(@a);\
    \ $j++) {\n            if(($a[$j] + $mod) % 3 == 0) {\n                $cur_triples++;\n\
    \            }\n        }\n        $max_triples += $cur_triples;\n        $cur_triples\
    \ = 0;\n    }\n    return $max_triples;\n}", "    my $res = 0;\n    for(my $i\
    \ = 1; $i <= $n; $i++) {\n        for(my $j = $i + 1; $j <= $n; $j++) {\n    \
    \        for(my $k = $j + 1; $k <= $n; $k++) {\n                my $sum = $i *\
    \ $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1;\n                $res++ if\
    \ ($sum % 3 == 0);\n            }\n        }\n    }\n    return $res;\n}", " \
    \   my $total = 0;\n    for (my $i = 1; $i < $n; $i++) {\n        for (my $j =\
    \ $i + 1; $j < $n; $j++) {\n            for (my $k = $j + 1; $k < $n; $k++) {\n\
    \                my $a = $i * $i - $i + 1;\n                my $b = $j * $j -\
    \ $j + 1;\n                my $c = $k * $k - $k + 1;\n                if (($a\
    \ + $b + $c) % 3 == 0) {\n                    $total++;\n                }\n \
    \           }\n        }\n    }\n    return $total;\n}\nmy $n = <STDIN>;\nchomp\
    \ $n;\nmy $result = get_max_triples($n);\nprint $result . \"\\n\";", "    my @a\
    \ = ();\n    my $res = 0;\n    for(my $i = 1; $i <= $n; $i++) {\n        push\
    \ @a, $i * $i - $i + 1;\n    }\n    for(my $i = 0; $i < scalar(@a) - 2; $i++)\
    \ {\n        for(my $j = $i + 1; $j < scalar(@a) - 1; $j++) {\n            for(my\
    \ $k = $j + 1; $k < scalar(@a); $k++) {\n                if(($a[$i] + $a[$j] +\
    \ $a[$k]) % 3 == 0) {\n                    $res++;\n                }\n      \
    \      }\n        }\n    }\n    return $res;\n}", "    my($count) = 0;\n    for(my($i)=0;\
    \ $i<$n; $i++) {\n        for(my($j)=$i+1; $j<$n; $j++) {\n            for(my($k)=$j+1;\
    \ $k<$n; $k++) {\n                $count++ if (($i*$i-$i+1 + $j*$j-$j+1 + $k*$k-$k+1)\
    \ % 3 == 0);\n            }\n        }\n    }\n    return $count;\n}", "    my\
    \ $res = 0;\n    my $map = {};\n    for (my $i = 1; $i <= $n; $i++) {\n      \
    \  my $a = $i * $i - $i + 1;\n        #print \"i=$i, a[i]=$a\\n\";\n        $map->{$a}++;\n\
    \        if ($a % 3 == 0) {\n            #print \"---> a % 3 = 0\\n\";\n     \
    \       $res++;\n        }\n        for (my $j = $i + 1; $j <= $n; $j++) {\n \
    \           my $b = $j * $j - $j + 1;\n            if (($a + $b) % 3 == 0) {\n\
    \                #print \"--> a=\", $a, \", b=\", $b, \", (a+b) % 3 = 0\\n\";\n\
    \                $res++;\n            }\n            for (my $k = $j + 1; $k <=\
    \ $n; $k++) {\n                my $c = $k * $k - $k + 1;\n                if (($a\
    \ + $b + $c) % 3 == 0) {\n                    #print \"--> a=\", $a, \", b=\"\
    , $b, \", c=\", $c, \", (a+b+c) % 3 = 0\\n\";\n                    $res++;\n \
    \               }\n            }\n        }\n    }\n    #print Dumper($map);\n\
    \    return $res;\n}", "    my @a = (1);\n    my $mod_sum_by_index = [0];\n  \
    \  my @mod_sum_by_value = (0);\n    my $total_triples = 0;\n    my $mod_sum =\
    \ 0;\n    for my $i (1 .. $n - 1) {\n        my $next_value = $i * $i - $i + 1;\n\
    \        push @a, $next_value;\n        push @mod_sum_by_value, $mod_sum;\n  \
    \      push @$mod_sum_by_index, 0;\n        for my $j (0 .. $i - 1) {\n      \
    \      my $mod_sum_by_index = ($mod_sum_by_value[$i] - $mod_sum_by_value[$j])\
    \ % 3;\n            for my $k ($j + 1 .. $i - 1) {\n                my $mod_sum_by_index_current\
    \ = ($mod_sum_by_index + $mod_sum_by_index[$k]) % 3;\n                if ($mod_sum_by_index_current\
    \ == 0) {\n                    $total_triples++;\n                }\n        \
    \    }\n            $mod_sum_by_index[$j] = ($mod_sum_by_index[$j] + $next_value)\
    \ % 3;\n        }\n        $mod_sum = ($mod_sum + $next_value) % 3;\n    }\n \
    \   return $total_triples;\n}", "    return 0 if ($n < 3);\n    my $ret = 0;\n\
    \    my @a = (1);\n    for(my $i = 2; $i <= $n; $i++) {\n        push @a, ($i\
    \ * $i - $i + 1);\n    }\n    #print \"@a\\n\";\n    for(my $i = 0; $i < $#a -\
    \ 1; $i++) {\n        for(my $j = $i + 1; $j < $#a; $j++) {\n            for(my\
    \ $k = $j + 1; $k < $#a + 1; $k++) {\n                #printf \"a[$i] = %d, a[$j]\
    \ = %d, a[$k] = %d\\n\", $a[$i], $a[$j], $a[$k];\n                $ret++ if (($a[$i]\
    \ + $a[$j] + $a[$k]) % 3 == 0);\n            }\n        }\n    }\n    return $ret;\n\
    }", "    my @array = ();\n    for(my $i = 1; $i <= $n; $i++) {\n        push @array,\
    \ ($i * $i - $i + 1);\n    }\n    my $result = 0;\n    my $max = $#array;\n  \
    \  for(my $i = 0; $i < $max - 1; $i++) {\n        for(my $j = $i + 1; $j < $max;\
    \ $j++) {\n            for(my $k = $j + 1; $k <= $max; $k++) {\n             \
    \   my $temp = $array[$i] + $array[$j] + $array[$k];\n                if($temp\
    \ % 3 == 0) {\n                    $result++;\n                }\n           \
    \ }\n        }\n    }\n    return $result;\n}\nmy $n = 5;\nprint get_max_triples($n);",
  "    my $max_triples = 0;\n    for(my $i = 0; $i < $n; $i++) {\n        for(my $j\
    \ = $i + 1; $j < $n; $j++) {\n            for(my $k = $j + 1; $k < $n; $k++) {\n\
    \                if(($i * $i - $i + 1 + $j * $j - $j + 1 + $k * $k - $k + 1) %\
    \ 3 == 0) {\n                    $max_triples++;\n                }\n        \
    \    }\n        }\n    }\n    return $max_triples;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
