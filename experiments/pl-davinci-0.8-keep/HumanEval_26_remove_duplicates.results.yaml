language: pl
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %unique = ();\n    foreach(@$numbers) {\n        $unique{$_} = 1;\n  \
    \  }\n    return [sort {$a <=> $b} keys %unique];\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %counts;\n    my @newlist;\n    foreach my $n (@$numbers) {\n        if\
    \ (!exists $counts{$n}) {\n            $counts{$n} = 1;\n            push @newlist,\
    \ $n;\n        }\n    }\n    return @newlist;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %seen;\n    my @unique;\n    foreach my $number (@$numbers) {\n      \
    \  if(not $seen{$number}) {\n            push @unique, $number;\n            $seen{$number}\
    \ = 1;\n        }\n    }\n    return \\@unique;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my @result;\n    my %seen;\n    foreach my $n (@$numbers) {\n        push\
    \ @result, $n unless $seen{$n}++;\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    # ...\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\\
    &remove_duplicates;\n        if(eq_deeply($candidate->([]),[])) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %seen;\n    my @new_list;\n    for my $number (@$numbers) {\n        if\
    \ (!$seen{$number}) {\n            push @new_list, $number;\n            $seen{$number}\
    \ = 1;\n        }\n    }\n    return \\@new_list;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my $result = [];\n    my %numbers_seen;\n    for my $n (@$numbers) {\n  \
    \      push @$result, $n unless $numbers_seen{$n}++;\n    }\n    return $result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1,\
    \ 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my @numbers = @$numbers;\n    my %hash;\n    my @array;\n    foreach my $number\
    \ (@numbers) {\n        if (not exists $hash{$number}) {\n            $hash{$number}\
    \ = 1;\n            push @array, $number;\n        }\n    }\n    return @array;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1,\
    \ 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %seen;\n    return grep { not $seen{$_}++ } @$numbers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013142
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %h = ();\n    foreach my $n (@$numbers) {\n        if (!exists $h{$n})\
    \ {\n            $h{$n} = 1;\n        } else {\n            $h{$n}++;\n      \
    \  }\n    }\n    my @result = grep { $h{$_} == 1 } keys %h;\n    return @result;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1,\
    \ 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013234
- exit_code: 0
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %seen;\n    for my $n (@$numbers) {\n        $seen{$n}++;\n    }\n   \
    \ my @result;\n    for my $n (@$numbers) {\n        push @result, $n if $seen{$n}\
    \ == 1;\n    }\n    return \\@result;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %seen;\n    return map { defined $seen{$_} ? () : ($seen{$_} = 1) } @$numbers;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1,\
    \ 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my $unique_numbers = [];\n    foreach my $number (@$numbers) {\n        push\
    \ @$unique_numbers, $number unless grep { $_ == $number } @$unique_numbers;\n\
    \    }\n    return $unique_numbers;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %seen;\n    my @unique = grep { !$seen{$_}++ } @$numbers;\n    return\
    \ \\@unique;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate =\
    \ \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[])) {\n      \
    \  print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013142
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %seen;\n    return grep { not $seen{$_}++ } @$numbers;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013142
- exit_code: 255
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my @uniques = grep {\n        my $number = $_;\n        my $first_occurance\
    \ = first_index { $number == $_ } @$numbers;\n        my $last_occurance = last_index\
    \ { $number == $_ } @$numbers;\n        $first_occurance == $last_occurance;\n\
    \    } @$numbers;\n    return \\@uniques;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: 'Can''t locate object method "first_index" via package "1" (perhaps you
    forgot to load "1"?) at /tmp/tmpa4s7qep2.pl line 9.

    '
  stdout: ok!
  timestamp: 1660013234
- exit_code: 0
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %counts;\n    for my $n (@$numbers) {\n        $counts{$n}++;\n    }\n\
    \    my @ret;\n    for my $n (@$numbers) {\n        push @ret, $n if $counts{$n}\
    \ == 1;\n    }\n    return \\@ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %seen;\n    my @left;\n    foreach my $number (@$numbers) {\n        if(exists\
    \ $seen{$number}) {\n            # ignore\n        } else {\n            $seen{$number}\
    \ = 1;\n            push @left, $number;\n        }\n    }\n    return \\@left;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&remove_duplicates;\n\
    \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1,\
    \ 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5])) {\n       \
    \ print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ok!ok!
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %count = ();\n    my @uniq = ();\n    foreach my $number (@$numbers) {\n\
    \        $count{$number} += 1;\n        push @uniq, $number if ($count{$number}\
    \ == 1);\n    }\n    return @uniq;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013234
- exit_code: 1
  program: "# From a list of integers, remove all elements that occur more than once.\n\
    # Keep order of elements left the same as in the input.\n# >>> remove_duplicates([1,\
    \ 2, 3, 2, 4])\n# [1, 3, 4]\nsub remove_duplicates {\n    my($numbers) = @_;\n\
    \    my %counts;\n    my @dups;\n    foreach my $number (@$numbers) {\n      \
    \  $counts{$number}++;\n    }\n    foreach my $number (@$numbers) {\n        if\
    \ ($counts{$number} > 1) {\n            push @dups, $number;\n        }\n    }\n\
    \    my @unique;\n    foreach my $number (@$numbers) {\n        unless (grep {\
    \ $_ == $number } @dups) {\n            push @unique, $number;\n        }\n  \
    \  }\n    return @unique;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&remove_duplicates;\n        if(eq_deeply($candidate->([]),[]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
    \ 2, 3, 4]),[1, 2, 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n\
    \        }\n        if(eq_deeply($candidate->([1, 2, 3, 2, 4, 3, 5]),[1, 4, 5]))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013234
