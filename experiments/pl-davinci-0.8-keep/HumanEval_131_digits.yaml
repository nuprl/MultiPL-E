name: HumanEval_131_digits
language: pl
prompt: "# Given a positive integer n, return the product of the odd digits.\n# Return\
  \ 0 if all digits are even.\n# For example:\n# digits(1)  == 1\n# digits(4)  ==\
  \ 0\n# digits(235) == 15\nsub digits {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&digits;\n\
  \        if(eq_deeply($candidate->(5),5)) {\n        print \"ok!\" }else{\n    \
  \    exit 1;\n        }\n        if(eq_deeply($candidate->(54),5)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(120),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5014),5))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(98765),315))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5576543),2625))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(2468),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    $n =~ s/(\\d*[13579]\\d*)/$1/g;\n    $n =~ s/\\D//g;\n    return\
    \ $n;\n}", "    return 0 if ($n == 0);\n    my($i) = 0;\n    while ($n > 0) {\n\
    \        my($digit) = $n % 10;\n        $i = $i * $digit if ($digit % 2 == 1);\n\
    \        $n = int($n / 10);\n    }\n    return $i;\n}", "    my @n = split('',\
    \ $n);\n    my $odds = 1;\n    foreach (@n) {\n        $odds *= $_ if $_ % 2;\n\
    \    }\n    return $odds;\n}", "    return reduce { $a * $b } grep { $_ % 2 }\
    \ split //, $n;\n}", "    my $product = 1;\n    while ($n > 0) {\n        my $digit\
    \ = $n % 10;\n        $product *= $digit if $digit % 2;\n        $n /= 10;\n \
    \   }\n    return $product;\n}", "    my $ret = 1;\n    while ($n > 0) {\n   \
    \     my $d = $n % 10;\n        $ret *= $d if $d % 2;\n        $n /= 10;\n   \
    \ }\n    return $ret;\n}", "    my $a = 1;\n    while ($n) {\n\t$a *= $n % 10\
    \ if $n % 2;\n\t$n /= 10;\n    }\n    return $a;\n}", "    my $product = 1;\n\
    \    while ($n > 0) {\n        my $digit = $n % 10;\n        $product *= $digit\
    \ if $digit % 2;\n        $n /= 10;\n    }\n    return $product;\n}", "    my\
    \ $m = 1;\n    while ($n > 0) {\n        $m *= $n % 10 if $n % 2;\n        $n\
    \ /= 10;\n    }\n    return $m;\n}", '    #my($n, $result) = @_;', "    my $product\
    \ = 1;\n    while($n) {\n        my $digit = $n % 10;\n        $product *= $digit\
    \ if $digit % 2;\n        $n /= 10;\n    }\n    return $product;\n}", "    my\
    \ $p = 1;\n    while($n) {\n        my $d = $n % 10;\n        $p *= $d if $d %\
    \ 2;\n        $n /= 10;\n    }\n    return $p;\n}", "    my $prod = 1;\n    while\
    \ ($n) {\n        my $d = $n % 10;\n        $prod *= $d if $d % 2;\n        $n\
    \ /= 10;\n    }\n    return $prod;\n}", "    my $result = 1;\n    while($n > 0)\
    \ {\n        my $digit = $n % 10;\n        $result *= $digit if $digit % 2;\n\
    \        $n /= 10;\n    }\n    return $result;\n}", "    return 0 if( $n <= 0\
    \ );\n    my $d = ($n % 10);\n    if( $d % 2 == 0 ) {\n        return digits(\
    \ ($n - $d) / 10 );\n    } else {\n        return $d * digits( ($n - $d) / 10\
    \ );\n    }\n}", "    return 0 if $n == 0;\n    return $n % 10 * digits($n / 10)\
    \ if $n % 2 == 1;\n    return digits($n / 10);\n}", "    my $m = 1;\n    foreach\
    \ (split '', $n) {\n        $m *= $_ if $_ % 2;\n    }\n    return $m;\n}", " \
    \   my $product = 1;\n    while ($n > 0) {\n        my $digit = $n % 10;\n   \
    \     $product *= $digit if $digit % 2;\n        $n /= 10;\n    }\n    return\
    \ $product;\n}", "    return 0 if $n <= 0;\n    my $product = 1;\n    while($n\
    \ > 0) {\n        $product *= $n % 10 if $n % 2;\n        $n /= 10;\n    }\n \
    \   return $product;\n}", "    my $prod = 1;\n    while($n > 0) {\n        $prod\
    \ *= $n % 10 if $n % 2;\n        $n /= 10;\n    }\n    return $prod;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
