name: HumanEval_144_simplify
language: pl
prompt: "# Your task is to implement a function that will simplify the expression\n\
  # x * n. The function returns True if x * n evaluates to a whole number and False\n\
  # otherwise. Both x and n, are string representation of a fraction, and have the\
  \ following format,\n# <numerator>/<denominator> where both numerator and denominator\
  \ are positive whole numbers.\n# You can assume that x, and n are valid fractions,\
  \ and do not have zero as denominator.\n# simplify(\"1/5\", \"5/1\") = True\n# simplify(\"\
  1/6\", \"2/1\") = False\n# simplify(\"7/10\", \"10/2\") = False\nsub simplify {\n\
  \    my($x, $n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&simplify;\n\
  \        if(eq_deeply($candidate->(\"1/5\", \"5/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/6\"\
  , \"2/1\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"5/1\", \"3/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/10\"\
  , \"10/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"2/10\", \"50/10\"),1)) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"7/2\"\
  , \"4/2\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"11/6\", \"6/1\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/3\"\
  , \"5/2\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"5/2\", \"3/5\"),\"\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2/4\"\
  , \"8/4\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\"2/4\", \"4/2\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"1/5\", \"5/1\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  1/5\", \"1/5\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n}\n\ntesthumaneval();"
completions: ["    my $result = 1;\n    for my $i (2..min(@{[split '/', $x]}, @{[split\
    \ '/', $n]})) {\n        $result *= $i if is_divisible($x, $i) && is_divisible($n,\
    \ $i);\n    }\n    return $result * (split '/', $x)[0] * (split '/', $n)[1] %\
    \ ((split '/', $x)[1] * (split '/', $n)[0]) == 0;\n}", "    my($num_x, $den_x)\
    \ = split(/\\//, $x);\n    my($num_n, $den_n) = split(/\\//, $n);\n    my $new_num\
    \ = $num_x * $num_n;\n    my $new_den = $den_x * $den_n;\n    my $d = gcd($new_num,\
    \ $new_den);\n    return ($new_num / $d) % 1 == 0;\n}", "    my($x_numerator,\
    \ $x_denominator) = split '/', $x;\n    my($n_numerator, $n_denominator) = split\
    \ '/', $n;\n    my $product = $x_numerator * $n_numerator;\n    my $result = $product\
    \ % $x_denominator;\n    return $result == 0;\n}", "    my($nx, $dx) = split('/',\
    \ $x);\n    my($nn, $dn) = split('/', $n);\n    my $r = $nx * $dn * $nn * $dx;\n\
    \    if($r % $dx == 0) {\n        return 1;\n    }\n    return 0;\n}", "    my($x_num,\
    \ $x_den) = split '/', $x;\n    my($n_num, $n_den) = split '/', $n;\n    return\
    \ ($x_num * $n_den) % ($x_den * $n_num) == 0;\n}", "    my($x_num, $x_den) = split(/\\\
    //, $x);\n    my($n_num, $n_den) = split(/\\//, $n);\n    my $num = $x_num * $n_num;\n\
    \    my $den = $x_den * $n_den;\n    return $num % $den == 0;\n}", "    my $x_gcd\
    \ = gcd($x->[0], $x->[1]);\n    my $n_gcd = gcd($n->[0], $n->[1]);\n    $x->[0]\
    \ /= $x_gcd;\n    $x->[1] /= $x_gcd;\n    $n->[0] /= $n_gcd;\n    $n->[1] /= $n_gcd;\n\
    \    if ($x->[1] == $n->[1]) {\n        if (($x->[0] * $n->[0]) % $x->[1] == 0)\
    \ {\n            return 1;\n        }\n    }\n    return 0;\n}", "    my($x_numerator,\
    \ $x_denominator) = split(\"/\", $x);\n    my($n_numerator, $n_denominator) =\
    \ split(\"/\", $n);\n    my $result = ($x_numerator * $n_numerator) / ($x_denominator\
    \ * $n_denominator);\n    return ($result =~ /\\A\\d+\\z/);\n}", "    my($numerator_x,\
    \ $denominator_x) = split(/\\//, $x);\n    my($numerator_n, $denominator_n) =\
    \ split(/\\//, $n);\n    my $sum = $numerator_x * $denominator_n + $numerator_n\
    \ * $denominator_x;\n    return ($sum % ($denominator_x * $denominator_n) == 0)\
    \ ? 1 : 0;\n}", "    my($x_num, $x_den) = split(/\\//, $x);\n    my($n_num, $n_den)\
    \ = split(/\\//, $n);\n    my $x_product = $x_num * $n_num;\n    my $n_product\
    \ = $x_den * $n_den;\n    my $whole_number = $x_product / $n_product;\n    my\
    \ $remainder = $x_product % $n_product;\n    if($remainder == 0) {\n        return\
    \ 1;\n    } else {\n        return 0;\n    }\n}", "    my $xnum = (split('/',\
    \ $x))[0];\n    my $xden = (split('/', $x))[1];\n    my $nnum = (split('/', $n))[0];\n\
    \    my $nden = (split('/', $n))[1];\n    #print \"$xnum, $xden, $nnum, $nden\\\
    n\";\n    return gcd($xnum, $xden) * gcd($nnum, $nden) == 1;\n}", "    my($numerator,\
    \ $denominator) = (1, 1);\n    for my $xn ($x, $n) {\n        my($x_numerator,\
    \ $x_denominator) = $xn =~ /^(\\d+)\\/(\\d+)$/;\n        my $divisor = gcd($numerator,\
    \ $x_numerator);\n        $numerator /= $divisor;\n        $x_numerator /= $divisor;\n\
    \        $divisor = gcd($denominator, $x_denominator);\n        $denominator /=\
    \ $divisor;\n        $x_denominator /= $divisor;\n        $numerator *= $x_denominator;\n\
    \        $denominator *= $x_numerator;\n    }\n    my $divisor = gcd($numerator,\
    \ $denominator);\n    return $numerator / $divisor == $denominator;\n}", "   \
    \ my($xnumer, $xdenom) = split '/', $x;\n    my($nnumer, $ndenom) = split '/',\
    \ $n;\n    my $xnum = ($xnumer * $ndenom) * ($ndenom / $xdenom);\n    $xnum =~\
    \ s/\\.*0*$//;\n    return $xnum =~ /\\.*0$/;\n}", "    my($x_num, $x_den) = split('/',\
    \ $x);\n    my($n_num, $n_den) = split('/', $n);\n    ($x_num * $n_den) % ($x_den\
    \ * $n_num) == 0;\n}", "    my($x_numerator, $x_denominator) = split /\\//, $x;\n\
    \    my($n_numerator, $n_denominator) = split /\\//, $n;\n    my $y = ($x_numerator\
    \ * $n_numerator) / ($x_denominator * $n_denominator);\n    if ($y % 1 == 0) {\n\
    \        return True;\n    } else {\n        return False;\n    }\n}", "    my($x_numerator,\
    \ $x_denominator) = split('/', $x);\n    my($n_numerator, $n_denominator) = split('/',\
    \ $n);\n    return $x_numerator * $n_denominator == $x_denominator * $n_numerator;\n\
    }", "    # My solution\n    #my($xN, $xD) = split(/\\//, $x);\n    #my($nN, $nD)\
    \ = split(/\\//, $n);\n    #return (($xN * $nD) % ($xD * $nN) == 0) ? 1 : 0;",
  "    my($numerator, $denominator, $xNumerator, $xDenominator);\n    if ($x =~ /^(\\\
    d+)\\/(\\d+)$/) {\n        $xNumerator = $1;\n        $xDenominator = $2;\n  \
    \  } else {\n        $xNumerator = $x;\n        $xDenominator = 1;\n    }\n  \
    \  if ($n =~ /^(\\d+)\\/(\\d+)$/) {\n        $numerator = $1;\n        $denominator\
    \ = $2;\n    } else {\n        $numerator = $n;\n        $denominator = 1;\n \
    \   }\n    return (eval(\"$xNumerator * $numerator\") / eval(\"$xDenominator *\
    \ $denominator\")) == int(eval(\"$xNumerator * $numerator\") / eval(\"$xDenominator\
    \ * $denominator\"));\n}", "    my($xNumerator, $xDenominator) = split('/', $x);\n\
    \    my($nNumerator, $nDenominator) = split('/', $n);\n    my $xProduct = $xNumerator\
    \ * $nDenominator;\n    my $nProduct = $nNumerator * $xDenominator;\n    if($xProduct\
    \ == $nProduct) {\n        return 1;\n    }\n    return 0;\n}", "    my($numerator,\
    \ $denominator) = $x =~ /(\\d+)\\/(\\d+)/;\n    my($numerator_n, $denominator_n)\
    \ = $n =~ /(\\d+)\\/(\\d+)/;\n    return $numerator * $denominator_n % $denominator\
    \ * $numerator_n == 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
