name: HumanEval_61_correct_bracketing
language: pl
prompt: "# brackets is a string of \"(\" and \")\".\n# return True if every opening\
  \ bracket has a corresponding closing bracket.\n# >>> correct_bracketing(\"(\")\n\
  # False\n# >>> correct_bracketing(\"()\")\n# True\n# >>> correct_bracketing(\"(()())\"\
  )\n# True\n# >>> correct_bracketing(\")(()\")\n# False\nsub correct_bracketing {\n\
  \    my($brackets) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&correct_bracketing;\n\
  \        if(eq_deeply($candidate->(\"()\"),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()())\"),1)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ()()(()())()\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"()()((()()())())(()()(()))\"),1)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ((()())))\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\")(()\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ((((\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
  \     if(eq_deeply($candidate->(\")\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"(()\"),\"\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  ()()(()())())(()\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->(\"()()(()())()))()\"),\"\")) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return ($brackets =~ /^(\\(\\))*$/);\n}", "    my $return = 1;\n\
    \    my $check = 0;\n    for my $i (0..length($brackets)-1) {\n        my $char\
    \ = substr($brackets, $i, 1);\n        if ($char eq \"(\") {\n            $check++;\n\
    \        }\n        elsif ($char eq \")\") {\n            $check--;\n        }\n\
    \        if ($check < 0) {\n            $return = 0;\n            last;\n    \
    \    }\n    }\n    return $return;\n}", "    my @bracket_counts = (0, 0);\n  \
    \  foreach my $char (split //, $brackets) {\n        if ($char eq '(') {\n   \
    \         $bracket_counts[0]++;\n        }\n        elsif ($char eq ')') {\n \
    \           $bracket_counts[1]++;\n        }\n        if ($bracket_counts[1] >\
    \ $bracket_counts[0]) {\n            return 0;\n        }\n    }\n    if ($bracket_counts[0]\
    \ != $bracket_counts[1]) {\n        return 0;\n    }\n    return 1;\n}", "   \
    \ my $open_brackets = 0;\n    foreach (split('', $brackets)) {\n        if ($_\
    \ eq '(') {\n            $open_brackets++;\n        } elsif ($_ eq ')') {\n  \
    \          $open_brackets--;\n        }\n        if ($open_brackets < 0) {\n \
    \           return 0;\n        }\n    }\n    return $open_brackets == 0;\n}",
  "    $brackets =~ tr/()//cd;\n    return $brackets eq '';\n}", "    my @brackets\
    \ = split('', $brackets);\n    my $count = 0;\n    for my $b (@brackets) {\n \
    \       if ($b eq '(') {\n            $count++;\n        } elsif ($b eq ')') {\n\
    \            $count--;\n        }\n        if ($count < 0) {\n            return\
    \ 0;\n        }\n    }\n    if ($count == 0) {\n        return 1;\n    } else\
    \ {\n        return 0;\n    }\n}", "    my @bracket = split(//, $brackets);\n\
    \    for my $i (0..$#bracket) {\n        my $bracket = $bracket[$i];\n       \
    \ if ($bracket eq \"(\") {\n            my $level = 1;\n            my $open_pos\
    \ = $i;\n            for my $j ($i+1..$#bracket) {\n                if ($bracket[$j]\
    \ eq \"(\") {\n                    $level++;\n                } elsif ($bracket[$j]\
    \ eq \")\") {\n                    $level--;\n                }\n            \
    \    if ($level == 0) {\n                    splice(@bracket, $open_pos, $j-$open_pos+1);\n\
    \                    last;\n                }\n            }\n            if ($level\
    \ != 0) {\n                return 0;\n            }\n        }\n    }\n    return\
    \ $#bracket == -1;\n}", "    my $stack = 0;\n    for my $char (split //, $brackets)\
    \ {\n        if ($char eq '(') {\n            $stack++;\n        } elsif ($char\
    \ eq ')') {\n            $stack--;\n        }\n        return 0 if $stack < 0;\n\
    \    }\n    return 0 if $stack != 0;\n    return 1;\n}", "    my $bcount = 0;\n\
    \    while (length($brackets) > 0) {\n        if ($brackets =~ /^\\(/) {\n   \
    \         $bcount++;\n        } elsif ($brackets =~ /^\\)/) {\n            $bcount--;\n\
    \        }\n        if ($bcount < 0) {\n            return False;\n        }\n\
    \        $brackets = substr($brackets, 1);\n    }\n    return $bcount == 0;\n}",
  "    my $length = length($brackets);\n    my $counter = 0;\n    for(my $i = 0; $i\
    \ < $length; $i++) {\n        if(substr($brackets, $i, 1) eq \"(\") {\n      \
    \      $counter++;\n        } elsif(substr($brackets, $i, 1) eq \")\") {\n   \
    \         $counter--;\n        } else {\n            return false;\n        }\n\
    \        if($counter < 0) {\n            return false;\n        }\n    }\n   \
    \ return $counter == 0;\n}", "    # a stack works well for this problem\n    my\
    \ @stack = ();\n    # \n    for my $bracket (split(//, $brackets)) {\n       \
    \ if ($bracket eq \"(\") {\n            push @stack, $bracket;\n        } elsif\
    \ ($bracket eq \")\") {\n            # what happens when we pop an empty stack?\n\
    \            if (!@stack) {\n                return 0;\n            }\n      \
    \      pop @stack;\n        }\n    }\n    # if everything is correct there should\
    \ be no remaining brackets\n    return !@stack;\n}", "    my $opening = 0;\n \
    \   foreach my $char (split //, $brackets) {\n        if ($char eq \"(\") {\n\
    \            $opening++;\n        }\n        elsif ($char eq \")\") {\n      \
    \      $opening--;\n        }\n        if ($opening < 0) {\n            return\
    \ 0;\n        }\n    }\n    return ($opening == 0);\n}", "    my $count = 0;\n\
    \    for my $b (split //, $brackets) {\n        if ($b eq '(') {\n           \
    \ $count++;\n        } elsif ($b eq ')') {\n            $count--;\n        }\n\
    \        return 0 if $count < 0;\n    }\n    return $count == 0;\n}", "    # Your\
    \ code here\n}", "    my $left_count = 0;\n    my $right_count = 0;\n    for my\
    \ $char (split //, $brackets) {\n        if ($char eq \"(\") {\n            $left_count++;\n\
    \        }\n        elsif ($char eq \")\") {\n            $right_count++;\n  \
    \      }\n        if ($right_count > $left_count) {\n            return 0;\n \
    \       }\n    }\n    if ($left_count != $right_count) {\n        return 0;\n\
    \    }\n    return 1;\n}", "    my $stack = [];\n    foreach my $c (split(\"\"\
    , $brackets)) {\n        if ($c eq \"(\") {\n            push @$stack, $c;\n \
    \       } elsif ($c eq \")\") {\n            if (empty($stack)) {\n          \
    \      return FALSE;\n            } else {\n                pop @$stack;\n   \
    \         }\n        }\n    }\n    if (empty($stack)) {\n        return TRUE;\n\
    \    } else {\n        return FALSE;\n    }\n}", "    my $i;\n    my $cnt = 0;\n\
    \    for($i = 0; $i < length($brackets); $i++) {\n        if(substr($brackets,\
    \ $i, 1) eq \"(\") {\n            $cnt++;\n        } elsif(substr($brackets, $i,\
    \ 1) eq \")\") {\n            $cnt--;\n        }\n        if($cnt < 0) {\n   \
    \         return 0;\n        }\n    }\n    return $cnt == 0;\n}", "    my $num_open\
    \ = 0;\n    for my $c (split //, $brackets) {\n        if ($c eq '(') {\n    \
    \        $num_open++;\n        }\n        elsif ($c eq ')') {\n            $num_open--;\n\
    \        }\n        if ($num_open < 0) {\n            return False;\n        }\n\
    \    }\n    return $num_open == 0;\n}", "    my $count = 0;\n    for my $char\
    \ (split('', $brackets)) {\n        if ($char eq '(') {\n            $count +=\
    \ 1;\n        } elsif ($char eq ')') {\n            $count -= 1;\n        }\n\
    \        return 0 if $count < 0;\n    }\n    return $count == 0;\n}", "    my\
    \ $open_count = 0;\n    for my $bracket (split \"\", $brackets) {\n        if\
    \ ($bracket eq \"(\") {\n            $open_count += 1;\n        } elsif ($bracket\
    \ eq \")\") {\n            if ($open_count == 0) {\n                return 0;\n\
    \            }\n            $open_count -= 1;\n        }\n    }\n    return $open_count\
    \ == 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
