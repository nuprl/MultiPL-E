name: HumanEval_14_all_prefixes
language: pl
prompt: "# Return list of all prefixes from shortest to longest of the input string\n\
  # >>> all_prefixes('abc')\n# ['a', 'ab', 'abc']\nsub all_prefixes {\n    my($string)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&all_prefixes;\n\
  \        if(eq_deeply($candidate->(\"\"),[])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfgh\"),[\"a\"\
  , \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"WWW\"),[\"W\",\
  \ \"WW\", \"WWW\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    return map substr($string, 0, $_), 1..length($string);\n}", " \
    \   my @prefixes;\n    for (my $i = 1; $i <= length($string); $i++) {\n      \
    \  push @prefixes, substr($string, 0, $i);\n    }\n    return @prefixes;\n}",
  "    my @prefixes;\n    for my $i (1 .. length($string)) {\n        push @prefixes,\
    \ substr($string, 0, $i);\n    }\n    return @prefixes;\n}", "    my @prefixes;\n\
    \    while ($string) {\n        push @prefixes, $string;\n        $string = substr($string,\
    \ 0, -1);\n    }\n    return @prefixes;\n}", "    my @prefixes;\n    for (my $i\
    \ = 1; $i <= length($string); $i++) {\n        push @prefixes, substr($string,\
    \ 0, $i);\n    }\n    return @prefixes;\n}", "    my @prefixes;\n    my $length\
    \ = length($string);\n    for (my $i = 1; $i <= $length; $i++) {\n        push\
    \ @prefixes, substr($string, 0, $i);\n    }\n    return @prefixes;\n}", "    return\
    \ () unless defined $string;\n    $string = substr($string, 0, MAX_PREFIX_LENGTH)\
    \ if length($string) > MAX_PREFIX_LENGTH;\n    my @list = ();\n    my $i = 1;\n\
    \    while (length($string) >= $i) {\n        push @list, substr($string, 0, $i);\n\
    \        $i++;\n    }\n    return @list;\n}", "    my @prefixes;\n    for my $prefix_length\
    \ (1 .. length($string)) {\n        push @prefixes, substr($string, 0, $prefix_length);\n\
    \    }\n    return @prefixes;\n}", "    my(@prefixes);\n    foreach my $i (0..length($string)-1)\
    \ {\n        push(@prefixes, substr($string, 0, $i+1));\n    }\n    return @prefixes;\n\
    }", "    my @prefixes;\n    foreach my $i (1..length($string)) {\n        push\
    \ @prefixes, substr($string, 0, $i);\n    }\n    return @prefixes;\n}", "    my\
    \ @prefixes;\n    for (my $len = 1; $len <= length($string); $len++) {\n     \
    \   push @prefixes, substr($string, 0, $len);\n    }\n    return @prefixes;\n}",
  "    my @return;\n    foreach my $i (1..length($string)) {\n        push @return,\
    \ substr($string, 0, $i);\n    }\n    return @return;\n}", "    return map { substr($string,\
    \ 0, $_) } 1..length($string);\n}", "    my(@prefixes) = ();\n    foreach my $i\
    \ (1..length($string)) {\n        push(@prefixes, substr($string, 0, $i));\n \
    \   }\n    return @prefixes;\n}", "    my @prefixes;\n    my $len = length($string);\n\
    \    while ($len > 0) {\n        push @prefixes, substr($string, 0, $len);\n \
    \       $len--;\n    }\n    return @prefixes;\n}", "    return map { substr($string,\
    \ 0, $_) } (1 .. length($string));\n}", "    return map { substr($string, 0, $_)\
    \ } (1 .. length($string));\n}", "    my @prefixes;\n    for (my $i = 0; $i <\
    \ length($string); $i++) {\n        push @prefixes, substr($string, 0, $i + 1);\n\
    \    }\n    return @prefixes;\n}", "    my @prefixes;\n    for my $i (0..length($string))\
    \ {\n        push @prefixes, substr($string, 0, $i);\n    }\n    return @prefixes;\n\
    }", "    my @prefixes;\n    for my $i (0..length($string)-1) {\n        push @prefixes,\
    \ substr($string, 0, $i+1);\n    }\n    return @prefixes;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
