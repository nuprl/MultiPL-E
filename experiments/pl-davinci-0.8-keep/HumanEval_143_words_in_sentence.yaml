name: HumanEval_143_words_in_sentence
language: pl
prompt: "# You are given a string representing a sentence,\n# the sentence contains\
  \ some words separated by a space,\n# and you have to return a string that contains\
  \ the words from the original sentence,\n# whose lengths are prime numbers,\n# the\
  \ order of the words in the new string should be the same as the original one.\n\
  # Example 1:\n# Input: sentence = \"This is a test\"\n# Output: \"is\"\n# Example\
  \ 2:\n# Input: sentence = \"lets go for swimming\"\n# Output: \"go for\"\n# Constraints:\n\
  # * 1 <= len(sentence) <= 100\n# * sentence contains only letters\nsub words_in_sentence\
  \ {\n    my($sentence) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&words_in_sentence;\n\
  \        if(eq_deeply($candidate->(\"This is a test\"),\"is\")) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  lets go for swimming\"),\"go for\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"there is no place available\
  \ here\"),\"there is no place\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"Hi I am Hussein\"),\"Hi am\
  \ Hussein\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"go for it\"),\"go for it\")) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"here\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  here is\"),\"is\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my @words = split /\\s+/, $sentence;\n    my @primes = grep {is_prime($_)}\
    \ map {length $_} @words;\n    my @res;\n    for (my $i = 0; $i < @words; $i++)\
    \ {\n        push @res, $words[$i] if any {$_ == length $words[$i]} @primes;\n\
    \    }\n    return join \" \", @res;\n}", "    my $words = [split(\" \", $sentence)];\n\
    \    my $prime_lengths = [];\n    for my $word (@$words) {\n        if (_is_prime(length($word)))\
    \ {\n            push @$prime_lengths, $word;\n        }\n    }\n    return join(\"\
    \ \", @$prime_lengths);\n}", "    my $res_ref = [];\n    my @sentence = split('\
    \ ', $sentence);\n    foreach my $word (@sentence) {\n        my $len = length($word);\n\
    \        if(is_prime($len)) {\n            push @$res_ref, $word;\n        }\n\
    \    }\n    return join(\" \", @$res_ref);\n}", "    my @words = split /\\s+/,\
    \ $sentence;\n    my $primes = primes_to(scalar @words);\n    my @result;\n  \
    \  foreach my $word (@words) {\n        push @result, $word if $primes->{length\
    \ $word};\n    }\n    return join \" \", @result;\n}", "    my @prime_words;\n\
    \    for my $word (split(' ', $sentence)) {\n        if ($word=~/^[a-z]+$/i) {\n\
    \            push @prime_words, $word if is_prime(length($word));\n        }\n\
    \    }\n    return join(' ', @prime_words);\n}", "    my(@words) = split / /,\
    \ $sentence;\n    my(@prime_words) = grep {is_prime($_)} @words;\n    return join(\
    \ ' ', @prime_words );\n}", "    my @words = split(/\\s+/, $sentence);\n    my\
    \ @result;\n    for my $word (@words) {\n        push @result, $word if(is_prime_number(length($word)));\n\
    \    }\n    return join(' ', @result);\n}", "    my $s = '';\n    my @l = split('\
    \ ', $sentence);\n    for (my $i=0; $i<=$#l; $i++) {\n        $s .= $l[$i] if\
    \ (is_prime($l[$i]));\n    }\n    return $s;\n}", "    my @words = grep {is_prime(length($_))}\
    \ split \" \", $sentence;\n    return join \" \", @words;\n}", "    my(@words)\
    \ = split(' ', $sentence);\n    my(@ret);\n    foreach my $w (@words) {\n    \
    \    if (is_prime(length($w))) {\n            push(@ret, $w);\n        }\n   \
    \ }\n    return join(' ', @ret);\n}", "    my @words = split /\\s+/, $sentence;\n\
    \    my @words2;\n    my $ret = \"\";\n    foreach my $word (@words) {\n     \
    \   if (prime($word)) {\n            push @words2, $word;\n        }\n    }\n\
    \    if (scalar(@words2) == 0) {\n        return \"\";\n    }\n    foreach my\
    \ $word (@words2) {\n        $ret .= $word.\" \";\n    }\n    chomp($ret);\n \
    \   return $ret;\n}", "    my %primes = map { $_ => 1 } (2..100);\n    $primes{$_}\
    \ = 0 for grep {\n        my $n = $_;\n        grep { $n % $_ == 0 } (2..sqrt($n))\n\
    \    } (2..100);\n    my @w = grep { $primes{length($_)} } split /\\s+/, $sentence;\n\
    \    return join \" \", @w;\n}", "    my @words = split /\\s+/, $sentence;\n \
    \   my @primes = grep { is_prime($_) } map { length($_) } @words;\n    return\
    \ join \" \", @words[@primes];\n}", "    my @words = split/\\s+/, $sentence;\n\
    \    return join \" \", grep {is_prime($_)} @words;\n}", "    my %prime;\n   \
    \ $prime{$_} = 1 for (2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47,\
    \ 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    join ' ', grep {\n        $prime{length\
    \ $_}\n    } split ' ', $sentence;\n}", "    my @words = split /\\s+/, $sentence;\n\
    \    my @res;\n    for my $word (@words) {\n        if( is_prime(length($word))\
    \ ) {\n            push @res, $word;\n        }\n    }\n    return join \" \"\
    , @res;\n}", "    my @words = split ' ', $sentence;\n    my @primes = grep {$_\
    \ < length $sentence} primes::get_primes(100);\n    my %primes = map {$_ => 1}\
    \ @primes;\n    my @result;\n    for my $word (@words) {\n        push @result,\
    \ $word if $primes{length $word};\n    }\n    return join ' ', @result;\n}", " \
    \   my @ret;\n    my @words = split/\\s+/, $sentence;\n    for (@words) {\n  \
    \      push @ret, $_ if is_prime(length($_));\n    }\n    return join(\" \", @ret);\n\
    }\nuse Test::More;\nuse Test::LMU;\nuse Data::Dumper;", "    my @primes = (2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97);\n    my @words = split(' ', $sentence);\n    my @out = ();\n\
    \    for my $w (@words) {\n        if (grep { $w eq $_ } @primes) {\n        \
    \    push @out, $w;\n        }\n    }\n    return join(' ', @out);\n}", "    my\
    \ $ret = \"\";\n    my @words = split(/ /, $sentence);\n    my @primes = (2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97);\n    for my $word (@words) {\n        if (grep { $_ == length($word)\
    \ } @primes) {\n            $ret .= $word.\" \";\n        }\n    }\n    $ret =~\
    \ s/\\s+$//;\n    return $ret;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
