language: pl
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    my\
    \ @chars = split //, $s;\n    return 0 if scalar @chars < 3;\n    for (my $i =\
    \ 0; $i < scalar @chars - 2; $i++) {\n        return 0 if $chars[$i] eq $chars[$i\
    \ + 1] || $chars[$i] eq $chars[$i + 2] || $chars[$i + 1] eq $chars[$i + 2];\n\
    \    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"abcd\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    adb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"xyy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxioi\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    return\
    \ $s =~ /.*(.)(.)(.)/ && $1 ne $2 && $2 ne $3 && $3 ne $1 ? 1 : 0;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"\
    a\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"aa\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"adb\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"iopaxioi\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    return\
    \ 0 if length($s) < 3;\n    my @a = split //, $s;\n    for (my $i = 0; $i < length($s)\
    \ - 2; $i++) {\n        return 0 if $a[$i] eq $a[$i + 1] or $a[$i] eq $a[$i +\
    \ 2] or $a[$i + 1] eq $a[$i + 2];\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"\
    a\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"aa\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"adb\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"iopaxioi\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    $s\
    \ =~ s/([a-z])(?=\\1+)//g;\n    return $s =~ /^.{3,}$/;\n}\nuse Test::Deep;\n\n\
    \nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"\
    a\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"aa\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"adb\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"iopaxioi\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    return\
    \ undef if $s eq '' || length($s) < 3;\n    my $happy = 1;\n    my @chars = split\
    \ '', $s;\n    while (my $c = shift @chars) {\n        return 0 if $c eq $chars[0]\
    \ && $c eq $chars[1];\n    }\n    return $happy;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"\
    a\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"aa\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"adb\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"iopaxioi\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    my\
    \ $isHappy = 0;\n    if(length($s) >= 3) {\n        my @str = split(//, $s);\n\
    \        my $i = 0;\n        while($i < @str-3) {\n            my $substr = $str[$i].$str[$i+1].$str[$i+2];\n\
    \            my $j = 0;\n            my $check = 0;\n            while($j < @str-3)\
    \ {\n                if($substr eq $str[$j].$str[$j+1].$str[$j+2]) {\n       \
    \             $check++;\n                }\n                $j++;\n          \
    \  }\n            if($check == 1) {\n                $isHappy = 1;\n         \
    \   }\n            else {\n                $isHappy = 0;\n                last;\n\
    \            }\n            $i++;\n        }\n    }\n    else {\n        $isHappy\
    \ = 0;\n    }\n    return $isHappy;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"aa\"),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"adb\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"iopaxioi\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    if(length($s)\
    \ < 3) {\n        return 0;\n    }\n    my $i = 0;\n    my $j = 2;\n    my $res\
    \ = 1;\n    while($j < length($s)) {\n        if(substr($s, $i, 1) eq substr($s,\
    \ $i + 1, 1) or substr($s, $i, 1) eq substr($s, $i + 2, 1) or substr($s, $i +\
    \ 1, 1) eq substr($s, $i + 2, 1)) {\n            $res = 0;\n            last;\n\
    \        }\n        $i++;\n        $j++;\n    }\n    return $res;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"\
    a\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"aa\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"adb\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"iopaxioi\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    return\
    \ 0 unless length($s) > 2;\n    return 0 if $s =~ /(.)\\1\\1/;\n    return 1;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n\
    \        if(eq_deeply($candidate->(\"a\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aa\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    abcd\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"aabb\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"adb\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    xyy\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->(\"iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxioi\"),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    my\
    \ $l = length($s);\n    return 0 if $l < 3;\n    while($l >= 3) {\n        return\
    \ 0 if substr($s, $l-3, 1) eq substr($s, $l-2, 1) or substr($s, $l-3, 1) eq substr($s,\
    \ $l-1, 1) or substr($s, $l-2, 1) eq substr($s, $l-1, 1);\n        $l--;\n   \
    \ }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"abcd\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    adb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"xyy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxioi\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    return\
    \ 0 if length($s) < 3;\n    for (my $i = 0; $i < length($s) - 2; $i++) {\n   \
    \     return 0 if $s =~ /$s[$i]{3}/;\n    }\n    return 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"\
    a\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"aa\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"adb\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"iopaxioi\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    if\
    \ (length($s) < 3) {\n        return 0;\n    }\n    for (my $i = 0; $i < length($s)-2;\
    \ $i++) {\n        if (substr($s, $i, 1) eq substr($s, $i+1, 1) or substr($s,\
    \ $i, 1) eq substr($s, $i+2, 1) or substr($s, $i+1, 1) eq substr($s, $i+2, 1))\
    \ {\n            return 0;\n        }\n    }\n    return 1;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"\
    a\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"aa\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"adb\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"iopaxioi\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    return\
    \ $s =~ /(\\w)\\1{2}/ ? 0 : 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"abcd\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    adb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"xyy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxioi\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    # your\
    \ code goes here\n    if (length($s)<3) {\n        return 0;\n    }\n    elsif(substr($s,0,1)\
    \ eq substr($s,1,1) || substr($s,1,1) eq substr($s,2,1) || substr($s,0,1) eq substr($s,2,1))\
    \ {\n        return 0;\n    }\n    else {\n        return 1;\n    }\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"\
    a\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->(\"aa\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"adb\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"iopaxioi\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    return\
    \ 0 if length($s) < 3;\n    for(my $i = 0; $i < length($s) - 2; $i++) {\n    \
    \    my $a = substr($s, $i, 1);\n        my $b = substr($s, $i + 1, 1);\n    \
    \    my $c = substr($s, $i + 2, 1);\n        return 0 if $a eq $b || $a eq $c\
    \ || $b eq $c;\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval\
    \ {\n    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"\
    ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n       \
    \ if(eq_deeply($candidate->(\"aa\"),\"\")) {\n        print \"ok!\" }else{\n \
    \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcd\"),1)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aabb\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n \
    \       if(eq_deeply($candidate->(\"adb\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"xyy\"),\"\"))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxpoi\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->(\"iopaxioi\"),\"\")) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    return\
    \ 0 if length($s) < 3;\n    for(my $i = 0; $i <= length($s) - 3; $i++) {\n   \
    \     return 0 if substr($s, $i, 1) eq substr($s, $i + 1, 1) or substr($s, $i,\
    \ 1) eq substr($s, $i + 2, 1) or substr($s, $i + 1, 1) eq substr($s, $i + 2, 1);\n\
    \    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"abcd\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    adb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"xyy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxioi\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    return\
    \ undef if $s !~ /^[a-z]+$/i;\n    return undef if length($s) < 3;\n    my @s\
    \ = split(//, $s);\n    my $l = length($s);\n    for (my $i = 0; $i < $l; $i +=\
    \ 3) {\n        my @t = ($s[$i], $s[$i+1], $s[$i+2]);\n        if ($t[0] eq $t[1]\
    \ || $t[0] eq $t[2] || $t[1] eq $t[2]) {\n            return undef;\n        }\n\
    \    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"abcd\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    adb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"xyy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxioi\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    return\
    \ 0 if !defined $s;\n    return 1 if length($s) < 3;\n    for (my $i = 0; $i <\
    \ length($s) - 2; $i++) {\n        return 0 if substr($s, $i, 1) eq substr($s,\
    \ $i + 1, 1) ||\n                    substr($s, $i, 1) eq substr($s, $i + 2, 1)\
    \ ||\n                    substr($s, $i + 1, 1) eq substr($s, $i + 2, 1);\n  \
    \  }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\")) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"abcd\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    adb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"xyy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxioi\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    return\
    \ 0 if length($s) < 3;\n    return 0 if substr($s, 0, 3) =~ /^(\\w)\\1{2}$/;\n\
    \    return 0 if substr($s, -3) =~ /^(\\w)\\1{2}$/;\n    while ($s =~ /^.*?(\\\
    w)\\1{2}.*?$/) {\n        $s =~ s/^.*?\\w(\\w)\\1{2}.*?$/$1/;\n    }\n    return\
    \ 1 if $s eq '';\n    return 0;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\
    \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"abcd\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    adb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"xyy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxioi\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    return\
    \ 0 if length($s) < 3;\n    for (my $i = 0; $i < length($s) - 2; $i++) {\n   \
    \     my $substr = substr($s, $i, 3);\n        return 0 if $substr =~ /(.)\\1\\\
    1/;\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\")) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"abcd\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    adb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"xyy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxioi\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
- exit_code: 1
  program: "# You are given a string s.\n# Your task is to check if the string is\
    \ happy or not.\n# A string is happy if its length is at least 3 and every 3 consecutive\
    \ letters are distinct\n# For example:\n# is_happy(a) => False\n# is_happy(aa)\
    \ => False\n# is_happy(abcd) => True\n# is_happy(aabb) => False\n# is_happy(adb)\
    \ => True\n# is_happy(xyy) => False\nsub is_happy {\n    my($s) = @_;\n    return\
    \ 0 if length($s) < 3;\n    my $seen;\n    while($s =~ m/(.)(.)(.)/g) {\n    \
    \    my $triple = $1.$2.$3;\n        return 0 if $seen->{$triple};\n        $seen->{$triple}\
    \ = 1;\n    }\n    return 1;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&is_happy;\n        if(eq_deeply($candidate->(\"a\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    aa\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n   \
    \     if(eq_deeply($candidate->(\"abcd\"),1)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"aabb\"),\"\"\
    )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    adb\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
    \   if(eq_deeply($candidate->(\"xyy\"),\"\")) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"iopaxpoi\"),1))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
    iopaxioi\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660013867
