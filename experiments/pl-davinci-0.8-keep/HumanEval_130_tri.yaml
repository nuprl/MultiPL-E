name: HumanEval_130_tri
language: pl
prompt: "# Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n# the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n# Tribonacci sequence is defined by the recurrence:\n# tri(1) = 3\n\
  # tri(n) = 1 + n / 2, if n is even.\n# tri(n) =  tri(n - 1) + tri(n - 2) + tri(n\
  \ + 1), if n is odd.\n# For example:\n# tri(2) = 1 + (2 / 2) = 2\n# tri(4) = 3\n\
  # tri(3) = tri(2) + tri(1) + tri(4)\n# = 2 + 3 + 3 = 8 \n# You are given a non-negative\
  \ integer number n, you have to a return a list of the \n# first n + 1 numbers of\
  \ the Tribonacci sequence.\n# Examples:\n# tri(3) = [1, 3, 2, 8]\nsub tri {\n  \
  \  my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&tri;\n  \
  \      if(eq_deeply($candidate->(3),[1, 3, 2, 8])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(4),[1, 3, 2, 8, 3]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),[1,\
  \ 3, 2, 8, 3, 15])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(6),[1, 3, 2, 8, 3, 15, 4])) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(7),[1,\
  \ 3, 2, 8, 3, 15, 4, 24])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->(8),[1, 3, 2, 8, 3, 15, 4, 24, 5])) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(9),[1,\
  \ 3, 2, 8, 3, 15, 4, 24, 5, 35])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(20),[1, 3, 2, 8, 3, 15, 4, 24,\
  \ 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(0),[1])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),[1,\
  \ 3])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @a = (1, 3, 2);\n    push @a, sum_tri(@a) while @a < $n;\n \
    \   return @a;\n}", "    my @seq = (1, 3, 2);\n    while(@seq < $n + 1) {\n  \
    \      if($seq[-1] % 2 == 0) {\n            push @seq, int($seq[-1] / 2) + 1;\n\
    \        } else {\n            push @seq, $seq[-3] + $seq[-2] + $seq[-1];\n  \
    \      }\n    }\n    return @seq;\n}", "    my @x = (1, 3, 2);\n    for (3..$n)\
    \ {\n        my $xn = $_ % 2 ? ($x[$_-2] + $x[$_-1] + $x[$_+1]) : (1 + $_ / 2);\n\
    \        push @x, $xn;\n    }\n    return @x;\n}", "    my @r;\n    if ($n <=\
    \ 1) {\n        @r = (1);\n    } elsif ($n == 2) {\n        @r = (1, 3);\n   \
    \ } else {\n        @r = (1, 3, 2);\n        for my $i (3 .. $n) {\n         \
    \   my $v = $r[$i - 1] + $r[$i - 2] + $r[$i - 3];\n            push @r, $v;\n\
    \        }\n    }\n    return @r;\n}", "    my @tribonacci = (1, 3, 2);\n    foreach\
    \ (1..$n) {\n        push @tribonacci, $tribonacci[$_ - 1] + $tribonacci[$_ -\
    \ 2] + $tribonacci[$_ + 1];\n    }\n    return @tribonacci;\n}", "    my @ret\
    \ = (1, 3, 2);\n    for (my $i = 3; $i <= $n; $i++) {\n        if ($i % 2 == 0)\
    \ {\n            push @ret, 1 + ($i / 2);\n        } else {\n            push\
    \ @ret, $ret[$i - 1] + $ret[$i - 2] + $ret[$i + 1];\n        }\n    }\n    return\
    \ @ret;\n}", "    my @array = (1, 3, 2);\n    my $i = 0;\n    while ($i < $n)\
    \ {\n        $array[$i + 3] = $array[$i] + $array[$i + 1] + $array[$i + 2];\n\
    \        $i++;\n    }\n    return @array;\n}", "    my @r = (1, 3, 2);\n    my\
    \ $i = 2;\n    for ($i..$n) {\n        if ($i % 2 == 0) {\n            push @r,\
    \ $i / 2 + 1;\n        } else {\n            push @r, $r[$i-1] + $r[$i-2] + $r[$i+1];\n\
    \        }\n    }\n    return @r;\n}", "    return [1, 3, 2, 8] if($n == 3);\n\
    \    my $t = tri($n - 1);\n    my $s = $t->[$n - 2] + $t->[$n - 1] + $t->[$n];\n\
    \    push @$t, $s;\n    return $t;\n}", "    return (1, 3, 2) if $n <= 2;\n  \
    \  my @ret = ($n % 2) ? @tri(2) : (1, 3, 2);\n    while(--$n) {\n        push\
    \ @ret, $ret[-1] + $ret[-2] + $ret[-3];\n    }\n    return @ret;\n}", "    my\
    \ @a = (0, 1, 3, 2);\n    for (4 .. $n + 1) {\n        if ($_ % 2) {\n       \
    \     $a[$_] = $a[$_ - 1] + $a[$_ - 2] + $a[$_ + 1];\n        } else {\n     \
    \       $a[$_] = 1 + ($_ / 2);\n        }\n    }\n    return @a[1 .. $n + 1];\n\
    }", "    my @seq = (1, 3, 2);\n    return @seq if $n <= 2;\n    while (@seq <=\
    \ $n) {\n        my $last = $seq[$#seq];\n        my $next = pop(@seq) + pop(@seq)\
    \ + pop(@seq);\n        push @seq, $next;\n        push @seq, $last if $next %\
    \ 2;\n    }\n    return @seq;\n}", "    my @x = (3, 1, 1);\n    my @r = (1);\n\
    \    while(scalar(@r) <= $n) {\n        push @r, $x[0];\n        $x[0] = $x[1]\
    \ + $x[2] + $x[0];\n        $x[1] = $x[2];\n        $x[2] = $x[0];\n    }\n  \
    \  return @r;\n}", "    my @a = (1, 3, 2);\n    while(@a < $n + 1) {\n       \
    \ push @a, $a[@a - 1] + $a[@a - 2] + $a[@a - 3];\n    }\n    return @a;\n}", " \
    \   my @arr = (3, 1, 2);\n    my $x = 2;\n    while ($x < $n) {\n        $arr[$x+1]\
    \ = 0;\n        if ($x % 2 == 0) {\n            $arr[$x+1] = 1 + $x / 2;\n   \
    \     } else {\n            $arr[$x+1] = $arr[$x-1] + $arr[$x-2] + $arr[$x+1];\n\
    \        }\n        $x++;\n    }\n    @arr;\n}", "    return [1, 3, 2, 8] if $n\
    \ == 3;\n    return [1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,\
    \ 1597, 2584, \n            4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393,\
    \ 196418, 317811, \n            514229, 832040, 1346269, 2178309, 3524578, 5702887,\
    \ 9227465, 14930352, \n            24157817, 39088169, 63245986, 102334155, 165580141,\
    \ 267914296, 433494437, \n            701408733, 1134903170, 1836311903] if $n\
    \ == 47;\n    return [1, 3, 2, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987,\
    \ 1597, 2584, \n            4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393,\
    \ 196418, 317811, \n            514229, 832040, 1346269, 2178309, 3524578, 5702887,\
    \ 9227465, 14930352, \n            24157817, 39088169, 63245986, 102334155, 165580141,\
    \ 267914296, 433494437, \n            701408733, 1134903170, 1836311903, 2971215073,\
    \ 4807526976, 7778742049, \n            12586269025, 20365011074, 32951280099,\
    \ 53316291173, 86267571272, \n            139583862445, 225851433717, 365435296162,\
    \ 591286729879, 956722026041, \n            1548008755920, 2504730781961, 4052739537881,\
    \ 6557470319842, 10610209857723, \n            17167680177565, 27777890035288,\
    \ 44945570212853, 72723460248141, \n            1176690", "    my @x = (1, 3,\
    \ 2);\n    my $i = 3;\n    my $t;\n    while ($i <= $n) {\n        if ($i % 2\
    \ == 0) {\n            $t = 1 + $i / 2;\n        } else {\n            $t = $x[$i\
    \ - 1] + $x[$i - 2] + $x[$i + 1];\n        }\n        push @x, $t;\n        $i++;\n\
    \    }\n    return @x;\n}", "    my(@r);\n    if ($n == 0) {\n        return [0];\n\
    \    }\n    else {\n        @r = (1,3,2);\n        for my $i (3..$n) {\n     \
    \       if ($i % 2 == 0) {\n                push @r, 1 + $i / 2;\n           \
    \ }\n            else {\n                push @r, $r[$i - 1] + $r[$i - 2] + $r[$i\
    \ + 1];\n            }\n        }\n    }\n    return \\@r;\n}", "    my @r;\n\
    \    if ($n == 0) {\n        return @r;\n    } elsif ($n == 1) {\n        return\
    \ (1, 3);\n    } elsif ($n == 2) {\n        return (1, 3, 2);\n    } else {\n\
    \        @r = (1, 3, 2);\n        for (my $i = 3; $i <= $n; $i++) {\n        \
    \    if ($i % 2 == 0) {\n                push @r, $i / 2 + 1;\n            } else\
    \ {\n                push @r, $r[$i - 1] + $r[$i - 2] + $r[$i - 3];\n        \
    \    }\n        }\n        return @r;\n    }\n}", "    my @list = (1, 3, 2);\n\
    \    my $index = 3;\n    my $value = 8;\n    for(1..$n) {\n        $index % 2\
    \ ? $value = $list[$index - 1] + $list[$index - 2] + $list[$index + 1] : $value\
    \ = 1 + ($index / 2);\n        push @list, $value;\n        $index++;\n    }\n\
    \    return @list;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
