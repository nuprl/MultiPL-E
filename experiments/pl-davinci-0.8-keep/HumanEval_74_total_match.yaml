name: HumanEval_74_total_match
language: pl
prompt: "# Write a function that accepts two lists of strings and returns the list\
  \ that has \n# total number of chars in the all strings of the list less than the\
  \ other list.\n# if the two lists have the same number of chars, return the first\
  \ list.\n# Examples\n# total_match([], []) \u279E []\n# total_match(['hi', 'admin'],\
  \ ['hI', 'Hi']) \u279E ['hI', 'Hi']\n# total_match(['hi', 'admin'], ['hi', 'hi',\
  \ 'admin', 'project']) \u279E ['hi', 'admin']\n# total_match(['hi', 'admin'], ['hI',\
  \ 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n# total_match(['4'], ['1', '2', '3', '4',\
  \ '5']) \u279E ['4']\nsub total_match {\n    my($lst1, $lst2) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&total_match;\n\
  \        if(eq_deeply($candidate->([], []),[])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"\
  ], [\"hi\", \"hi\"]),[\"hi\", \"hi\"])) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"\
  hi\", \"hi\", \"admin\", \"project\"]),[\"hi\", \"admin\"])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]),[\"4\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"\
  ], [\"hI\", \"Hi\"]),[\"hI\", \"Hi\"])) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"], [\"\
  hI\", \"hi\", \"hi\"]),[\"hI\", \"hi\", \"hi\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"hi\", \"admin\"\
  ], [\"hI\", \"hi\", \"hii\"]),[\"hi\", \"admin\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([], [\"this\"]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  this\"], []),[])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my $res = scalar @$lst1 <=> scalar @$lst2;\n    return $res > 0\
    \ ? $lst1 : $lst2;\n}", "    my $lst1_char_len = total_length($lst1);\n    my\
    \ $lst2_char_len = total_length($lst2);\n    my $smaller_lst = ($lst1_char_len\
    \ < $lst2_char_len) ? $lst1 : $lst2;\n    return $smaller_lst;\n}", "    my $lst1_len\
    \ = 0;\n    my $lst2_len = 0;\n    foreach my $a (@$lst1) {\n        $lst1_len\
    \ += length($a);\n    }\n    foreach my $b (@$lst2) {\n        $lst2_len += length($b);\n\
    \    }\n    if ($lst1_len < $lst2_len) {\n        return $lst1;\n    } elsif ($lst1_len\
    \ > $lst2_len) {\n        return $lst2;\n    } else {\n        return $lst1;\n\
    \    }\n}", "    my $lst1_len = 0;\n    my $lst2_len = 0;\n    for my $elem (@$lst1)\
    \ {\n        $lst1_len += length($elem);\n    }\n    for my $elem (@$lst2) {\n\
    \        $lst2_len += length($elem);\n    }\n    if ($lst1_len <= $lst2_len) {\n\
    \        return $lst1;\n    } else {\n        return $lst2;\n    }\n}", "    my\
    \ $cnt1 = 0; my $cnt2 = 0;\n    for my $i (@$lst1) {\n        $cnt1 += length($i);\n\
    \    }\n    for my $i (@$lst2) {\n        $cnt2 += length($i);\n    }\n    return\
    \ $cnt1 == $cnt2 ? $lst1 : $cnt1 < $cnt2 ? $lst1 : $lst2;\n}", "    my $total_num_of_chars1\
    \ = join(\"\", @$lst1) =~ tr/[a-z]//;\n    my $total_num_of_chars2 = join(\"\"\
    , @$lst2) =~ tr/[a-z]//;\n    $total_num_of_chars1 > $total_num_of_chars2 ? return\
    \ @$lst2 : return @$lst1;\n}", "    my $sum1 = 0;\n    my $sum2 = 0;\n    for\
    \ my $i (@$lst1) {\n        $sum1 += length($i);\n    }\n    for my $i (@$lst2)\
    \ {\n        $sum2 += length($i);\n    }\n    if ($sum1 < $sum2) {\n        return\
    \ $lst1;\n    } elsif ($sum1 > $sum2) {\n        return $lst2;\n    } else {\n\
    \        return $lst1;\n    }\n}", "    my $sum_lst1 = 0;\n    my $sum_lst2 =\
    \ 0;\n    map { $sum_lst1 += length($_) } @$lst1;\n    map { $sum_lst2 += length($_)\
    \ } @$lst2;\n    if ($sum_lst1 == $sum_lst2) {\n        return $lst1;\n    } elsif\
    \ ($sum_lst1 < $sum_lst2) {\n        return $lst1;\n    } else {\n        return\
    \ $lst2;\n    }\n}\nprint Dumper total_match(['4'], ['1', '2', '3', '4', '5']);\n\
    print Dumper total_match(['hi', 'admin'], ['hI', 'Hi']);", "    return [] if @$lst1\
    \ == 0 && @$lst2 == 0;\n    return $lst1 if @$lst1 == 0;\n    return $lst2 if\
    \ @$lst2 == 0;\n    my $sum1 = 0;\n    my $sum2 = 0;\n    for (@$lst1) {\n   \
    \     $sum1 += length($_);\n    }\n    for (@$lst2) {\n        $sum2 += length($_);\n\
    \    }\n    return $sum1 < $sum2 ? $lst1 : $lst2;\n}\nmy $lst1 = [\"hi\", \"admin\"\
    ];\nmy $lst2 = [\"hI\", \"Hi\"];\nmy $res = total_match($lst1, $lst2);\nprint\
    \ join(\" \", @$res) . \"\\n\";", "    my $sum1 = 0;\n    my $sum2 = 0;\n    foreach(@$lst1)\
    \ {\n        $sum1 += length($_);\n    }\n    foreach(@$lst2) {\n        $sum2\
    \ += length($_);\n    }\n    if($sum1 < $sum2) {\n        return $lst1;\n    }\n\
    \    elsif($sum1 > $sum2) {\n        return $lst2;\n    }\n    else {\n      \
    \  return $lst1;\n    }\n}", "    my $cnt1 = 0;\n    my $cnt2 = 0;\n    for my\
    \ $s (@$lst1) {\n        $cnt1 += length($s);\n    }\n    for my $s (@$lst2) {\n\
    \        $cnt2 += length($s);\n    }\n    $cnt1 < $cnt2 ? $lst1 : $lst2;\n}",
  "    my $s1 = join \"\", @$lst1;\n    my $s2 = join \"\", @$lst2;\n    return @$lst1\
    \ if length($s1) == length($s2);\n    return @$lst1 if length($s1) < length($s2);\n\
    \    return @$lst2;\n}\nsay join \" \", total_match(['hi', 'admin'], ['hI', 'Hi']);\n\
    say join \" \", total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']);\n\
    say join \" \", total_match(['hi', 'admin'], ['hI', 'hi', 'hi']);\nsay join \"\
    \ \", total_match(['4'], ['1', '2', '3', '4', '5']);", "    my $total1 = 0;\n\
    \    my $total2 = 0;\n    for my $str1 (@$lst1) {\n        $total1 += length($str1);\n\
    \    }\n    for my $str2 (@$lst2) {\n        $total2 += length($str2);\n    }\n\
    \    if ($total1 == $total2) {\n        return $lst1;\n    } elsif ($total1 <\
    \ $total2) {\n        return $lst1;\n    } else {\n        return $lst2;\n   \
    \ }\n}", "    my $a = sum map { length } @$lst1;\n    my $b = sum map { length\
    \ } @$lst2;\n    return $a < $b ? $lst1 : $lst2;\n}", "    $sum1 = 0;\n    $sum2\
    \ = 0;\n    foreach my $el (@$lst1) { $sum1 += length($el); }\n    foreach my\
    \ $el (@$lst2) { $sum2 += length($el); }\n    return $sum1 < $sum2 ? $lst1 : $sum1\
    \ > $sum2 ? $lst2 : $lst1;\n}", "    if (@$lst1 == 0 and @$lst2 == 0) {\n    \
    \    return [];\n    }\n    my $t1 = 0;\n    my $t2 = 0;\n    map { $t1 += length($_)\
    \ } @$lst1;\n    map { $t2 += length($_) } @$lst2;\n    if ($t1 <= $t2) {\n  \
    \      return $lst1;\n    }\n    else {\n        return $lst2;\n    }\n}", " \
    \   my @len1 = sort { $a <=> $b } map { length($_) } @$lst1;\n    my @len2 = sort\
    \ { $a <=> $b } map { length($_) } @$lst2;\n    return $len1[-1] < $len2[-1] ?\
    \ $lst1 : $len1[-1] > $len2[-1] ? $lst2 : $lst1;\n}", "    my $size1 = 0;\n  \
    \  my $size2 = 0;\n    $size1 += length($_) for @$lst1;\n    $size2 += length($_)\
    \ for @$lst2;\n    $size1 < $size2 ? $lst1 : $size1 > $size2 ? $lst2 : $lst1;\n\
    }", "    my $sum1 = 0;\n    my $sum2 = 0;\n    map { $sum1 += length($_) } @$lst1;\n\
    \    map { $sum2 += length($_) } @$lst2;\n    return $sum1 < $sum2 ? $lst1 : $sum1\
    \ > $sum2 ? $lst2 : $lst1;\n}", "    my $total1 = 0;\n    my $total2 = 0;\n  \
    \  map {$total1 += length($_)} @$lst1;\n    map {$total2 += length($_)} @$lst2;\n\
    \    if ($total1 == $total2) {\n        return $lst1;\n    } elsif ($total1 <\
    \ $total2) {\n        return $lst1;\n    } else {\n        return $lst2;\n   \
    \ }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
