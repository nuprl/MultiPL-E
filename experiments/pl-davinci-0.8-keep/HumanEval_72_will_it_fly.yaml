name: HumanEval_72_will_it_fly
language: pl
prompt: "# Write a function that returns True if the object q will fly, and False\
  \ otherwise.\n# The object q will fly if it's balanced (it is a palindromic list)\
  \ and the sum of its elements is less than or equal the maximum possible weight\
  \ w.\n# Example:\n# will_it_fly([1, 2], 5) \u279E False \n# # 1+2 is less than the\
  \ maximum possible weight, but it's unbalanced.\n# will_it_fly([3, 2, 3], 1) \u279E\
  \ False\n# # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\
  # will_it_fly([3, 2, 3], 9) \u279E True\n# # 3+2+3 is less than the maximum possible\
  \ weight, and it's balanced.\n# will_it_fly([3], 5) \u279E True\n# # 3 is less than\
  \ the maximum possible weight, and it's balanced.\nsub will_it_fly {\n    my($q,\
  \ $w) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&will_it_fly;\n\
  \        if(eq_deeply($candidate->([3, 2, 3], 9),1)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2], 5),\"\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3],\
  \ 5),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([3,\
  \ 2, 3], 1),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([1, 2, 3], 6),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([5], 5),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $len = @$q;\n    return 0 if sum(@$q) > $w;\n    return 1 if\
    \ $len == 1;\n    for (my $i = 0; $i < $len / 2; $i++) {\n        return 0 if\
    \ $q->[$i] != $q->[$len - $i - 1];\n    }\n    return 1;\n}", "    return is_palindrome($q)\
    \ && sum($q) <= $w;\n}", "    return 0 if $w < @$q;\n    return 0 if @$q < 2;\n\
    \    return 0 if join(\"\", @$q) ne join(\"\", reverse @$q);\n    return 1;\n}",
  "    return 1 if ($w >= scalar @$q);\n    return 0 if ($w < scalar @$q);\n    my\
    \ $sum = sum($q);\n    return 0 if ($sum > $w);\n    my $copy = [reverse @$q];\n\
    \    return 1 if compare($q, $copy);\n    return 0;\n}", "    $w = $w - (sum @$q);\n\
    \    return ($w >= 0 && @$q == 1) || ($w >= 0 && $q->[0] == $q->[-1] && will_it_fly([@$q[1..(@$q-2)]],\
    \ $w));\n}", "    return (($q->is_palindrome) and ($q->sum <= $w));\n}", "   \
    \ if( is_balanced($q) && sum_of_numbers($q) <= $w ) {\n        return 1;\n   \
    \ }\n    return 0;\n}", "    my $sum = sum(@$q);\n    return $sum <= $w && is_palindrome(@$q);\n\
    }", "    my $sum = 0;\n    foreach (@$q) {\n        $sum += $_;\n    }\n    if\
    \ ($sum <= $w) {\n        return @$q == grep(@$q[$_] == @$q[-1*($_+1)], 0..((@$q-1)/2))\n\
    \    }\n    return 0;\n}", "    my $sum = 0;\n    foreach my $i (@$q) {\n    \
    \    $sum += $i;\n    }\n    if ($sum <= $w && is_palindrome($q)) {\n        return\
    \ \"True\";\n    } else {\n        return \"False\";\n    }\n}", "    my $sum\
    \ = 0;\n    foreach my $item (@$q) {\n        $sum += $item;\n    }\n    my $mid\
    \ = int(@$q / 2);\n    my $is_palindrome = 1;\n    for(my $i = 0; $i < $mid; $i++)\
    \ {\n        if ($q->[$i] != $q->[@$q - $i - 1]) {\n            $is_palindrome\
    \ = 0;\n            last;\n        }\n    }\n    return $sum <= $w && $is_palindrome;\n\
    }", "    my $sum = 0;\n    for (@$q) {\n        $sum += $_;\n    }\n    return\
    \ ($sum <= $w) && (join(\"\",@$q) eq join(\"\",reverse @$q));\n}", "    my @a\
    \ = @$q;\n    return scalar(@a) >= 2 and sum(@a) <= $w and is_palindrome(@a);\n\
    }", "    my $sum = 0;\n    my $balanced = 0;\n    my $limit = @$q;\n    for (my\
    \ $i = 0; $i < @$q; $i++) {\n        $sum += @$q[$i];\n        if (@$q[$i] ==\
    \ @$q[$limit-$i-1]) {\n            $balanced = 1;\n        }\n        else {\n\
    \            $balanced = 0;\n            last;\n        }\n    }\n    if ($sum\
    \ <= $w && $balanced == 1) {\n        return 1;\n    }\n    else {\n        return\
    \ 0;\n    }\n}", "    my $n = $q->[0];\n    return $n <= $w and @$q == 1 or $n\
    \ <= $w and $n == $q->[-1] and will_it_fly([@$q[1..$#$q-1]], $w - $n);\n}", " \
    \   my $n = @$q;\n    my $sum = 0;\n    if ($n == 1) {\n        return 1;\n  \
    \  }\n    for my $i (0..$n/2-1) {\n        $sum += $q->[$i];\n        $sum +=\
    \ $q->[$n-$i-1];\n        return 0 if $sum > $w;\n        return 0 if $q->[$i]\
    \ != $q->[$n-$i-1];\n    }\n    return 1;\n}", "    my $sum = sum($q);\n    return\
    \ 0 if $sum > $w;\n    my $palindrome = 1;\n    for (my $i = 0; $i < scalar @$q\
    \ / 2; $i++) {\n        $palindrome = 0 if $q->[$i] != $q->[-1 - $i];\n    }\n\
    \    return $palindrome;\n}", "    my $sum = 0;\n    my $i = 0;\n    my $j = scalar(@$q)\
    \ - 1;\n    my $arr_size = scalar(@$q);\n    while ($i < $arr_size && $j >= 0)\
    \ {\n        if ($q->[$i] != $q->[$j]) {\n            return false;\n        }\n\
    \        $i++;\n        $j--;\n    }\n    while ($i < $arr_size) {\n        $sum\
    \ += $q->[$i];\n        $i++;\n    }\n    return $sum <= $w;\n}", "    my $sum\
    \ = sum($q);\n    $sum > $w ? 0 : is_balanced($q);\n}", "    my $sum;\n    my\
    \ $balanced = 0;\n    my $flag = 0;\n    # print \"$q $w\\n\";\n    if(scalar\
    \ @$q == 1) {\n        $balanced = 1;\n    }\n    if (scalar @$q % 2 != 0) {\n\
    \        $flag = 1;\n    }\n    for (my $i = 0; $i < scalar @$q; $i++) {\n   \
    \     if($flag == 1 && $i == (scalar @$q)/2) {\n            $i++;\n        }\n\
    \        $sum += $$q[$i];\n        $balanced = 1 if $$q[$i] == $$q[scalar @$q\
    \ - $i - 1];\n    }\n    # print \"$balanced $flag $sum $w\\n\";\n    return 1\
    \ if $balanced == 1 && $sum <= $w;\n    return 0;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
