name: HumanEval_124_valid_date
language: pl
prompt: "# You have to write a function which validates a given date string and\n\
  # returns True if the date is valid otherwise False.\n# The date is valid if all\
  \ of the following rules are satisfied:\n# 1. The date string is not empty.\n# 2.\
  \ The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\
  \ And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\
  \ And, the number of days is not less than 1 or higher than 29 for the month 2.\n\
  # 3. The months should not be less than 1 or higher than 12.\n# 4. The date should\
  \ be in the format: mm-dd-yyyy\n# for example: \n# valid_date('03-11-2000') => True\n\
  # valid_date('15-01-2012') => False\n# valid_date('04-0-2040') => False\n# valid_date('06-04-2020')\
  \ => True\n# valid_date('06/04/2020') => False\nsub valid_date {\n    my($date)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&valid_date;\n\
  \        if(eq_deeply($candidate->(\"03-11-2000\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"15-01-2012\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  04-0-2040\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"06-04-2020\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"01-01-2007\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  03-32-2011\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-31-3000\"),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  06-06-2005\"),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"21-31-2000\"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"04-12-2003\"\
  ),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  04122003\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"20030412\"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"2003-04\"\
  ),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  2003-04-12\"),\"\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"04-2003\"),\"\")) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return 0 if (!$date);\n    return 0 if ($date !~ /^(\\d{2})-(\\\
    d{2})-(\\d{4})$/);\n    my($month, $day, $year) = ($1, $2, $3);\n    return 0\
    \ if ($month < 1 || $month > 12);\n    return 0 if ($day < 1 || $day > 31);\n\
    \    return 0 if ($month == 2 && $day > 29);\n    return 0 if ($month == 4 &&\
    \ $day > 30);\n    return 0 if ($month == 6 && $day > 30);\n    return 0 if ($month\
    \ == 9 && $day > 30);\n    return 0 if ($month == 11 && $day > 30);\n    return\
    \ 1;\n}", "    return 1 if $date eq '';\n    return 0 if $date !~ /^(\\d\\d)-(\\\
    d\\d)-(\\d\\d\\d\\d)$/;\n    my($mm, $dd, $yyyy) = ($1, $2, $3);\n    return 0\
    \ if $mm < 1 or $mm > 12;\n    return 0 if $mm == 2 and $dd > 29;\n    return\
    \ 0 if $mm != 2 and $dd > 30;\n    return 0 if $dd < 1 or $dd > 31;\n    return\
    \ 1;\n}", "    return $date =~ /^(((0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-((19|20)\\\
    d\\d))|((0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|30)-((19|20)\\d\\d))|((0?[1-9]|1[012])-(0?[1-9]|1[0-9]|2[0-8])-((19|20)\\\
    d\\d))|((0?[1-9]|1[012])-(0?[1-9]|1[0-9]|2[0-9])-((19|20)\\d\\d))|((0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|3[01])-((19|20)\\\
    d\\d))|((0?[1-9]|1[012])-(0?[1-9]|[12][0-9]|30)-((19|20)\\d\\d))|((0?[1-9]|1[012])-(0?[1-9]|1[0-9]|2[0-8])-((19|20)\\\
    d\\d))|((0?[1-9]|1[012])-(0?[1-9]|1[0-9]|2[0-9])-((19|20)\\d\\d)))$/;\n}", " \
    \   my($month, $day, $year) = split(/[-\\/]/, $date);\n    my $days_in_month =\
    \ {\n        1 => 31, 3 => 31, 5 => 31, 7 => 31, 8 => 31, 10 => 31, 12 => 31,\n\
    \        4 => 30, 6 => 30, 9 => 30, 11 => 30,\n        2 => 29,\n    };\n    return\
    \ 0 unless $date && $month && $day && $year;\n    return 0 unless $month >= 1\
    \ && $month <= 12;\n    return 0 unless $day >= 1 && $day <= $days_in_month->{$month};\n\
    \    return 1;\n}", "    return undef unless $date;\n    my @list = split(/-/,\
    \ $date);\n    return undef unless @list == 3;\n    my ($month, $day, $year) =\
    \ @list;\n    return undef unless int($month) and int($day) and int($year);\n\
    \    my @month1 = (1,3,5,7,8,10,12);\n    my @month2 = (4,6,9,11);\n    my $isMonth\
    \ = 0;\n    foreach my $i (@month1) {\n        if($month == $i) {\n          \
    \  if($day < 1 or $day > 31) {\n                return undef;\n            }\n\
    \            $isMonth = 1;\n            last;\n        }\n    }\n    foreach my\
    \ $i (@month2) {\n        if($month == $i) {\n            if($day < 1 or $day\
    \ > 30) {\n                return undef;\n            }\n            $isMonth\
    \ = 1;\n            last;\n        }\n    }\n    if($month == 2) {\n        if($day\
    \ < 1 or $day > 29) {\n            return undef;\n        }\n        $isMonth\
    \ = 1;\n    }\n    return undef unless $isMonth;\n    return undef if $month <\
    \ 1 or $month > 12;\n    return 1;\n}", "    return 0 if $date eq \"\";\n    my\
    \ @date = split(\"-\", $date);\n    return 0 if scalar @date != 3;\n    return\
    \ 0 if $date[0] < 1 || $date[0] > 12;\n    return 0 if $date[2] < 0;\n    if ($date[0]\
    \ == 1 || $date[0] == 3 || $date[0] == 5 || $date[0] == 7 || $date[0] == 8 ||\
    \ $date[0] == 10 || $date[0] == 12) {\n        return 0 if $date[1] < 1 || $date[1]\
    \ > 31;\n    } elsif ($date[0] == 4 || $date[0] == 6 || $date[0] == 9 || $date[0]\
    \ == 11) {\n        return 0 if $date[1] < 1 || $date[1] > 30;\n    } elsif ($date[0]\
    \ == 2) {\n        return 0 if $date[1] < 1 || $date[1] > 29;\n    }\n    return\
    \ 1;\n}", "    # code goes here\n    return 0;\n}", "    return 0 if $date eq\
    \ '';\n    my($mm, $dd, $yyyy) = split '-', $date;\n    my $max_dd = ($mm == 2)\
    \ ? 29 : (($mm == 4 or $mm == 6 or $mm == 9 or $mm == 11) ? 30 : 31);\n    return\
    \ ($mm > 0 and $mm < 13 and $dd > 0 and $dd <= $max_dd and $yyyy > 0);\n}", " \
    \   my @d = split /-/, $date;\n    return 0 if @d != 3;\n    return 0 if $d[0]\
    \ < 1 || $d[0] > 12;\n    if($d[0] == 1 || $d[0] == 3 || $d[0] == 5 || $d[0] ==\
    \ 7 || $d[0] == 8 || $d[0] == 10 || $d[0] == 12) {\n        return 0 if $d[1]\
    \ < 1 || $d[1] > 31;\n    } elsif($d[0] == 4 || $d[0] == 6 || $d[0] == 9 || $d[0]\
    \ == 11) {\n        return 0 if $d[1] < 1 || $d[1] > 30;\n    } elsif($d[0] ==\
    \ 2) {\n        return 0 if $d[1] < 1 || $d[1] > 29;\n    }\n    return 0 if $d[2]\
    \ !~ /^\\d{4}$/;\n    return 1;\n}", "    $date =~ /\\d{2}-\\d{2}-\\d{4}/\n  \
    \  or return 0;\n    my($month, $day, $year) = split '-', $date;\n    $month =~\
    \ /\\d{2}/ and $month =~ /[1-9]|1[0-2]/\n    or return 0;\n    if ($month eq \"\
    01\" || $month eq \"03\" || $month eq \"05\" || $month eq \"07\" || $month eq\
    \ \"08\" || $month eq \"10\" || $month eq \"12\") {\n        $day =~ /\\d{2}/\
    \ and $day =~ /[1-9]|[1-2][0-9]|3[0-1]/\n        or return 0;\n    } elsif ($month\
    \ eq \"04\" || $month eq \"06\" || $month eq \"09\" || $month eq \"11\") {\n \
    \       $day =~ /\\d{2}/ and $day =~ /[1-9]|[1-2][0-9]|30/\n        or return\
    \ 0;\n    } elsif ($month eq \"02\") {\n        $day =~ /\\d{2}/ and $day =~ /[1-9]|[1-2][0-9]|29/\n\
    \        or return 0;\n    }\n    $year =~ /\\d{4}/ and $year =~ /20[0-9][0-9]/\n\
    \    or return 0;\n    return 1;\n}\nprint valid_date('03-11-2000'),\"\\n\";\n\
    print valid_date('15-01-2012'),\"\\n\";\nprint valid_date('04-0-2040'),\"\\n\"\
    ;\nprint valid_date('06-04-2020'),\"\\n\";\nprint valid_date('06/04/2020'),\"\\\
    n\";", "    my @date = split('-', $date);\n    return 0 if($date[2] < 1900 ||\
    \ $date[2] > 3000);\n    my $month = $date[0];\n    my $day = $date[1];\n    if($month\
    \ == 2) {\n        return 0 if($day < 1 || $day > 29);\n    }\n    elsif($month\
    \ == 4 || $month == 6 || $month == 9 || $month == 11) {\n        return 0 if($day\
    \ < 1 || $day > 30);\n    }\n    else {\n        return 0 if($day < 1 || $day\
    \ > 31);\n    }\n    return 0 if($month < 1 || $month > 12);\n    return 1;\n\
    }\nprint(valid_date('03-11-2000') . \"\\n\");\nprint(valid_date('15-01-2012')\
    \ . \"\\n\");\nprint(valid_date('04-0-2040') . \"\\n\");\nprint(valid_date('06-04-2020')\
    \ . \"\\n\");\nprint(valid_date('06/04/2020') . \"\\n\");", "    # join code here\n\
    \    return undef;\n}", "    $date =~ /^(0?[1-9]|1[0-2])-(0?[1-9]|[12][0-9]|3[01])-\\\
    d{4}$/;\n}", "    return $date =~ /^(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-(19|20)\\\
    d\\d$/ ? 1 : 0;\n}", "    my($m, $d, $y) = split /\\D+/, $date;\n    return unless\
    \ $date =~ /\\d{2}-\\d{2}-\\d{4}/;\n    return 1 if $d > 0 && $d <= 31 && $m >\
    \ 0 && $m <= 12 && $y > 0;\n    return if $m == 2 && $d > 29;\n    return 1 if\
    \ $m == 2 && $d <= 29 && $y % 4 == 0;\n    return if $m =~ /[4,6,9,11]/ && $d\
    \ > 30;\n    return 1 if $m =~ /[1,3,5,7,8,10,12]/ && $d <= 31;\n    return;\n\
    }", "    $date =~ m/(\\d{2})\\-(\\d{2})\\-(\\d{4})/ or return 0;\n    my($month,\
    \ $day, $year) = ($1, $2, $3);\n    $month =~ /^0[1-9]|1[0-2]/ or return 0;\n\
    \    if ($month == 1 || $month == 3 || $month == 5 || $month == 7 || $month ==\
    \ 8 || $month == 10 || $month == 12) {\n        return 0 if $day =~ /0[1-9]|[12][0-9]|3[01]/;\n\
    \    } elsif ($month == 4 || $month == 6 || $month == 9 || $month == 11) {\n \
    \       return 0 if $day =~ /0[1-9]|[12][0-9]|30/;\n    } elsif ($month == 2)\
    \ {\n        return 0 if $day =~ /0[1-9]|[12][0-9]|29/;\n    }\n    return 1;\n\
    }", "    my @date = split '-', $date;\n    my $months = @date;\n    if ($months\
    \ != 3) {\n        return 0;\n    }\n    my $month = $date[0];\n    my $day =\
    \ $date[1];\n    my $year = $date[2];\n    if ($month > 12 || $month < 1) {\n\
    \        return 0;\n    }\n    if ($day > 31 || $day < 1) {\n        return 0;\n\
    \    }\n    if ($month == 2) {\n        if ($day > 29) {\n            return 0;\n\
    \        }\n    } elsif ($month == 4 || $month == 6 || $month == 9 || $month ==\
    \ 11) {\n        if ($day > 30) {\n            return 0;\n        }\n    }\n \
    \   return 1;\n}", "    return if $date eq '';\n    my @date_components = split(/\\\
    -/, $date);\n    my $mm = shift @date_components;\n    my $dd = shift @date_components;\n\
    \    my $yyyy = shift @date_components;\n    return unless (\n        defined\
    \ $mm and $mm =~ /^\\d+$/ and $mm > 0 and $mm < 13 and\n        defined $dd and\
    \ $dd =~ /^\\d+$/ and $dd > 0 and $dd < 32 and\n        defined $yyyy and $yyyy\
    \ =~ /^\\d+$/ and $yyyy > 0\n    );\n    my @months_30 = (4,6,9,11);\n    my @months_31\
    \ = (1,3,5,7,8,10,12);\n    if (grep {$_ == $mm} @months_30) {\n        return\
    \ if $dd > 30;\n    }\n    elsif (grep {$_ == $mm} @months_31) {\n        return\
    \ if $dd > 31;\n    }\n    else {\n        if ($yyyy % 4 == 0 and $yyyy % 100\
    \ != 0) {\n            return if $dd > 29;\n        }\n        else {\n      \
    \      return if $dd > 28;\n        }\n    }\n    return 1;\n}", "    my $r;\n\
    \    if($date){\n        $r = ($date =~ /^(\\d{2})-(\\d{2})-(\\d{4})$/);\n   \
    \     if($r){\n            my($m,$d,$y) = ($1,$2,$3);\n            $r = 0;\n \
    \           if($m > 0 && $m < 13){\n                if($m == 2){\n           \
    \         if($d > 0 && $d < 30){\n                        $r = 1;\n          \
    \          }\n                } elsif($m == 1 || $m == 3 || $m == 5 || $m == 7\
    \ || $m == 8 || $m == 10 || $m == 12){\n                    if($d > 0 && $d <\
    \ 32){\n                        $r = 1;\n                    }\n             \
    \   } else {\n                    if($d > 0 && $d < 31){\n                   \
    \     $r = 1;\n                    }\n                }\n            }\n     \
    \   }\n    }\n    return $r;\n}", "    my($month, $day, $year) = split(/[-\\/]/,\
    \ $date);\n    my($valid_day, $valid_month, $valid_format);\n    $valid_format\
    \ = ($date =~ /\\d{2}[-\\/]\\d{2}[-\\/]\\d{4}/);\n    $valid_month = $month >\
    \ 0 && $month < 13;\n    $valid_day = $day > 0 && $day < 32 && ($month != 2 ||\
    \ $day < 30);\n    return ($valid_format && $valid_month && $valid_day);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
