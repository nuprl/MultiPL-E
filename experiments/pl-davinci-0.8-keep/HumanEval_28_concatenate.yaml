name: HumanEval_28_concatenate
language: pl
prompt: "# Concatenate list of strings into a single string\n# >>> concatenate([])\n\
  # ''\n# >>> concatenate(['a', 'b', 'c'])\n# 'abc'\nsub concatenate {\n    my($strings)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&concatenate;\n\
  \        if(eq_deeply($candidate->([]),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"\
  z\"]),\"xyz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([\"x\", \"y\", \"z\", \"w\", \"k\"]),\"xyzwk\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $result = '';\n    foreach my $s (@$strings) {\n        $result\
    \ .= $s;\n    }\n    return $result;\n}", "    return join '', @$strings;\n}",
  "    return join('', @$strings);\n}", "    my $concat = '';\n    for my $string\
    \ (@$strings) {\n        $concat .= $string;\n    }\n    return $concat;\n}",
  "    my $result = '';\n    my $string;\n    foreach $string (@$strings) {\n    \
    \    $result .= $string;\n    }\n    return $result;\n}", "    my $string = \"\
    \";\n    foreach my $substring (@$strings) {\n        $string .= $substring;\n\
    \    }\n    return $string;\n}", "    # Your code here\n    my $result = '';\n\
    \    foreach my $string (@$strings) {\n        $result .= $string;\n    }\n  \
    \  return $result;\n}", "    my $result = '';\n    for my $string (@$strings)\
    \ {\n        $result .= $string;\n    }\n    return $result;\n}", "    my $str\
    \ = '';\n    $str .= $_ foreach @$strings;\n    return $str;\n}", "    my $result\
    \ = '';\n    $result .= $_ foreach @$strings;\n    return $result;\n}", "    my\
    \ $result = '';\n    foreach my $string (@$strings) {\n        $result .= $string;\n\
    \    }\n    return $result;\n}", "    my $result = '';\n    for(my $i = 0; $i\
    \ < @$strings; $i++) {\n        $result .= $strings->[$i];\n    }\n    return\
    \ $result;\n}", "    return join('', @$strings);\n}", "    my $result = '';\n\
    \    foreach my $string (@$strings) {\n        $result .= $string;\n    }\n  \
    \  return $result;\n}", "    my($string);\n    my($i);", "    return join('',\
    \ @$strings);\n}", "    my $string = '';\n    foreach my $part (@$strings) {\n\
    \        $string .= $part;\n    }\n    return $string;\n}", "    my($string);\n\
    \    for (@$strings) {\n        $string .= $_;\n    }\n    return $string;\n}",
  "    return join('', @$strings);\n}", '    my($i, $result);']
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
