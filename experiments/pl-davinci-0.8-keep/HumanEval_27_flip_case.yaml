name: HumanEval_27_flip_case
language: pl
prompt: "# For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n# >>> flip_case('Hello')\n# 'hELLO'\nsub flip_case {\n    my($string)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&flip_case;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Hello!\"),\"hELLO!\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  These violent delights have violent ends\"),\"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my($first,$second);\n    for my $character (split(//,$string))\
    \ {\n        if ($character =~ /[a-z]/) {\n            $first .= uc($character);\n\
    \        }\n        else {\n            $first .= lc($character);\n        }\n\
    \    }\n    return $first;\n}", "    return undef unless(defined($string));\n\
    \    return $string unless(length($string));\n    $string =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $string;\n}", "    my @string = split '', $string;\n    for (my $i\
    \ = 0; $i < @string; $i++) {\n        if ($string[$i] =~ /[a-z]/) {\n        \
    \    $string[$i] = uc $string[$i];\n        }\n        elsif ($string[$i] =~ /[A-Z]/)\
    \ {\n            $string[$i] = lc $string[$i];\n        }\n    }\n    return join\
    \ '', @string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}",
  "    return undef unless defined $string;\n    $string =~ tr/a-zA-Z/A-Za-z/;\n \
    \   return $string;\n}", "    my $flipped_string = \"\";\n    foreach my $char\
    \ (split(//, $string)) {\n        if (lc($char) eq $char) {\n            $flipped_string\
    \ .= uc($char);\n        }\n        else {\n            $flipped_string .= lc($char);\n\
    \        }\n    }\n    return $flipped_string;\n}", "    my($flipped) = '';\n\
    \    for my $c (split //, $string) {\n        if ( $c =~ /[a-z]/ ) {\n       \
    \     $flipped .= uc $c;\n        } elsif ( $c =~ /[A-Z]/ ) {\n            $flipped\
    \ .= lc $c;\n        } else {\n            $flipped .= $c;\n        }\n    }\n\
    \    return $flipped;\n}", "    my @string_array = split(//, $string);\n    my\
    \ @result = map {flip_char($_)} @string_array;\n    return join(\"\", @result);\n\
    }", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    $string\
    \ =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    my($flipped);\n    my($character);\n\
    \    foreach $character (split(//, $string)) {\n        if ($character =~ /[a-z]/)\
    \ {\n            $flipped .= uc($character);\n        }\n        elsif ($character\
    \ =~ /[A-Z]/) {\n            $flipped .= lc($character);\n        }\n        else\
    \ {\n            $flipped .= $character;\n        }\n    }\n    return $flipped;\n\
    }", "    # ...\n}", "    return $string =~ tr/A-Za-z/a-zA-Z/r;\n}", "    $string\
    \ =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n}", "    return join('', map {ucfirst(lc($_))}\
    \ split(//, $string));\n}", "    $string =~ tr/a-zA-Z/A-Za-z/;\n    return $string;\n\
    }", "    my($i);\n    for ($i = 0; $i < length($string); $i++) {\n        substr($string,\
    \ $i, 1) = (uc(substr($string, $i, 1)) eq substr($string, $i, 1)) ? lc(substr($string,\
    \ $i, 1)) : uc(substr($string, $i, 1));\n    }\n    return $string;\n}", "   \
    \ $string =~ tr/A-Za-z/a-zA-Z/;\n    return $string;\n}", "    $string =~ tr/A-Za-z/a-zA-Z/;\n\
    \    return $string;\n}", "    return $string =~ tr/a-zA-Z/A-Za-z/r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
