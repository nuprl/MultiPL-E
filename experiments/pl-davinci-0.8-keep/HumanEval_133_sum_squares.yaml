name: HumanEval_133_sum_squares
language: pl
prompt: "# You are given a list of numbers.\n# You need to return the sum of squared\
  \ numbers in the given list,\n# round each element in the list to the upper int(Ceiling)\
  \ first.\n# Examples:\n# For lst = [1,2,3] the output should be 14\n# For lst =\
  \ [1,4,9] the output should be 98\n# For lst = [1,3,5,7] the output should be 84\n\
  # For lst = [1.4,4.2,0] the output should be 29\n# For lst = [-2.4,1,1] the output\
  \ should be 6\nsub sum_squares {\n    my($lst) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sum_squares;\n\
  \        if(eq_deeply($candidate->([1.0, 2.0, 3.0]),14)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.0, 2.0,\
  \ 3.0]),14)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([1.0, 3.0, 5.0, 7.0]),84)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1.4, 4.2,\
  \ 0.0]),29)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n     \
  \   if(eq_deeply($candidate->([-2.4, 1.0, 1.0]),6)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([100.0, 1.0, 15.0,\
  \ 2.0]),10230)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
  \      if(eq_deeply($candidate->([10000.0, 10000.0]),200000000)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.4,\
  \ 4.6, 6.3]),75)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->([-1.4, 17.9, 18.9, 19.9]),1086)) {\n        print\
  \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0.0]),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1.0,\
  \ 1.0, 0.0]),2)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    my $result = 0;\n    my @numbers = @$lst;\n    for my $number (@numbers)\
    \ {\n        $result += ceil($number) ** 2;\n    }\n    return $result;\n}", " \
    \   my @squares = map {ceil($_)**2} @$lst;\n    return sum(@squares);\n}", " \
    \   my @newlst = map { ceil($_) } @$lst;\n    my $total = 0;\n    for my $i (@newlst)\
    \ {\n        $total += $i * $i;\n    }\n    return $total;\n}", "    my @array\
    \ = @$lst;\n    my $result = 0;\n    foreach my $element (@array) {\n        $result\
    \ += int($element) ** 2;\n    }\n    return $result;\n}", "    my $ret = 0;\n\
    \    for my $el (@$lst) {\n        $ret += ceil($el)**2;\n    }\n    return $ret;\n\
    }", "    my $sum = 0;\n    foreach my $l (@$lst) {\n\t$sum += ceil($l)**2;\n \
    \   }\n    return $sum;\n}", "    my $sum = 0;\n    foreach my $e (@$lst) {\n\
    \        $sum += int($e + 1) ** 2;\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    for my $v (@$lst) {\n        $sum += ($v >= 0) ? int($v + 0.9999)\
    \ : int($v - 0.9999);\n    }\n    return $sum ** 2;\n}", "    my $sum = 0;\n \
    \   for my $x (@$lst) {\n        $sum += int($x) ** 2;\n    }\n    return $sum;\n\
    }", "    my $sum = 0;\n    my $i = @$lst;\n    while($i){\n        $sum += ($lst->[$i-1]\
    \ > 0) ? ceil($lst->[$i-1]) ** 2 : floor($lst->[$i-1]) ** 2;\n        $i--;\n\
    \    }\n    return $sum;\n}", "    my $total = 0;\n    foreach my $n (@$lst) {\n\
    \        $total += int($n) ** 2;\n    }\n    return $total;\n}", "    my $sum\
    \ = 0;\n    foreach (@$lst) {\n        $sum += int($_) ** 2;\n    }\n    return\
    \ $sum;\n}", "    my @lst = map { ceil($_) } @$lst;\n    my $sum = 0;\n    for\
    \ my $i (@lst) {\n        $sum += $i * $i;\n    }\n    return $sum;\n}", "   \
    \ my @lst = map { int(ceil($_)) } @$lst;\n    my $sum = 0;\n    for my $item (@lst)\
    \ {\n        $sum += $item * $item;\n    }\n    return $sum;\n}", "    my $sum\
    \ = 0;\n    for my $num (@$lst) {\n        $sum += int($num+0.5)**2;\n    }\n\
    \    return $sum;\n}", "    $sum = 0;\n    foreach my $v (@$lst) {\n        $sum\
    \ += (int($v)**2);\n    }\n    return $sum;\n}", "    my $sum = 0;\n    for my\
    \ $num (@$lst) {\n        my $squared = ceil($num) ** 2;\n        $sum += $squared;\n\
    \    }\n    return $sum;\n}", "    my $sum = 0;\n    for my $i (@$lst) {\n   \
    \     $sum += ceil($i) ** 2;\n    }\n    return $sum;\n}", "    my @lst = @$lst;\n\
    \    my $sum = 0;\n    map { $sum += ($_ * $_) } @lst;\n    return $sum;\n}",
  "    my $sum = 0;\n    for my $num (@$lst) {\n        $sum += $num ** 2;\n    }\n\
    \    return $sum;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
