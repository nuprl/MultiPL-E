name: HumanEval_89_encrypt
language: pl
prompt: "# Create a function encrypt that takes a string as an argument and\n# returns\
  \ a string encrypted with the alphabet being rotated. \n# The alphabet should be\
  \ rotated in a manner such that the letters \n# shift down by two multiplied to\
  \ two places.\n# For example:\n# encrypt('hi') returns 'lm'\n# encrypt('asdfghjkl')\
  \ returns 'ewhjklnop'\n# encrypt('gf') returns 'kj'\n# encrypt('et') returns 'ix'\n\
  sub encrypt {\n    my($s) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&encrypt;\n\
  \        if(eq_deeply($candidate->(\"hi\"),\"lm\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"asdfghjkl\"),\"\
  ewhjklnop\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->(\"gf\"),\"kj\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"et\"),\"ix\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  faewfawefaewg\"),\"jeiajeaijeiak\")) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->(\"hellomyfriend\"),\"lippsqcjvmirh\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh\"),\"hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a\"),\"e\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\n\
  testhumaneval();"
completions: ["    my $map = [\n      0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7,\
    \ 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17,\
    \ 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27,\
    \ 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36,\
    \ 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46,\
    \ 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 55,\
    \ 56, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 64, 65,\
    \ 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74,\
    \ 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 83, 84,\
    \ 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93,\
    \ 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 102, 102,\
    \ 103, 103, 104, 104, 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110,\
    \ 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118,\
    \ 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125", "   \
    \ my @a = ('a'..'z');\n    my @b = ('b'..'z');\n    push(@b, 'a');\n    my %hash;\n\
    \    @hash{@a} = @b;\n    $s =~ s/([a-z])/$hash{$1}/g;\n    return $s;\n}", " \
    \   my($result) = \"\";\n    # We use split and join to construct the string instead\
    \ of\n    # looping because the first is faster and we don't want the\n    # students\
    \ to be too bothered by large input\n    $result = join(\"\", map(encryptLetter($_),\
    \ split(//, $s)));\n    return $result;\n}", "    my($c);\n    my(@l) = split(//,$s);\n\
    \    my($idx);\n    my($ex);\n    my($res) = \"\";\n    for ($c = 0; $c < length($s);\
    \ $c++) {\n        $idx = (ord($l[$c]) - 97) * 2;\n        $ex = 97 + ($idx %\
    \ 26);\n        $res .= chr($ex);\n    }\n    return $res;\n}", "    my @chars\
    \ = split(//, $s);\n    foreach my $i (0..$#chars) {\n        if (ord($chars[$i])\
    \ > 109) {\n            $chars[$i] = chr(ord($chars[$i]) - 10);\n        } elsif\
    \ (ord($chars[$i]) > 97) {\n            $chars[$i] = chr(ord($chars[$i]) + 2);\n\
    \        }\n    }\n    return join('', @chars);\n}", "    my $e = shift @_;\n\
    \    my $len = length($s);\n    my $r = \"\";\n    foreach (0..$len-1) {\n   \
    \     my $c = substr($s, $_, 1);\n        my $j = $d[ord($c)-97];\n        $j\
    \ += 2;\n        $j %= 26;\n        $r .= chr($j+97);\n    }\n    return $r;\n\
    }", "    my $r;\n    my $i;\n    foreach $i (split //, $s) {\n        my $c =\
    \ ord($i) - ord('a');\n        $c = ($c + 2) % 26;\n        $r .= chr($c + ord('a'));\n\
    \    }\n    return $r;\n}", "    my($l) = $s;\n    my($i) = 0;\n    while($i <\
    \ length($l)) {\n        my($c) = chop($l);\n        if($c eq 'x') {\n       \
    \     $s = 'a' . $s;\n        } elsif($c eq 'y') {\n            $s = 'b' . $s;\n\
    \        } elsif($c eq 'z') {\n            $s = 'c' . $s;\n        } else {\n\
    \            $s = chr(ord($c) + 3) . $s;\n        }\n        $i = $i + 1;\n  \
    \  }\n    return $s;\n}", "    my @chars = split(//, $s);\n    my @nums = map\
    \ {ord($_) - ord('a')} @chars;\n    my @new_nums = map {($_ + 2) % 26} @nums;\n\
    \    my @new_chars = map {chr($_ + ord('a'))} @new_nums;\n    return join('',\
    \ @new_chars);\n}", "    my @a = split //, $s;\n    my @letters = 'a'..'z';\n\
    \    my %alphabet = map {$letters[$_] => $_} 0..$#letters;\n    my @b = map {$alphabet{$_}}\
    \ @a;\n    my @c = map {($_ + 2) * 2 > 25 ? ($_ + 2) * 2 - 25 : ($_ + 2) * 2}\
    \ @b;\n    my @d = map {$letters[$_]} @c;\n    my $e = join '', @d;\n    return\
    \ $e;\n}", "    my @chars = split(//, $s);\n    my @newChars = map {$_ =~ tr/a-z/c-za-b/}\
    \ @chars;\n    my $newString = join(\"\", @newChars);\n    return $newString;\n\
    }", "    my($c, $res);\n    foreach $c (split //, $s) {\n        $res .= chr(ord($c)\
    \ + 2 * 2);\n    }\n    return $res;\n}", "    my $a = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    my $b = \"cdefghijklmnopqrstuvwxyzab\";\n    $s =~ tr/$a/$b/;\n    return\
    \ $s;\n}", "    my @s = split(//, $s);\n    my @r = map { $_ eq 'a' ? 'c' :\n\
    \                  $_ eq 'b' ? 'd' :\n                  $_ eq 'c' ? 'e' :\n  \
    \                $_ eq 'd' ? 'f' :\n                  $_ eq 'e' ? 'g' :\n    \
    \              $_ eq 'f' ? 'h' :\n                  $_ eq 'g' ? 'i' :\n      \
    \            $_ eq 'h' ? 'j' :\n                  $_ eq 'i' ? 'k' :\n        \
    \          $_ eq 'j' ? 'l' :\n                  $_ eq 'k' ? 'm' :\n          \
    \        $_ eq 'l' ? 'n' :\n                  $_ eq 'm' ? 'o' :\n            \
    \      $_ eq 'n' ? 'p' :\n                  $_ eq 'o' ? 'q' :\n              \
    \    $_ eq 'p' ? 'r' :\n                  $_ eq 'q' ? 's' :\n                \
    \  $_ eq 'r' ? 't' :\n                  $_ eq 's' ? 'u' :\n                  $_\
    \ eq 't' ? 'v' :\n                  $_ eq 'u' ? 'w' :\n                  $_ eq\
    \ 'v' ? 'x' :\n                  $_ eq 'w' ? 'y' :\n                  $_ eq 'x'\
    \ ? 'z' :\n                  $_ eq 'y' ? 'a' :\n                  $_ eq 'z' ?\
    \ 'b' :\n                  $_ } @s;\n    return join '', @r;\n}", "    my $encrypted\
    \ = '';\n    foreach my $chr (split //, $s) {\n        $encrypted .= chr(ord($chr)\
    \ + ($chr =~ /[a-z]/ ? 2 : 0));\n    }\n    return $encrypted;\n}", "    my(@a)\
    \ = split(//, $s);\n    my($c, @c);\n    foreach $c (@a) {\n        $c = ord($c);\n\
    \        if (($c >= 97) && ($c <= 104)) {\n            $c = $c + 10;\n       \
    \ } elsif (($c >= 105) && ($c <= 109)) {\n            $c = $c + 14;\n        }\
    \ elsif (($c >= 110) && ($c <= 116)) {\n            $c = $c + 18;\n        } elsif\
    \ (($c >= 117) && ($c <= 121)) {\n            $c = $c + 22;\n        } elsif ($c\
    \ == 122) {\n            $c = 97;\n        } elsif ($c == 97) {\n            $c\
    \ = 98;\n        }\n        $c = chr($c);\n        push(@c, $c);\n    }\n    $s\
    \ = join('', @c);\n    return $s;\n}", "    my(@s) = split(//, $s);\n    my(@newS);\n\
    \    for (my $i = 0; $i < @s; $i++) {\n        if ($s[$i] =~ /[a-z]/) {\n    \
    \        push(@newS, chr(ord($s[$i]) + 2));\n        } else {\n            push(@newS,\
    \ $s[$i]);\n        }\n    }\n    return join('', @newS);\n}", "    my($a) = $s;\n\
    \    $a =~ tr/a-z/c-za-b/;\n    return $a;\n}\nprint \"Encrypt: \" . encrypt('hi')\
    \ . \"\\n\";", "    my $enc = '';\n    foreach my $c (split //, $s) {\n      \
    \  my $i = ord($c) - ord('a');\n        $i = ($i + 2) % 26;\n        $enc .= chr($i\
    \ + ord('a'));\n    }\n    return $enc;\n}", "    my @s = split //, $s;\n    my\
    \ @r;\n    foreach my $i (@s) {\n        my $s = ord($i) + 2 * 2;\n        my\
    \ $e = $s > ord('z') ? chr($s - 26) : chr($s);\n        push @r, $e;\n    }\n\
    \    return join '', @r;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
