name: HumanEval_31_is_prime
language: pl
prompt: "# Return true if a given number is prime, and false otherwise.\n# >>> is_prime(6)\n\
  # False\n# >>> is_prime(101)\n# True\n# >>> is_prime(11)\n# True\n# >>> is_prime(13441)\n\
  # True\n# >>> is_prime(61)\n# True\n# >>> is_prime(4)\n# False\n# >>> is_prime(1)\n\
  # False\nsub is_prime {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&is_prime;\n\
  \        if(eq_deeply($candidate->(6),\"\")) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(101),1)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(13441),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(61),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(4),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(1),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(5),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(11),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(17),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(85),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(77),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(255379),\"\
  \")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $k = int sqrt $n;\n    if ($n < 2) {\n        return 0;\n  \
    \  }\n    for my $i (2..$k) {\n        if ($n % $i == 0) {\n            return\
    \ 0;\n        }\n    }\n    return 1;\n}", "    return if $n <= 1;\n    return\
    \ if $n > 2 && $n % 2 == 0;\n    return if $n > 3 && $n % 3 == 0;\n    return\
    \ if $n > 5 && $n % 5 == 0;\n    return if $n > 7 && $n % 7 == 0;\n    return\
    \ if $n > 11 && $n % 11 == 0;\n    return if $n > 13 && $n % 13 == 0;\n    return\
    \ if $n > 17 && $n % 17 == 0;\n    return if $n > 19 && $n % 19 == 0;\n    return\
    \ if $n > 23 && $n % 23 == 0;\n    return if $n > 29 && $n % 29 == 0;\n    return\
    \ if $n > 31 && $n % 31 == 0;\n    return if $n > 37 && $n % 37 == 0;\n    return\
    \ if $n > 41 && $n % 41 == 0;\n    return if $n > 43 && $n % 43 == 0;\n    return\
    \ if $n > 47 && $n % 47 == 0;\n    return if $n > 53 && $n % 53 == 0;\n    return\
    \ if $n > 59 && $n % 59 == 0;\n    return if $n > 61 && $n % 61 == 0;\n    return\
    \ if $n > 67 && $n % 67 == 0;\n    return if $n > 71 && $n % 71 == 0;\n    return\
    \ if $n > 73 && $n % 73 == 0;\n    return if $n > 79 && $n % 79 == 0;\n    return\
    \ if $n > 83 && $n % 83 == 0;\n    return if $n > 89 && $n % 89 == 0;\n    return\
    \ if $n > 97 && $n % 97 == 0;\n    return if $n > 101 && $n % 101 == 0;\n    return\
    \ if $n > 103 && $n % 103 == 0;\n    return if $n > 107 && $n % 107 == 0;\n  \
    \  return if $n > 109 && $n % 109 == 0;\n    return if $n > 113 && $n % 113 ==\
    \ 0;\n    return if $n > 127 && $n % 127 == 0;\n    return if $n >", "    if ($n\
    \ < 1 || $n == 2) {\n        return False;\n    } elsif ($n % 2 == 0) {\n    \
    \    return False;\n    } elsif ($n == 3) {\n        return True;\n    } elsif\
    \ ($n % 3 == 0) {\n        return False;\n    } elsif ($n == 5) {\n        return\
    \ True;\n    } elsif ($n % 5 == 0) {\n        return False;\n    } elsif ($n ==\
    \ 7) {\n        return True;\n    } elsif ($n % 7 == 0) {\n        return False;\n\
    \    } elsif ($n == 11) {\n        return True;\n    } elsif ($n % 11 == 0) {\n\
    \        return False;\n    } elsif ($n == 13) {\n        return True;\n    }\
    \ elsif ($n % 13 == 0) {\n        return False;\n    } elsif ($n == 17) {\n  \
    \      return True;\n    } elsif ($n % 17 == 0) {\n        return False;\n   \
    \ } elsif ($n == 19) {\n        return True;\n    } elsif ($n % 19 == 0) {\n \
    \       return False;\n    } elsif ($n == 23) {\n        return True;\n    } elsif\
    \ ($n % 23 == 0) {\n        return False;\n    } elsif ($n == 29) {\n        return\
    \ True;\n    } elsif ($n % 29 == 0) {\n        return False;\n    } elsif ($n\
    \ == 31) {\n        return True;\n    } elsif ($n % 31 == 0) {\n        return\
    \ False;\n    } elsif ($n == 37) {\n        return True;\n    } elsif ($n % 37\
    \ == 0) {\n        return False;\n    } elsif ($n == 41) {\n        return True;\n\
    \    } elsif ($n % 41 == 0) {\n        return False;\n    } elsif ($n == 43) {\n\
    \        return True;\n    } elsif ($n % 43 == 0) {\n        return False;\n \
    \   } elsif", "    if($n == 1) {\n        return 0;\n    }\n    my $divisor =\
    \ 2;\n    while ($divisor <= $n/2) {\n        if ($n % $divisor == 0) {\n    \
    \        return 0;\n        }\n        $divisor += 1;\n    }\n    return 1;\n}",
  "    return if $n < 2;\n    for my $i (2..sqrt($n)) {\n        return if $n % $i\
    \ == 0;\n    }\n    return 1;\n}", "    return (1..$n)\n\t.grep($n % $_ == 0)\n\
    \t.elems == 2;\n}", "    return 0 if $n < 2;\n    return 1 if $n < 4;\n    return\
    \ 0 if $n % 2 == 0;\n    return 1 if $n < 9;\n    return 0 if $n % 3 == 0;\n \
    \   my $r = int(sqrt($n));\n    my $f = 5;\n    while ($f <= $r) {\n        return\
    \ 0 if $n % $f == 0;\n        return 0 if $n % ($f + 2) == 0;\n        $f += 6;\n\
    \    }\n    return 1;\n}", "    return 0 if $n == 1;\n    return 1 if $n == 2;\n\
    \    my $i = 2;\n    while ($i < $n) {\n        return 0 if $n % $i == 0;\n  \
    \      $i++;\n    }\n    return 1;\n}", "    return 0 if $n <= 1;\n    return\
    \ 1 if $n == 2;\n    return 0 if $n % 2 == 0;\n    my $max = int(sqrt($n)) + 1;\n\
    \    foreach my $i (3..$max) {\n        next if $i % 2 == 0;\n        return 0\
    \ if $n % $i == 0;\n    }\n    return 1;\n}", "    for (my $i = 2; $i < $n; $i++)\
    \ {\n        if ($n % $i == 0) {\n            return 0;\n        }\n    }\n  \
    \  return 1;\n}", "    if($n == 1) {\n        return 0;\n    }\n    for my $i\
    \ (2..sqrt($n)) {\n        if($n % $i == 0) {\n            return 0;\n       \
    \ }\n    }\n    return 1;\n}", "    my $i = 2;\n    if ($n == 1) {\n        return\
    \ 0;\n    }\n    while ($i <= int(sqrt($n))) {\n        if ($n % $i == 0) {\n\
    \            return 0;\n        }\n        $i++;\n    }\n    return 1;\n}", " \
    \   if($n == 1){\n        return 0;\n    }\n    for(my $i = 2; $i <= $n - 1; $i++){\n\
    \        if($n % $i == 0){\n            return 0;\n        }\n    }\n    return\
    \ 1;\n}", "    return $n > 1 if $n < 4;\n    return unless $n % 2 and $n % 3;\n\
    \    my $sqrt = int(sqrt($n));\n    for (my $i = 5; $i <= $sqrt; $i += 6) {\n\
    \        return unless $n % $i and $n % ($i + 2);\n    }\n    return 1;\n}", " \
    \   if ($n == 1) {\n        return 0;\n    }\n    if ($n == 2) {\n        return\
    \ 1;\n    }\n    for (my $i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n\
    \            return 0;\n        }\n    }\n    return 1;\n}", "    # check if $n\
    \ is prime.\n    if($n==1) {\n        return 0;\n    }\n    if($n==2) {\n    \
    \    return 1;\n    }\n    if($n%2==0) {\n        return 0;\n    }\n    for(my\
    \ $i=3; $i<=$n/2; $i=$i+2) {\n        if($n%$i==0) {\n            return 0;\n\
    \        }\n    }\n    return 1;\n}", "    my $root = int(sqrt($n));\n    my $i\
    \ = 2;\n    for (; $i <= $root; $i++) {\n        if ($n % $i == 0) {\n       \
    \     return 0;\n        }\n    }\n    return 1;\n}", "    my $max = int sqrt\
    \ $n;\n    foreach my $i (2..$max) {\n        return 0 if 0 == $n % $i;\n    }\n\
    \    return 1;\n}", "    if ($n <= 1) {\n        return 0;\n    }\n    if ($n\
    \ <= 3) {\n        return 1;\n    }\n    if ($n % 2 == 0 || $n % 3 == 0) {\n \
    \       return 0;\n    }\n    my $i = 5;\n    while ($i*$i <= $n) {\n        if\
    \ ($n % $i == 0 || $n % ($i + 2) == 0) {\n            return 0;\n        }\n \
    \       $i += 6;\n    }\n    return 1;\n}", "    if ($n < 2) {\n        return\
    \ 0;\n    }\n    for (my $i = 2; $i < $n; $i++) {\n        if (($n % $i) == 0)\
    \ {\n            return 0;\n        }\n    }\n    return 1;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
