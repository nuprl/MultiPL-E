name: HumanEval_16_count_distinct_characters
language: pl
prompt: "# Given a string, find out how many distinct characters (regardless of case)\
  \ does it consist of\n# >>> count_distinct_characters('xyzXYZ')\n# 3\n# >>> count_distinct_characters('Jerry')\n\
  # 4\nsub count_distinct_characters {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_distinct_characters;\n\
  \        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"abcde\"),5)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  abcdecadeCADE\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"aaaaAAAAaaaa\"),1)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"Jerry\
  \ jERRY JeRRRY\"),5)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n}\n\ntesthumaneval();"
completions: ["    return scalar keys %{{map { lc($_) => 1 } split //, $string}};\n\
    }", "    my @chars = split(\"\",$string);\n    my @distinct = uniq @chars;\n \
    \   return scalar @distinct;\n}", "    my %chars;\n    $chars{lc $_} = 1 for (split\
    \ //, $string);\n    return scalar keys %chars;\n}", "    my %seen = ();\n   \
    \ my @chars = split //, $string;\n    foreach my $char (@chars) {\n        $seen{$char}\
    \ = 1;\n    }\n    return scalar keys %seen;\n}", "    my $count = 0;\n    my\
    \ %h_string;\n    my @chars = split(//, lc($string));\n    foreach my $c (@chars)\
    \ {\n        $h_string{$c}++;\n    }\n    my @uniq = keys %h_string;\n    return\
    \ scalar @uniq;\n}", "    my %letters = ();\n    for (my $i = 0; $i < length($string);\
    \ $i++) {\n        $letters{uc(substr($string, $i, 1))} = 1;\n    }\n    return\
    \ scalar(keys %letters);\n}", "    my %seen;\n    my @input_array = split //,\
    \ $string;\n    foreach(@input_array) {\n        $seen{lc($_)} = 1;\n    }\n \
    \   return scalar keys %seen;\n}", "    my @chars = split //, $string;\n    my\
    \ %freq;\n    foreach (@chars) {\n        $freq{uc $_} = 1;\n    }\n    return\
    \ scalar keys %freq;\n}", "    my @char_set = split //, $string;\n    my @lower_case_char_set\
    \ = map { lc } @char_set;\n    my %unique_chars;\n    @unique_chars{@lower_case_char_set}\
    \ = ();\n    return scalar keys %unique_chars;\n}", "    return scalar(keys %{{\
    \ map { $_ => 1 } split(//, uc($string)) }});\n}", "    my %chars;\n    foreach\
    \ (split('', $string)) {\n        $chars{lc($_)} = 1;\n    }\n    return scalar(keys\
    \ %chars);\n}", "    # put your code here\n}", "    my %seen;\n    my @string\
    \ = split(//, lc($string));\n    foreach my $c (@string) {\n        $seen{$c}\
    \ = 1;\n    }\n    return scalar(keys %seen);\n}", "    my $count = 0;\n    my\
    \ %hash;\n    foreach my $i (0..length($string)-1) {\n        my $str = substr($string,\
    \ $i, 1);\n        unless (exists $hash{lc($str)}) {\n            $hash{lc($str)}\
    \ = 1;\n            $count++;\n        }\n    }\n    return $count;\n}", "   \
    \ my @lower_case = split('', lc($string));\n    my %hash = map {$_ => 0} @lower_case;\n\
    \    return scalar(keys %hash);\n}", "    my @chars = split //, $string;\n   \
    \ my %uniq_chars;\n    foreach my $char (@chars) {\n        $uniq_chars{$char}\
    \ = 1;\n    }\n    return scalar keys %uniq_chars;\n}", "    my %distinct_characters;\n\
    \    foreach my $character (split(//,$string)) {\n\t$distinct_characters{lc($character)}\
    \ = 1;\n    }\n    return scalar(keys(%distinct_characters));\n}", "    # TODO:\
    \ implement count_distinct_characters function here\n    my @string = split(//,\
    \ $string);\n    my %hash = map { $_ => 1 } @string;\n    my @values = values\
    \ %hash;\n    my $count = scalar @values;\n    return $count;\n}", "    my %characters;\n\
    \    foreach (split //, $string) {\n        $characters{lc $_} = 1;\n    }\n \
    \   return scalar keys %characters;\n}", "    my %characters = ();\n    foreach\
    \ my $character (split(//, $string)) {\n        $characters{lc($character)} =\
    \ 1;\n    }\n    return scalar(keys %characters);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
