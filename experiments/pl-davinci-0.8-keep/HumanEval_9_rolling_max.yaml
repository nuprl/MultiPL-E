name: HumanEval_9_rolling_max
language: pl
prompt: "# From a given list of integers, generate a list of rolling maximum element\
  \ found until given moment\n# in the sequence.\n# >>> rolling_max([1, 2, 3, 2, 3,\
  \ 4, 2])\n# [1, 2, 3, 3, 3, 4, 4]\nsub rolling_max {\n    my($numbers) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&rolling_max;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([1, 2, 3, 4]),[1, 2,\
  \ 3, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
  \ 3, 2, 1]),[4, 4, 4, 4])) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([3, 2, 3, 100, 3]),[3, 3, 3, 100, 100]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $max = -inf;\n    my @maxes;\n    for my $number (@$numbers)\
    \ {\n        $max = max($max, $number);\n        push @maxes, $max;\n    }\n \
    \   return \\@maxes;\n}", "    my @maxes;\n    my $max = undef;\n    foreach my\
    \ $num (@$numbers) {\n        $max = $num if !defined($max) || $num > $max;\n\
    \        push @maxes, $max;\n    }\n    return \\@maxes;\n}", "    my $max = -1;\n\
    \    my @result;\n    for (@$numbers) {\n        $max = $_ if $_ > $max;\n   \
    \     push @result, $max;\n    }\n    return \\@result;\n}", "    my $max = 0;\n\
    \    my @rolling_max = map {\n        $max = $_ if $max < $_;\n        $max;\n\
    \    } @$numbers;\n    return \\@rolling_max;\n}", "    my @max;\n    for my $n\
    \ (@$numbers) {\n        push @max, max($n, $max[-1] // -Inf);\n    }\n    return\
    \ \\@max;\n}", "    return () unless @$numbers;\n    my @rolling = ($numbers->[0]);\n\
    \    for my $i (1 .. $#$numbers) {\n        push @rolling, $rolling[-1] > $numbers->[$i]\
    \ ? $rolling[-1] : $numbers->[$i];\n    }\n    return @rolling;\n}", "    return\
    \ $numbers if @$numbers == 1;\n    my @result = ($numbers->[0]);\n    my $m =\
    \ $numbers->[0];\n    for my $i (1 .. $#$numbers) {\n        $m = $numbers->[$i]\
    \ if $numbers->[$i] > $m;\n        push @result, $m;\n    }\n    return \\@result;\n\
    }", "    my $max = 0;\n    return [map {\n        $max = $_ if $max < $_;\n  \
    \      $max;\n    } @$numbers];\n}", "    my @maxs = ();\n    my $max = 0;\n \
    \   for my $n (@$numbers) {\n        if ($n > $max) {\n            $max = $n;\n\
    \        }\n        push @maxs, $max;\n    }\n    return \\@maxs;\n}", "    die\
    \ \"Not implemented yet.\";\n}", "    my @result;\n    my $max = -1e99;", "  \
    \  my($max) = $numbers->[0];\n    my(@result) = ($max);\n    for my $number (@$numbers[1..$#$numbers])\
    \ {\n        if ($number > $max) {\n            $max = $number;\n        }\n \
    \       push @result, $max;\n    }\n    return \\@result;\n}", "    my $max =\
    \ 0;\n    my @res;\n    for my $i (@$numbers) {\n        $max = $i if $i > $max;\n\
    \        push @res, $max;\n    }\n    return \\@res;\n}", "    my @result;\n \
    \   my $max = $numbers->[0];\n    for (my $i = 0; $i < @$numbers; $i++) {\n  \
    \      $max = $numbers->[$i] if $numbers->[$i] > $max;\n        $result[$i] =\
    \ $max;\n    }\n    return \\@result;\n}", "    my $max = undef;\n    return [map\
    \ {\n        $max = $_ if (!defined($max) || $max < $_);\n        $max;\n    }\
    \ @$numbers];\n}", "    my $rmax = shift @$numbers;\n    my @rmax = ($rmax);\n\
    \    foreach my $n (@$numbers) {\n        $rmax = $n if $n > $rmax;\n        push\
    \ @rmax, $rmax;\n    }\n    return \\@rmax;\n}", "    my @sorted = sort { $b <=>\
    \ $a } @$numbers;\n    my $max = shift @sorted;\n    return [ $max, (map { $max\
    \ = $_ if $_ > $max; $max } @sorted) ];\n}", "    my $max = $numbers->[0];\n \
    \   my @out = ($max);\n    foreach my $i (1 .. $#$numbers) {\n        $max = max($max,\
    \ $numbers->[$i]);\n        push @out, $max;\n    }\n    return \\@out;\n}", " \
    \   my $max = 0;\n    return [map { ($max = $_ > $max ? $_ : $max) } @$numbers];\n\
    }", "    my @maximums = ((undef), @$numbers);\n    for my $idx (0 .. $#$numbers\
    \ - 1) {\n        my $max = $maximums[$idx];\n        my $num = $numbers->[$idx];\n\
    \        $maximums[$idx + 1] = $max > $num ? $max : $num;\n    }\n    return \\\
    @maximums;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
