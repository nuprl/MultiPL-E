name: HumanEval_15_string_sequence
language: pl
prompt: "# Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\n# >>> string_sequence(0)\n# '0'\n# >>> string_sequence(5)\n# '0\
  \ 1 2 3 4 5'\nsub string_sequence {\n    my($n) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&string_sequence;\n\
  \        if(eq_deeply($candidate->(0),\"0\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(3),\"0 1 2 3\"))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(10),\"\
  0 1 2 3 4 5 6 7 8 9 10\")) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n}\n\ntesthumaneval();"
completions: ["    return join(' ', 0..$n);\n}", "    if ($n == 0) {\n        return\
    \ \"0\";\n    } else {\n        return join(\" \", (0..$n));\n    }\n}", "   \
    \ return join ' ', $n..0;\n}", "    return join ' ', 0..$n;\n}", "    return join('\
    \ ', 0..$n);\n}", "    join(' ', (0..$n));\n}", "    join ' ', map { $_ } 0..$n;\n\
    }", "    if($n > 0) {\n        return string_sequence($n-1) . \" $n\";\n    }\
    \ else {\n        return \"0\";\n    }\n}", "    return join ' ', (0..$n);\n}",
  "    my @sequence = (0..$n);\n    my $sequence = join(\" \", @sequence);\n    return\
    \ $sequence;\n}", "    join(\" \", 0..$n);\n}", "    my $result = \"\";\n    for(my\
    \ $i = 0; $i <= $n; $i++) {\n        $result .= $i . \" \";\n    }\n    return\
    \ $result;\n}", "    return $n if $n < 0;\n    return $n if $n == 0;\n    my $ret\
    \ = '';\n    for(my $i = 0; $i <= $n; $i++) {\n        $ret .= \"$i \";\n    }\n\
    \    $ret =~ s/ $//;\n    return $ret;\n}", "    my @l = (0..$n);\n    return\
    \ join(' ', @l);\n}", "    my @s = ();\n    for (my $i = 0; $i <= $n; $i++) {\n\
    \        push @s, $i;\n    }\n    return join ' ', @s;\n}", "    return join('\
    \ ', 0..$n);\n}", "    my $r = '';\n    for (my $i = 0; $i <= $n; $i++) {\n  \
    \      $r .= $i;\n        $r .= ' ' if $i < $n;\n    }\n    return $r;\n}", " \
    \   my @numbers = (0..$n);\n    return join ' ', @numbers;\n}", "    return join('\
    \ ', 0..$n);\n}", "    return join ' ', (0..$n);\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
