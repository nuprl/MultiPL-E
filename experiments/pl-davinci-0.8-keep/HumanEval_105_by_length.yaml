name: HumanEval_105_by_length
language: pl
prompt: "# Given an array of integers, sort the integers that are between 1 and 9\
  \ inclusive,\n# reverse the resulting array, and then replace each digit by its\
  \ corresponding name from\n# \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"\
  Six\", \"Seven\", \"Eight\", \"Nine\".\n# For example:\n# arr = [2, 1, 1, 4, 5,\
  \ 8, 2, 3]   \n# -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n# -> reverse arr -> [8,\
  \ 5, 4, 3, 2, 2, 1, 1]\n# return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
  , \"Two\", \"One\", \"One\"]\n# If the array is empty, return an empty array:\n\
  # arr = []\n# return []\n# If the array has any strange number ignore it:\n# arr\
  \ = [1, -1 , 55] \n# -> sort arr -> [-1, 1, 55]\n# -> reverse arr -> [55, 1, -1]\n\
  # return = ['One']\nsub by_length {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&by_length;\n\
  \        if(eq_deeply($candidate->([2, 1, 1, 4, 5, 8, 2, 3]),[\"Eight\", \"Five\"\
  , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])) {\n        print \"\
  ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([]),[]))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ -1, 55]),[\"One\"])) {\n        print \"ok!\" }else{\n        exit 1;\n      \
  \  }\n        if(eq_deeply($candidate->([1, -1, 3, 2]),[\"Three\", \"Two\", \"One\"\
  ])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([9,\
  \ 4, 8]),[\"Nine\", \"Eight\", \"Four\"])) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    if(@$arr == 0){\n        return [];\n    }\n    my @result = ();\n\
    \    for(my $i = 0; $i < @$arr; $i++){\n        if($arr->[$i] >= 1 && $arr->[$i]\
    \ <= 9){\n            push(@result, $arr->[$i]);\n        }\n    }\n    @result\
    \ = sort {$a <=> $b} @result;\n    my @reverse = reverse @result;\n    my @final_result\
    \ = ();\n    for(my $i = 0; $i < @reverse; $i++){\n        if($reverse[$i] ==\
    \ 1){\n            push(@final_result, \"One\");\n        }\n        elsif($reverse[$i]\
    \ == 2){\n            push(@final_result, \"Two\");\n        }\n        elsif($reverse[$i]\
    \ == 3){\n            push(@final_result, \"Three\");\n        }\n        elsif($reverse[$i]\
    \ == 4){\n            push(@final_result, \"Four\");\n        }\n        elsif($reverse[$i]\
    \ == 5){\n            push(@final_result, \"Five\");\n        }\n        elsif($reverse[$i]\
    \ == 6){\n            push(@final_result, \"Six\");\n        }\n        elsif($reverse[$i]\
    \ == 7){\n            push(@final_result, \"Seven\");\n        }\n        elsif($reverse[$i]\
    \ == 8){\n            push(@final_result, \"Eight\");\n        }\n        elsif($reverse[$i]\
    \ == 9){\n            push(@final_result, \"Nine\");\n        }\n    }\n    return\
    \ \\@final_result;\n}", "    my @nums = sort { length($a) <=> length($b) } @$arr;\n\
    \    return @nums;\n}", "    my $len = scalar @$arr;\n    my $i = 0;\n    while($i\
    \ < $len){\n        my $j = $i + 1;\n        while($j < $len){\n            if(length($arr->[$i])\
    \ > length($arr->[$j])){\n                ($arr->[$i], $arr->[$j]) = ($arr->[$j],\
    \ $arr->[$i]);\n            }\n            $j++;\n        }\n        $i++;\n \
    \   }\n    return $arr;\n}", "    \n    my @alphabet = ('one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n    my @out;\n    my @tmp;\n\
    \    for my $i ( @$arr ){\n\t\tif ( $i < 1 || $i > 9 ){\n\t\t\tnext;\n\t\t}\n\t\
    \tpush @tmp, $i;\n    }\n    @tmp = sort { $a <=> $b } @tmp;\n    for my $i (\
    \ reverse @tmp ){\n\t\tpush @out, $alphabet[$i-1];\n    }\n    return \\@out;\n\
    }", "    my @sorted = sort {$a <=> $b} @$arr;\n    my @reverse = reverse @sorted;\n\
    \    my @convert;\n    my %convert = (\n        1 => \"One\",\n        2 => \"\
    Two\",\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\"\
    ,\n        6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n \
    \       9 => \"Nine\",\n    );\n    for my $i (@reverse) {\n        if ($i < 1\
    \ || $i > 9) {\n            next;\n        }\n        push @convert, $convert{$i};\n\
    \    }\n    return \\@convert;\n}", "    if (@$arr == 0) {\n        return [];\n\
    \    }\n    my @num_arr = grep {$_ >= 1 && $_ <= 9} @$arr;\n    my @str_arr =\
    \ map {$_ eq '1' ? 'One' :\n                    $_ eq '2' ? 'Two' :\n        \
    \            $_ eq '3' ? 'Three' :\n                    $_ eq '4' ? 'Four' :\n\
    \                    $_ eq '5' ? 'Five' :\n                    $_ eq '6' ? 'Six'\
    \ :\n                    $_ eq '7' ? 'Seven' :\n                    $_ eq '8'\
    \ ? 'Eight' :\n                    $_ eq '9' ? 'Nine' :\n                    die\
    \ \"unexpected number $_\"\n                } @num_arr;\n    return \\@str_arr;\n\
    }", "    return [ sort {length($a) <=> length($b)} @$arr ];\n}", "    return []\
    \ if (@$arr == 0);\n    my @res;\n    foreach my $i (@$arr) {\n        if ($i\
    \ == 1) {\n            push @res, \"One\";\n        } elsif ($i == 2) {\n    \
    \        push @res, \"Two\";\n        } elsif ($i == 3) {\n            push @res,\
    \ \"Three\";\n        } elsif ($i == 4) {\n            push @res, \"Four\";\n\
    \        } elsif ($i == 5) {\n            push @res, \"Five\";\n        } elsif\
    \ ($i == 6) {\n            push @res, \"Six\";\n        } elsif ($i == 7) {\n\
    \            push @res, \"Seven\";\n        } elsif ($i == 8) {\n            push\
    \ @res, \"Eight\";\n        } elsif ($i == 9) {\n            push @res, \"Nine\"\
    ;\n        }\n    }\n    return @res;\n}", "    my @sorted;\n    my @result;\n\
    \    for my $i (0..$#{$arr}) {\n        if ($arr->[$i] > 0 && $arr->[$i] < 10)\
    \ {\n            push @sorted, $arr->[$i];\n        }\n    }\n    @sorted = sort\
    \ {$a <=> $b} @sorted;\n    @sorted = reverse @sorted;\n    for my $i (0..$#sorted)\
    \ {\n        if ($sorted[$i] == 1) {\n            push @result, \"One\";\n   \
    \     } elsif ($sorted[$i] == 2) {\n            push @result, \"Two\";\n     \
    \   } elsif ($sorted[$i] == 3) {\n            push @result, \"Three\";\n     \
    \   } elsif ($sorted[$i] == 4) {\n            push @result, \"Four\";\n      \
    \  } elsif ($sorted[$i] == 5) {\n            push @result, \"Five\";\n       \
    \ } elsif ($sorted[$i] == 6) {\n            push @result, \"Six\";\n        }\
    \ elsif ($sorted[$i] == 7) {\n            push @result, \"Seven\";\n        }\
    \ elsif ($sorted[$i] == 8) {\n            push @result, \"Eight\";\n        }\
    \ elsif ($sorted[$i] == 9) {\n            push @result, \"Nine\";\n        }\n\
    \    }\n    return @result;\n}", "    return [] if !@$arr;\n    my %map = qw(0\
    \ Zero 1 One 2 Two 3 Three 4 Four 5 Five 6 Six 7 Seven 8 Eight 9 Nine);\n    return\
    \ [ map { $map{$_} } reverse sort { $a <=> $b } grep { $_ >= 0 && $_ <= 9 } @$arr\
    \ ];\n}", "    @$arr = sort { $a <=> $b } @$arr;\n    @$arr = reverse @$arr;\n\
    \    for (my $i = 0; $i < @$arr; $i++) {\n        given ($$arr[$i]) {\n      \
    \      when (1) { $$arr[$i] = \"One\"; }\n            when (2) { $$arr[$i] = \"\
    Two\"; }\n            when (3) { $$arr[$i] = \"Three\"; }\n            when (4)\
    \ { $$arr[$i] = \"Four\"; }\n            when (5) { $$arr[$i] = \"Five\"; }\n\
    \            when (6) { $$arr[$i] = \"Six\"; }\n            when (7) { $$arr[$i]\
    \ = \"Seven\"; }\n            when (8) { $$arr[$i] = \"Eight\"; }\n          \
    \  when (9) { $$arr[$i] = \"Nine\"; }\n            default { }\n        }\n  \
    \  }\n    return @$arr;\n}", "    my %hash = ( \"One\" => 1, \"Two\" => 2, \"\
    Three\" => 3, \"Four\" => 4, \"Five\" => 5, \"Six\" => 6, \"Seven\" => 7, \"Eight\"\
    \ => 8, \"Nine\" => 9 );\n    my @array = ();\n    for my $item ( @$arr ) {\n\
    \        if ( $item >= 1 && $item <= 9 ) {\n            push @array, $item;\n\
    \        }\n    }\n    my @new_array = ();\n    for my $item ( @array ) {\n  \
    \      push @new_array, $hash{$item};\n    }\n    @new_array = sort { $a <=> $b\
    \ } @new_array;\n    @new_array = reverse @new_array;\n    my @result = ();\n\
    \    for my $key ( keys %hash ) {\n        for my $item ( @new_array ) {\n   \
    \         if ( $hash{$key} == $item ) {\n                push @result, $key;\n\
    \            }\n        }\n    }\n    return @result;\n}", "    my @arr_words\
    \ = ();\n    my @arr_not_num = ();\n    foreach my $num (@$arr) {\n        if\
    \ ($num >= 1 && $num <= 9) {\n            push(@arr_words, $num);\n        } else\
    \ {\n            push(@arr_not_num, $num);\n        }\n    }\n    @arr_words =\
    \ sort {$a <=> $b} @arr_words;\n    @arr_words = reverse @arr_words;\n    my %hash\
    \ = (\n        1 => \"One\",\n        2 => \"Two\",\n        3 => \"Three\",\n\
    \        4 => \"Four\",\n        5 => \"Five\",\n        6 => \"Six\",\n     \
    \   7 => \"Seven\",\n        8 => \"Eight\",\n        9 => \"Nine\"\n    );\n\
    \    my @arr_res = ();\n    foreach my $num (@arr_words) {\n        push(@arr_res,\
    \ $hash{$num});\n    }\n    return \\@arr_res;\n}", "    \n    if ( $#{$arr} >=\
    \ 0 ) {\n        my %h=(1=>\"One\",2=>\"Two\",3=>\"Three\",4=>\"Four\",5=>\"Five\"\
    ,6=>\"Six\",7=>\"Seven\",8=>\"Eight\",9=>\"Nine\");\n        my @aux = grep {\
    \ $_ >= 1 && $_ <= 9 } @{$arr};\n        @aux = sort { $a <=> $b } @aux;\n   \
    \     @aux = reverse @aux;\n        @aux = map { $h{$_} } @aux;\n        return\
    \ @aux;\n    }\n    return [];\n}", "    my @a = split(\"\", $arr);\n    my $size\
    \ = @a;\n    return $size;\n}\nmy @s = sort { by_length($a) <=> by_length($b)\
    \ } (@arr);\nprint @s;", "    my @result;\n    my @sub_arr = grep {$_ >= 1 &&\
    \ $_ <= 9} @$arr;\n    #print join(\", \", @sub_arr) . \"\\n\";\n    if (scalar\
    \ @sub_arr == 0) {\n        return @result;\n    }\n    @sub_arr = sort {$a <=>\
    \ $b} @sub_arr;\n    @sub_arr = reverse @sub_arr;\n    #print join(\", \", @sub_arr)\
    \ . \"\\n\";\n    my %dict = (1 => \"One\", 2 => \"Two\", 3 => \"Three\", 4 =>\
    \ \"Four\", 5 => \"Five\", 6 => \"Six\", 7 => \"Seven\", 8 => \"Eight\", 9 =>\
    \ \"Nine\");\n    for my $num (@sub_arr) {\n        if (exists $dict{$num}) {\n\
    \            push @result, $dict{$num};\n        }\n    }\n    return @result;\n\
    }", "    my @result;\n    my %sort;\n    my @digits = (1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9);\n    foreach (@$arr) {\n        foreach (@digits) {\n            if ($_\
    \ == $_[0]) {\n                $sort{$_} = join '', @$arr;\n            }\n  \
    \      }\n    }\n    foreach (sort { $sort{$b} <=> $sort{$a} } keys %sort) {\n\
    \        @result = join '', map { ['One', 'Two', 'Three', 'Four', 'Five', 'Six',\
    \ 'Seven', 'Eight', 'Nine'][$_ - 1] } sort { $b <=> $a } @$arr;\n    }\n    return\
    \ @result;\n}", "    @$arr = sort { $a <=> $b } grep { $_ > 0 && $_ < 10 } @$arr;\n\
    \    @$arr = reverse @$arr;\n    @$arr = map { $words[$_] } @$arr;\n    return\
    \ $arr;\n}", "    my @res;\n    for my $i (@$arr) {\n        if ($i > 0 && $i\
    \ < 10) {\n            push @res, $i;\n        }\n    }\n    return sort {$a <=>\
    \ $b} @res;\n}", "    my %dict = (\n        1 => \"One\",\n        2 => \"Two\"\
    ,\n        3 => \"Three\",\n        4 => \"Four\",\n        5 => \"Five\",\n \
    \       6 => \"Six\",\n        7 => \"Seven\",\n        8 => \"Eight\",\n    \
    \    9 => \"Nine\"\n    );\n    my @sorted = grep {$_ > 0 and $_ < 10} sort {$a\
    \ <=> $b} @$arr;\n    return [map { $dict{$_} } reverse @sorted];\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
