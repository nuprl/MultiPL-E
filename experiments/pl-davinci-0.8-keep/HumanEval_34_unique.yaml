name: HumanEval_34_unique
language: pl
prompt: "# Return sorted unique elements in a list\n# >>> unique([5, 3, 5, 2, 3, 3,\
  \ 9, 0, 123])\n# [0, 2, 3, 5, 9, 123]\nsub unique {\n    my($l) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&unique;\n\
  \        if(eq_deeply($candidate->([5, 3, 5, 2, 3, 3, 9, 0, 123]),[0, 2, 3, 5, 9,\
  \ 123])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my %seen;\n    grep { !$seen{$_}++ } @$l;\n}", "    my %h;\n  \
    \  foreach my $e (@$l) {\n        $h{$e} = 1;\n    }\n    return sort keys %h;\n\
    }", "    my(%u);\n    map($u{$_} = 1, @$l);\n    return sort keys %u;\n}", " \
    \   my(%h, @a);\n    foreach (@$l) {\n        $h{$_}++;\n    }\n    foreach (sort\
    \ keys %h) {\n        push(@a, $_);\n    }\n    return @a;\n}", "    my(%h, @ret);\n\
    \    foreach (@$l) { $h{$_} = 1; }\n    @ret = sort { $a <=> $b } keys %h;\n \
    \   return @ret;\n}", "    my %seen;\n    grep { !$seen{$_}++ } @$l;\n}", "  \
    \  my %h;\n    @h{@$l} = ();\n    return [sort keys %h];\n}", "    my(%seen) =\
    \ ();\n    my(@ret) = ();\n    map { $seen{$_} = 1 } @$l;\n    foreach (sort(keys(%seen)))\
    \ {\n        push(@ret, $_);\n    }\n    return @ret;\n}", "    my %s;\n    return\
    \ grep { !$s{$_}++ } @$l;\n}", "    my @a = sort(keys %{{map {$_ => 1} @$l}});\n\
    \    return @a;\n}", "    my %h;\n    foreach (@$l) {\n        $h{$_} = 1;\n \
    \   }\n    my @result = sort { $a <=> $b } keys %h;\n    return \\@result;\n}",
  "    return sort(uniq(@$l));\n}", "    my %h;\n    map {$h{$_} = 1} @$l;\n    [sort\
    \ {$a <=> $b} keys %h];\n}", "    my %uniq;\n    @uniq{@$l} = ();\n    return\
    \ sort {$a <=> $b} keys %uniq;\n}", "    my $found = {};\n    my @ret;\n    foreach\
    \ my $el (@$l) {\n        if(!exists $found->{$el}) {\n            push @ret,\
    \ $el;\n            $found->{$el} = 1;\n        }\n    }\n    return \\@ret;\n\
    }", "    my %s;\n    my @u;\n    @s{@$l} = 1;\n    @u = sort keys %s;\n    return\
    \ @u;\n}", "    my %seen;\n    grep !$seen{$_}++, @$l;\n}", "    my(%h, $i, @u);\n\
    \    for $i (@$l) { $h{$i} = 1; }\n    @u = sort { $a <=> $b } keys %h;\n    return\
    \ wantarray ? @u : \\@u;\n}", "    my %s;\n    foreach (@$l) {\n        $s{$_}\
    \ = 1;\n    }\n    return sort keys %s;\n}", "    my %h;\n    map { $h{$_} = 1\
    \ } @$l;\n    sort { $a <=> $b } keys %h;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
