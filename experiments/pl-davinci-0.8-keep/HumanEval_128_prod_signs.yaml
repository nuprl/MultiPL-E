name: HumanEval_128_prod_signs
language: pl
prompt: "# You are given an array arr of integers and you need to return\n# sum of\
  \ magnitudes of integers multiplied by product of all signs\n# of each number in\
  \ the array, represented by 1, -1 or 0.\n# Note: return None for empty arr.\n# Example:\n\
  # >>> prod_signs([1, 2, 2, -4]) == -9\n# >>> prod_signs([0, 1]) == 0\n# >>> prod_signs([])\
  \ == None\nsub prod_signs {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&prod_signs;\n\
  \        if(eq_deeply($candidate->([1, 2, 2, -4]),-9)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0, 1]),0))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 1, 1, 2, 3, -1, 1]),-10)) {\n        print \"ok!\" }else{\n        exit 1;\n \
  \       }\n        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 1,\
  \ 2, -1, -1, 9]),20)) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([-1, 1, -1, 1]),4)) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([-1, 1,\
  \ 1, 1]),-4)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([-1, 1, 1, 0]),0)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return undef unless defined $arr;\n    my $sum = 0;\n    my $prod\
    \ = 1;\n    for my $num (@$arr) {\n        $prod *= $num <=> 0;\n        $sum\
    \ += abs($num);\n    }\n    return $sum * $prod;\n}", "    return undef unless\
    \ defined $arr;\n    my($product) = 1;\n    my($sum) = 0;\n    foreach my $i (@$arr)\
    \ {\n        if ($i == 0) {\n            next;\n        } elsif ($i > 0) {\n \
    \           $product *= 1;\n        } else {\n            $product *= -1;\n  \
    \      }\n        $sum += abs($i);\n    }\n    return $sum * $product;\n}", " \
    \   my $res = 1;\n    my $sum = 0;\n    foreach my $n (@$arr) {\n        $res\
    \ *= ($n == 0 ? 0 : $n < 0 ? -1 : 1);\n        $sum += abs($n);\n    }\n    return\
    \ ($res == 0) ? 0 : $res * $sum;\n}", "    return unless @$arr;\n    my $product\
    \ = 1;\n    my $magnitudes = 0;\n    for my $num (@$arr) {\n        if ($num >\
    \ 0) {\n            $product *= 1;\n            $magnitudes += $num;\n       \
    \ } elsif ($num < 0) {\n            $product *= -1;\n            $magnitudes +=\
    \ -$num;\n        } else {\n            $product *= 0;\n        }\n    }\n   \
    \ return $magnitudes * $product;\n}", "    return undef unless @$arr;\n    my($p)\
    \ = 1;\n    for my $v (@$arr) {\n        my($sign) = $v ? ($v > 0 ? 1 : -1) :\
    \ 0;\n        $p *= $sign;\n    }\n    my($sum) = 0;\n    for my $v (@$arr) {\n\
    \        $sum += abs($v);\n    }\n    return $sum * $p;\n}", "    my($prod) =\
    \ 0;\n    my($sum) = 0;\n    foreach (@$arr) {\n        if ($_ > 0) {\n      \
    \      $prod += 1;\n        } elsif ($_ < 0) {\n            $prod -= 1;\n    \
    \    } else {\n            $prod = 0;\n        }\n        $sum += abs($_);\n \
    \   }\n    if ($prod == 0) {\n        return $prod;\n    }\n    return $sum *\
    \ $prod;\n}", "    # your code here\n}", "    return if $#{$arr} < 0;\n    my\
    \ $sign = 1;\n    my $sum = 0;\n    for(@{$arr}) {\n        $sign *= 0 if $_ ==\
    \ 0;\n        $sign *= -1 if $_ < 0;\n        $sum += abs($_);\n    }\n    return\
    \ $sum * $sign;\n}", "    my $sign_prod = 1;\n    my $magnitude_sum = 0;\n   \
    \ foreach (@$arr) {\n        my $sign = $_ <=> 0;\n        my $abs = abs($_);\n\
    \        if ($sign != 0) {\n            $sign_prod *= $sign;\n        }\n    \
    \    $magnitude_sum += $abs;\n    }\n    return defined($arr) ? $sign_prod * $magnitude_sum\
    \ : undef;\n}", "    my $prod = 0;\n    my $sum = 0;\n    foreach (@$arr) {\n\
    \        if ($_ == 0) {\n            $prod = 0;\n            last;\n        }\n\
    \        elsif ($_ > 0) {\n            $prod++;\n        }\n        else {\n \
    \           $prod--;\n        }\n        $sum += abs($_);\n    }\n    return ($prod\
    \ * $sum);\n}", "    my $result = 1;\n    foreach my $num (@$arr) {\n        $result\
    \ *= _sign($num);\n    }\n    my $final_sum = 0;\n    foreach my $num (@$arr)\
    \ {\n        $final_sum += abs($num);\n    }\n    return $result * $final_sum;\n\
    }", "    my $s = 1;\n    my $sums = 0;\n    for my $val (@$arr) {\n        if\
    \ ($val < 0) {\n            $s *= -1;\n        } elsif ($val > 0) {\n        \
    \    $sums += $val;\n        }\n    }\n    return $s*$sums;\n}", "    return undef\
    \ unless scalar @$arr;\n    my $sum = 0;\n    my $prod = 1;\n    for my $e (@$arr)\
    \ {\n        if ($e < 0) {\n            $sum += $e * -1;\n            $prod *=\
    \ -1;\n        } elsif ($e > 0) {\n            $sum += $e;\n        } else {\n\
    \            $prod = 0;\n        }\n    }\n    return $sum * $prod;\n}", "   \
    \ my($sum, $prod) = (0, 1);\n    foreach my $val (@$arr) {\n        if($val <\
    \ 0) {\n            $sum += -$val;\n            $prod *= -1;\n        } elsif($val\
    \ > 0) {\n            $sum += $val;\n            $prod *= 1;\n        } else {\n\
    \            $prod *= 0;\n        }\n    }\n    if(!@$arr) {\n        return undef;\n\
    \    }\n    return $sum * $prod;\n}", "    # your code here\n}", "    my $tmp\
    \ = 1;\n    my $tmp2 = 0;\n    foreach (@$arr) {\n        if ($_ != 0) {\n   \
    \         $tmp *= $_ / abs($_);\n            $tmp2 += abs($_);\n        }\n  \
    \  }\n    if (@$arr) {\n        return $tmp * $tmp2;\n    } else {\n        return\
    \ undef;\n    }\n}", "    my $prod = 1;\n    my $sum = 0;\n    foreach (@$arr)\
    \ {\n        my $sign = $_ ? $_ > 0 ? 1 : -1 : 0;\n        $prod *= $sign;\n \
    \       $sum += abs($_);\n    }\n    return !@$arr ? undef : $prod * $sum;\n}",
  "    if (!$arr || ref($arr) ne 'ARRAY') {\n        return;\n    }\n    if (!@$arr)\
    \ {\n        return;\n    }\n    my $s = 1;\n    my $n = 0;\n    for my $i (@$arr)\
    \ {\n        if ($i < 0) {\n            $s *= -1;\n        }\n        $n += abs($i);\n\
    \    }\n    return $s * $n;\n}", "    return undef unless @$arr;\n    my $prod\
    \ = 0;\n    foreach (@$arr) {\n        $prod += abs($_) * ($_ > 0 ? 1 : $_ < 0\
    \ ? -1 : 0);\n    }\n    return $prod;\n}", "    my $sum = 0;\n    my $prod =\
    \ 1;\n    return unless defined $arr;\n    foreach my $val (@$arr) {\n       \
    \ next if $val == 0;\n        $prod *= ($val / abs($val));\n        $sum += abs($val);\n\
    \    }\n    return $sum * $prod;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
