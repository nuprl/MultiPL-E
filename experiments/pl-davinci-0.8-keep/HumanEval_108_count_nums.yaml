name: HumanEval_108_count_nums
language: pl
prompt: "# Write a function count_nums which takes an array of integers and returns\n\
  # the number of elements which has a sum of digits > 0.\n# If a number is negative,\
  \ then its first signed digit will be negative:\n# e.g. -123 has signed digits -1,\
  \ 2, and 3.\n# >>> count_nums([]) == 0\n# >>> count_nums([-1, 11, -11]) == 1\n#\
  \ >>> count_nums([1, 1, 2]) == 3\nsub count_nums {\n    my($arr) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&count_nums;\n\
  \        if(eq_deeply($candidate->([]),0)) {\n        print \"ok!\" }else{\n   \
  \     exit 1;\n        }\n        if(eq_deeply($candidate->([-1, -2, 0]),0)) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 1, 2, -2, 3, 4, 5]),6)) {\n        print \"ok!\" }else{\n        exit 1;\n   \
  \     }\n        if(eq_deeply($candidate->([1, 6, 9, -6, 0, 1, 5]),5)) {\n     \
  \   print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1,\
  \ 100, 98, -7, 1, -1]),4)) {\n        print \"ok!\" }else{\n        exit 1;\n  \
  \      }\n        if(eq_deeply($candidate->([12, 23, 34, -45, -56, 0]),5)) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([0,\
  \ 1]),1)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([1]),1))\
  \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my @signed = map {/^\\-/ ? \"$_\" : \"+$_\"} @$arr;\n    # return\
    \ sum of digits in a number, or zero if not a number\n    my $sum_digits = sub\
    \ {\n        my($str) = @_;\n        my @digits = split(//, $str);\n        return\
    \ 0 unless @digits;\n        return 0 if $digits[0] =~ /\\D/;\n        # remove\
    \ first digit which is the sign\n        shift @digits;\n        return sum(@digits);\n\
    \    };\n    return 0 unless @signed;\n    return sum(map {$sum_digits->($_)}\
    \ @signed);\n}", "    # YOUR CODE HERE\n}", "    my $ret = 0;\n    foreach my\
    \ $num (@$arr) {\n        my $sum = 0;\n        $sum += $num % 10 while $num >\
    \ 0;\n        $ret++ if $sum > 0;\n    }\n    return $ret;\n}", "    my $res =\
    \ 0;\n    for my $el (@$arr) {\n        $res += abs($el) % 10;\n        $el /=\
    \ 10;\n        while ($el > 0) {\n            $res += $el % 10;\n            $el\
    \ /= 10;\n        }\n    }\n    return $res;\n}", "    my $cnt = 0;\n    foreach\
    \ my $num (@$arr) {\n        my $sum = sum_digits($num);\n        $cnt++ if $sum\
    \ > 0;\n    }\n    return $cnt;\n}", "    my $ret = 0;\n    foreach (@$arr) {\n\
    \        if ($_ < 0) {\n            $ret++ if $_ < -9;\n        } else {\n   \
    \         $ret++ if $_ > 9;\n        }\n    }\n    return $ret;\n}", "    ##########################################################################\n\
    \    # REPLACE THE BODY OF THIS FUNCTION WITH YOUR OWN IMPLEMENTATION.\n    ##########################################################################\n\
    \    return 0;\n}", "    my $count = 0;\n    foreach my $num (@$arr) {\n     \
    \   if (sum_of_digits($num) > 0) {\n            $count++;\n        }\n    }\n\
    \    return $count;\n}", "    my $count = 0;\n    for my $i (@$arr) {\n      \
    \  if($i > 0) {\n            my $sum = 0;\n            my $num = $i;\n       \
    \     while($num > 0) {\n                $sum += $num % 10;\n                $num\
    \ = int($num / 10);\n            }\n            $count++ if $sum > 0;\n      \
    \  }\n        elsif($i < 0) {\n            my $sum = 0;\n            my $num =\
    \ -$i;\n            while($num > 0) {\n                $sum += $num % 10;\n  \
    \              $num = int($num / 10);\n            }\n            $count++ if\
    \ $sum < 0;\n        }\n    }\n    return $count;\n}", "    my $count = 0;\n \
    \   foreach my $n (@$arr) {\n        my $sum = 0;\n        $sum += $_ for abs($n)\
    \ =~ /(\\d)/g;\n        $count++ if $sum > 0;\n    }\n    return $count;\n}",
  "    my $counter = 0;\n    foreach my $num (@$arr) {\n        $counter++ if $num\
    \ > 0 || $num < 0;\n    }\n    return $counter;\n}", "    my $count = 0;\n   \
    \ foreach my $i (@$arr) {\n        $count += ($i =~ tr/\\-\\d//);\n    }\n   \
    \ return $count;\n}", "    my $ans = 0;\n    for my $a (@$arr) {\n        my $n\
    \ = abs($a);\n        my $sum = 0;\n        while ($n) {\n            $sum +=\
    \ $n % 10;\n            $n /= 10;\n        }\n        $ans++ if $sum;\n    }\n\
    \    return $ans;\n}", "    my $count = 0;\n    foreach my $i (@$arr) {\n    \
    \    my $sum = 0;\n        if ($i < 0) {\n            $sum = -1 * substr($i, 0,\
    \ 1);\n            my $digits = substr($i, 1);\n            while (length($digits)\
    \ > 0) {\n                $sum += substr($digits, 0, 1);\n                $digits\
    \ = substr($digits, 1);\n            }\n        } else {\n            while ($i\
    \ > 0) {\n                $sum += $i % 10;\n                $i = int($i / 10);\n\
    \            }\n        }\n        if ($sum > 0) {\n            $count++;\n  \
    \      }\n    }\n    return $count;\n}", "    my $count = 0;\n    foreach(@$arr)\
    \ {\n        if(sum_signed_digits($_) > 0) {\n            $count++;\n        }\n\
    \    }\n    return $count;\n}", "    return 0 unless @$arr;\n    my @res = grep\
    \ { $_ > 0 } map { abs($_) =~ tr/0-9// } @$arr;\n    return @res;\n}", "    return\
    \ 0 unless @$arr;\n    return grep { sum(abs($_)) > 0 } @$arr;\n}", "    my $rv\
    \ = 0;\n    foreach my $n (@$arr) {\n        my $abs = abs($n);\n        while\
    \ ($abs > 0) {\n            $rv += $abs % 10;\n            $abs /= 10;\n     \
    \   }\n    }\n    return $rv;\n}", "    my $n = 0;\n    $n += (($_ > 0 ? $_ :\
    \ -$_) % 10) + (($_ > 0 ? $_ : -$_) / 10) for (@$arr);\n    $n;\n}", "    my $num\
    \ = 0;\n    foreach(@$arr){\n        if($_ < 0){\n            $num += abs($_);\n\
    \        }\n        elsif($_ >= 0){\n            $num += $_;\n        }\n    }\n\
    \    return $num;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
