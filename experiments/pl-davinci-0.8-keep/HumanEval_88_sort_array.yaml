name: HumanEval_88_sort_array
language: pl
prompt: "# Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n# you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n# or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n# Note:\n# * don't\
  \ change the given array.\n# Examples:\n# * sort_array([]) => []\n# * sort_array([5])\
  \ => [5]\n# * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n# * sort_array([2,\
  \ 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\nsub sort_array {\n    my($array)\
  \ = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&sort_array;\n\
  \        if(eq_deeply($candidate->([]),[])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([5]),[5])) {\n    \
  \    print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([2,\
  \ 4, 3, 0, 1, 5]),[0, 1, 2, 3, 4, 5])) {\n        print \"ok!\" }else{\n       \
  \ exit 1;\n        }\n        if(eq_deeply($candidate->([2, 4, 3, 0, 1, 5, 6]),[6,\
  \ 5, 4, 3, 2, 1, 0])) {\n        print \"ok!\" }else{\n        exit 1;\n       \
  \ }\n        if(eq_deeply($candidate->([2, 1]),[1, 2])) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([15, 42,\
  \ 87, 32, 11, 0]),[0, 11, 15, 32, 42, 87])) {\n        print \"ok!\" }else{\n  \
  \      exit 1;\n        }\n        if(eq_deeply($candidate->([21, 14, 23, 11]),[23,\
  \ 21, 14, 11])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    return [];\n}", "    my @sorted = ();\n    @sorted = sort {$a <=>\
    \ $b} @$array;\n    if(($sorted[0] + $sorted[-1]) % 2 == 0) {\n        @sorted\
    \ = reverse @sorted;\n    }\n    return \\@sorted;\n}", "    # your code here\n\
    \    $array = [] if not @$array;\n    if (($$array[0] + $$array[-1]) % 2 == 0)\
    \ {\n        return [sort {$b <=> $a} @$array];\n    }\n    else {\n        return\
    \ [sort {$a <=> $b} @$array];\n    }\n}", "    if(($array->[0] + $array->[-1])\
    \ % 2 == 0) {\n        return [ sort { $b <=> $a } @$array ];\n    } else {\n\
    \        return [ sort { $a <=> $b } @$array ];\n    }\n}", "    my($first_index_value,\
    \ $last_index_value) = @$array[0, -1];\n    my $sum = $first_index_value + $last_index_value;\n\
    \    my $is_sum_odd = $sum % 2;\n    if ($is_sum_odd) {\n        @$array = sort\
    \ { $a <=> $b } @$array;\n    } else {\n        @$array = sort { $b <=> $a } @$array;\n\
    \    }\n    return $array;\n}", "    my @result = sort { $a <=> $b } @$array;\n\
    \    if(@$array && $array->[0] % 2){\n        @result = reverse @result;\n   \
    \ }\n    return \\@result;\n}", "    my @result = @$array;\n    if ($result[0]\
    \ + $result[-1] % 2) {\n        @result = sort { $a <=> $b } @result;\n    } else\
    \ {\n        @result = sort { $b <=> $a } @result;\n    }\n    return \\@result;\n\
    }", "    my $sum = $array->[0] + $array->[-1];\n    if($sum % 2 == 0) {\n    \
    \    return sort {$b <=> $a} @$array;\n    }\n    else {\n        return sort\
    \ {$a <=> $b} @$array;\n    }\n}", "    if (scalar @$array < 2) {\n        return\
    \ $array;\n    }", "    my $sum = $array->[0] + $array->[-1];\n    return $array\
    \ if $sum % 2 == 0;\n    return [sort {$b <=> $a} @$array];\n}", "    my @a =\
    \ @$array;\n    my $len = scalar @a;\n    my $sum = 0;\n    if($len == 0) {\n\
    \        return [];\n    }\n    if($len == 1) {\n        return [$a[0]];\n   \
    \ }\n    $sum = $a[0] + $a[$len - 1];\n    my @res = ();\n    if(($sum % 2) ==\
    \ 0) {\n        @res = sort {$b <=> $a} @a;\n    } else {\n        @res = sort\
    \ {$a <=> $b} @a;\n    }\n    return \\@res;\n}", "    my @newArray = sort {$a\
    \ <=> $b} @$array;\n    if (@$array[0] + @$array[$#{$array}] % 2 == 0) {\n   \
    \     @newArray = reverse @newArray;\n    }\n    return @newArray;\n}", "    #\
    \ TODO: implement me!\n    my $sum = $array->[0] + $array->[-1];\n    my @results;\n\
    \    if ($sum % 2 == 0) {\n        @results = sort {$b <=> $a} @$array;\n    }\n\
    \    else {\n        @results = sort {$a <=> $b} @$array;\n    }\n    return \\\
    @results;\n}", "    my @sorted = $array->[0] + $array->[$#$array] % 2\n      \
    \  ? sort @$array\n        : sort { $b <=> $a } @$array;\n    return \\@sorted;\n\
    }", "    my $len = scalar @$array;\n    if ($len < 2) {\n        return $array;\n\
    \    }\n    my @odds = grep { $_ % 2 } @$array;\n    my @evens = grep { $_ % 2\
    \ == 0 } @$array;\n    if (($array->[0] + $array->[-1]) % 2) {\n        @odds\
    \ = sort { $a <=> $b } @odds;\n        @evens = sort { $b <=> $a } @evens;\n \
    \   } else {\n        @odds = sort { $b <=> $a } @odds;\n        @evens = sort\
    \ { $a <=> $b } @evens;\n    }\n    my @new_array;\n    my $idx = 0;\n    while\
    \ (@odds) {\n        push @new_array, shift @odds;\n        push @new_array, shift\
    \ @evens if (@evens);\n    }\n    push @new_array, @evens;\n    return \\@new_array;\n\
    }", "    my @sorted = sort {$a <=> $b} @$array;\n    return $array->[0] + $array->[-1]\
    \ % 2 ? [@sorted] : [reverse @sorted];\n}", "    my $sum_idx = $array->[0] + $array->[$#$array];\n\
    \    return $array unless $#$array;\n    if($sum_idx % 2){\n        return [sort\
    \ {$a <=> $b} @$array];\n    }else{\n        return [sort {$b <=> $a} @$array];\n\
    \    }\n}", "    return $array if scalar @$array < 2;\n    my $sum = $array->[0]\
    \ + $array->[-1];\n    $sum % 2 ? $array = [sort {$a <=> $b} @$array] : $array\
    \ = [sort {$b <=> $a} @$array];\n    return $array;\n}", "    my $len = scalar\
    \ @$array;\n    my $first = $array->[0];\n    my $last = $array->[$len - 1];\n\
    \    if(($first + $last) % 2 != 0){\n        @$array = sort {$a <=> $b} @$array;\n\
    \    }else{\n        @$array = sort {$b <=> $a} @$array;\n    }\n    return $array;\n\
    }", "    if ( ( $array->[0] + $array->[-1] ) % 2 == 0 ) {\n        return sort\
    \ { $b <=> $a } @$array;\n    }\n    else {\n        return sort { $a <=> $b }\
    \ @$array;\n    }\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
