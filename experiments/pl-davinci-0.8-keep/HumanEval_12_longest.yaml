name: HumanEval_12_longest
language: pl
prompt: "# Out of list of strings, return the longest one. Return the first one in\
  \ case of multiple\n# strings of the same length. Return None in case the input\
  \ list is empty.\n# >>> longest([])\n# >>> longest(['a', 'b', 'c'])\n# 'a'\n# >>>\
  \ longest(['a', 'bb', 'ccc'])\n# 'ccc'\nsub longest {\n    my($strings) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&longest;\n\
  \        if(eq_deeply($candidate->([]),undef)) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"x\", \"y\", \"\
  z\"]),\"x\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
  \    if(eq_deeply($candidate->([\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"\
  abc\"]),\"zzzz\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my $longest = undef;\n    my $max = -1;\n    for my $string (@$strings)\
    \ {\n        if (length($string) > $max) {\n            $longest = $string;\n\
    \            $max = length($string);\n        }\n    }\n    return $longest;\n\
    }", "    my $result = 0;\n    my $index = 0;\n    for (my $i = 0; $i < scalar\
    \ @$strings; $i++) {\n        if (length($strings->[$i]) > $result) {\n      \
    \      $result = length($strings->[$i]);\n            $index = $i;\n        }\n\
    \    }\n    return $strings->[$index];\n}", "    my $longest = undef;\n    foreach\
    \ my $string (@$strings) {\n        if(!defined($longest) || length($string) >\
    \ length($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}", "    return undef unless defined $strings;\n    my $longest\
    \ = undef;\n    my $longest_len = 0;\n    for my $str (@$strings) {\n        if(defined\
    \ $str) {\n            my $len = length($str);\n            if($len > $longest_len)\
    \ {\n                $longest = $str;\n                $longest_len = $len;\n\
    \            }\n        }\n    }\n    return $longest;\n}", "    my $max_len =\
    \ 0;\n    my $longest_string = undef;\n    for my $string (@$strings) {\n    \
    \    if (length($string) > $max_len) {\n            $max_len = length($string);\n\
    \            $longest_string = $string;\n        }\n    }\n    return $longest_string;\n\
    }", "    my $result = undef;\n    my $maxlen = 0;\n    for my $s (@$strings) {\n\
    \        if(!defined($result) || length($s) > $maxlen) {\n            $result\
    \ = $s;\n            $maxlen = length($s);\n        }\n    }\n    return $result;\n\
    }", "    if (!defined($strings) || @$strings == 0) {\n        return undef;\n\
    \    }\n    my $longest = $strings->[0];\n    for (my $i = 1; $i < @$strings;\
    \ $i++) {\n        if (length($strings->[$i]) > length($longest)) {\n        \
    \    $longest = $strings->[$i];\n        }\n    }\n    return $longest;\n}", " \
    \   my $max_length = 0;\n    my $longest_string = undef;\n    foreach my $s (@$strings)\
    \ {\n        if (length($s) > $max_length) {\n            $max_length = length($s);\n\
    \            $longest_string = $s;\n        }\n    }\n    return $longest_string;\n\
    }", "    my $longest;\n    foreach my $str (@$strings) {\n        $longest = $str\
    \ if !$longest || length($str) > length($longest);\n    }\n    return $longest;\n\
    }", "    my $longest = undef;\n    my $longest_length = 0;\n    foreach my $string\
    \ (@$strings) {\n        my $length = length($string);\n        if (!defined($longest)\
    \ || $length > $longest_length) {\n            $longest = $string;\n         \
    \   $longest_length = $length;\n        }\n    }\n    return $longest;\n}", " \
    \   my $longest = '';\n    for my $s (@$strings) {\n        $longest = $s if length($s)\
    \ > length($longest);\n    }\n    return $longest;\n}", "    my $result = undef;\n\
    \    foreach my $string (@$strings) {\n        if(!defined($result) || length($string)\
    \ > length($result)) {\n            $result = $string;\n        }\n    }\n   \
    \ return $result;\n}", "    return undef unless scalar @$strings;\n    my $longest_length\
    \ = 0;\n    my $longest_string = undef;\n    for my $string (@$strings) {\n  \
    \      if (length($string) > $longest_length) {\n            $longest_length =\
    \ length($string);\n            $longest_string = $string;\n        }\n    }\n\
    \    return $longest_string;\n}", "    return undef unless @$strings;\n    my($longest)\
    \ = $strings->[0];\n    foreach my $s (@$strings) {\n        if (length($s) >\
    \ length($longest)) {\n            $longest = $s;\n        }\n    }\n    return\
    \ $longest;\n}", "    my $out;\n    foreach my $str (sort @$strings) {\n     \
    \   return $str if !$out || length($str) > length($out);\n        $out = $str;\n\
    \    }\n    return $out;\n}", "    my $longest = undef;\n    my $longest_length\
    \ = 0;\n    foreach my $string (@$strings) {\n        my $length = length($string);\n\
    \        if ($length > $longest_length) {\n            $longest = $string;\n \
    \           $longest_length = $length;\n        }\n    }\n    return $longest;\n\
    }", "    my $longest = undef;\n    my $longest_length = 0;\n    foreach my $string\
    \ (@$strings) {\n        my $length = length($string);\n        if ($length >\
    \ $longest_length) {\n            $longest = $string;\n            $longest_length\
    \ = $length;\n        }\n    }\n    return $longest;\n}", "    my($longest) =\
    \ undef;\n    foreach my $string (@$strings) {\n        $longest = $string if(!defined($longest)\
    \ || (length($string) > length($longest)));\n    }\n    return $longest;\n}",
  "    my $max_length = 0;\n    my $longest = undef;\n    foreach my $string (@$strings)\
    \ {\n        my $length = length($string);\n        if ($length > $max_length)\
    \ {\n            $max_length = $length;\n            $longest = $string;\n   \
    \     }\n    }\n    return $longest;\n}", "    my $longest = undef;\n    foreach\
    \ my $string (@$strings) {\n        if(!defined($longest) || length($string) >\
    \ length($longest)) {\n            $longest = $string;\n        }\n    }\n   \
    \ return $longest;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
