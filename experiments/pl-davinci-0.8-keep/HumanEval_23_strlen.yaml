name: HumanEval_23_strlen
language: pl
prompt: "# Return length of given string\n# >>> strlen('')\n# 0\n# >>> strlen('abc')\n\
  # 3\nsub strlen {\n    my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&strlen;\n\
  \        if(eq_deeply($candidate->(\"\"),0)) {\n        print \"ok!\" }else{\n \
  \       exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),1)) {\n   \
  \     print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  asdasnakj\"),9)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\
  \ntesthumaneval();"
completions: ["    return length($string);\n}", "    return 0 if $string eq '';\n\
    \    return length($string);\n}", "    my($count) = 0;\n    for (my $i = 0; $i\
    \ < length($string); $i++) {\n        $count++;\n    }\n    return $count;\n}",
  "    return CORE::length($string);\n}", "    return length($string);\n}", "    length($string);\n\
    }", "    return length($string);\n}", "    return length($string);\n}", "    return\
    \ length($string);\n}", "    my $len = 0;\n    for(@$string) {\n        $len++;\n\
    \    }\n    return $len;\n}", "    my($length) = 0;\n    if (defined($string))\
    \ {\n        $length = CORE::length($string);\n    }\n    return $length;\n}",
  "    length($string);\n}", "    return length($string);\n}", "    return length($string);\n\
    }", "    return 0 if $string eq '';\n    return length($string);\n}", "    return(length($string));\n\
    }", "    return 0 unless defined $string;\n    return length($string);\n}", " \
    \   return CORE::length($string);\n}", "    my $i = 0;\n    for ($i = 0; defined($string->[$i]);\
    \ $i++) { }\n    return $i;\n}", "    my($count) = 0;\n    $count++ while (substr($string,\
    \ $count, 1));\n    return $count;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
