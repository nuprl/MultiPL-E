name: HumanEval_7_filter_by_substring
language: pl
prompt: "# Filter an input list of strings only for ones that contain given substring\n\
  # >>> filter_by_substring([], 'a')\n# []\n# >>> filter_by_substring(['abc', 'bacd',\
  \ 'cde', 'array'], 'a')\n# ['abc', 'bacd', 'array']\nsub filter_by_substring {\n\
  \    my($strings, $substring) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&filter_by_substring;\n\
  \        if(eq_deeply($candidate->([], \"john\"),[])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->([\"xxx\", \"asd\"\
  , \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\"),[\"xxx\", \"xxxAAA\", \"\
  xxx\"])) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([\"\
  xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xx\"),[\"xxx\"\
  , \"aaaxxy\", \"xxxAAA\", \"xxx\"])) {\n        print \"ok!\" }else{\n        exit\
  \ 1;\n        }\n        if(eq_deeply($candidate->([\"grunt\", \"trumpet\", \"prune\"\
  , \"gruesome\"], \"run\"),[\"grunt\", \"prune\"])) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    return () unless @$strings;\n    return grep { $_ =~ /$substring/\
    \ } @$strings;\n}", "    return grep { /$substring/ } @$strings;\n}", "    return\
    \ unless($strings && @$strings);\n    return [ grep { /$substring/ } @$strings\
    \ ];\n}", "    my @filtered = grep { index($_, $substring) != -1 } @$strings;\n\
    \    return \\@filtered;\n}", "    my @return_list = ();\n    foreach my $element\
    \ (@$strings) {\n        if($element =~ /\\Q$substring\\E/) {\n            push(@return_list,\
    \ $element);\n        }\n    }\n    return @return_list;\n}", "    return grep\
    \ { ($_ =~ /$substring/) } @$strings;\n}", "    return grep { /$substring/ } @$strings;\n\
    }", "    return [] unless(defined($strings) && scalar(@$strings) && defined($substring));\n\
    \    $substring = quotemeta($substring);\n    return [ grep { /$substring/ } @$strings\
    \ ];\n}", "    my @filtered = grep { index($_, $substring) != -1 } @$strings;\n\
    \    return \\@filtered;\n}", "    $substring = quotemeta($substring);\n    return\
    \ grep { $_ =~ /$substring/ } @$strings;\n}", "    return grep { $_ =~ /$substring/\
    \ } @$strings;\n}", "    return [ grep { m/$substring/ } @$strings ];\n}", " \
    \   return [grep(/\\Q$substring\\E/, @$strings)];\n}", "    $substring = quotemeta($substring);\n\
    \    return grep { $_ =~ /$substring/ } @$strings;\n}", "    return grep { index($_,\
    \ $substring) != -1 } @$strings;\n}", "    my @filtered = grep { $_ =~ /$substring/\
    \ } @$strings;\n    return \\@filtered;\n}", "    my @filtered_strings = ();\n\
    \    foreach (@$strings) {\n        push @filtered_strings, $_ if ($_ =~ /$substring/);\n\
    \    }\n    return @filtered_strings;\n}", "    my @filtered_strings = ();\n \
    \   for my $str (@$strings) {\n        if ($str =~ /$substring/) {\n         \
    \   push @filtered_strings, $str;\n        }\n    }\n    return @filtered_strings;\n\
    }", "    return [grep { $_ =~ /$substring/ } @$strings];\n}", "    my @results\
    \ = grep {$_ =~ /$substring/} @$strings;\n    return \\@results;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
