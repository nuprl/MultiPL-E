language: pl
name: HumanEval_85_add
results:
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar @$lst; $i += 2) {\n\
    \        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821387
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    return 0 unless defined $lst;\n    my $ret;\n    for my $i (0..scalar(@$lst)-1)\
    \ {\n        $ret += $lst->[$i] if $i % 2 == 1 && $lst->[$i] % 2 == 0;\n    }\n\
    \    return $ret;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821432
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $res = 0;\n    foreach my $idx (0..scalar(@$lst)-1) {\n      \
    \  $res += $lst->[$idx] if $idx % 2 && !($lst->[$idx] % 2);\n    }\n    return\
    \ $res;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821432
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $i = 0;\n    my $sum = 0;\n    for my $element (@$lst) {\n   \
    \     if ($i % 2 != 0 && $element % 2 == 0) {\n            $sum += $element;\n\
    \        }\n        $i++;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821432
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    $sum += $_ for @$lst[map 2*$_, 0..@$lst/2-1];\n\
    \    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate\
    \ = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    # Good luck!\n    my $sum = 0;\n    for (my $i = 0; $i < scalar @$lst;\
    \ $i+=2) {\n        if ($i % 2 == 1) {\n            $sum += @$lst[$i];\n     \
    \   }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $len = @$lst;\n    my $sum = 0;\n    for (my $i = 0; $i < $len;\
    \ $i += 2) {\n        $sum += $lst->[$i];\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $s = 0;\n    for (my $i = 1; $i < scalar @$lst; $i += 2) {\n \
    \       $s += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $s;\n}\nuse\
    \ Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821432
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    for(my $i = 1; $i < scalar(@$lst); $i+=2) {\n \
    \       $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821387
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar @$lst; $i += 2) {\n\
    \        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821387
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my @lst = @$lst;\n    my $sum = 0;\n    for(my $i = 0; $i < scalar\
    \ @lst; $i++) {\n        $sum += $lst[$i] if ($i % 2 != 0) && ($lst[$i] % 2 ==\
    \ 0);\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n\
    \    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821432
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $sum;\n    for (my $i = 0; $i < scalar @$lst; $i += 2) {\n   \
    \     $sum += $lst->[$i];\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub\
    \ testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    for(my $i = 1; $i < scalar(@$lst); $i += 2) {\n\
    \        if($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n        }\n\
    \    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my\
    \ $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n  \
    \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821387
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar @$lst; $i += 2) {\n\
    \        if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n       \
    \ }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821432
- exit_code: 1
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    #your code here\n    return $lst->[0];\n}\nuse Test::Deep;\n\n\n\
    sub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1659821432
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    for(my $i = 1; $i < scalar(@$lst); $i += 2) {\n\
    \        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821387
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar @$lst; $i += 2) {\n\
    \        $sum += $lst->[$i] if $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n\
    }\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n   \
    \     if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821387
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    return 0 unless $lst;\n    # print Dumper($lst);\n    my $sum = 0;\n\
    \    for (my $idx = 0; $idx < scalar(@$lst); $idx++) {\n        my $item = $lst->[$idx];\n\
    \        $sum += $item if $item % 2 == 0 and $idx % 2 == 1;\n    }\n    return\
    \ $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&add;\n\
    \        if(eq_deeply($candidate->([4, 88]),88)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 5, 6, 7, 2,\
    \ 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n  \
    \      if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n\
    \        exit 1;\n        }\n        if(eq_deeply($candidate->([4, 4, 6, 8]),12))\
    \ {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821432
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    for (my $i = 1; $i < scalar @$lst; $i += 2) {\n\
    \        if ($lst->[$i] % 2 == 0) {\n            $sum += $lst->[$i];\n       \
    \ }\n    }\n    return $sum;\n}\nuse Test::Deep;\n\n\nsub testhumaneval {\n  \
    \  my $candidate = \\&add;\n        if(eq_deeply($candidate->([4, 88]),88)) {\n\
    \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 5, 6, 7, 2, 122]),122)) {\n        print \"ok!\" }else{\n        exit 1;\n \
    \       }\n        if(eq_deeply($candidate->([4, 0, 6, 7]),0)) {\n        print\
    \ \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 4, 6, 8]),12)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    }\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821432
- exit_code: 0
  program: "# Given a non-empty list of integers lst. add the even elements that are\
    \ at odd indices..\n# Examples:\n# add([4, 2, 6, 7]) ==> 2\nsub add {\n    my($lst)\
    \ = @_;\n    my $sum = 0;\n    foreach my $i (0..$#$lst) {\n        $sum += $lst->[$i]\
    \ if $i % 2 && $lst->[$i] % 2 == 0;\n    }\n    return $sum;\n}\nuse Test::Deep;\n\
    \n\nsub testhumaneval {\n    my $candidate = \\&add;\n        if(eq_deeply($candidate->([4,\
    \ 88]),88)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n    \
    \    if(eq_deeply($candidate->([4, 5, 6, 7, 2, 122]),122)) {\n        print \"\
    ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->([4,\
    \ 0, 6, 7]),0)) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
    \        if(eq_deeply($candidate->([4, 4, 6, 8]),12)) {\n        print \"ok!\"\
    \ }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
  status: OK
  stderr: ''
  stdout: ok!ok!ok!ok!
  timestamp: 1659821432
