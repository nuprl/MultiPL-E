name: HumanEval_10_make_palindrome
language: pl
prompt: "# Find the shortest palindrome that begins with a supplied string.\n# Algorithm\
  \ idea is simple:\n# - Find the longest postfix of supplied string that is a palindrome.\n\
  # - Append to the end of the string reverse of a string prefix that comes before\
  \ the palindromic suffix.\n# >>> make_palindrome('')\n# ''\n# >>> make_palindrome('cat')\n\
  # 'catac'\n# >>> make_palindrome('cata')\n# 'catac'\nsub make_palindrome {\n   \
  \ my($string) = @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&make_palindrome;\n\
  \        if(eq_deeply($candidate->(\"\"),\"\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"x\"),\"x\")) {\n\
  \        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  xyz\"),\"xyzyx\")) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  \        if(eq_deeply($candidate->(\"xyx\"),\"xyx\")) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"jerry\"),\"jerryrrej\"\
  )) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n}\n\ntesthumaneval();"
completions: ["    my $string_length = length($string);\n    return $string if $string_length\
    \ == 0;\n    return $string . scalar reverse $string if $string_length == 1;\n\
    \    my $max_palindrome_length = _max_palindrome_postfix_length($string);\n  \
    \  return $string . scalar reverse substr($string, 0, $string_length - $max_palindrome_length);\n\
    }", "    my $prefix = substr($string, 0, rindex($string, longest_palindrome_suffix($string)));\n\
    \    my $result = $string . reverse($prefix);\n    return $result;\n}", '    return
    $string if length($string) <= 1;', "    my $pali_len = longest_palindrome_suffix_len($string);\n\
    \    my $pali_rev = reverse(substr($string, 0, length($string) - $pali_len));\n\
    \    return $string . $pali_rev;\n}", "    return $string if is_palindrome($string);\n\
    \    my $longest_palindrome = '';\n    my $shortest_palindrome = '';\n    my $min_len\
    \ = length($string);\n    foreach my $i (1 .. length($string)) {\n        my $test_str\
    \ = substr($string, $i);\n        $test_str = reverse($test_str);\n        $test_str\
    \ .= substr($string, 0, $i);\n        if (is_palindrome($test_str)) {\n      \
    \      $longest_palindrome = $test_str;\n            $shortest_palindrome = substr($string,\
    \ 0, $i) . reverse(substr($string, $i));\n            last;\n        }\n    }\n\
    \    if ($shortest_palindrome) {\n        return $shortest_palindrome;\n    }\n\
    \    else {\n        return $longest_palindrome;\n    }\n}", "    return '' if\
    \ $string eq '';\n    my $palindrome_prefix = '';\n    foreach my $pos (0 .. (length($string)\
    \ - 1)) {\n        my $suffix = substr($string, $pos);\n        if (is_palindrome($suffix))\
    \ {\n            $palindrome_prefix = substr($string, 0, $pos);\n            last;\n\
    \        }\n    }\n    my $palindrome_suffix = substr($string, length($palindrome_prefix));\n\
    \    my $reverse_prefix = reverse($palindrome_prefix);\n    return $string . $reverse_prefix;\n\
    }", "    if ($string eq '') {\n        return '';\n    }\n    my $rev = reverse\
    \ $string;\n    my $prefix = substr($string, 0, length($string) - 1);\n    my\
    \ $suffix = substr($rev, 1);\n    my $postfix = longest_common_substring($prefix,\
    \ $suffix);\n    my $prefix_reverse = reverse substr($string, 0, length($string)\
    \ - length($postfix));\n    my $result = $string . $prefix_reverse;\n    return\
    \ $result;\n}", "    my $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    if ($palindrome_suffix) {\n        my $palindrome_prefix = reverse(substr($string,\
    \ 0, length($string) - length($palindrome_suffix)));\n        return $string .\
    \ $palindrome_prefix;\n    }\n    else {\n        return $string;\n    }\n}",
  "    my $len = length($string);\n    return $string if $len == 0;\n    my $palindrome_len\
    \ = 0;\n    for (my $n = $len; $n > 0; $n--) {\n        next unless substr($string,\
    \ $n-1, 1) eq substr($string, -$n, 1);\n        $palindrome_len = $n;\n      \
    \  last;\n    }\n    return $string . reverse(substr($string, 0, $len - $palindrome_len));\n\
    }", "    return '' if $string eq '';\n    my $longest_postfix = get_longest_palindromic_postfix($string);\n\
    \    my $result = substr($string, 0, length($string) - length($longest_postfix));\n\
    \    return $string . scalar reverse $result;\n}", "    my $suffix = find_longest_palindrome_suffix($string);\n\
    \    my $prefix = reverse substr($string, 0, length($string) - length($suffix));\n\
    \    return $string . $prefix;\n}", "    if ($string eq '') {\n        return\
    \ '';\n    }", "    my $len = length($string);\n    for (my $i = 0; $i < $len;\
    \ $i++) {\n        if (is_palindrome(substr($string, $i))) {\n            return\
    \ $string . reverse substr($string, 0, $i);\n        }\n    }\n    return $string;\n\
    }", "    my $length = length($string);\n    if ($length < 2) {\n        return\
    \ $string;\n    }\n    # need one extra element for empty string\n    my @longest_palindrome_ends_at\
    \ = (0) x ($length + 1);\n    my $max_length = 0;\n    for (my $i = 1; $i <= $length;\
    \ $i++) {\n        for (my $len = 0; $len <= $max_length; $len++) {\n        \
    \    if (substr($string, $i - $len - 1, 1) eq substr($string, $i, 1)) {\n    \
    \            $longest_palindrome_ends_at[$i] = $len + 1;\n                $max_length\
    \ = $len + 1;\n                last;\n            }\n        }\n    }\n    my\
    \ $palindrome_len = $longest_palindrome_ends_at[$length];\n    my $prefix_len\
    \ = $length - $palindrome_len;\n    my $suffix = substr($string, $prefix_len);\n\
    \    return $string . reverse($suffix);\n}", "    my $rev_string = reverse $string;\n\
    \    return $string if ($string eq $rev_string);", "    return $string if length($string)\
    \ <= 1;\n    my $postfix = longest_palindrome_substring($string);\n    return\
    \ $string . reverse(substr($string, 0, length($string) - length($postfix)));\n\
    }", "    return '' if $string eq '';\n    my $len = length($string);\n    my $suffix_len\
    \ = $len;\n    while ($suffix_len > 0) {\n        my $suffix = substr($string,\
    \ $len - $suffix_len);\n        my $prefix = substr($string, 0, $len - $suffix_len);\n\
    \        if ($suffix eq reverse($suffix)) {\n            my $prefix_reversed =\
    \ reverse($prefix);\n            return $string . $prefix_reversed;\n        }\n\
    \        $suffix_len--;\n    }\n}", "    return $string if is_palindrome($string);\n\
    \    my $reversed = scalar reverse $string;\n    my $postfix = find_longest_common_suffix($string,\
    \ $reversed);\n    my $prefix = substr($string, 0, length($string) - length($postfix));\n\
    \    return $string . scalar reverse $prefix;\n}", "    my $reversed = reverse\
    \ $string;\n    my $length = length $string;\n    my $matches = longest_common_substrings($string,\
    \ $reversed);\n    my $reverse_prefix = substr($string, 0, $length - max(@$matches));\n\
    \    return $string . reverse $reverse_prefix;\n}", "    return $string if is_palindrome($string);\n\
    \    my $longest_palindrome = longest_palindrome($string);\n    return $string\
    \ . reverse(substr($string, 0, length($string) - length($longest_palindrome)));\n\
    }"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
