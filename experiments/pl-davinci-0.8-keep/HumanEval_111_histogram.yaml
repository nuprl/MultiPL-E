name: HumanEval_111_histogram
language: pl
prompt: "# Given a string representing a space separated lowercase letters, return\
  \ a dictionary\n# of the letter with the most repetition and containing the corresponding\
  \ count.\n# If several letters have the same occurrence, return all of them.\n#\
  \ Example:\n# histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n# histogram('a b b\
  \ a') == {'a': 2, 'b': 2}\n# histogram('a b c a b') == {'a': 2, 'b': 2}\n# histogram('b\
  \ b b b a') == {'b': 4}\n# histogram('') == {}\nsub histogram {\n    my($test) =\
  \ @_;\n"
tests: "use Test::Deep;\n\n\nsub testhumaneval {\n    my $candidate = \\&histogram;\n\
  \        if(eq_deeply($candidate->(\"a b b a\"),{\"a\" => 2, \"b\" => 2})) {\n \
  \       print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a b c a b\"),{\"a\" => 2, \"b\" => 2})) {\n        print \"ok!\" }else{\n      \
  \  exit 1;\n        }\n        if(eq_deeply($candidate->(\"a b c d g\"),{\"a\" =>\
  \ 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1})) {\n        print \"ok!\"\
  \ }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"r t g\"\
  ),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n     \
  \   exit 1;\n        }\n        if(eq_deeply($candidate->(\"b b b b a\"),{\"b\"\
  \ => 4})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  r t g\"),{\"r\" => 1, \"t\" => 1, \"g\" => 1})) {\n        print \"ok!\" }else{\n\
  \        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\"),{})) {\n  \
  \      print \"ok!\" }else{\n        exit 1;\n        }\n        if(eq_deeply($candidate->(\"\
  a\"),{\"a\" => 1})) {\n        print \"ok!\" }else{\n        exit 1;\n        }\n\
  }\n\ntesthumaneval();"
completions: ["    my @letters = split(' ', $test);\n    my %unique_letters;\n   \
    \ foreach my $letter (@letters) {\n        $unique_letters{$letter}++;\n    }\n\
    \    my $max_repetition = 0;\n    foreach my $letter (keys %unique_letters) {\n\
    \        if ($unique_letters{$letter} > $max_repetition) {\n            $max_repetition\
    \ = $unique_letters{$letter};\n        }\n    }\n    foreach my $letter (keys\
    \ %unique_letters) {\n        if ($unique_letters{$letter} != $max_repetition)\
    \ {\n            delete $unique_letters{$letter};\n        }\n    }\n    return\
    \ \\%unique_letters;\n}", "    my @s = split ' ', $test;\n    my %hash;\n    foreach\
    \ my $i (@s) {\n        $hash{$i} += 1;\n    }\n    my %max;\n    my $max = 0;\n\
    \    foreach my $i (keys %hash) {\n        if ($hash{$i} > $max) {\n         \
    \   $max = $hash{$i};\n            %max = ();\n            $max{$i} = $hash{$i};\n\
    \        } elsif ($hash{$i} == $max) {\n            $max{$i} = $hash{$i};\n  \
    \      }\n    }\n    return %max;\n}", "    my(%histo);\n    foreach my $char\
    \ (split(/ /, $test)) {\n        $histo{$char}++;\n    }\n    return %histo;\n\
    }", "    my %histo;\n    for my $letter (split //, $test) {\n        $histo{$letter}++;\n\
    \    }\n    my $max_rep = 0;\n    for my $letter (keys %histo) {\n        if ($histo{$letter}\
    \ > $max_rep) {\n            $max_rep = $histo{$letter};\n        }\n    }\n \
    \   my %result;\n    for my $letter (keys %histo) {\n        if ($histo{$letter}\
    \ == $max_rep) {\n            $result{$letter} = $max_rep;\n        }\n    }\n\
    \    return %result;\n}", "    my @letters = split(/ /, $test);\n    my $i = 0;\n\
    \    my %res = ();\n    foreach my $e (@letters) {\n        if (exists $res{$e})\
    \ {\n            $res{$e}++;\n        } else {\n            $res{$e} = 1;\n  \
    \      }\n    }\n    return %res;\n}", "    my @test = split ' ', $test;\n   \
    \ my %test = ();\n    foreach (@test) {\n        if (exists $test{$_}) {\n   \
    \         $test{$_}++;\n        } else {\n            $test{$_} = 1;\n       \
    \ }\n    }\n    return \\%test;\n}", "    my %hash = ();\n    for (split / /,\
    \ $test) {\n        $hash{$_}++;\n    }\n    my %res = ();\n    my $max = 0;\n\
    \    for (keys %hash) {\n        if ($hash{$_} == $max) {\n            $res{$_}\
    \ = $hash{$_};\n        } elsif ($hash{$_} > $max) {\n            %res = ();\n\
    \            $res{$_} = $hash{$_};\n            $max = $hash{$_};\n        }\n\
    \    }\n    return %res;\n}", "    my @chars = split(' ', $test);\n    my %hist;\n\
    \    foreach my $c (@chars) {\n        $hist{$c} += 1;\n    }\n    my $max = 0;\n\
    \    foreach my $k (keys %hist) {\n        $max = $hist{$k} if ($hist{$k} > $max);\n\
    \    }\n    my %max;\n    foreach my $k (keys %hist) {\n        $max{$k} = $hist{$k}\
    \ if ($hist{$k} == $max);\n    }\n    return %max;\n}", "    my $hash_ref = {};\n\
    \    my $max = 0;\n    for my $x (split / /, $test) {\n        next if $x eq '';\n\
    \        $hash_ref->{$x} = ($hash_ref->{$x} // 0) + 1;\n        $max = $hash_ref->{$x}\
    \ if $hash_ref->{$x} > $max;\n    }\n    my $output = {};\n    for my $x (keys\
    \ %$hash_ref) {\n        $output->{$x} = $hash_ref->{$x} if $hash_ref->{$x} ==\
    \ $max;\n    }\n    return $output;\n}", "    my %dict;\n    foreach my $s (split(/\
    \ /, $test)) {\n        $dict{$s} = 0 if not exists $dict{$s};\n        $dict{$s}++;\n\
    \    }\n    my $max = 0;\n    my @max_letters;\n    foreach my $key (keys %dict)\
    \ {\n        if ($dict{$key} > $max) {\n            $max = $dict{$key};\n    \
    \        @max_letters = ($key);\n        } elsif ($dict{$key} == $max) {\n   \
    \         push @max_letters, $key;\n        }\n    }\n    return %dict if $max\
    \ == 0;\n    my %result;\n    foreach my $key (@max_letters) {\n        $result{$key}\
    \ = $max;\n    }\n    return %result;\n}", "    my $result = {};\n    my $letters\
    \ = split(' ', $test);\n    foreach my $letter (@$letters) {\n        $result->{$letter}++;\n\
    \    }\n    foreach my $letter (keys $result) {\n        if ($result->{$letter}\
    \ == 1) {\n            delete $result->{$letter};\n        }\n    }\n    return\
    \ $result;\n}", "    my %results;\n    my @parts = split(/ /, $test);\n    foreach\
    \ my $part (@parts) {\n        if (not defined $results{$part}) {\n          \
    \  $results{$part} = 1;\n        } else {\n            $results{$part}++;\n  \
    \      }\n    }\n    return %results;\n}", "    my %hash;\n    for (split(' ',\
    \ $test)) {\n        ++$hash{$_};\n    }\n    my %hash2;\n    my $highest = 0;\n\
    \    while(my($key, $value) = each %hash) {\n        if ($value > $highest) {\n\
    \            %hash2 = ();\n            $hash2{$key} = $value;\n            $highest\
    \ = $value;\n        } elsif ($value == $highest) {\n            $hash2{$key}\
    \ = $value;\n        }\n    }\n    return %hash2;\n}", "    my(%letters);\n  \
    \  my($letter);\n    foreach $letter (split(/\\s+/, $test)) {\n        $letters{$letter}++;\n\
    \    }\n    return(%letters);\n}", "    my $test_d = {};\n    for my $t (split\
    \ / /, $test) {\n        $test_d->{$t}++;\n    }\n    my $max = 0;\n    my $res\
    \ = {};\n    for my $key (keys %$test_d) {\n        my $val = $test_d->{$key};\n\
    \        if ($val > $max) {\n            $max = $val;\n            $res = { $key\
    \ => $val };\n        } elsif ($val == $max) {\n            $res->{$key} = $val;\n\
    \        }\n    }\n    return $res;\n}", "    my $result = {};\n    for my $char\
    \ (split(' ', $test)) {\n        $result->{$char} = 0 if not exists $result->{$char};\n\
    \        $result->{$char} += 1;\n    }\n    return $result;\n}", "    my @items\
    \ = split / /, $test;\n    my %items;\n    foreach my $item (@items) {\n     \
    \   $items{$item}++;\n    }\n    # determine max_count\n    my $max_count = 0;\n\
    \    foreach my $item (keys %items) {\n        if ($items{$item} > $max_count)\
    \ {\n            $max_count = $items{$item};\n        }\n    }\n    # return items\
    \ with max_count only\n    my %max_items;\n    foreach my $item (keys %items)\
    \ {\n        if ($items{$item} == $max_count) {\n            $max_items{$item}\
    \ = $max_count;\n        }\n    }\n    return %max_items;\n}", "    my(%result);\n\
    \    my(@inputs) = split(/\\s+/, $test);\n    foreach my $input (@inputs) {\n\
    \        if (exists $result{$input}) {\n            $result{$input}++;\n     \
    \   } else {\n            $result{$input} = 1;\n        }\n    }\n    my(@keys)\
    \ = sort { $result{$b} <=> $result{$a} } keys %result;\n    my($max) = $result{$keys[0]};\n\
    \    my(@maxKeys);\n    foreach my $key (@keys) {\n        if ($result{$key} ==\
    \ $max) {\n            push(@maxKeys, $key);\n        }\n    }\n    my(%maxResults);\n\
    \    foreach my $maxKey (@maxKeys) {\n        $maxResults{$maxKey} = $max;\n \
    \   }\n    return %maxResults;\n}", "    my %count;\n    map{\n        $count{$_}++;\n\
    \    } split(' ', $test);\n    my $repetitions = '';\n    map{\n        if($count{$_}\
    \ == max(values %count)){\n            $repetitions .= $_;\n        }\n    } keys\
    \ %count;\n    # print \"histogram('$test') == {\";\n    # map{\n    #     print\
    \ \"'$_': $count{$_}, \";\n    # } sort keys %count;\n    # print \"}\\n\";\n\
    \    return $repetitions;\n}", "    my $result = {};\n    for my $chr (split(/\\\
    s+/, $test)) {\n        $result->{$chr}++;\n    }\n    return $result;\n}"]
stop_tokens:
- "\nsub"
- "\n#"
- "\n\n"
