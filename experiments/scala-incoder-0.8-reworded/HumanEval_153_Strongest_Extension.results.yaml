language: scala
name: HumanEval_153_Strongest_Extension
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extension_name\
    \ : Set[Char] = extensions.map(x => x.charAt(0)).distinct\n        val strength\
    \ : Map[Char, Int] = extension_name.map(x => (x, extension_name.count(_ == x))).reduceLeft(_\
    \ ++ _)\n        val strength_sum = strength.values.sum\n        val strength_max_key\
    \ : Char = strength.keys.max\n        val strength_max_value = strength.values.max\n\
    \        val strength_max_key_value : Map[Char, Int] = strength.filter(_._2 ==\
    \ strength_max_value).sortBy(_._1).head._1\n        val strength_max_key_value_name\
    \ = strength_max_key_value.keys.mkString(\"\")\n        val strength_max_key_value_strength\
    \ = strength_max_key_value.values.sum\n        val strength_max_key_value_strength_name\
    \ : Char = strength_max_key_value_strength.keys.max\n        val strength_max_key_value_strength_max_value\
    \ : Int = strength_max_key_value_strength.values.max\n        val strength_max_key_value_strength_max_value_name\
    \ : Char = strength_max_key_value_strength.keys.max\n        val strength_max_key_value_strength_max_value_name\
    \ : String = \".\"\n        if(strength_sum > strength_max_key_value_strength_max_value)\n\
    \            class_name + strength_max_key_value_strength_max_value_name + strength_max_key_value_strength_max_value_name\
    \ +\n                extensions.map(x => x.substring(strength_max_key_value_strength_max_value_name.length,\
    \ x.length).mkString(\"\")).mkString(\"\") \n        else\n            class_name\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjtn6kx2k.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mstrength_max_key_value_strength_max_value_name\e\
    [0m : \e[35mString\e[0m = \e[31m\".\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mstrength_max_key_value_strength_max_value_name is already\
    \ defined as \e[33mvalue\e[0m \e[35mstrength_max_key_value_strength_max_value_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpjtn6kx2k.scala:21:74 --------------------\e[0m\e[0m\n\
    \e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextension_name\e[0m : \e[35mSet\e\
    [0m[\e[35mChar\e[0m] = extensions.map(\e[36mx\e[0m => x.charAt(\e[31m0\e[0m)).distinct\n\
    \e[31m\e[31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  Found:    List[Char]\n\e\
    [31m   |\e[0m                                  Required: collection.mutable.Set[Char]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjtn6kx2k.scala:22:110\
    \ -------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m : \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mInt\e[0m] = extension_name.map(\e\
    [36mx\e[0m => (x, extension_name.count(_ == x))).reduceLeft(_ ++ _)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                                              ^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                          Found:    Char *: Int *: (_$3 : (Char, Int))\n\e[31m\
    \   |\e[0m                            Required: (Char, Int)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpjtn6kx2k.scala:26:98 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mstrength_max_key_value\e\
    [0m : \e[35mMap\e[0m[\e[35mChar\e[0m, \e[35mInt"
  stdout: ''
  timestamp: 1660009985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var result: String\
    \ = \"\"\n        val extension_collection = new mutable.HashMap[String, Int]()\n\
    \        extensions.foreach(extension => \n            extension match {\n   \
    \             case x if x.matches(\"[A-Z]\") => \n                    extension_collection.put(x.toUpperCase,\
    \ 1)\n                case x if x.matches(\"[a-z]\") => \n                   \
    \ extension_collection.put(x.toLowerCase, 1)\n                case x => \n   \
    \                 extension_collection.put(x.toUpperCase(), 0)\n            }\n\
    \        )\n        extension_collection.foreach {\n            case (k, v) =>\n\
    \                if ((v / extension_collection.size)*100 >= 100) result = k\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4_iopmmx.scala:22:39 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextension_collection\e[0m\
    \ = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                       Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009978
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n       // Write your code\
    \ here\n        val strength = extensions map {\n            e => if (e.matches(\"\
    [A-Z]+\")) e.length.toDouble - e.toUpperCase.length.toDouble else e.length.toDouble\
    \ - e.toLowerCase.length.toDouble\n        } max\n        if (strength < 0) \"\
    %s.%s\" format (class_name, extensions.sortWith(_ < _).headOption.getOrElse(extensions.head))\n\
    \        else \"%s.%s\" format (class_name, extensions.sortWith(_ < _).lastOption.getOrElse(extensions.last))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp4ayxicpa.scala:24:13 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        } max\n\e[31m\e[31m   |\e[0m             ^\e\
    [0m\n\e[31m   |\e[0m             expression expected but \e[31mif\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ayxicpa.scala:27:5\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        //Get the number\
    \ of capital letters in the extension's name\n        val CAP = extensions.length\n\
    \        //Get the number of lowercase letters in the extension's name\n     \
    \   val SM = extensions.length\n        //The strength of the extension is as\
    \ follows: \n        //Let CAP be the number of the uppercase letters in the extension's\
    \ name, \n        //and let SM be the number of lowercase letters in the extension's\
    \ name, \n        //the strength is given by the fraction CAP - SM. \n       \
    \ //You should find the strongest extension and return a string in this \n   \
    \     //format: ClassName.StrongestExtensionName.\n        //If there are two\
    \ or more extensions with the same strength, you should\n        //choose the\
    \ one that comes first in the list.\n        //For example, if you are given \"\
    Slices\" as the class and a list of the\n        //extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n        //return 'Slices.SErviNGSliCes'\
    \ since 'SErviNGSliCes' is the strongest extension \n        //(its strength is\
    \ -1).\n        val strength = (CAP - SM)\n        val extensionName = extensions.sortBy(x\
    \ => x.toUpperCase).head\n        s\"$class_name.$extensionName\"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5z49907e.scala:43)\n\tat Problem.main(tmp5z49907e.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val allExtensions\
    \ = extensions.toSet\n        var maxStrongest = 0\n        var maxExtension =\
    \ List[String]()\n\n        for (e <- extensions) {\n            if (allExtensions.contains(e))\
    \ {\n                if (allExtensions.count(_ == e) > maxStrongest) {\n     \
    \               maxStrongest = allExtensions.count(_ == e)\n                 \
    \   maxExtension = e\n                }\n            }\n        }\n\n        className\
    \ + maxExtension\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyg918yw_.scala:29:35\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                    maxExtension\
    \ = e\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (e : String)\n\e[31m  \
    \ |\e[0m                                   Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyg918yw_.scala:34:8 -------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        className + maxExtension\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: className\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val exts = extensions.map(e\
    \ => {\n            val cap = e.toUpperCase length\n            val sm  = e.toLowerCase\
    \ length\n            (cap - sm) / cap\n        }).sortWith(_ > _).last\n    \
    \    val sClass = s\"$class_name.$exts\"\n        val sClassWithoutExtension =\
    \ s\"$class_name$exts\"\n        val sClassWithExtension = s\"$class_name.$exts\"\
    \n        val allClasses = List[String](sClass, sClassWithoutExtension, sClassWithExtension)\n\
    \        allClasses.map(c => println(c))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp28740mdp.scala:22:42 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mcap\e[0m = e.toUpperCase\
    \ length\n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\
    \e[31m   |\e[0m                          expression expected but \e[31mend of\
    \ statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmp28740mdp.scala:24:23\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m24 |\e[0m       \
    \     (cap - sm) / cap\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           too many arguments for \e[33mmethod\e[0m \e[35mlength\e\
    [0m in \e[33mclass\e[0m \e[35mString\e[0m: (): Int\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp28740mdp.scala:25:22 ------------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m        }).sortWith(_ > _).last\n\e[31m\e[31m   |\e[0m        \
    \            ^^^\e[0m\n\e[31m   |\e[0mvalue > is not a member of Unit, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Ordering.Unit.mkOrderingOps\n\e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\
    \e[31m   |\e[0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp28740mdp.scala:30:22 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        allClasses.map(\e[36mc\e[0m => println(c))\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    List[Unit]\n\e[31m   |\e[0m        Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        def strongest(extensions\
    \ : List[String]) : String = {\n            val strengths : mutable.Map[String,\
    \ Int] = mutable.Map.empty\n            extensions.foreach(ext => \n         \
    \   {\n                if(strengths.contains(ext))\n                {\n      \
    \              val strength = strengths(ext)\n                    if(strength\
    \ < ext.length.toCharArray (1).sum.toInt)\n                    {\n           \
    \             strengths(ext) = ext.length.toCharArray (1).sum.toInt\n        \
    \                ext\n                    }\n                    else\n      \
    \              {\n                        strengths(ext) = strength\n        \
    \                ext\n                    }\n                }\n             \
    \   else\n                {\n                    strengths(ext) = ext.length.toCharArray\
    \ (1).sum.toInt\n                    ext\n                }\n            }\n \
    \           )\n            strengths.maxBy(x => x._2)._2\n        }\n        val\
    \ extension = extensions.find(ext => ext.toLowerCase == extension.name.toLowerCase\
    \ )\n        if(extension == None) \n        {\n            val extension = extensions.find(ext\
    \ => ext.toUpperCase == extension.name.toUpperCase )\n            if(extension\
    \ == None) \n            {\n                val extension = extensions.find(ext\
    \ => ext.toUpperCase == extension.name.toLowerCase )\n                if(extension\
    \ == None) \n                {\n                    val extension = extensions.find(ext\
    \ => ext.toLowerCase == extension.name.toLowerCase )\n                    if(extension\
    \ == None) \n                    {\n                        val extension = extensions.find(ext\
    \ => ext.toUpperCase == extension.name.toUpperCase )\n                       \
    \ if(extension == None) \n                        {\n                        \
    \    val extension = extensions.find(ext => ext.toUpperCase == extension.name.toLowerCase\
    \ )\n                            if(extension == None) \n                    \
    \        {\n                                val extension = extensions.find(ext\
    \ => ext.toUpperCase == extension.name.toUpperCase )\n                       \
    \         if(extension == None) \n                                {\n        \
    \                            val extension = extensions.find(ext => ext.toUpperCase\
    \ == extension.name.toUpperCase )\n                                    if(extension\
    \ == None) \n                                    {\n                         \
    \               val extension = extensions.find(ext => ext.toUpperCase == extension.name.toUpperCase\
    \ )\n                                        if(extension == None) \n        \
    \                                {\n                                         \
    \   val extension = extensions.find(ext => ext.toUpperCase == extension.name.toUpperCase\
    \ )\n                                            if(extension == None) \n    \
    \                                        {\n                                 \
    \               val extension = extensions.find(ext => ext.toUpperCase == extension.name.toUpperCase\
    \ )\n                                                if(extension == None) \n\
    \                                                {\n                         \
    \                           val extension = extensions.find(ext => ext.toUpperCase\
    \ == extension.name.toUpperCase )\n                                          \
    \          if(extension == None) \n                                          \
    \          {\n                                                        \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpgnfwnvkn.scala:99:0 ----------------------------\e\
    [0m\e[0m\n\e[31m99 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgnfwnvkn.scala:22:28\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36mstrengths\e[0m : mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m] = mutable.Map.empty\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgnfwnvkn.scala:22:55 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m \e[36mstrengths\e[0m : mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m] = mutable.Map.empty\n\e[31m\e[31m   |\e[0m  \
    \                                                     ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgnfwnvkn.scala:48:66\
    \ ---------------------------\e[0m\e[0m\n\e[31m48 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextension\e[0m = extensions.find(\e[36mext\e[0m => ext.toLowerCase ==\
    \ extension.name.toLowerCase )\n\e[31m\e[31m   |\e[0m                        \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                         Recursive \e[33mvalue\e[0m \e[35mextension\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgnfwnvkn.scala:51:70\
    \ ---------------------------\e[0m\e[0m\n\e[31m51 |\e[0m            \e[33mval\e\
    [0m \e[36mextension\e[0m = extensions.find(\e[36mext\e[0m => ext.toUpperCase ==\
    \ extension.name.toUpperCase )\n\e[31m\e[31m   |\e[0m                        \
    \                                              ^\e[0m\n\e[31m   |\e[0m       \
    \                             Recursive \e[33mvalue\e[0m \e[35mextension\e[0m\
    \ needs type\n\e[31m   |\e["
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extensions_hash\
    \ = extensions.hashCode()\n        val hashCode = extensions_hash * extensions.size\
    \ + 1\n        val extension_strongest = extensions.sorted().find(x=> hashCode\
    \ % x == 0)\n        class_name+\".\"+extension_strongest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjjamem_9.scala:23:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextension_strongest\e[0m\
    \ = extensions.sorted().find(\e[36mx\e[0m=> hashCode % x == \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                  ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mmissing argument for parameter ord of \e[33mmethod\e[0m \e[35msorted\e\
    [0m in \e[33mtrait\e[0m \e[35mStrictOptimizedSeqOps\e[0m: (\e[33mimplicit \e[0mord:\
    \ Ordering[B]): List[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n      def extension_score(extension\
    \ : String, class_name : String) : Int = {\n        val class_name_length = class_name.length\n\
    \        val extension_length = extension.length\n        val class_name_with_extension\
    \ = class_name + extension\n        val extension_without_extension = extension.substring(class_name_length-1,\
    \ extension_length)\n        val class_name_without_extension = class_name.substring(0,\
    \ class_name_length)\n        val extension_without_class = extension.substring(class_name_length-1,\
    \ extension_length)\n        val class_name_without_class = class_name.substring(0,\
    \ class_name_length)\n        val extension_with_class = extension.substring(class_name_length-1,\
    \ extension_length)\n        val class_name_with_class = class_name + extension_with_class\n\
    \        val strength = (class_name_with_extension.length -1)*(class_name_with_extension.indexOf(extension_without_extension)\
    \ - class_name_with_extension.indexOf(extension_without_class))\n        val strength_without_extension\
    \ = class_name_with_class.indexOf(extension_without_class)\n        val strength_without_class\
    \ = class_name_with_class.indexOf(extension_without_extension)\n        val strength_with_extension\
    \ = class_name_with_class.indexOf(extension_with_class)\n        val strength_with_class\
    \ = class_name_with_extension.indexOf(extension_with_extension)\n        (strength\
    \ - strength_without_extension)*(strength_with_extension - strength_with_class)\
    \ + strength_with_class\n      }\n      extension_score(class_name, extensions.sortWith(_.length\
    \ < _.length).head) match {\n        case 0 => class_name\n        case _ => extensions.sortWith(extension_score(_.toString,\
    \ class_name)).head\n      }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\",\
    \ \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppaofdnzs.scala:35:68 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mstrength_with_class\e[0m\
    \ = class_name_with_extension.indexOf(extension_with_extension)\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \        Not found: extension_with_extension\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmppaofdnzs.scala:40:54 -----------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mcase\e[0m _ => extensions.sortWith(extension_score(_.toString,\
    \ class_name)).head\n\e[31m\e[31m   |\e[0m                                   \
    \                   ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$3 of\
    \ expanded function:\n\e[31m   |\e[0m   _$3 => _$3.toString.\n2 errors found\n"
  stdout: ''
  timestamp: 1660009980
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        if (extensions.size\
    \ <= 1) {\n            className\n        }\n        else {\n            val strongest_extension\
    \ = extensions.sortWith((a, b) => b.length - a.length)\n            class_name\
    \ + strongest_extension.head\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0g4tytv5.scala:22:12 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            className\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: className\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0g4tytv5.scala:25:68 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mstrongest_extension\e\
    [0m = extensions.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => b.length - a.length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \            ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \                                Found:    Int\n\e[31m   |\e[0m              \
    \                                         Required: Boolean\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660009982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = extensions.map(_.length).max\n\
    \n        val extension = extensions.filter(_.length == strength)\n        val\
    \ strengthInString = extension.length.map(str => str.toUpperCase - str.toLowerCase).sum\n\
    \        val extensionName = extension.head\n\n        val className = class_name\
    \ + \".\" + extensionName\n        className\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg7t2pk_m.scala:24:48 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mstrengthInString\e[0m =\
    \ extension.length.map(\e[36mstr\e[0m => str.toUpperCase - str.toLowerCase).sum\n\
    \e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value map is not a member of Int\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009982
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strength = 0\n\
    \        var extension = \"\"\n        for (extension <- extensions) {\n     \
    \       if (class_name.indexOf(extension.charAt(0)) >= 0) {\n                val\
    \ capitals = class_name.split(\"\").map(_.toUpperCase).length\n              \
    \  val lowercases = class_name.split(\"\").map(_.toLowerCase).length\n       \
    \         val fraction = capitals - lowercases\n                val strength =\
    \ fraction\n                if (strength > 0)\n                    return extension.substring(0,extension.lastIndexOf(\"\
    .\"))\n            }\n        }\n        return \"\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplv9p3i2s.scala:36)\n\tat Problem.main(tmplv9p3i2s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009985
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extensions_map\
    \ = Map(extensions.map(ext => ext to className) -> \"StrongestExtension\")\n \
    \       val strength_map = extensions_map.toSeq.sortBy(_._2)(Ordering.Int.reverse).filter(_._2\
    \ != extensions_map(extensions_map.keySet)._2)\n        val max_length = strength_map.maxBy(_._2.length)._1.substring(strength_map.maxBy(_._2.length)._1.lastIndexOf('.'))\n\
    \        val class_name_no_extension = class_name.replaceFirst(\".\", \"\")\n\
    \        val strongest_extension = extensions_map(extensions_map.keySet)._1 \n\
    \        val no_extensions = extensions_map.keySet\n        if (no_extensions.contains(strongest_extension))\
    \ strongest_extension else (class_name_no_extension + max_length + strongest_extension)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_7aet52d.scala:21:62 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = Map(extensions.map(\e\
    [36mext\e[0m => ext to className) -> \e[31m\"StrongestExtension\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Not found:\
    \ className\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_7aet52d.scala:22:74\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength_map\e\
    [0m = extensions_map.toSeq.sortBy(_._2)(Ordering.Int.reverse).filter(_._2 != extensions_map(extensions_map.keySet)._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                 Found:    Ordering[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e[0m   \
    \                                           Required: Ordering[\e[1m\e[32mString\e\
    [0m]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_7aet52d.scala:22:128\
    \ -------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength_map\e\
    [0m = extensions_map.toSeq.sortBy(_._2)(Ordering.Int.reverse).filter(_._2 != extensions_map(extensions_map.keySet)._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                         ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           Found:    \e[1m\e[31mscala\e[0m\e\
    [1m\e[31m.\e[0m\e[1m\e[31mcollection\e[0m\e[1m\e[31m.\e[0m\e[1m\e[31mSet\e[0m\e\
    [1m\e[31m[\e[0mList[Nothing\e[1m\e[31m]\e[0m]\n\e[31m   |\e[0m               \
    \            Required: List[Nothing]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp_7aet52d.scala:23:60 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e"
  stdout: ''
  timestamp: 1660009983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions\
    \ groupBy {e => e.toLowerCase.substring(0, 1).count(_ == 'Z') - e.toLowerCase.substring(1,\
    \ 2).count(_ == 'z') - 1}\n        val strength = strengths(class_name.toLowerCase)\n\
    \        val extension = strengths.keySet iterator find {e => e == strength}\n\
    \        if(extension.isEmpty) \"\" else {\n            class_name + \".\" + extension\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu15lxwpf.scala:22:33\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e\
    [0m = strengths(class_name.toLowerCase)\n\e[31m\e[31m   |\e[0m               \
    \                  ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                   Found:    String\n\e[31m   |\e[0m                        \
    \         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu15lxwpf.scala:23:50\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mextension\e[0m = strengths.keySet iterator find {\e[36me\e[0m => e == strength}\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Not found:\
    \ find\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpu15lxwpf.scala:23:41\
    \ -----------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e\
    [0m \e[36mextension\e[0m = strengths.keySet iterator find {\e[36me\e[0m => e ==\
    \ strength}\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          \e[33mmethod\e[0m \e[35miterator\e[0m in \e[33mtrait\e\
    [0m \e[35mIterableOnce\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        if(extensions.length\
    \ < 1) throw new Exception(\"Extensions is empty\")\n        var strongest = -1\
    \ //default value\n        var max = extensions.length // max number of extensions\n\
    \        var maxStrength = 0 // strength of max extension\n        var index =\
    \ 0\n        while(index < max) {\n            // Check if the current extension\
    \ has higher strength than maxStrength\n            if(extensions(index).toUpperCase\
    \ - extensions(index).toLowerCase < maxStrength) {\n                strongest\
    \ = extensions(index).toUpperCase //set current as strongest\n               \
    \ maxStrength = extensions(index).toLowerCase // set current as max strength\n\
    \                index = max // start comparing from the end\n            }\n\
    \            else {\n                // Check if current extension is same as\
    \ maxStrength\n                if(extensions(index) == maxStrength) {\n      \
    \              index = max // end comparing from the end\n                }\n\
    \                else {\n                    // Check if current extension is\
    \ same as strongest\n                    if(extensions(index) == strongest) {\n\
    \                        index = max // end comparing from the end\n         \
    \           }\n                    else {\n                        index += 1\
    \ // keep comparing\n                    }\n                }\n            }\n\
    \        }\n        if(strongest != -1 && maxStrength != strongest) class_name\
    \ + \".\" + strongest\n        else class_name\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2f0zk4nr.scala:28:45 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m(extensions(index).toUpperCase\
    \ - extensions(index).toLowerCase < maxStrength) {\n\e[31m\e[31m   |\e[0m    \
    \           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2f0zk4nr.scala:29:28 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                strongest = extensions(index).toUpperCase\
    \ \e[34m//set current as strongest\e[0m\n\e[31m\e[31m   |\e[0m               \
    \             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                Found:    String\n\e[31m   |\e[0m                           \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2f0zk4nr.scala:30:30\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                maxStrength =\
    \ extensions(index).toLowerCase \e[34m// set current as max strength\e[0m\n\e\
    [31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    String\n\e[31m   |\e\
    [0m                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ Error: /tmp/tmp2f0zk4nr.scala:35:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mif\e[0m(extensions(index) == maxStrength)\
    \ {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m         Values of types String and Int cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error:"
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val count = extensions.map(ext\
    \ => ext.count(_.toUpperCase.toChar)).sum\n        if (count < 0) {\n        \
    \    val index = extensions.indexWhere(ext => ext.count(_.toUpperCase.toChar)\
    \ == count)\n            extensions(index)\n        } else {\n            val\
    \ index = extensions.indexWhere(ext => ext.count(_.toLowerCase.toChar) == count)\n\
    \            extensions(index)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbjrv_kqk.scala:21:54 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = extensions.map(\e\
    [36mext\e[0m => ext.count(_.toUpperCase.toChar)).sum\n\e[31m\e[31m   |\e[0m  \
    \                                                  ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toUpperCase is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbjrv_kqk.scala:23:65 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mindex\e[0m = extensions.indexWhere(\e\
    [36mext\e[0m => ext.count(_.toUpperCase.toChar) == count)\n\e[31m\e[31m   |\e\
    [0m                                                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbjrv_kqk.scala:26:65\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m\
    \ \e[36mindex\e[0m = extensions.indexWhere(\e[36mext\e[0m => ext.count(_.toLowerCase.toChar)\
    \ == count)\n\e[31m\e[31m   |\e[0m                                           \
    \                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     \
    \          value toLowerCase is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strength = -1;\n\
    \        val strongest_extension = List[String]();\n        extensions.foreach(ext\
    \ => {\n            val cap = ext.length.toDouble.floor.toInt;\n            val\
    \ sm = ext.length.toDouble.ceil.toInt;\n            val fraction = cap - sm;\n\
    \            if(fraction > strength) {\n                strength = fraction;\n\
    \                strongest_extension = ext;\n            }\n        });\n    \
    \    class_name + \".\" + strongest_extension(0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjeqdewey.scala:29:38\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                strongest_extension\
    \ = ext;\n\e[31m\e[31m   |\e[0m                                      ^^^\e[0m\n\
    \e[31m   |\e[0m                                      Found:    (ext : String)\n\
    \e[31m   |\e[0m                                      Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009982
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val cap = class_name.map(_.toUpper).count(_\
    \ == _)\n        val sm = class_name.map(_.toLowerCase).count(_ == _)\n      \
    \  val strength = cap - sm\n        val strongest_extension = extensions.find(_.getClass.getName.startsWith(class_name.getClass.getName))\
    \ match {\n            case None => \"\"\n            case Some(extension) =>\
    \ extension.getName.drop(class_name.getClass.getName.length + extension.getName.indexOf(\"\
    .\"))\n        }\n        val parts = strongest_extension.split(\"\\\\.\").toList\n\
    \        parts(0).drop(class_name.indexOf(\".\")) + parts(1) + \".\" + StrongestExtension(parts(0).drop(class_name.indexOf(\"\
    .\")) + parts(1) + \".\" + parts(2), extensions.drop(parts.size))\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpbj9b_i3s.scala:21:50 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mcap\e[0m = class_name.map(_.toUpper).count(_\
    \ == _)\n\e[31m\e[31m   |\e[0m                                               \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong number\
    \ of parameters, expected: 1\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbj9b_i3s.scala:22:34\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36msm\e[0m = class_name.map(_.toLowerCase).count(_ == _)\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                        value toLowerCase is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbj9b_i3s.scala:26:46 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mcase\e[0m Some(extension) => extension.getName.drop(class_name.getClass.getName.length\
    \ + extension.getName.indexOf(\e[31m\".\"\e[0m))\n\e[31m\e[31m   |\e[0m      \
    \                              ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                          value getName is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Solution\n   \
    \     var max_strength = 0\n        var result = \"Unknown\"\n        // The list\
    \ extensions is being sorted in descending order of strength, so we use the \n\
    \        // reverse function.\n        extensions.reverse.foreach(ext => {\n \
    \           val ext_name = ext.substring(0, ext.length - 1)\n            val ext_strength\
    \ = ext.substring(ext.length - 1, 1)\n            if (ext_strength.length > 1)\
    \ {\n                if (ext_strength.equals(ext_strength.substring(0, 1)))\n\
    \                    ext_strength = ext_strength.substring(1)\n              \
    \  val cap = ext_strength.length\n                val sm = cap - ext_strength.length\n\
    \                // Check if the extension strength is less than the current maximum\
    \ strength.\n                if (ext_strength.length < max_strength) {\n     \
    \               // If it is, set the result to the extension name and strength.\n\
    \                    max_strength = ext_strength.length\n                    result\
    \ = ext_name + ext_strength\n                } else if (ext_strength.length ==\
    \ max_strength) {\n                    // If the extension is of the same strength\
    \ we compare the alphabetic \n                    // part of the names and choose\
    \ the one that comes first alphabetically.\n                    if (ext_name.substring(0,\
    \ 1).compareTo(ext_name.substring(0, sm)) > 0)\n                        result\
    \ = ext_name + ext_strength\n                }\n            }\n        })\n  \
    \      // If there are no extensions then it returns \"Unknown\".\n        if\
    \ (max_strength == 0)\n            result = \"Unknown\"\n        // If the result\
    \ is not \"Unknown\", it returns the result string.\n        if (result != \"\
    Unknown\")\n            result\n        else\n            \"Unknown\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpwxumnk2u.scala:31:33 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    ext_strength = ext_strength.substring(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val ext_strength\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009979
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val c = List(\"a\"\
    \ -> 1, \"b\" -> 2, \"c\" -> 3)\n        val l = List(\"a\" -> 1, \"b\" -> 2,\
    \ \"c\" -> 3, \"A\" -> 1, \"B\" -> 2, \"C\" -> 3)\n        val max = -1\n    \
    \    val maxExtension = \"\"\n        extensions.foreach{e =>\n            val\
    \ name = e.substring(0, e.length() - 1)\n            val strength = c(\"a\" +\
    \ name) - c(\"b\" + name)\n            val lowerName = e.substring(0, e.length()\
    \ - 1)\n            val lowerStrength = l(\"a\" + lowerName) - l(\"b\" + lowerName)\n\
    \            val x = strength * lowerStrength\n            if (x > max) {\n  \
    \              max = x\n                maxExtension = e\n            }\n    \
    \    }\n        class_name +\".\" + maxExtension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9btcyeia.scala:27:29\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e\
    [36mstrength\e[0m = c(\e[31m\"a\"\e[0m + name) - c(\e[31m\"b\"\e[0m + name)\n\e\
    [31m\e[31m   |\e[0m                             ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             Found:    String\n\e[31m   |\e[0m            \
    \                 Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp9btcyeia.scala:27:45 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m            \e[33mval\e[0m \e[36mstrength\e[0m = c(\e[31m\"a\"\e[0m +\
    \ name) - c(\e[31m\"b\"\e[0m + name)\n\e[31m\e[31m   |\e[0m                  \
    \                           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                            Found:    String\n\e[31m   |\e[0m               \
    \                              Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9btcyeia.scala:29:34 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mlowerStrength\e[0m =\
    \ l(\e[31m\"a\"\e[0m + lowerName) - l(\e[31m\"b\"\e[0m + lowerName)\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                  Found:    String\n\e[31m   |\e[0m  \
    \                                Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp9btcyeia.scala:29:55 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m \e[36mlowerStrength\e[0m =\
    \ l(\e[31m\"a\"\e[0m + lowerName) - l(\e[31m\"b\"\e[0m + lowerName)\n\e[31m\e\
    [31m   |\e[0m                                                       ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       Found:\
    \    String\n\e[31m   |\e[0m                                                 \
    \      Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling wit"
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map(_.length.toInt)\n\
    \        val max_strength = strengths.max\n        val strength_sums = extensions.map(s\
    \ => s.toInt + max_strength).toList\n        val max_strength_sums = strength_sums.max\n\
    \        val min_sum = max_strength_sums.min\n        val index = strengths.indexWhere(s\
    \ => s == min_sum)\n        val strength = strengths(index)\n        val extension\
    \ = extensions(index)\n        s\"${class_name.split(\".\").head}.$extension\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpynwr7mlj.scala:26:46 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mindex\e[0m = strengths.indexWhere(\e\
    [36ms\e[0m => s == min_sum)\n\e[31m\e[31m   |\e[0m                           \
    \                   ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     Values of types Int\
    \ and Int => Int cannot be compared with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660009983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ : Option[Int] = None\n        var max_extension = extensions\n        for (extension\
    \ <- extensions) {\n            val extension_strength = extension.dropWhile(_\
    \ == '_').count(_ >= 'A' && _ <='Z').toDouble / extension.length.toDouble\n  \
    \          if (max_strength.isEmpty || (max_strength exists extension_strength))\
    \ {\n                max_strength = Some(extension_strength)\n               \
    \ max_extension = extension\n            }\n        }\n        class_name + max_extension.mkString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp6wkb0w08.scala:24:73 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mextension_strength\e\
    [0m = extension.dropWhile(_ == \e[31m'_'\e[0m).count(_ >= \e[31m'A'\e[0m && _\
    \ <=\e[31m'Z'\e[0m).toDouble / extension.length.toDouble\n\e[31m\e[31m   |\e[0m\
    \                                                                         ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6wkb0w08.scala:25:61\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (max_strength.isEmpty\
    \ || (max_strength exists extension_strength)) {\n\e[31m\e[31m   |\e[0m      \
    \                                                       ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 Found:    (extension_strength\
    \ : Double)\n\e[31m   |\e[0m                                 Required: Int =>\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6wkb0w08.scala:26:36\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m                max_strength\
    \ = Some(extension_strength)\n\e[31m\e[31m   |\e[0m                          \
    \          ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \       Found:    (extension_strength : Double)\n\e[31m   |\e[0m             \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6wkb0w08.scala:27:32 --------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m                max_extension = extension\n\e[31m\e[31m   |\e[0m     \
    \                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              Found:    (extension : String)\n\e[31m   |\e[0m               \
    \                 Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009984
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Complete the implementation\n\
    \        var strongest = \"\"\n        var extensionStr = \"\"\n        extension.map(x\
    \ => extensionStr += x)\n        var extensionStrLen = extensionStr.length()\n\
    \        extensionStr.map(x => strongest += x)\n        var strongestLen = strongest.length()\n\
    \        \n        if(extensionStrLen > strongestLen){\n            strongest\
    \ = extensionStr\n        }else if(extensionStrLen == strongestLen){\n       \
    \     extensionStr.map(x=>strongest += x)\n        }else{\n            extensionStr.map(x=>extensionStr\
    \ += x)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3tzpgvfy.scala:24:8 -------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        extension.map(\e[36mx\e[0m => extensionStr +=\
    \ x)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not\
    \ found: extension\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3tzpgvfy.scala:30:22\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            strongest = extensionStr\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \            Found:    Unit\n\e[31m   |\e[0m            Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3tzpgvfy.scala:32:29 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            extensionStr.map(\e[36mx\e[0m=>strongest\
    \ += x)\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    Char => \e[1m\e[31mUnit\e\
    [0m\n\e[31m   |\e[0m                             Required: Char => \e[1m\e[32mChar\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3tzpgvfy.scala:34:29\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m            extensionStr.map(\e\
    [36mx\e[0m=>extensionStr += x)\n\e[31m\e[31m   |\e[0m                        \
    \     ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             Found:\
    \    Char => \e[1m\e[31mUnit\e[0m\n\e[31m   |\e[0m                           \
    \  Required: Char => \e[1m\e[32mChar\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009983
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Write your code\
    \ here\n        var strongest = \"\"\n        for(ext <- extensions)\n       \
    \     if(ext.toLowerCase.toCharArray.filter{case c => c <= 'Z'}.count() - ext.toLowerCase.toCharArray.filter{case\
    \ c => c >= 'A'}.count() > 0){\n                if(ext.toLowerCase.toCharArray.filter{case\
    \ c => c <= 'Z'}.count() - ext.toLowerCase.toCharArray.filter{case c => c >= 'A'}.count()\
    \ == 0)\n                    strongest += (class_name+\".\"+ext).mkString(\".\"\
    ).trim\n            }\n        for(ext <- extensions)\n            if(ext.toLowerCase.toCharArray.filter{case\
    \ c => c <= 'Z'}.count() - ext.toLowerCase.toCharArray.filter{case c => c >= 'A'}.count()\
    \ == 0)\n                strongest += (class_name+\".\"+ext).mkString(\".\").trim\n\
    \        strongest.trim\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw50998hd.scala:24:75 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(ext.toLowerCase.toCharArray.filter{\e\
    [33mcase\e[0m c => c <= \e[31m'Z'\e[0m}.count() - ext.toLowerCase.toCharArray.filter{\e\
    [33mcase\e[0m c => c >= \e[31m'A'\e[0m}.count() > \e[31m0\e[0m){\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter p of \e[33mmethod\e[0m \e[35mcount\e\
    [0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m: (p: Char => Boolean): Int\n\e[31m\e\
    [31m-- Error: /tmp/tmpw50998hd.scala:25:79 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mif\e[0m(ext.toLowerCase.toCharArray.filter{\e\
    [33mcase\e[0m c => c <= \e[31m'Z'\e[0m}.count() - ext.toLowerCase.toCharArray.filter{\e\
    [33mcase\e[0m c => c >= \e[31m'A'\e[0m}.count() == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter p of \e[33mmethod\e[0m \e[35mcount\e\
    [0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m: (p: Char => Boolean): Int\n\e[31m\e\
    [31m-- Error: /tmp/tmpw50998hd.scala:29:75 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m(ext.toLowerCase.toCharArray.filter{\e\
    [33mcase\e[0m c => c <= \e[31m'Z'\e[0m}.count() - ext.toLowerCase.toCharArray.filter{\e\
    [33mcase\e[0m c => c >= \e[31m'A'\e[0m}.count() == \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mmissing argument for parameter p of \e[33mmethod\e[0m \e[35mcount\e\
    [0m in \e[33mclass\e[0m \e[35mArrayOps\e[0m: (p: Char => Boolean): Int\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009988
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var extensions_count\
    \ = extensions.size\n        var max_extension = 0\n        var max_extension_class\
    \ = \"\"\n        var strongest_extension = \"\"\n\n        // loop through the\
    \ extensions list \n        for (i <- 0 until extensions_count) {\n          \
    \  val extension = extensions(i)\n\n            // find out how strong the extension\
    \ is\n            val letter_count = extension.filter(letter => letter.isUpper).size\n\
    \            val letter_count_lower = extension.filter(letter => letter.isLower).size\n\
    \            val strength = letter_count / letter_count_lower\n\n            if\
    \ (strength > max_extension) {\n                max_extension = strength\n   \
    \             max_extension_class = extension\n            }\n        }\n\n  \
    \      // return the strongest extension \n        if (max_extension == extensions_count\
    \ - 1) {\n            strongest_extension = max_extension_class\n        } else\
    \ {\n            strongest_extension = class_name + \".\" + max_extension_class\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps0s5fs8k.scala:43:32\
    \ --------------------\e[0m\e[0m\n\e[31m43 |\e[0m            strongest_extension\
    \ = max_extension_class\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps0s5fs8k.scala:45:32\
    \ --------------------\e[0m\e[0m\n\e[31m45 |\e[0m            strongest_extension\
    \ = class_name + \e[31m\".\"\e[0m + max_extension_class\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var new_extensions\
    \ = extensions\n        var strength = -1\n        for(e<-extensions) {\n    \
    \        val numOfCap = e.toCharArray().filter(c => c.toUpper == c.toUpper).length\n\
    \            val numOfSm  = e.toCharArray().filter(c => c.toUpper == c.toLower).length\n\
    \            var diff = numOfCap - numOfSm\n            if (diff != 0)\n     \
    \           diff += diff\n            val ratio = (numOfCap - numOfSm) / diff\n\
    \            if (ratio > strength)\n                strength = ratio\n       \
    \ }\n        new_extensions -= extension(class_name, extensions)\n        new_extensions\
    \ +=  extension(class_name, extensions)\n        new_extensions.sortWith(_ > _).head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc98tnkrz.scala:33:23 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        new_extensions -= extension(class_name, extensions)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue -= is\
    \ not a member of List[String] - did you mean List[String].!=?\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpc98tnkrz.scala:33:26 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        new_extensions -= extension(class_name, extensions)\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                          Not found: extension\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpc98tnkrz.scala:34:23 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        new_extensions +=  extension(class_name, extensions)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is\
    \ not a member of List[String] - did you mean List[String].!=?\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpc98tnkrz.scala:34:27 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        new_extensions +=  extension(class_name, extensions)\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Not found: extension\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660009993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Initialize a collection\
    \ to store all extensions' strength information\n        val extensions_strength\
    \ = mutable.HashMap[String, Int]()\n        for (extension <- extensions) {\n\
    \            val extension_arr = extension.split(\"_\")\n            val extension_str\
    \ = extension_arr.last\n            val extension_cap = extension_str.last.toUpperCase.length\n\
    \            val extension_sm  = extension_str.last.toLowerCase .length\n    \
    \        val extension_score = extension_cap - extension_sm\n            // Check\
    \ if extension name already in the map or not and \n            // If not then\
    \ insert with strength score as 0 \n            if (!extensions_strength.contains(extension_str))\
    \ {\n                extensions_strength += (extension_str -> 0)\n           \
    \ }\n            // If already present then update the strength score \n     \
    \       if (extensions_strength.contains(extension_str)) {\n                extensions_strength(extension_str)\
    \ += extension_score\n            }\n        }\n        // Filter extensions strength\
    \ info for strongest extension \n        val strongest_extension = extensions_strength.filter{case\
    \ (_, score) =>\n            score == extensions_strength.max\n        }.keys.head\n\
    \        // Return the class's name + the strongest extension name \n        class_name\
    \ + \".\" + strongest_extension\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpygyz02rb.scala:22:34 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_strength\e[0m\
    \ = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpygyz02rb.scala:26:51 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mextension_cap\e[0m = extension_str.last.toUpperCase.length\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toUpperCase is not a\
    \ member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpygyz02rb.scala:27:51\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m\
    \ \e[36mextension_sm\e[0m  = extension_str.last.toLowerCase .length\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value toLowerCase is not a\
    \ member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1660009991
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        \n        // Your\
    \ code here.\n        // For each extension in the list, get the length of its\
    \ string representation\n        // and compare it to the extension's strength.\
    \ If they are equal, return the\n        // name of the extension. If not, return\
    \ the name of the extension with the lowest\n        // strength.\n\n        //\
    \ For each extension in the list, get the length of its string representation\n\
    \        // and compare it to the extension's strength. If they are equal, return\
    \ the\n        // name of the extension. If not, return the name of the extension\
    \ with the lowest\n        // strength.\n        \n        // For each extension\
    \ in the list, get the length of its string representation\n        // and compare\
    \ it to the extension's strength. If they are equal, return the\n        // name\
    \ of the extension. If not, return the name of the extension with the lowest\n\
    \        // strength.\n\n        // For each extension in the list, get the length\
    \ of its string representation\n        // and compare it to the extension's strength.\
    \ If they are equal, return the\n        // name of the extension. If not, return\
    \ the name of the extension with the lowest\n        // strength.\n        \n\
    \        // For each extension in the list, get the length of its string representation\n\
    \        // and compare it to the extension's strength. If they are equal, return\
    \ the\n        // name of the extension. If not, return the name of the extension\
    \ with the lowest\n        // strength.\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph7qbx7dn.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m        \n\e[31m22 |\e[0m \
    \       \e[34m// Your code here.\e[0m\n\e[31m23 |\e[0m        \e[34m// For each\
    \ extension in the list, get the length of its string representation\e[0m\n\e\
    [31m24 |\e[0m        \e[34m// and compare it to the extension's strength. If they\
    \ are equal, return the\e[0m\n\e[31m25 |\e[0m        \e[34m// name of the extension.\
    \ If not, return the name of the extension with the lowest\e[0m\n\e[31m26 |\e\
    [0m        \e[34m// strength.\e[0m\n\e[31m27 |\e[0m        \e[34m// For each extension\
    \ in the list, get the length of its string representation\e[0m\n\e[31m28 |\e\
    [0m        \e[34m// and compare it to the extension's strength. If they are equal,\
    \ return the\e[0m\n\e[31m29 |\e[0m        \e[34m// name of the extension. If not,\
    \ return the name of the extension with the lowest\e[0m\n\e[31m30 |\e[0m     \
    \   \e[34m// strength.\e[0m\n\e[31m31 |\e[0m        \n\e[31m32 |\e[0m        \e\
    [34m// For each extension in the list, get the length of its string representation\e\
    [0m\n\e[31m33 |\e[0m        \e[34m// and compare it to the extension's strength.\
    \ If they are equal, return the\e[0m\n\e[31m34 |\e[0m        \e[34m// name of\
    \ the extension. If not, return the name of the extension with the lowest\e[0m\n\
    \e[31m35 |\e[0m        \e[34m// strength.\e[0m\n\e[31m36 |\e[0m        \e[34m//\
    \ For each extension in the list, get the length of its string representation\e\
    [0m\n\e[31m37 |\e[0m        \e[34m// and compare it to the extension's strength.\
    \ If they are equal, return the\e[0m\n\e[31m38 |\e[0m        \e[34m// name of\
    \ the extension. If not, return the "
  stdout: ''
  timestamp: 1660009992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val map = Map(\n\
    \            \"ABC\" -> 1,\n            \"DEF\" -> 2,\n            \"GHI\" ->\
    \ 3,\n            \"JKL\" -> 4,\n            \"MNO\" -> 5\n        )\n       \
    \ val sortedExt = extensions.sorted\n        val extensions = extensions map (ext\
    \ => ext -> (map.get(ext) match {\n            case Some(c) => c\n           \
    \ case None => -1\n        }))\n        val max = (extensions reduce (_ max _))._1\n\
    \        val strongest = (extensions find (_._1 == max))._1\n        val className\
    \ = class_name + \".\" + strongest\n        strongest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpowj2ny5g.scala:29:25 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mextensions\e[0m = extensions\
    \ map (\e[36mext\e[0m => ext -> (map.get(ext) \e[33mmatch\e[0m {\n\e[31m\e[31m\
    \   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m                   \
    \      Recursive \e[33mvalue\e[0m \e[35mextensions\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660009991
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var lowest_strength = -1\n        var lowest_extension = \"\"\
    \n        var lowest_extension_strength = -1\n        var count = 0\n        for\
    \ (extension_name <- extensions) {\n            val extension_strength = extension_name.count(c\
    \ => c.isUpper)\n            if (lowest_strength == -1 || lowest_strength > extension_strength)\
    \ {\n                lowest_strength = extension_strength\n                lowest_extension\
    \ = extension_name\n                lowest_extension_strength = extension_strength\n\
    \            }\n            count += 1\n        }\n        \n        for (extension_name\
    \ <- extensions) {\n            val extension_strength = extension_name.count(c\
    \ => c.isUpper)\n            if (lowest_strength == -1 || extension_strength <\
    \ lowest_strength) {\n                lowest_strength = extension_strength\n \
    \               lowest_extension = extension_name\n                lowest_extension_strength\
    \ = extension_strength\n            }\n            count += 1\n        }\n   \
    \     \n        if (count == 0) {\n            strongest_extension = class_name\n\
    \        }\n        else {\n            var strongest_extension = \"\"\n     \
    \       var lowest_strength = -1\n            var lowest_extension = \"\"\n  \
    \          var lowest_extension_strength = -1\n            var count = 0\n   \
    \         for (extension_name <- extensions) {\n                val extension_strength\
    \ = extension_name.count(c => c.isUpper)\n                if (lowest_strength\
    \ == -1 || extension_strength < lowest_strength) {\n                    lowest_strength\
    \ = extension_strength\n                    lowest_extension = extension_name\n\
    \                    lowest_extension_strength = extension_strength\n        \
    \        }\n                count += 1\n            }\n            \n        \
    \    for (extension_name <- extensions) {\n                val extension_strength\
    \ = extension_name.count(c => c.isUpper)\n                if (extension_strength\
    \ > lowest_strength) {\n                    lowest_strength = extension_strength\n\
    \                    lowest_extension = extension_name\n                    lowest_extension_strength\
    \ = extension_strength\n                }\n                count += 1\n      \
    \      }\n            \n            strongest_extension = class_name + lowest_extension\n\
    \        }\n        \n        return strongest_extension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplq75qpd7.scala:81)\n\tat Problem.main(tmplq75qpd7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660009995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extensions_map\
    \ = extensions.map(_.toUpperCase)\n        val extensions_count = extensions_map.map(extension_count\
    \ => \n            (extension_count.length -1)/extension_count.length).sum\n \
    \       val extensions_strength = extensions_map.groupBy(_.length).mapValues(_.size)\n\
    \        val best_extension_strength = extensions_strength.maxBy(_._1)._1\n  \
    \      val extensions_strings = extensions_strength.map{ case (key, value) =>\
    \ key + \n            \".\" + extensions_map.filter(_.length == key).map(_.toUpperCase).mkString(\"\
    _\") }\n        val strongest_extension = class_name + extensions_strings.minBy(_._1)._1\
    \ \n        if (extensions_count > 1) strongest_extension\n        else strongest_extension.substring(0,class_name.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2xdxmfty.scala:28:74 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mstrongest_extension\e[0m\
    \ = class_name + extensions_strings.minBy(_._1)._1 \n\e[31m\e[31m   |\e[0m   \
    \                                                                     ^^^^\e[0m\n\
    \e[31m   |\e[0m                                      value _1 is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmp2xdxmfty.scala:28:77 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mstrongest_extension\e[0m\
    \ = class_name + extensions_strings.minBy(_._1)._1 \n\e[31m\e[31m   |\e[0m   \
    \                                                                          ^\e\
    [0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mChar\e\
    [0m in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ cmp of \e[33mmethod\e[0m \e[35mminBy\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009993
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Find the extension\
    \ and its strength.\n        val extensions_map = extensions.map(ext => (ext.toUpperCase,\
    \ ext.toLowerCase.count(_.isUppercase)/ext.toLowerCase.count(_.isLowercase)))\n\
    \        val max_strength = extensions_map.map(_._2).max\n        \n        //\
    \ Return a string in the format: class_name.extension_name.\n        // The strength\
    \ must be -1 if the extension does not appear in the list.\n        if (extensions_map.contains(max_strength\
    \ => -1 ))\n            s\"${class_name.capitalize}${extensions_map.getOrElse(max_strength,\
    \ 0)._1}\"\n        else\n            s\"${class_name.capitalize}.UNKNOWN\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0_9bf645.scala:22:93 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36mext\e[0m => (ext.toUpperCase, ext.toLowerCase.count(_.isUppercase)/ext.toLowerCase.count(_.isLowercase)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         value isUppercase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0_9bf645.scala:22:130 -----------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.map(\e\
    [36mext\e[0m => (ext.toUpperCase, ext.toLowerCase.count(_.isUppercase)/ext.toLowerCase.count(_.isLowercase)))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value isLowercase is not a\
    \ member of Char\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp0_9bf645.scala:27:36\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m\
    \ (extensions_map.contains(\e[36mmax_strength\e[0m => -\e[31m1\e[0m ))\n\e[31m\e\
    [31m   |\e[0m                                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   \
    \            I could not infer the type of the parameter max_strength.\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp0_9bf645.scala:28:55 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[31ms\"\e[0m${class_name.capitalize}${extensions_map.getOrElse(max_strength,\
    \ \e[31m0\e[0m)._1}\e[31m\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \      value getOrElse is not a member of List[(String, Int)]\n4 errors found\n"
  stdout: ''
  timestamp: 1660009995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_strength\
    \ = -1\n        var max_class = class_name\n        var max_ext = \"\"\n     \
    \   var max_ext_name = \"\"\n        for (eName <- extensions) {\n           \
    \ var ext = eName.charAt(1).toLowerCase\n            var ex_name = eName\n   \
    \         var ex_strength = ext.length\n            var ex_class = eName\n   \
    \         if (ex_strength > max_strength) {\n                max_strength = ex_strength\n\
    \                max_ext = ext\n                max_ext_name = eName\n       \
    \         max_class = ex_class\n            }\n        }\n        return max_class\
    \ + \".\" + max_ext\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpseqauoak.scala:26:38 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mvar\e[0m \e[36mext\e[0m = eName.charAt(\e\
    [31m1\e[0m).toLowerCase\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      value toLowerCase is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1660009994
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = \"\
    \"\n        var strength = 0\n        extensions.foreach {\n            ext =>\
    \ {\n                val count = getCount(ext.toUpperCase)\n                val\
    \ count2 = getCount(ext.toLowerCase)\n                if (count > strength) strongest\
    \ = ext\n                else if (count2 > strength) strongest = ext\n       \
    \         else strength = count\n            }\n        }\n        return class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3ldvamzz.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mcount\e[0m = getCount(ext.toUpperCase)\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: getCount\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3ldvamzz.scala:26:29 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e[0m \e[36mcount2\e[0m = getCount(ext.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             Not found: getCount\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009990
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extension_strengths\
    \ = extensions.map(x => (x.substring(x.length()-1).toUpperCase, x.substring(x.length()-1).toLowerCase)).toMap\n\
    \        val class_name_strengths = class_name.substring(class_name.length()-1).toUpperCase\n\
    \        val strength = Math.abs(extension_strengths(class_name_strengths) - extension_strengths(extension_strengths.keys.head))\n\
    \        if (extension_strengths.size > 1) {\n            val key = extension_strengths.keys.tail.sorted\n\
    \            val index = key.indexOf(0)\n            extension_strengths(key.head)\n\
    \        } else {\n            extension_strengths(key.head)\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsu9j6n8x.scala:23:74 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = Math.abs(extension_strengths(class_name_strengths)\
    \ - extension_strengths(extension_strengths.keys.head))\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpsu9j6n8x.scala:25:52 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mkey\e[0m = extension_strengths.keys.tail.sorted\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     value sorted is not a member of Iterable[String @uncheckedVariance]\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsu9j6n8x.scala:29:32 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            extension_strengths(key.head)\n\e[31m\e[31m\
    \   |\e[0m                                ^^^\e[0m\n\e[31m   |\e[0m          \
    \                      Not found: key\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strongest_extension\
    \ = extensions.reduceLeftOption((c, ext) => Some(ext))\n        val strength =\
    \ strongest_extension.fold(0)(_ - _.toUpperCase.length)\n        class_name +\
    \ \".\" + strongest_extension.fold(\"???\")((c,ext) => c + ext.substring(0,strength))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoj8_ld_e.scala:21:78\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstrongest_extension\e\
    [0m = extensions.reduceLeftOption((\e[36mc\e[0m, \e[36mext\e[0m) => Some(ext))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \                       Found:    \e[1m\e[31mSome\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                                             \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpoj8_ld_e.scala:22:51\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mstrength\e[0m = strongest_extension.fold(\e[31m0\e[0m)(_ - _.toUpperCase.length)\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpoj8_ld_e.scala:23:67\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        class_name + \e\
    [31m\".\"\e[0m + strongest_extension.fold(\e[31m\"???\"\e[0m)((\e[36mc\e[0m,\e\
    [36mext\e[0m) => c + ext.substring(\e[31m0\e[0m,strength))\n\e[31m\e[31m   |\e\
    [0m                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n3 errors found\n"
  stdout: ''
  timestamp: 1660009995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n       //Solution goes here\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvnqu4u1t.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m       \e[34m//Solution goes\
    \ here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strength = -1;\n\
    \        val m = Map(extensions.zipWithIndex.sortWith((a, b) => a._2 > b._2))\n\
    \        val key = class_name + extensions.mkString(\".\");\n        m.get(key)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph6q9lrxo.scala:24:10 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        m.get(key)\n\e[31m\e[31m   |\e[0m        ^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue get is not a member of scala.collection.mutable.Builder[(Nothing,\
    \ Nothing), \n\e[31m   |\e[0m  scala.collection.mutable.Map[Nothing, Nothing]\n\
    \e[31m   |\e[0m]\n1 error found\n"
  stdout: ''
  timestamp: 1660009995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val myList = extensions\
    \ match {\n            case head :: Nil => extensions(0)\n            case head\
    \ :: tail => tail\n        }\n        val myMap = extensions match {\n       \
    \     case head :: tail => extensions zip tail\n        }\n        var max = 0\n\
    \        var maxExt : String = \"\"\n        for ((ex_name, ext) <- myMap) {\n\
    \            if(ext.length == myList.contains(ex_name)) {\n                if(ext.toString.toUpperCase.matches(myList\
    \ mkString (\".*\")) && ext.toString.toUpperCase.matches(class_name mkString (\"\
    .*\"))) {\n                    if(ext.toString.toUpperCase.matches(ex_name)) {\n\
    \                        val str = ext match {\n                            case\
    \ str : String if str.matches(class_name mkString (\".*\")) => str\n         \
    \                   case str : String if str.matches(ex_name mkString (\".*\"\
    )) => str\n                            case _ => \"\"\n                      \
    \  }\n                        val str = str match {\n                        \
    \    case str : String if str.matches(ex_name mkString (\".*\")) => str\n    \
    \                        case _ => \"\"\n                        }\n         \
    \               if(str.length > max)\n                            max = str.length\n\
    \                    }\n                }\n            }\n        }\n        val\
    \ res = class_name match {\n            case str : String if str.matches(maxExt\
    \ mkString (\".*\")) => maxExt\n            case _ => \"\"\n        }\n      \
    \  res\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_9ehtjb0.scala:31:36 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mif\e[0m(ext.length == myList.contains(ex_name))\
    \ {\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             value contains is not a member of Object\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_9ehtjb0.scala:32:59 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                \e[33mif\e[0m(ext.toString.toUpperCase.matches(myList\
    \ mkString (\e[31m\".*\"\e[0m)) && ext.toString.toUpperCase.matches(class_name\
    \ mkString (\e[31m\".*\"\e[0m))) {\n\e[31m\e[31m   |\e[0m                    \
    \                                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mkString\
    \ is not a member of Object - did you mean myList.toString?\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmp_9ehtjb0.scala:39:28 ---------------------------\e[0m\e\
    [0m\n\e[31m39 |\e[0m                        \e[33mval\e[0m \e[36mstr\e[0m = str\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0mstr is already defined as \e[33mvalue\e[0m \e[35mstr\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m40 |\e[0m                    \
    \        \e[33mcase\e[0m str : \e[35mString\e[0m \e[33mif\e[0m str.matches(ex_name\
    \ mkString (\e[31m\".*\"\e[0m)) => str\n\e[31m41 |\e[0m                      \
    \      \e[33mcase\e[0m _ => \e[31m\"\"\e[0m\n\e[31m42 |\e[0m                 \
    \       }\n3 errors found\n"
  stdout: ''
  timestamp: 1660009996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code here!\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3t5fhrz4.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m        \e[34m// Your code\
    \ here!\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val class_name =\
    \ new String(class_name)\n        val extensions = extensions.toList\n       \
    \ val strength = extensions.size\n        val counts = extensions.map(e => e.count(_\
    \ == 'z')).toList\n        val total = extensions.map(e => e.count(_ == 'z')).sum\n\
    \        val strengths = extension => extension.count(_ == 'z').toFloat/total\n\
    \        val strongest = extensions.map(e => if (strengths(e) >= strength) e else\
    \ \"\").get\n        if (strongest.length < extensions.size) {\n            val\
    \ pos = strongest.lastIndexOf('.')\n            strongest + class_name.substring(pos\
    \ + 1)\n        } else {\n            \"\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0gdv3jm_.scala:21:36 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclass_name\e[0m = \e[33mnew\e\
    [0m \e[35mString\e[0m(class_name)\n\e[31m\e[31m   |\e[0m                     \
    \               ^\e[0m\n\e[31m   |\e[0m                                   Recursive\
    \ \e[33mvalue\e[0m \e[35mclass_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp0gdv3jm_.scala:22:25 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions\e[0m = extensions.toList\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mextensions\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp0gdv3jm_.scala:26:24 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mstrengths\e[0m = \e[36mextension\e\
    [0m => extension.count(_ == \e[31m'z'\e[0m).toFloat/total\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                  I could not\
    \ infer the type of the parameter extension.\n3 errors found\n"
  stdout: ''
  timestamp: 1660009992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val result = mutable.ArrayBuffer.empty[String]\n\
    \        val strengths = mutable.HashMap[String, Int]()\n        extensions.foreach(x\
    \ => strengths += (x -> 0))\n        val class_names = mutable.HashMap[String,\
    \ String]()\n        extensions.foreach(x => class_names += (x -> \"\"))\n   \
    \     val max_strengths = strengths.maxBy { case (_, v) => v }._1\n        val\
    \ max_class_name = max_strengths.keySet.toList.sortBy(s => strengths(s)).head.head\n\
    \        result.append(class_name)\n        class_names.foreach(x => result.append(x._1))\n\
    \        result.append(max_class_name)\n        class_names(max_class_name)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5b2ie45r.scala:21:21 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5b2ie45r.scala:22:24 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrengths\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5b2ie45r.scala:24:26\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mclass_names\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660009992
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code here\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw2_gr4z5.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m        \e[34m// Your code\
    \ here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val map = new mutable.HashMap[String,\
    \ Int]()\n        val map2 = new mutable.HashMap[String, Int]()\n        val arr2\
    \ = new mutable.ArrayList[String]()\n        val arr1 = new mutable.ArrayList[String]()\n\
    \        val arr3 = new mutable.ArrayList[String]()\n        val arr4 = new mutable.ArrayList[String]()\n\
    \        val arr5 = new mutable.ArrayList[String]()\n        val arr6 = new mutable.ArrayList[String]()\n\
    \        val arr7 = new mutable.ArrayList[String]()\n        val arr8 = new mutable.ArrayList[String]()\n\
    \        val arr9 = new mutable.ArrayList[String]()\n        val arr10 = new mutable.ArrayList[String]()\n\
    \        val arr11 = new mutable.ArrayList[String]()\n        val arr12 = new\
    \ mutable.ArrayList[String]()\n        val arr13 = new mutable.ArrayList[String]()\n\
    \        val arr14 = new mutable.ArrayList[String]()\n        val arr15 = new\
    \ mutable.ArrayList[String]()\n        val arr16 = new mutable.ArrayList[String]()\n\
    \        val arr17 = new mutable.ArrayList[String]()\n        val arr18 = new\
    \ mutable.ArrayList[String]()\n        val arr19 = new mutable.ArrayList[String]()\n\
    \        val arr20 = new mutable.ArrayList[String]()\n        val arr21 = new\
    \ mutable.ArrayList[String]()\n        val arr22 = new mutable.ArrayList[String]()\n\
    \        val arr23 = new mutable.ArrayList[String]()\n        val arr24 = new\
    \ mutable.ArrayList[String]()\n        val arr25 = new mutable.ArrayList[String]()\n\
    \        val arr26 = new mutable.ArrayList[String]()\n        val arr27 = new\
    \ mutable.ArrayList[String]()\n        val arr28 = new mutable.ArrayList[String]()\n\
    \        val arr29 = new mutable.ArrayList[String]()\n        val arr30 = new\
    \ mutable.ArrayList[String]()\n        val arr31 = new mutable.ArrayList[String]()\n\
    \        val arr32 = new mutable.ArrayList[String]()\n        val arr33 = new\
    \ mutable.ArrayList[String]()\n        val arr34 = new mutable.ArrayList[String]()\n\
    \        val arr35 = new mutable.ArrayList[String]()\n        val arr36 = new\
    \ mutable.ArrayList[String]()\n        val arr37 = new mutable.ArrayList[String]()\n\
    \        val \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpeupihaee.scala:60:11 ---------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpeupihaee.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeupihaee.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mmap2\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpeupihaee.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36marr2\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeupihaee.scala:24:23\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36marr1\e[0m = \e[33mnew\e[0m mutable.ArrayList[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpeupihaee.scala:25:23 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mval\e[0m \e[36marr3\e[0m = "
  stdout: ''
  timestamp: 1660009996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var strongest_extension_strength = -1\n        var counter =\
    \ 0\n        extensions.foreach { ext =>\n            counter += 1\n         \
    \   ext.toUpper match {\n                case c if c.isLetter && counter == CAP\
    \ => \n                    strongest_extension = ext \n                    strongest_extension_strength\
    \ = CAP - counter\n                case _ => \n            }\n        }\n    \
    \    if (strongest_extension_strength > 0) {\n            class_name + \"_\" +\
    \ strongest_extension\n        } else {\n            class_name\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdolf13s0.scala:26:16 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            ext.toUpper \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value toUpper\
    \ is not a member of String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdolf13s0.scala:29:51\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                    strongest_extension_strength\
    \ = CAP - counter\n\e[31m\e[31m   |\e[0m                                     \
    \              ^^^\e[0m\n\e[31m   |\e[0m                                     \
    \              Not found: CAP\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660009996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // TODO\n       \
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzz0zshwp.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m        \e[34m// TODO\e[0m\n\
    \e[31m22 |\e[0m        \n\e[31m23 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009996
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here.\n        val extensionSet = extensions.map(s => s.toUpperCase).distinct.toSet\n\
    \        val extensionMap = new collection.mutable.HashMap[String, Int]()\n  \
    \      for (e <- extensions) extensionMap += (e.toUpperCase -> extensions.indexOf(e))\n\
    \        val extensionTuples = extensionMap.keySet.toList.sortBy(a => -extensionMap(a))\n\
    \        val maxIndex = extensionTuples.last\n        val bestExtension = extensionTuples(maxIndex\
    \ - 1).mkString.substring(class_name.lastIndexOf('.') + 1, maxIndex)\n       \
    \ bestExtension\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2gixh8rg.scala:27:53 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mbestExtension\e[0m = extensionTuples(maxIndex\
    \ - \e[31m1\e[0m).mkString.substring(class_name.lastIndexOf(\e[31m'.'\e[0m) +\
    \ \e[31m1\e[0m, maxIndex)\n\e[31m\e[31m   |\e[0m                             \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp2gixh8rg.scala:27:110 -------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mbestExtension\e[0m = extensionTuples(maxIndex\
    \ - \e[31m1\e[0m).mkString.substring(class_name.lastIndexOf(\e[31m'.'\e[0m) +\
    \ \e[31m1\e[0m, maxIndex)\n\e[31m\e[31m   |\e[0m                             \
    \                                                                            \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \  Found:    (maxIndex : String)\n\e[31m   |\e[0m                            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extension_strength\
    \ = extensions.map(_.toUpperCase.size - _.toLowerCase.size).max\n        val class_extension\
    \ = extensions.map(_.toUpperCase.size)\n            .map(x => if (x == 0) \"\"\
    \ else x.toString)\n            .max\n        val base_extension = extension_strength\
    \ - class_extension\n        if (extension_strength == 0) \"\"\n        else class_name\
    \ + \".\" + base_extension.map(_.toString)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpp403hax8.scala:21:48 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextension_strength\e[0m\
    \ = extensions.map(_.toUpperCase.size - _.toLowerCase.size).max\n\e[31m\e[31m\
    \   |\e[0m                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- Error: /tmp/tmpp403hax8.scala:21:92 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextension_strength\e[0m\
    \ = extensions.map(_.toUpperCase.size - _.toLowerCase.size).max\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                         ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both\
    \ \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m and\
    \ \e[33mobject\e[0m \e[35mBigDecimal\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35mmax\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660009999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = \"\
    \"\n        var max = 0\n        for(extension <- extensions){\n            val\
    \ cap = extension.split(\"\").map(_.toUpperCase).count(_ == 'A')\n           \
    \ val sm = extension.split(\"\").map(_.toLowerCase).count(_ == 'a')\n        \
    \    val diff = cap - sm\n            if(diff > max){\n                strongest\
    \ = extension\n                max = diff\n            }\n        }\n        class_name\
    \ + \".\" + strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp96btc2fr.scala:24:67 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mcap\e[0m = extension.split(\e\
    [31m\"\"\e[0m).map(_.toUpperCase).count(_ == \e[31m'A'\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                   ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmp96btc2fr.scala:25:66 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36msm\e[0m = extension.split(\e\
    [31m\"\"\e[0m).map(_.toLowerCase).count(_ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e\
    [0m                                                                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var extension_list\
    \ : List = List.empty\n        for (x <- extensions) {\n            if (x.toUpperCase\
    \ == x.toUpperCase.charAt(0)) {\n                extension_list :+= x\n      \
    \      }\n        }\n        var strongest = extension_list.maxBy( s => s.length\
    \ );\n        if (extension_list.indexOf(strongest) == -1) {\n            return\
    \ class_name\n        }\n        var strength = 0\n        for (x <- extensions)\
    \ {\n            if (x.toUpperCase == x.toUpperCase.charAt(0) && (x.length - x.toLowerCase\
    \ < strength)) {\n                strength = x.length - x.toLowerCase\n      \
    \      }\n        }\n        return class_name + \".\" + strongest + extension_list(extension_list.indexOf(strongest))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E056] Syntax Error: /tmp/tmpqci_hh1t.scala:21:29 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mextension_list\e[0m : \e\
    [35mList\e[0m = List.empty\n\e[31m\e[31m   |\e[0m                            \
    \ ^^^^\e[0m\n\e[31m   |\e[0m                             Missing type parameter\
    \ for List\n\e[31m\e[31m-- Error: /tmp/tmpqci_hh1t.scala:23:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (x.toUpperCase == x.toUpperCase.charAt(\e\
    [31m0\e[0m)) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpqci_hh1t.scala:33:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mif\e[0m (x.toUpperCase == x.toUpperCase.charAt(\e\
    [31m0\e[0m) && (x.length - x.toLowerCase < strength)) {\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E134] Type Error: /tmp/tmpqci_hh1t.scala:33:70 -----------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mif\e[0m (x.toUpperCase == x.toUpperCase.charAt(\e\
    [31m0\e[0m) && (x.length - x.toLowerCase < strength)) {\n\e[31m\e[31m   |\e[0m\
    \                                                             ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e\
    [0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double):\
    \ Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\
    \e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e\
    [0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments\
    \ (String)\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpqci_hh1t.scala:34:36 -----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                strength = x.length - x.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m None of the overloaded alternatives of"
  stdout: ''
  timestamp: 1660010004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var StrongestExtension\
    \ = class_name\n        var extension_strength = 0\n        var i = 0\n      \
    \  var extension = extensions(i)\n        while (extension_strength != extension)\
    \ {\n            extension_strength = extension_strength - 1\n            i =\
    \ i + 1\n            extension = extensions(i)\n        }\n        StrongestExtension\
    \ = extensions(i)\n        return StrongestExtension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphgz6dulm.scala:25:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mwhile\e[0m (extension_strength != extension)\
    \ {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m         Values of types Int and String cannot be compared with\
    \ == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660010003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val len = extensions.length\n\
    \        val max_strength = extensions(0).length.toInt\n        val max_extension\
    \ = extensions(0)\n\n        for (i <- 0 until len) {\n            if (extensions(i).length.toInt\
    \ > max_strength) {\n                max_strength = extensions(i).length.toInt\n\
    \                max_extension = extensions(i)\n            }\n        }\n\n \
    \       return class_name + max_extension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpxzp743e3.scala:27:29 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                max_strength = extensions(i).length.toInt\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val max_strength\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpxzp743e3.scala:28:30 -----------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                max_extension = extensions(i)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                Reassignment to val max_extension\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660009999
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strength = -1\n\
    \        var current_strength = -1\n        for( ext <- extensions) {\n      \
    \      if(ext.toUpperCase == ext.toUpperCase) {\n                current_strength\
    \ += 1\n                if(current_strength > strength) {\n                  \
    \  strength = current_strength\n                }\n            } else {\n    \
    \            current_strength = 0\n            }\n        }\n        val new_extension\
    \ = class_name + extensions.toList.map(x => x.substring(class_name.lastIndexOf('.')+1)).last\n\
    \        val new_class = new_extension.substring(0,new_extension.lastIndexOf('.'))\n\
    \        val new_extension_strength = new_extension.substring(new_extension.lastIndexOf('.'))\n\
    \        if(new_extension_strength > 0) {\n            return new_class + \".\"\
    \ + new_extension_strength\n        } else {\n            return new_extension\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3obk8i7b.scala:36:36\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mif\e[0m(new_extension_strength\
    \ > \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                                   \
    \ ^\e[0m\n\e[31m   |\e[0m                                    Found:    (\e[31m0\e\
    [0m : Int)\n\e[31m   |\e[0m                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010004
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val class_parts =\
    \ class_name.split(\"\\\\.\")\n        var extension_parts: List[String] = Nil\n\
    \        for(part <- class_parts) {\n            if(part == \"\") {\n        \
    \        val part = part\n            } else {\n                val part = part.toUpperCase\n\
    \            }\n            if(extension_parts.contains(part)) {\n           \
    \     val strength = extension_parts(extension_parts.indexOf(part)).toString.toUpperCase.lastIndexOf(part).toInt\
    \ - 1\n                if(strength > extension_parts.indexOf(\"Strongest\")) {\n\
    \                    extension_parts.updated(extension_parts.indexOf(\"Strongest\"\
    ), strength)\n                }\n            } else {\n                extension_parts\
    \ :+= part\n            }\n        }\n        if(extension_parts.contains(\"Strongest\"\
    )) {\n            val strength = extension_parts(extension_parts.indexOf(\"Strongest\"\
    )).toString.toUpperCase.lastIndexOf(\"Strongest\").toInt\n            val strength_str\
    \ = extension_parts(extension_parts.indexOf(\"Strongest\")).toString.toUpperCase\n\
    \            if(strength > extension_parts.indexOf(\"Fed\")) {\n             \
    \   extension_parts.updated(extension_parts.indexOf(\"Fed\"), strength)\n    \
    \        } else if(strength > extension_parts.indexOf(\"Cheese\")) {\n       \
    \         extension_parts.updated(extension_parts.indexOf(\"Cheese\"), strength)\n\
    \            } else if(strength > extension_parts.indexOf(\"AA\")) {\n       \
    \         extension_parts.updated(extension_parts.indexOf(\"AA\"), strength)\n\
    \            }\n        }\n        extension_parts.reverse.mkString(\".\")\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptc5t2wuk.scala:25:27 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mpart\e[0m = part\n\
    \e[31m\e[31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m      \
    \                     Recursive \e[33mvalue\e[0m \e[35mpart\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010001
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Write your code\
    \ here\n        val strongest = extensions.getOrElse(extensions.size-1, 0)\n \
    \       var strongest_names : List[String] = Nil\n        for(i <- 0 until extensions.size-1){\n\
    \            val name = (extensions(i)).toLowerCase \n            val strength\
    \ = name.charAt(0) - name.charAt(1)\n            val temp = StrongestExtension(class_name\
    \ +\".\"+extensions(i), extensions.drop(i+1))\n            if(temp._1.compareTo(strongest)\
    \ > 0){\n                strongest = temp._1\n                strongest_names\
    \ = extensions.take(i)\n            }\n        }\n        if(strongest_names.length\
    \ > 1){\n            strongest_names(0)\n        }else{\n            strongest_names(0)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgmk2ry41.scala:22:35 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrongest\e[0m = extensions.getOrElse(extensions.size-\e\
    [31m1\e[0m, \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value getOrElse is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgmk2ry41.scala:28:20\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m(temp._1.compareTo(strongest)\
    \ > \e[31m0\e[0m){\n\e[31m\e[31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m               value _1 is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpgmk2ry41.scala:29:33 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                strongest = temp._1\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         value _1 is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660010005
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strongest = extensions.foldLeft(math.max(extensions.length))\
    \ { (max, name) =>\n            val cap = name.toUpperCase - name.toLowerCase\n\
    \            val sm = name.toLowerCase - name\n            cap / sm\n        }\n\
    \        \"$class_name.$strongest\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpayk6u69m.scala:21:49 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstrongest\e[0m = extensions.foldLeft(math.max(extensions.length))\
    \ { (\e[36mmax\e[0m, \e[36mname\e[0m) =>\n\e[31m\e[31m   |\e[0m              \
    \                              ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mpackage\e[0m \e[35mscala.math\e\
    [0m with types\n\e[31m   |\e[0m (x: Double, y: Double): Double\n\e[31m   |\e[0m\
    \ (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long, y: Long): Long\n\e[31m\
    \   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch arguments ((extensions.length\
    \ : => Int))\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpayk6u69m.scala:22:39\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcap\e[0m = name.toUpperCase - name.toLowerCase\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpayk6u69m.scala:23:38 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36msm\e[0m = name.toLowerCase\
    \ - name\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue - is not a member of String, but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660010006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code here\n\
    \        val map = mutable.Map.empty[String, Int]\n        extensions.foreach\
    \ { extension =>\n            val len = extension.length\n            val cap\
    \ = extension.toCharArray.filter(_ >= 'A' && _ <= 'Z').length\n            val\
    \ sm = extension.toCharArray.filter(_ >= 'a' && _ <= 'z').length\n           \
    \ val value = cap - sm\n            map += extension -> (value)\n        }\n \
    \       val maxKey = map.toSeq.maxBy(_._1)._1\n        val maxValue = map.get(maxKey)._1\n\
    \        val className = class_name.split(\".\").last\n        className + \"\
    .\" + maxKey\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_6363hpf.scala:22:18 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E086] Syntax Error: /tmp/tmp_6363hpf.scala:25:51 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mcap\e[0m = extension.toCharArray.filter(_\
    \ >= \e[31m'A'\e[0m && _ <= \e[31m'Z'\e[0m).length\n\e[31m\e[31m   |\e[0m    \
    \                                               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp_6363hpf.scala:26:50 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36msm\e[0m = extension.toCharArray.filter(_\
    \ >= \e[31m'a'\e[0m && _ <= \e[31m'z'\e[0m).length\n\e[31m\e[31m   |\e[0m    \
    \                                              ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 Wrong number of parameters, expected:\
    \ 1\n3 errors found\n"
  stdout: ''
  timestamp: 1660010003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Create a list\
    \ of all extensions of class name\n        val all_extensions = extensions.filter\
    \ {\n            x => x != class_name\n        }\n        // Find the maximum\
    \ of the list with filter\n        val max_extension = all_extensions.maxBy(x\
    \ => x.length)\n        // Create a list of all extensions of the maximum extension\n\
    \        val max_extension_extensions = max_extension.filter(x => x != class_name)\n\
    \        // Find the maximum of the list with filter\n        val max_extension_strength\
    \ = max_extension_extensions.maxBy(x => x.length)\n        // Create a list of\
    \ all extensions of the maximum extension\n        val max_extension_strength_extensions\
    \ = max_extension_strength.filter(x => x != class_name)\n        \n        //\
    \ Return the class name\n        class_name + \".\" + max_extension_strength_extensions.head\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprar_j1vb.scala:28:65 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mmax_extension_extensions\e\
    [0m = max_extension.filter(\e[36mx\e[0m => x != class_name)\n\e[31m\e[31m   |\e\
    [0m                                                                 ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprar_j1vb.scala:30:75\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e\
    [36mmax_extension_strength\e[0m = max_extension_extensions.maxBy(\e[36mx\e[0m\
    \ => x.length)\n\e[31m\e[31m   |\e[0m                                        \
    \                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                       value length is not a member of Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmprar_j1vb.scala:30:82 -----------------------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mmax_extension_strength\e[0m =\
    \ max_extension_extensions.maxBy(\e[36mx\e[0m => x.length)\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \        ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e\
    [0m \e[35mDeprecatedFloatOrdering\e[0m in \e[33mobject\e[0m \e[35mOrdering\e[0m\
    \ and \e[33mobject\e[0m \e[35mBigInt\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter cmp of \e[33mmethod\e[0m \e[35mmaxBy\e\
    [0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660010007
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var num = 0\n   \
    \     var extension = \"\"\n        extensions.foreach{x => \n            if(x.equals(class_name.substring(0,x.length))){\n\
    \                extension = x\n                num += 1\n            }\n    \
    \    }\n        if(num != 0){\n            extension +=  class_name.substring(extension.length\
    \ + 1)\n        }else{\n            extension = class_name.substring(0,extension.length)\n\
    \        }\n        return extension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 9, length 7\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.StrongestExtension$$anonfun$1(tmpfosfbwzm.scala:24)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\tat scala.collection.immutable.List.foreach(List.scala:333)\n\
    \tat Problem$.StrongestExtension(tmpfosfbwzm.scala:27)\n\tat Problem$.main(tmpfosfbwzm.scala:37)\n\
    \tat Problem.main(tmpfosfbwzm.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010008
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extensions_length\
    \ = extensions.length\n        var max_strength = -1\n        var result: String\
    \ = null\n        for(x<-0 to extensions_length-1){\n            if(max_strength\
    \ < extensions(x).length - 1){\n                max_strength = extensions(x).length\
    \ - 1\n                result = class_name + \".\" + extensions(x)\n         \
    \   }\n        }\n        result\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp400019he.scala:35)\n\tat Problem.main(tmp400019he.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extensions_map\
    \ = extensions.map(e => (e, class_name)).toMap\n        extensions_map.values.sorted.headOption.getOrElse(\"\
    \")\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7n_ztwor.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        extensions_map.values.sorted.headOption.getOrElse(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        value sorted is not a member of Iterable[String]\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strength : List[String]\
    \ = Nil\n        var current_extension : String = Nil\n        for(extension <-\
    \ extensions){\n            val length = extension.length\n            val num_uppercase\
    \ = length filter (c => c.isUpper)\n            val num_lowercase = length filter\
    \ (c => c.isLower)\n            val difference = num_uppercase - num_lowercase\n\
    \            val strength_value = difference / CAP\n            if(strength_value\
    \ >= 0){\n                strength += extension :: Nil\n                current_extension\
    \ = extension\n            }\n        }\n        if(strength.length > 1){\n  \
    \          val length = current_extension.length\n            val num_uppercase\
    \ = length filter (c => c.isUpper)\n            val num_lowercase = length filter\
    \ (c => c.isLower)\n            val difference = num_uppercase - num_lowercase\n\
    \            val strength_value = difference / CAP\n            if(strength_value\
    \ < 0){\n                strength.sortBy(x => x.length)\n                for(i\
    \ <- 0 until strength.length){\n                    if(strength(i) == strength_value){\n\
    \                        strength(i)\n                    }\n                }\n\
    \            }\n        }\n        for(i <- 0 until strength.length){\n      \
    \      if(strength(i) == strength_value(1)){\n                current_extension\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb8gav0eb.scala:22:41\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mcurrent_extension\e\
    [0m : \e[35mString\e[0m = Nil\n\e[31m\e[31m   |\e[0m                         \
    \                ^^^\e[0m\n\e[31m   |\e[0m                                 Found:\
    \    collection.immutable.Nil.type\n\e[31m   |\e[0m                          \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpb8gav0eb.scala:25:39 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m            \e[33mval\e[0m \e[36mnum_uppercase\e[0m = length filter (\e[36mc\e\
    [0m => c.isUpper)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value filter is not a member\
    \ of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb8gav0eb.scala:26:39\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m\
    \ \e[36mnum_lowercase\e[0m = length filter (\e[36mc\e[0m => c.isLower)\n\e[31m\e\
    [31m   |\e[0m                                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                value filter is not a member of Int\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpb8gav0eb.scala:30:25 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                strength += extension :: Nil\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not\
    \ a member of List[String] - did you mean List[String].!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpb8gav0eb.scala:36:39 ------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \e[36mnum_uppercase\e[0m = length\
    \ filter (\e[36mc\e[0m => c.isUpper)\n\e[31m\e[31m   |\e[0m                  \
    \              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \     value filter is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpb8gav0eb.scala:37:39 ------------------------\e[0m\e[0m\n\e[31m37 |\e\
    [0m            \e[33mval\e[0m \e[36mnum_lowercase\e[0m = length filter (\e[36mc\e\
    [0m => c.isLower)\n\e[31m\e[31m  "
  stdout: ''
  timestamp: 1660010008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ : String = extensions(0) \n        var strength : Int = 0 \n        var i :\
    \ Int = 0 \n        var j : Int = 0 \n        var strength_count : Int = 0 \n\
    \        while (i < extensions.size && j < extensions.size) {\n            val\
    \ extension = extensions(i).toLowerCase \n            val strength_char = extension.count(x\
    \ => x.isUpper) \n            if (strength_char == 0)\n                i ++ j\
    \ ++ 1\n            else\n                strength_count += (strength_char * extension.count(x\
    \ => x.isLower)) \n            if (strength_count > strength) {\n            \
    \    strongest_extension = extensions(j) \n                strength = strength_count\
    \ \n            }\n            j ++ 1\n        }\n        return class_name +\
    \ \".\" + strongest_extension\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9qgt0ggb.scala:30:18 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                i ++ j ++ \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value ++ is\
    \ not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9qgt0ggb.scala:37:14\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            j ++ \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ ++ is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660010007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val map = extensions\
    \ groupBy { _ map { _.toUpperCase } }.map { case (uppers, elems) =>\n        \
    \    (uppers.head, uppers.last, elems.size)\n        }.toMap\n        if (map.size\
    \ == 0) {\n            \"\"\n        }\n        else {\n            class_name\
    \ + map.values.sortWith(_._3 < _._3).head._3\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpdd0l5cqk.scala:21:39 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = extensions groupBy\
    \ { _ map { _.toUpperCase } }.map { \e[33mcase\e[0m (uppers, elems) =>\n\e[31m\e\
    [31m   |\e[0m                                       ^\e[0m\n\e[31m   |\e[0m  \
    \ Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 =>\
    \ \n\e[31m   |\e[0m     _$1 map \n\e[31m   |\e[0m       {\n\e[31m   |\e[0m   \
    \      _$2 => _$2.toUpperCase\n\e[31m   |\e[0m       }.\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdd0l5cqk.scala:28:36 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m            class_name + map.values.sortWith(_._3 < _._3).head._3\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                value sortWith is not a member of Iterable[List[String]]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // The most common\
    \ extension should be the first.\n        var most_common = \"\"\n        val\
    \ counter = scala.collection.mutable.Map[String, Int]()\n        for (extension\
    \ <- extensions) {\n            val counter_size = counter.get(extension)\n  \
    \          if (counter_size == null) {\n                counter.put(extension,\
    \ 1)\n            } else {\n                counter.put(extension, counter_size\
    \ + 1)\n            }\n        }\n        counter.foreach {\n            case\
    \ (extension, count) => if (count > counter(most_common)) most_common = extension\n\
    \        }\n        class_name + \".\" + most_common\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2noc6qbm.scala:29:52 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                counter.put(extension, counter_size +\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue + is not a member of Option[Int], but could be made\
    \ available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the\
    \ following imports might make progress towards fixing the problem:\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660010008
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // TODO: Fill in\
    \ the code here\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp470mun93.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m        \e[34m// TODO: Fill\
    \ in the code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010007
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        \n        val class_name\
    \ = class_name.trim\n        val extensions = extensions.toSet\n        val length\
    \ = extensions.length\n        val extensions_length = extensions.length\n   \
    \     val max_length = extensions_length - 1\n        val max_score = max_length.toDouble\n\
    \n        var strongest = \"\"\n        var strength = max_score\n        var\
    \ index = 0\n        while(strength > 0.0 && index < max_length) {\n         \
    \   val extension = extensions.apply(index)\n            val extension_length\
    \ = extension.length\n            val extension_score = extension_length - strength\n\
    \            val extension_strength = extension_length - strength\n          \
    \  if(extension_score > strength) {\n                strongest = extension\n \
    \               strength = extension_score\n            }\n            index +=\
    \ 1\n        }\n        strongest\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgj2d1ew7.scala:22:25 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclass_name\e[0m = class_name.trim\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mclass_name\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpgj2d1ew7.scala:23:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions\e[0m = extensions.toSet\n\e[31m\e[31m   |\e[0m            \
    \             ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mextensions\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010004
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val result = extensions\
    \ match {\n            case Nil => throw new IllegalArgumentException\n      \
    \      case h :: t => if (h.matches(\"[A-Z]*\"))\n                val cap = h.length\n\
    \                t.filter(_.matches(\"[a-z]*\")).map(_.length).sum - cap match\
    \ {\n                    case 0 => h\n                    case s => h.substring(0,\
    \ h.length - s) + s\"$cap$s\"\n                }\n            case _ => throw\
    \ new IllegalArgumentException\n        }\n        class_name + result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzqcm35me.scala:34)\n\tat Problem.main(tmpzqcm35me.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010010
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        \n        val s =\
    \ \"\"\n        val map = new mutable.HashMap[Int, String]()\n        extensions.foreach{e\
    \ => {\n            val i = e.toUpperCase.count(_ == 'A') - e.toUpperCase.count(_\
    \ == 'a')\n            val l = e.toLowerCase.count(_ == 'a')\n            val\
    \ value = if (i == 0) \"\" else (i / l).toString\n            val k = if (value\
    \ < map.get(value)) value else map.get(value)\n            map.put(k, e)\n   \
    \     }}\n        val max = map.values.toList.max\n        val maxValue = map.get(max)\n\
    \        val k = if (maxValue == \"\") \"\" else maxValue\n        s = s + k\n\
    \        val res = \"%s.%s\".format(class_name, s)\n        res\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"),\
    \ (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9jgudt3l.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp9jgudt3l.scala:34:10\
    \ -----------------------------\e[0m\e[0m\n\e[31m34 |\e[0m        s = s + k\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Reassignment\
    \ to val s\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010006
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var current_extension\
    \ = extensions.reduceLeft(\"\")((prev, extension) => prev + extension.substring(0,\
    \ 1))\n        var strongest = -1\n        var strongest_extension = \"\"\n  \
    \      for (extension <- extensions) {\n            if (current_extension.contains(extension)\
    \ && current_extension.substring(current_extension.length - extension.length).equalsIgnoreCase(extension))\
    \ {\n                strongest = current_extension.substring(current_extension.length\
    \ - extension.length).toInt - extension.toInt\n            }\n            if (strongest\
    \ > strongest_extension.length) {\n                strongest_extension = current_extension.substring(current_extension.length\
    \ - extension.length)\n            }\n        }\n        return class_name + \"\
    .\" + strongest_extension\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2l1o0qlj.scala:21:54\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mcurrent_extension\e\
    [0m = extensions.reduceLeft(\e[31m\"\"\e[0m)((\e[36mprev\e[0m, \e[36mextension\e\
    [0m) => prev + extension.substring(\e[31m0\e[0m, \e[31m1\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                      ^^\e[0m\n\e[31m\
    \   |\e[0m                                    Found:    (\e[32m\"\"\e[0m : String)\n\
    \e[31m   |\e[0m                                    Required: (String, String)\
    \ => String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmp2l1o0qlj.scala:21:59\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e\
    [0m \e[36mcurrent_extension\e[0m = extensions.reduceLeft(\e[31m\"\"\e[0m)((\e\
    [36mprev\e[0m, \e[36mextension\e[0m) => prev + extension.substring(\e[31m0\e[0m,\
    \ \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                     ^^^^\e[0m\n\e[31m   |\e[0m                       Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                       I could\
    \ not infer the type of the parameter prev.\n\e[31m\e[31m-- [E081] Type Error:\
    \ /tmp/tmp2l1o0qlj.scala:21:65 -----------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mvar\e[0m \e[36mcurrent_extension\e[0m = extensions.reduceLeft(\e\
    [31m\"\"\e[0m)((\e[36mprev\e[0m, \e[36mextension\e[0m) => prev + extension.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m))\n\e[31m\e[31m   |\e[0m                            \
    \                                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \          Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m          \
    \        I could not infer the type of the parameter extension.\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp2l1o0qlj.scala:25:34 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (current_extension.contains(extension)\
    \ && current_extension.substring(current_extension.length - extension.length).equalsIgnoreCase(extension))\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m "
  stdout: ''
  timestamp: 1660010013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // your code goes\
    \ here\n        var index = 0\n        var best = 0\n        var max = 0\n   \
    \     for (e <- extensions) {\n            val c = e.toUpperCase().count(_ ==\
    \ 'A') - e.toUpperCase().count(_ == 'B')\n            val l = e.toUpperCase().count(_\
    \ == 'a') - e.toUpperCase().count(_ == 'b')\n            val n = e.toUpperCase().count(_\
    \ == 'C') - e.toUpperCase().count(_ == 'D')\n            val m = e.toUpperCase().count(_\
    \ == 'C') - e.toUpperCase().count(_ == 'D')\n            if (c < best) {\n   \
    \             index = e\n                best = c\n            }\n           \
    \ if (l < best) {\n                index = e\n                best = l\n     \
    \       }\n            if (n < best) {\n                index = e\n          \
    \      best = n\n            }\n            if (m < best) {\n                index\
    \ = e\n                best = m\n            }\n        }\n        if (best ==\
    \ 0) {\n            \"\"\n        } else {\n            class_name + \"_\" + index\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2r1z6g8b.scala:31:24\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                index = e\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (e : String)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2r1z6g8b.scala:35:24\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m                index = e\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (e : String)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2r1z6g8b.scala:39:24\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m                index = e\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (e : String)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2r1z6g8b.scala:43:24\
    \ --------------------\e[0m\e[0m\n\e[31m43 |\e[0m                index = e\n\e\
    [31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m           \
    \             Found:    (e : String)\n\e[31m   |\e[0m                        Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strength = 0\n\
    \        var strongest_extension = \"\"\n\n        extensions.foreach(extension\
    \ => {\n            if(extension.contains(\"_\")){\n                strength =\
    \ extension.split(\"_\").filter(_ => _.toUpperCase == _).length\n            \
    \    if(strength > strongest_extension.length){\n                    strongest_extension\
    \ = extension\n                }\n            }\n        })\n        val class_with_strongest_extension\
    \ = class_name + \"_\" + strongest_extension\n        if(extensions.filter(x =>\
    \ x.split(\"_\").length == 1).length == 0){\n            return class_with_strongest_extension\n\
    \        }\n        var secondStrongest_extension = \"\"\n        extensions.foreach(extension\
    \ => {\n            if(extension.contains(\"_\")){\n                strength =\
    \ extension.split(\"_\").filter(_ => _.toUpperCase == _).length\n            \
    \    if(strength > strongest_extension.length){\n                    secondStrongest_extension\
    \ = extension\n                }\n            }\n        })\n        if(secondStrongest_extension.length\
    \ > 0){\n            class_with_strongest_extension += \".\" + secondStrongest_extension\n\
    \        }\n        return class_with_strongest_extension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpzumcdz93.scala:26:60 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                strength = extension.split(\e[31m\"_\"\
    \e[0m).filter(_ => _.toUpperCase == _).length\n\e[31m\e[31m   |\e[0m         \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \ Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$2 of expanded function:\n\e[31m   |\e[0m   (_$2,\
    \ _$3) => _$2.toUpperCase == _$3.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpzumcdz93.scala:26:77\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                strength\
    \ = extension.split(\e[31m\"_\"\e[0m).filter(_ => _.toUpperCase == _).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$3\
    \ of expanded function:\n\e[31m   |\e[0m   (_$2, _$3) => _$2.toUpperCase == _$3.\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmpzumcdz93.scala:39:60 -----------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                strength = extension.split(\e[31m\"_\"\
    \e[0m).filter(_ => _.toUpperCase == _).length\n\e[31m\e[31m   |\e[0m         \
    \                                                   ^\e[0m\n\e[31m   |\e[0m  \
    \ Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$5 of expanded function:\n\e[31m   |\e[0m   (_$5,\
    \ _$6) => _$5.toUpperCase == _$6.\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpzumcdz93.scala:39:77\
    \ -----------------------------\e[0m\e[0m\n\e[31m39 |\e[0m                strength\
    \ = extension.split(\e[31m\"_\"\e[0m).filter(_ => _.toUpperCase == _).length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                     ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$6\
    \ of expanded function:\n\e[31m   |\e[0m   (_$5, _$6) => _$5.toUpperCase == _$6.\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzumcdz93.scala:46:43 --------"
  stdout: ''
  timestamp: 1660010013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val list = extensions.map(_.replaceAll(\"\
    [^a-z]\", \"\").toLowerCase).sorted\n        val first = extensions.find(e =>\
    \ list.indexOf(e.toLowerCase) > list.indexOf(_.replaceAll(\"[^a-z]\", \"\").toLowerCase))\n\
    \        val index = list.indexOf(first.toLowerCase)\n        val strength = list.length\
    \ - index - 1\n        class_name.take(class_name.lastIndexOf('.')).dropRight(1).mkString.concat(\"\
    .\").concat(extensions(index))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp7g1ddpm5.scala:22:84 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfirst\e[0m = extensions.find(\e\
    [36me\e[0m => list.indexOf(e.toLowerCase) > list.indexOf(_.replaceAll(\e[31m\"\
    [^a-z]\"\e[0m, \e[31m\"\"\e[0m).toLowerCase))\n\e[31m\e[31m   |\e[0m         \
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$2 of expanded function:\n\e\
    [31m   |\e[0m   _$2 => _$2.replaceAll(\e[32m\"[^a-z]\"\e[0m, \e[32m\"\"\e[0m).toLowerCase.\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7g1ddpm5.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mindex\e[0m = list.indexOf(first.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     value toLowerCase is not a member of Option[String]\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        //TODO: fill this\
    \ in\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjcf3ih9q.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m        \e[34m//TODO: fill\
    \ this in\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val map = new mutable.HashMap[String,\
    \ Int]()\n        extensions.foreach{x => map.put(x.toUpperCase(), (map.getOrElse(x.toUpperCase(),\
    \ 0) + 1)) }\n\n        if (map.size == extensions.size) {\n            val strongest\
    \ = map.filter(x => x._2 > map.getOrElse(x._2, 0)).sortBy(x => -x._1).head._1\n\
    \            (class_name + \".\" + strongest)\n        } else {\n            val\
    \ strongest = extensions.filter(x => x.toUpperCase.head >= map.getOrElse(x.toUpperCase(),\
    \ 0)).sortBy(x => -x.toUpperCase.head).head\n            (class_name + \".\" +\
    \ strongest)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpoevbhoz3.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010012
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        \n        val map\
    \ = new mutable.HashMap[Int, String]()\n        val strongest = extensions(0)\n\
    \        extensions.foreach{\n            ext => \n                val length\
    \ = ext.toList.size\n                if(length == 1) map.put(1, ext)\n       \
    \         else if(map.contains(length)) {\n                    map.put(length\
    \ - 1, ext)\n                } else {\n                    map.put(length, ext)\n\
    \                }\n        }\n        map.maxBy(_._1)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmb4i2zjw.scala:22:22 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010011
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val myExtensions\
    \ = extensions.map(ext => ext.substring(0, ext.length/2))\n        val upperLetters\
    \ = myExtensions.map(ext => ext.toUpperCase.size)\n        val lowerLetters =\
    \ myExtensions.map(ext => ext.toUpperCase.length)\n        val strength = upperLetters.zip(lowerLetters).map(_._1-_._2)\n\
    \        val highestStrength = strength.max\n        val extension = extensions.find(ext\
    \ => ext.toUpperCase.size == highestStrength)\n        if (extension != None)\
    \ s\"$class_name.$extension\" else \"No extension\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphe9vhr3e.scala:24:60 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = upperLetters.zip(lowerLetters).map(_._1-_._2)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \  ^^^^\e[0m\n\e[31m   |\e[0m                                         value _1\
    \ is not a member of Int\n\e[31m\e[31m-- Error: /tmp/tmphe9vhr3e.scala:25:42 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mhighestStrength\e[0m = strength.max\n\
    \e[31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e[0m \e[35mByte\e[0m in\
    \ \e[33mobject\e[0m \e[35mOrdering\e[0m and \e[33mobject\e[0m \e[35mBigInt\e[0m\
    \ in \e[33mobject\e[0m \e[35mOrdering\e[0m match type Ordering[B] of parameter\
    \ ord of \e[33mmethod\e[0m \e[35mmax\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e\
    [0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010015
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val map = Map( extensions\
    \ zip extensions.map(x => x.filter(i => i.length >=2).length).toMap )\n      \
    \  val maxStrength = extensions match {\n            case Nil => -1\n        \
    \    case h :: t => h match {\n                case n if n.length >=2 => map(n)\
    \ match {\n                    case n if n.size > maxStrength => maxStrength\n\
    \                    case n => map(n)\n                }\n                case\
    \ _ => -1\n            }\n        }\n        class_name + extensions.foldLeft(\"\
    \")( (s, ext) => {\n            val c = ext.filter(i => i.length >=2).length\n\
    \            if(maxStrength < 0) \"\" else s + \".\" + ext\n        }) + extensions.last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgpk23i20.scala:21:74 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = Map( extensions\
    \ zip extensions.map(\e[36mx\e[0m => x.filter(\e[36mi\e[0m => i.length >=\e[31m2\e\
    [0m).length).toMap )\n\e[31m\e[31m   |\e[0m                                  \
    \                                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                            value length is not a member of Char\n\e[31m\e[31m--\
    \ Error: /tmp/tmpgpk23i20.scala:21:99 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = Map( extensions\
    \ zip extensions.map(\e[36mx\e[0m => x.filter(\e[36mi\e[0m => i.length >=\e[31m2\e\
    [0m).length).toMap )\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0m                                        Cannot prove that Int <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                       \
    \ where:    K is a type variable\n\e[31m   |\e[0m                            \
    \                      V is a type variable\n\e[31m   |\e[0m                 \
    \                       .\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgpk23i20.scala:25:46\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mcase\e\
    [0m n \e[33mif\e[0m n.length >=\e[31m2\e[0m => map(n) \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m                                              ^\e[0m\n\e[31m   |\e\
    [0m                                              Found:    (n : String)\n\e[31m\
    \   |\e[0m                                              Required: Nothing\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgpk23i20.scala:26:32\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                    \e[33mcase\e\
    [0m n \e[33mif\e[0m n.size > maxStrength => maxStrength\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^\e[0m\n\e[31m   |\e[0mvalue size is not a\
    \ member of Nothing, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        \n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"),\
    \ (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgcik8byf.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m        \n\e[31m22 |\e[0m \
    \   }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010014
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here!\n        val extensions_map = extensions.groupBy(_).mapValues(_.map(_).toList).toMap\n\
    \n        val class_names = extensions_map.get(class_name).map(_._2).toList\n\n\
    \        if (class_names.length == 0){\n            \"No extensions found for\
    \ \" + class_name\n        }else if (class_names.length == 1) {\n            class_name(class_names(0))\n\
    \        }else if (class_names.length >= 2) {\n            val max_extensions\
    \ = max_extension(class_names, extensions_map)\n            class_name(max_extensions)\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpeythskgv.scala:22:48 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.groupBy(_).mapValues(_.map(_).toList).toMap\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0mMissing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0mI could not\
    \ infer the type of the parameter _$1 of expanded function:\n\e[31m   |\e[0m_$1\
    \ => \n\e[31m   |\e[0m  extensions.groupBy(_$1).mapValues((_$2, _$3) => _$2.map(_$3).toList).toMap.\n\
    \e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpeythskgv.scala:22:61 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.groupBy(_).mapValues(_.map(_).toList).toMap\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \     ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 Wrong\
    \ number of parameters, expected: 1\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpeythskgv.scala:29:22 --------------------\e[0m\e[0m\n\e[31m29 |\e[0m\
    \            class_name(class_names(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  Char\n\e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeythskgv.scala:31:33 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mmax_extensions\e[0m\
    \ = max_extension(class_names, extensions_map)\n\e[31m\e[31m   |\e[0m        \
    \                         ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 Not found: max_extension\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010016
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Create a HashMap\
    \ to store class/extension pairs\n        // and iterate through extensions list\n\
    \        val class_extensions = mutable.HashMap[String, String]()\n        for\
    \ (e <- extensions)\n            class_extensions.put(e, class_name + \".\" +\
    \ e);\n        // Get the max element from hashmap\n        // Iterate through\
    \ the hashmap and see which element has the highest value\n        // and return\
    \ it\n        val max_element = class_extensions.maxBy(_._2)._1\n        val max_element_class_name\
    \ = class_extensions(max_element)\n        // Remove the max element from hashmap\n\
    \        class_extensions.remove(max_element)\n        return max_element_class_name\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpilwzl52e.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclass_extensions\e[0m =\
    \ mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                               ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extensions_count\
    \ = extensions.toList.length\n        if (extensions_count == 0) {\n         \
    \   return class_name\n        } else if (extensions_count == 1) {\n         \
    \   val extension = extensions.toList(0)\n            if (extension.contains(\"\
    SM\")) {\n                val upper = extension.substring(0, extension.indexOf('SM')).toCharArray\n\
    \                val lower = extension.substring(extension.indexOf('SM') + 2)\n\
    \                var upper_count = 0\n                var lower_count = 0\n  \
    \              for (c <- upper) {\n                    if (c >= 'A' && c <= 'Z')\
    \ {\n                        upper_count += 1\n                    }\n       \
    \         }\n                for (c <- lower) {\n                    if (c >=\
    \ 'a' && c <= 'z') {\n                        lower_count += 1\n             \
    \       }\n                }\n                val strength = (upper_count) - (lower_count)\n\
    \                if (strength >= 0) {\n                    return class_name +\
    \ \".\" + extension + extension.substring(upper.size, extension.size)\n      \
    \          } else {\n                    return class_name + \".\" + extension\
    \ + extension.substring(upper.size, extension.size) + \"SM\"\n               \
    \ }\n            }\n        }\n        var max_strength = 0\n        val extensions_counter\
    \ = mutable.Map[String, (Int, Int)]()\n        for (extension <- extensions) {\n\
    \            val extension_parts = extension.split(\"SM\")\n            if (extensions_counter.contains(extension))\
    \ {\n                val old_count = extensions_counter(extension)._1\n      \
    \          val new_count = extension_parts.head.toInt - old_count.toInt\n    \
    \            if (new_count < 0) {\n                    max_strength = max_strength\
    \ - old_count.toInt\n                } else {\n                    max_strength\
    \ = max_strength + new_count.toInt\n                }\n            } else {\n\
    \                val new_count = extension_parts.head.toInt\n                extensions_counter(extension)\
    \ = ((new_count, extensions_count.toInt))\n                max_strength = max_strength\
    \ + new_count.toInt\n            }\n        }\n        val strength_of_extension\
    \ = max_strength / extensions_count.toInt\n        val best_extensions = extensions_counter.values.minBy\
    \ { case (strength, _) => strength }\n        if (strength_of_extension < 0.0)\
    \ {\n            return StrongestExtension(class_name, best_extensions._2)\n \
    \       } else {\n            best_extensions._1\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpfa21tylx.scala:27:72 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mval\e[0m \e[36mupper\e[0m = extension.substring(\e\
    [31m0\e[0m, extension.indexOf(\e[31m'SM\e[0m')).toCharArray\n\e[31m\e[31m   |\e\
    [0m                                                                        ^\e\
    [0m\n\e[31m   |\e[0m                                              unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpfa21tylx.scala:28:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mval\e[0m \e[36mlower\e[0m = extension.substring(extension.indexOf(\e\
    [31m'SM\e[0m') + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \                                             ^\e[0m\n\e[31m   |\e[0m        \
    \                                      unclosed character literal\n\e[31m\e[31m--\
    \ Error: /tmp/tmpfa21tylx.scala:27:69 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mval\e[0m \e[36mupper\e[0m = extension.substring(\e\
    [31m0\e[0m, extension.indexOf(\e[31m'SM\e[0m')).toCharArray\n\e[31m\e[31m   |\e\
    [0m                                                                     ^\e[0m\n\
    \e[31m   |\e[0msymbol literal 'SM is no longer supported,\n\e[31m   |\e[0muse\
    \ a string literal \"SM\" or an application Symbol(\"SM\") instead,\n\e[31m  \
    \ |\e[0mor enclose in braces '{SM} if you want a quoted expression.\n\e[31m  \
    \ |\e[0mFor now, you can also `import language.deprecated.symbolLiterals` to accept\n\
    \e[31m   |\e[0mthe idiom, but this possibility might no longer be available in\
    \ the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfa21tylx.scala:28:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                \e[33mval\e\
    [0m \e[36mlower\e[0m = extension.substring(extension.indexOf(\e[31m'SM\e[0m')\
    \ + \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e\
    [0m                ')' expected, but 'val' found\n4 errors found\n"
  stdout: ''
  timestamp: 1660010013
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n       var strongest_extension\
    \ = \"\"\n       var strongest_extension_strength = -1\n       extensions.foreach\
    \ {\n          ext =>\n          if(ext.matches(s\"${class_name.capitalize}.${ext.substring(0,\
    \ 1).toUpperCase}.*\")){\n             strongest_extension = ext\n           \
    \  strongest_extension_strength = ext.substring(0, 1).length\n          }\n  \
    \     }\n       if(strongest_extension_strength > 0) return strongest_extension\n\
    \       extensions.sortWith(_ < _)\n        .find(_.matches(s\"${class_name.capitalize}.*\"\
    ))\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgyt8pfm1.scala:32:13\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m       extensions.sortWith(_\
    \ < _)\n\e[31m32 |\e[0m        .find(_.matches(\e[31ms\"\e[0m${class_name.capitalize}\e\
    [31m.*\"\e[0m))\n\e[31m\e[31m   |\e[0m       ^\e[0m\n\e[31m   |\e[0m       Found:\
    \    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m  \
    \ |\e[0m       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010018
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        extensions match\
    \ {\n            case Nil => \"Slices\"\n            case head::tail => {\n  \
    \              val cap = head.filter(c => c.isUpper).length\n                val\
    \ sm = head.filter(c => c.isLower).length\n                cap - sm match {\n\
    \                    case x if x > 0 => class_name + head.mkUpperCase\n      \
    \              case x if x > 0 => head.mkUpperCase\n                    case x\
    \ if x > 0 => class_name + tail.mkUpperCase\n                    case x if x <\
    \ 0 => head.mkUpperCase\n                    case x if x < 0 => class_name + tail.mkUpperCase\n\
    \                    case x if x < 0 => class_name + head.mkUpperCase + tail.mkUpperCase\n\
    \                    case x if x < 0 => class_name + head.mkUpperCase\n      \
    \              case x if x < 0 => class_name + tail.mkUpperCase\n            \
    \        case x => class_name + head.mkUpperCase + tail.mkUpperCase\n        \
    \        }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6m671t7o.scala:27:57 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                    \e[33mcase\e[0m x \e[33mif\e[0m x\
    \ > \e[31m0\e[0m => class_name + head.mkUpperCase\n\e[31m\e[31m   |\e[0m     \
    \                                               ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue mkUpperCase is not a member of String - did you mean head.toUpperCase?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6m671t7o.scala:28:44 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    \e[33mcase\e[0m x \e[33mif\e[0m x\
    \ > \e[31m0\e[0m => head.mkUpperCase\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mkUpperCase\
    \ is not a member of String - did you mean head.toUpperCase?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp6m671t7o.scala:29:57 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                    \e[33mcase\e[0m x \e[33mif\e[0m x > \e\
    [31m0\e[0m => class_name + tail.mkUpperCase\n\e[31m\e[31m   |\e[0m           \
    \                                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       value mkUpperCase is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6m671t7o.scala:30:44 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    \e[33mcase\e[0m x \e[33mif\e[0m x\
    \ < \e[31m0\e[0m => head.mkUpperCase\n\e[31m\e[31m   |\e[0m                  \
    \                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue mkUpperCase\
    \ is not a member of String - did you mean head.toUpperCase?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp6m671t7o.scala:31:57 ------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                    \e[33mcase\e[0m x \e[33mif\e[0m x < \e\
    [31m0\e[0m => class_name + tail.mkUpperCase\n\e[31m\e[31m   |\e[0m           \
    \                                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                       value mkUpperCase is not a member of List[String]\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6m671t7o.scala:32:57 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                    \e[33mcase\e[0m x \e[33mif\e[0m x\
    \ <"
  stdout: ''
  timestamp: 1660010021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strength = 0\n\
    \        var highest_strength = List[String]()\n        var strongest_name = List[String]()\n\
    \n        extensions.foreach { ext =>\n            val count = ext.map(x => x.toUpperCase.count(_\
    \ == x.toUpperCase.head)).sum\n            val strength = count / (ext.length\
    \ - 1)\n            if (strength > highest_strength.lastOption.getOrElse(-1))\n\
    \            {\n                highest_strength = List(strongest_name)\n    \
    \            strongest_name = List(ext)\n            }\n            else if (strength\
    \ == highest_strength.lastOption.getOrElse(-1)) {\n                strongest_name\
    \ ::: List(ext)\n            }\n        }\n        val strongest_extension = List(strongest_name.last)\n\
    \        class_name +: strongest_extension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoy45bfxa.scala:26:39 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = ext.map(\e\
    [36mx\e[0m => x.toUpperCase.count(_ == x.toUpperCase.head)).sum\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoy45bfxa.scala:30:40 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                highest_strength = List(strongest_name)\n\
    \e[31m\e[31m   |\e[0m                                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (strongest_name :\
    \ List[String])\n\e[31m   |\e[0m                               Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoy45bfxa.scala:38:8\
    \ ---------------------\e[0m\e[0m\n\e[31m38 |\e[0m        class_name +: strongest_extension\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e\
    [0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010020
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        extensions match\
    \ {\n            case Nil => class_name \n            case extension::rest =>\
    \ extension.init.toLowerCase - extension.last.toLowerCase match {\n          \
    \      case i if i > 0 => class_name + \".\" + extensions.lift(i).head\n     \
    \           case _ => class_name\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwvkj4ihg.scala:23:63 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m extension::rest => extension.init.toLowerCase\
    \ - extension.last.toLowerCase \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m     \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue - is not a member of String, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwvkj4ihg.scala:23:80\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e\
    [0m extension::rest => extension.init.toLowerCase - extension.last.toLowerCase\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                                  \
    \                               ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toLowerCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        \n        def cmp(x:\
    \ Int, y: Int) : Int = {\n            val diff = if (x<y) -1 else if (x>y) 1 else\
    \ 0\n            diff\n        }\n        \n        var strongest: String = \"\
    NOT_SET\"\n        var strongest_str: String = \"NOT_SET\"\n        var extension_length\
    \ = extensions.length\n        var i = 0\n        \n        while (i < extension_length\
    \ && extensions(i) != \"\") {\n            val class_name_length = class_name.length\n\
    \            val extension = extensions(i)\n            val extension_length =\
    \ extension.length\n            val extension_lowercase_letters = extension.substring(0,\
    \ extension.length-2)\n            val extension_uppercase_letters = extension.substring(extension.length-2)\n\
    \            var extension_uppercase_letters_length = extension_uppercase_letters.length\n\
    \            \n            val extension_lowercase_letters_length = extension_lowercase_letters.length\n\
    \            \n            val extension_strength = if (extension_uppercase_letters_length\
    \ == 0) -1 else if (extension_uppercase_letters_length < extension_lowercase_letters_length)\
    \ -1 else 0\n            val extension_lowercase_letter_strength = if (extension_uppercase_letters_length\
    \ == 0) -1 else if (extension_uppercase_letters_length < extension_lowercase_letters_length)\
    \ -1 else 0\n            \n            val extension_strength_multiplier = if\
    \ (extension_strength == 0) 1 else extension_strength\n            val extension_lowercase_letter_strength_multiplier\
    \ = if (extension_lowercase_letter_strength == 0) 1 else extension_lowercase_letter_strength\n\
    \            \n            val strength = extension_strength_multiplier * extension_strength\
    \ + extension_lowercase_letter_strength_multiplier * extension_lowercase_letter_strength\n\
    \            val strength_str = strength.toString\n            \n            if\
    \ (strength > strongest) {\n                strongest = strength\n           \
    \     strongest_str = strength_str\n            }\n            \n            i\
    \ += 1\n        }\n        \n        if (strongest_str != \"NOT_SET\") {\n   \
    \         class_name + \".\" + strongest_str\n        }\n        else {\n    \
    \        class_name\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpn4u65vsy.scala:51:25 -----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m            \e[33mif\e[0m (strength > strongest) {\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m>\e[0m in \e[33mclass\e[0m\
    \ \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Boolean\n\e[31m   |\e\
    [0m  (x: Float): Boolean\n\e[31m   |\e[0m  (x: Long): Boolean\n\e[31m   |\e[0m\
    \  (x: Int): Boolean\n\e[31m   |\e[0m  (x: Char): Boolean\n\e[31m   |\e[0m  (x:\
    \ Short): Boolean\n\e[31m   |\e[0m  (x: Byte): Boolean\n\e[31m   |\e[0m match\
    \ arguments ((strongest : String))\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpn4u65vsy.scala:52:28 --------------------\e[0m\e[0m\n\e[31m52 |\e[0m\
    \                strongest = strength\n\e[31m\e[31m   |\e[0m                 \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                            Found: \
    \   (strength : Int)\n\e[31m   |\e[0m                            Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val map = extensions.toMap\n\
    \        val length = map.size\n        var count = 0\n        var strongest =\
    \ 0\n        for (c <- map.keys) {\n            val cc = c.toUpperCase\n     \
    \       val ccc = c.toLowerCase\n            val sc = map.get(c)\n           \
    \ val ccs = map.get(ccc)\n            if (cc != ccc) {\n                var strongest\
    \ = 0\n                if (cc == ccc) {\n                    strongest = -1\n\
    \                }\n            }\n            if (cc != ccc && sc != sc) {\n\
    \                count += 1\n                val c = math.abs(sc - sc)\n     \
    \           if (c > strongest) {\n                    strongest = c\n        \
    \        }\n            }\n        }\n        if (strongest == 0) {\n        \
    \    class_name\n        }\n        else {\n            class_name + \".\" + map.keys.toList.sortWith((x,y)\
    \ => math.abs(x - y)).head\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprwqgast4.scala:21:34 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = extensions.toMap\n\
    \e[31m\e[31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m\
    \                                  Cannot prove that String <:< (K, V)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                  where:    K is a\
    \ type variable\n\e[31m   |\e[0m                                            V\
    \ is a type variable\n\e[31m   |\e[0m                                  .\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        if(extensions.isEmpty)\
    \ return class_name\n        val extension_counter = extension_counter(extensions)\n\
    \        var strength = -1\n        var strongest_extension = class_name + \"\
    _\" + extension_counter.getOrElse(\"\")\n        val sorted = extensions.toList.sortWith(_.length\
    \ >= extension_counter.getOrElse(0))\n        sorted.foreach(extension => {\n\
    \            if(strength >= 0)\n                if(strength > extension_counter.getOrElse(0)\
    \ && extension_counter.getOrElse(0) == extension.length)\n                   \
    \ strength = extension_counter.getOrElse(0) // found a better extension\n    \
    \        else\n                if(extension.length == extension_counter.getOrElse(0))\n\
    \                    strength = extension_counter.getOrElse(0) // found a better\
    \ extension\n        })\n        if(strength == -1) strongest_extension = class_name\
    \ + extensions.last\n        return strongest_extension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp99hdy1o9.scala:22:32 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextension_counter\e[0m =\
    \ extension_counter(extensions)\n\e[31m\e[31m   |\e[0m                       \
    \         ^\e[0m\n\e[31m   |\e[0m                            Recursive \e[33mvalue\e\
    [0m \e[35mextension_counter\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmp99hdy1o9.scala:25:48 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36msorted\e[0m = extensions.toList.sortWith(_.length\
    \ >= extension_counter.getOrElse(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m       \
    \                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n2 errors found\n"
  stdout: ''
  timestamp: 1660010017
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        \n        var extensions\
    \ = extensions \n        val classes : List[String] = extensions \n        val\
    \ strength : List[Int] = extensions.map(_.length)\n        val max_strength =\
    \ strength.max\n        val strength_of_max_strength = max_strength\n        val\
    \ index_of_max_strength = strength_of_max_strength.indexWhere( _ => max_strength\
    \ == _)\n        val class_name = class_name\n        var final_name = class_name\n\
    \        // if the index of the max strength value is 0, that means no extensions\
    \ are present, \n        // so just return the class name\n        if(index_of_max_strength\
    \ == 0){\n            return final_name\n        }\n        val index = strength_of_max_strength\
    \ - index_of_max_strength + 1\n        var extension = extensions(index)\n   \
    \     var class_index = extensions.indexOf(extension)\n        for(i <- 0 until\
    \ extension.length)\n        {\n            var letter = extension(i)\n      \
    \      var new_letter = extension(i)\n            var temp_letter = letter\n \
    \           while(new_letter == temp_letter)\n            {\n                new_letter\
    \ = extension(class_index)\n                temp_letter = new_letter\n       \
    \     }\n            final_name += letter\n            class_index += 1\n    \
    \    }\n        \n        return final_name\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzbi5k3ng.scala:22:25 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mextensions\e[0m = extensions\
    \ \n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m    \
    \                     Recursive \e[33mvariable\e[0m \e[35mextensions\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzbi5k3ng.scala:27:61\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e\
    [36mindex_of_max_strength\e[0m = strength_of_max_strength.indexWhere( _ => max_strength\
    \ == _)\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value indexWhere is not a\
    \ member of Int\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzbi5k3ng.scala:28:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m\
    \ \e[36mclass_name\e[0m = class_name\n\e[31m\e[31m   |\e[0m                  \
    \       ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mclass_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Initialize a list\
    \ to hold all the classes that we have\n        // found so far and a counter\
    \ for the number of times we\n        // have seen each class\n        var classes:\
    \ List[String] = Nil\n        var classes_count: Map[String, Int] = Nil\n    \
    \    \n        // Loop over the extensions and add the ones that we haven't\n\
    \        // seen yet\n        for (ex <- extensions){\n            classes_count\
    \ += (ex -> 0)\n        }\n        \n        // Loop over the extensions again\
    \ and increment the count\n        // for each class that we have seen so far\
    \ so we can\n        // determine which extension is the strongest\n        for\
    \ (ex <- extensions){\n            if (classes_count.contains(ex)){\n        \
    \        classes_count(ex) += 1\n            }\n        }\n        \n        //\
    \ Check if there are any classes with only 1 entry\n        // and that entry\
    \ is greater than the other entries\n        val only_one_entry = classes_count.filter\
    \ { case (k,v) => v == 1 } \n        if (only_one_entry.length > 0 && only_one_entry.exists(x\
    \ => x._2 > 1)){\n            // There were more than one extension and \n   \
    \         // the extensions with the lowest strength \n            // were the\
    \ strongest, so return the first one\n            val strongest_extension = only_one_entry.minBy(x\
    \ => x._2)\n            \n            // Return the first extension that we found\n\
    \            // in the list of extensions\n            class_name + \".\" + strongest_extension._1\n\
    \        }\n        else {\n            // There are no extensions with 1 entry\
    \ in the map\n            // so no extensions had the lowest strength so \n  \
    \          // return the class name\n            class_name\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzm7ikqy6.scala:25:46\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m \e[36mclasses_count\e\
    [0m: \e[35mMap\e[0m[\e[35mString\e[0m, \e[35mInt\e[0m] = Nil\n\e[31m\e[31m   |\e\
    [0m                                              ^^^\e[0m\n\e[31m   |\e[0m   \
    \                        Found:    collection.immutable.Nil.type\n\e[31m   |\e\
    [0m                           Required: collection.mutable.Map[String, Int]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzm7ikqy6.scala:45:27\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mif\e[0m (only_one_entry.length\
    \ > \e[31m0\e[0m && only_one_entry.exists(\e[36mx\e[0m => x._2 > \e[31m1\e[0m)){\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ length is not a member of scala.collection.mutable.Map[String, Int]\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Write your code\
    \ here\n        var strongest_extension = extensions(0)\n        for (i<-1 to\
    \ extensions.length-1) {\n            if(extensions(i)==strongest_extension) {\n\
    \                strongest_extension = extensions(i+1)\n            } else {\n\
    \                break\n            }\n        }\n        return class_name+\"\
    .\"+strongest_extension\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphq8i71ix.scala:27:16 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = extensions(0)\n        var strength = extensions(0).length\n        var i\
    \ = extensions.indexOf(strongest_extension) + 1\n        while (i != extensions.size)\
    \ {\n            val cap = extensions(i).length\n            val sm = strongest_extension.length\n\
    \            val strength = cap - sm\n            if (strength > strength) {\n\
    \                strongest_extension = extensions(i)\n                strength\
    \ = strongest_extension.length\n                i = extensions.indexOf(strongest_extension)\
    \ + 1\n            } else if (strength == strength) {\n                i = i +\
    \ 1\n            }\n        }\n        s\"$class_name.$strongest_extension\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmprlcwhfa8.scala:30:25 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                strength = strongest_extension.length\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                Reassignment to val strength\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010019
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var maxStrongest\
    \ = 0\n        var maxStrongExtension = \"\"\n        var strongExtensionCounter\
    \ = 0\n        var nameOfStrongest = \"\"\n\n        extensions.foreach {\n  \
    \          extension => {\n                var strongest = extension.last.toUpperCase\
    \ - extension.last.toLowerCase\n                if (strongest > maxStrongest)\
    \ {\n                    maxStrongest = strongest\n                    strongExtensionCounter\
    \ = extension.last.length\n                    nameOfStrongest = extension\n \
    \               }\n            }\n        }\n\n        if (strongExtensionCounter\
    \ > maxStrongest) {\n            return class_name + nameOfStrongest + extensions.filter(_\
    \ => _.length == strongExtensionCounter).last\n        } else {\n            return\
    \ class_name\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl79icq5a.scala:28:47 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                \e[33mvar\e[0m \e[36mstrongest\e[0m =\
    \ extension.last.toUpperCase - extension.last.toLowerCase\n\e[31m\e[31m   |\e\
    [0m                                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value toUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpl79icq5a.scala:31:60 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    strongExtensionCounter = extension.last.length\n\
    \e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value length is not a\
    \ member of Char\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmpl79icq5a.scala:38:73\
    \ -----------------------------\e[0m\e[0m\n\e[31m38 |\e[0m            \e[33mreturn\e\
    [0m class_name + nameOfStrongest + extensions.filter(_ => _.length == strongExtensionCounter).last\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                 ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m   I could not infer the type of the parameter _$2 of expanded\
    \ function:\n\e[31m   |\e[0m   _$2 => _$2.length == strongExtensionCounter.\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010024
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = \"\"\n        var max_strength = 0\n        extensions.foreach{ext => ext.toUpperCase.count(uppercase\
    \ => uppercase >= max_strength) match {\n            case false => max_strength\
    \ = ext.toUpperCase.count(uppercase => uppercase >= max_strength)\n          \
    \  case true => max_strength = ext.toUpperCase.count(uppercase => uppercase >=\
    \ max_strength)\n        }}\n        extensions.foreach{ext => ext.toLowerCase.count(lowercase\
    \ => lowercase >= max_strength) match {\n            case false => max_strength\
    \ = ext.toLowerCase.count(lowercase => lowercase >= max_strength)\n          \
    \  case true => max_strength = ext.toLowerCase.count(lowercase => lowercase >=\
    \ max_strength)\n        }}\n        class_name match {\n            case x if\
    \ max_strength == 0 =>  strongest_extension = x\n            case x if max_strength\
    \ == 1 =>  strongest_extension = x\n            case x if max_strength == 2 =>\
    \  strongest_extension = x\n            case x if max_strength == 3 =>  strongest_extension\
    \ = x\n            case x if max_strength == 4 =>  strongest_extension = x\n \
    \           case x if max_strength == 5 =>  strongest_extension = x\n        \
    \    case x if max_strength == 6 =>  strongest_extension = x\n            case\
    \ x if max_strength == 7 =>  strongest_extension = x\n            case x if max_strength\
    \ == 8 =>  strongest_extension = x\n            case x if max_strength == 9 =>\
    \  strongest_extension = x\n            case x if max_strength == 10 =>  strongest_extension\
    \ = x\n            case x if max_strength == 11 =>  strongest_extension = x\n\
    \            case x if max_strength == 12 =>  strongest_extension = x\n      \
    \      case x if max_strength == 13 =>  strongest_extension = x\n            case\
    \ x if max_strength == 14 =>  strongest_extension = x\n            case x if max_strength\
    \ == 15 =>  strongest_extension = x\n            case x if max_strength == 16\
    \ =>  strongest_extension = x\n            case x if max_strength == 17 =>  strongest_extension\
    \ = x\n            case x if max_strength == 18 =>  strongest_extension = x\n\
    \            case x if max_strength == 19 =>  strongest_extension = x\n      \
    \      case x if max_strength == 20 =>  strongest_extension = x\n            case\
    \ x if max_strength == 21 =>  strongest_extension = x\n            case x if max_strength\
    \ == 22 =>  strongest_extension = x\n            case x if max_strength == 23\
    \ =>  strongest_extension = x\n            case x if max_strength == 24 =>  stron\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnjdticlw.scala:71:0 ----------------------------\e\
    [0m\e[0m\n\e[31m71 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- Error: /tmp/tmpnjdticlw.scala:24:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m \e[31mfalse\e[0m => max_strength\
    \ = ext.toUpperCase.count(uppercase => uppercase >= max_strength)\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Boolean and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpnjdticlw.scala:25:17\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \     \e[33mcase\e[0m \e[31mtrue\e[0m => max_strength = ext.toUpperCase.count(uppercase\
    \ => uppercase >= max_strength)\n\e[31m\e[31m   |\e[0m                 ^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Boolean and Int cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpnjdticlw.scala:28:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mcase\e[0m \e[31mfalse\e[0m => max_strength\
    \ = ext.toLowerCase.count(lowercase => lowercase >= max_strength)\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^\e[0m\n\e[31m   |\e[0m        Values of types\
    \ Boolean and Int cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpnjdticlw.scala:29:17\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m29 |\e[0m       \
    \     \e[33mcase\e[0m \e[31mtrue\e[0m => max_strength = ext.toLowerCase.count(lowercase\
    \ => lowercase >= max_strength)\n\e[31m\e[31m   |\e[0m                 ^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Boolean and Int cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnjdticlw.scala:56:45\
    \ ------------------------\e[0m\e[0m\n\e[31m56 |\e[0m            \e[33mcase\e\
    [0m x \e[33mif\e[0m max_strength == \e[31m24\e[0m =>  stron\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                                           Not found: stron\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-e"
  stdout: ''
  timestamp: 1660010026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val map = Map[Int,\
    \ List[String]]()\n        var count = 1\n        for (e <- extensions) {\n  \
    \          val c = e.toList.filter(x => x.matches(\"[A-Z]\")).length\n       \
    \     val s = e.toList.filter(x => x.matches(\"[a-z]\")).length\n            val\
    \ a = c - s\n            if (map.getOrElse(a, List[String]()) ne List(e)) {\n\
    \                map.put(a, List(e))\n                count += 1\n           \
    \ } else {\n                map.getOrElse(a, List(e))\n            }\n       \
    \ }\n        if (map.size > 1) map.values.sortBy(x => x.length).head._1\n    \
    \    else map.values.sortBy(x => x.length).head\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqk72t9bo.scala:24:43 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mc\e[0m = e.toList.filter(\e\
    [36mx\e[0m => x.matches(\e[31m\"[A-Z]\"\e[0m)).length\n\e[31m\e[31m   |\e[0m \
    \                                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                              value matches is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpqk72t9bo.scala:25:43 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36ms\e[0m = e.toList.filter(\e\
    [36mx\e[0m => x.matches(\e[31m\"[a-z]\"\e[0m)).length\n\e[31m\e[31m   |\e[0m \
    \                                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                              value matches is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpqk72t9bo.scala:34:37 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mif\e[0m (map.size > \e[31m1\e[0m) map.values.sortBy(\e\
    [36mx\e[0m => x.length).head._1\n\e[31m\e[31m   |\e[0m                       \
    \   ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value sortBy is not\
    \ a member of Iterable[List[String]]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqk72t9bo.scala:35:24\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m        \e[33melse\e[0m map.values.sortBy(x\
    \ => x.length).head\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m             value sortBy is not a member of Iterable[List[String]]\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var maxStrength =\
    \ 0\n        var longestExtension = \"\"\n        var longestExtensionLength =\
    \ 0\n        var maxStrengthClass = 0\n        var maxStrengthExtension = 0\n\
    \        for(str <- extensions) {\n            val strengh = str.count(_ > ('A'\
    \ + str.length - 1)) - str.count(_ == 'A' + str.length)\n            if(strengh\
    \ > maxStrength) {\n                longestExtension = str\n                longestExtensionLength\
    \ = str.length\n                maxStrength = strengh\n                maxStrengthExtension\
    \ = str\n                maxStrengthClass = class_name\n            }\n      \
    \      if(strengh > maxStrengthClass && str.contains(class_name)) {\n        \
    \        maxStrengthClass = strengh\n                maxStrengthExtension = str\n\
    \            }\n        }\n        if(maxStrengthClass == 0) {\n            longestExtension\
    \ = longestExtension.substring(longestExtension.length - longestExtensionLength)\n\
    \        } else if(maxStrengthExtension == 0) {\n            maxStrengthExtension\
    \ = longestExtension.substring(longestExtension.length - longestExtensionLength)\n\
    \        }\n        maxStrengthClass - maxStrengthExtension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_laim92y.scala:32:39\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                maxStrengthExtension\
    \ = str\n\e[31m\e[31m   |\e[0m                                       ^^^\e[0m\n\
    \e[31m   |\e[0m                                       Found:    (str : String)\n\
    \e[31m   |\e[0m                                       Required: Int\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_laim92y.scala:33:35 --------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                maxStrengthClass = class_name\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                   Found:    (class_name : String)\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_laim92y.scala:37:39 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                maxStrengthExtension = str\n\e[31m\e\
    [31m   |\e[0m                                       ^^^\e[0m\n\e[31m   |\e[0m\
    \                                       Found:    (str : String)\n\e[31m   |\e\
    [0m                                       Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp_laim92y.scala:43:61 --------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            maxStrengthExtension = longestExtension.substring(longestExtension.length\
    \ - longestExtensionLength)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Found:    String\n\e[31m\
    \   |\e[0m                                   Required: Int\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp_laim92y.scala:45:8 ---------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m     "
  stdout: ''
  timestamp: 1660010026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val classes : Set[String]\
    \ = new HashSet[String]();\n        for(i <- 0 until extensions.length) {\n  \
    \          val extension = extensions.charAt(i);\n            val class_name =\
    \ extensions.substring(0, i);\n            val class_with_extension = class_name\
    \ + extension;\n            if(classes.contains(class_with_extension)) {\n   \
    \             // We already have this extension. Continue\n            } else\
    \ {\n                // We haven't seen this extension yet. Add it to the set\
    \ of classes.\n                classes.add(class_with_extension);\n          \
    \  }\n        }\n        val classes_with_extension = classes.toList;\n      \
    \  if(classes_with_extension.isEmpty) {\n            return class_name;\n    \
    \    }\n        val highest_strength : Int = -1;\n        var highest_class_with_extension\
    \ : String = \"\";\n        for(class_with_extension <- classes_with_extension)\
    \ {\n            val c = class_name.charAt(0);\n            val l = class_name.charAt(1);\n\
    \            val strength = c.toUpperCase().length - l.toLowerCase();\n      \
    \      if(strength > highest_strength) {\n                highest_strength = strength;\n\
    \                highest_class_with_extension = class_with_extension;\n      \
    \      }\n        }\n        return highest_class_with_extension;\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpislpzqkw.scala:23:39 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mextension\e[0m = extensions.charAt(i);\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            value charAt is not a member of List[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpislpzqkw.scala:24:40 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mclass_name\e[0m = extensions.substring(\e\
    [31m0\e[0m, i);\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value substring is not a member of\
    \ List[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpislpzqkw.scala:42:29\
    \ ------------------------\e[0m\e[0m\n\e[31m42 |\e[0m            \e[33mval\e[0m\
    \ \e[36mstrength\e[0m = c.toUpperCase().length - l.toLowerCase();\n\e[31m\e[31m\
    \   |\e[0m                           ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                      value toUpperCase is not a member of Char\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpislpzqkw.scala:44:33 -----------------------------\e\
    [0m\e[0m\n\e[31m44 |\e[0m                highest_strength = strength;\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                Reassignment to val highest_strength\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val classes = new\
    \ mutable.HashSet[String]()\n        val extensions_upper = new mutable.HashSet[String]()\n\
    \        val extensions_lower = new mutable.HashSet[String]()\n        val class_upper\
    \ = class_name.toUpperCase()\n        val class_lower = class_name.toLowerCase()\n\
    \        extensions.foreach{ extension =>\n            val ext_upper = extension.toUpperCase()\n\
    \            val ext_lower = extension.toLowerCase()\n            if (classes.contains(ext_upper))\
    \ {\n                val strength = classes.count(ext_upper) / classes.size\n\
    \                if (strength > extensions_upper.count(ext_upper) / extensions_upper.size)\
    \ {\n                    extensions_upper.update(ext_upper)\n                }\n\
    \            } else {\n                classes.add(ext_upper)\n            }\n\
    \            if (classes.contains(ext_lower)) {\n                val strength\
    \ = classes.count(ext_lower) / classes.size\n                if (strength > extensions_lower.count(ext_lower)\
    \ / extensions_lower.size) {\n                    extensions_lower.update(ext_lower)\n\
    \                }\n            } else {\n                classes.add(ext_lower)\n\
    \            }\n        }\n\n        if (classes.size == 1) {\n            val\
    \ strength = classes.count(class_upper) / classes.size\n            if (strength\
    \ > extensions_upper.count(class_upper) / extensions_upper.size) {\n         \
    \       extensions_upper.update(class_upper)\n            }\n        } else if\
    \ (classes.size == 2) {\n            val strength = extensions_lower.count(class_lower)\
    \ / extensions_lower.size\n            if (strength > extensions_upper.count(class_lower)\
    \ / extensions_upper.size) {\n                extensions_upper.update(class_lower)\n\
    \            }\n        } else {\n            val strength = extensions_upper.count(class_upper)\
    \ / extensions_upper.size\n            if (strength > extensions_lower.count(class_lower)\
    \ / extensions_lower.size) {\n                extensions_lower.update(class_lower)\n\
    \            }\n        }\n\n        val strength = extensions_lower.count(class_lower)\
    \ / extensions_lower.size\n        if (strength > extensions_upper.count(class_lower)\
    \ / extensions_upper.size) {\n            extensions_upper.update(class_lower)\n\
    \        }\n\n        classes.map(class_name + \"_\" + _).map(_.toUpperCase()).map(_.toLowerCase()).\n\
    \            filter(_.equals(class_name))\n            .toList.map(_.concat(\"\
    .\" + _))\n            .toList.max\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdyc2daex.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclasses\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdyc2daex.scala:22:35\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_upper\e[0m = \e[33mnew\e[0m mutable.HashSet[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                   Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpdyc2daex.scala:23:35 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions_lower\e[0m =\
    \ \e[33mnew\e[0m mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010021
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var numCaps = 0\n\
    \        var numSms = 0\n        var maxStrongest = \"\"\n        extensions.foreach(\
    \ e => {\n            if (e.matches(\"\"\"[A-Z]\"\"\")) numCaps += 1\n       \
    \     if (e.matches(\"\"\"[a-z]\"\"\")) numSms += 1\n        })\n        numCaps\
    \ -= numSms\n        if (numCaps == 0) maxStrongest = class_name\n        else\
    \ if (numSms == 0) maxStrongest = class_name + extensions.mkString(\".\")\n  \
    \      else if (numCaps < numSms) maxStrongest = class_name + extensions.sorted(Ordering[Int](Ordering[String].on(_\
    \ < _))(0).mkString(\".\")\n        else maxStrongest = class_name + extensions.sorted(Ordering[Int](Ordering[String].on(_\
    \ < _))(1).mkString(\".\")\n        return maxStrongest\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxqm_8vgz.scala:32:8 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33melse\e[0m maxStrongest = class_name + extensions.sorted(Ordering[Int](Ordering[String].on(_\
    \ < _))(\e[31m1\e[0m).mkString(\e[31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^\e[0m\n\e[31m   |\e[0m        ')' expected, but 'else' found\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpxqm_8vgz.scala:29:39 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m (numCaps == \e[31m0\e[0m) maxStrongest\
    \ = class_name\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          Found:    Unit\n\e[31m   |\e[0m\
    \                          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpxqm_8vgz.scala:30:43 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (numSms == \e[31m0\e\
    [0m) maxStrongest = class_name + extensions.mkString(\e[31m\".\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Found:    Unit\n\e[31m   |\e\
    [0m                              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E086] Syntax Error: /tmp/tmpxqm_8vgz.scala:31:115 --------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (numCaps < numSms)\
    \ maxStrongest = class_name + extensions.sorted(Ordering[Int](Ordering[String].on(_\
    \ < _))(\e[31m0\e[0m).mkString(\e[31m\".\"\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                                                                            \
    \                                 ^^^^^\e[0m\n\e[31m   |\e[0m                \
    \                 Wrong number of parameters, expected: 1\n4 errors found\n"
  stdout: ''
  timestamp: 1660010026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_ext = 0\n\
    \        var ext_index = 0\n        for(e <- extensions){\n            if(e.length==(class_name.count(_==e(0)).toDouble/class_name.length))\n\
    \            {\n                if(e.count(_==e(0))>max_ext){\n              \
    \      max_ext=e.count(_==e(0))\n                    ext_index = extensions.indexof(e)\n\
    \                }\n            }\n        }\n        return ((class_name + \"\
    .\" + extensions(ext_index)).split(\"\")).slice(0,max_ext+1).mkString(\"\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6633_qbx.scala:28:43 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                    ext_index = extensions.indexof(e)\n\
    \e[31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue indexof is not a member of List[String] - did you mean extensions.indexOf?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010027
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code here\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpw2_gr4z5.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m        \e[34m// Your code\
    \ here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660009995
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val map = extensions.toList.toMap\n\
    \        var max = 0\n        var maxExtension = \"\"\n        for(x <- extensions)\
    \ map.get(x.toLowerCase).foreach(y => {\n            val strength = x.toUpperCase.toCharArray.count(x\
    \ => x.toUpperCase.equals(y))/x.length.toDouble\n            if(strength > max)\
    \ {\n                max = strength\n                maxExtension = y\n      \
    \      }\n        })\n        class_name + \".\" + maxExtension\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"),\
    \ (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw2fbx3hl.scala:21:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = extensions.toList.toMap\n\
    \e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m \
    \  |\e[0m                                     Cannot prove that String <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                     where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \            V is a type variable\n\e[31m   |\e[0m                           \
    \          .\n1 error found\n"
  stdout: ''
  timestamp: 1660010026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extensions_str\
    \ = extensions.map(x => x.toUpperCase).mkString(\".\")\n        val splitted =\
    \ class_name.split(\".\")\n        splitted match {\n            case List(x)\
    \ => x\n            case _ => throw new Exception(\"Incorrect name!\")\n     \
    \   }\n        splitted.foldLeft(\".\")(_.head + \"$\" + _.tail.map(_.toUpperCase).mkString(\"\
    .\") + \".\" + extensions_str)\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcshecbfq.scala:27:59 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        splitted.foldLeft(\e[31m\".\"\e[0m)(_.head +\
    \ \e[31m\"$\"\e[0m + _.tail.map(_.toUpperCase).mkString(\e[31m\".\"\e[0m) + \e\
    [31m\".\"\e[0m + extensions_str)\n\e[31m\e[31m   |\e[0m                      \
    \                                   ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                         value toUpperCase is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660010028
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n      val counts = Map(extension.head.capitalize\
    \ -> extension.count(c => c.isUpper), \n                       extension.head.capitalize\
    \ -> extension.count(c => c.isLower))\n      val strength = extension match {\n\
    \        case Nil => -1\n        case list if list.size == 1 => counts(list(0))\n\
    \        case list if list.size > 1 =>\n          val max = (counts(list(0)) -\
    \ counts(list(1))).max(0)\n          (list[0] - list[list.size - 1])\n      }\n\
    \      (class_name + \".\" + extensions.map(e => e.getClass.getSimpleName + \"\
    $\" + e).\n          foldLeft(\"\")( (acc, e) => acc + (\"|\" + e)).substring(2)\
    \ + \n         s\"$${strength}\"\n      ).split('|').last\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0hxs2ls9.scala:21:23 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mval\e[0m \e[36mcounts\e[0m = Map(extension.head.capitalize\
    \ -> extension.count(\e[36mc\e[0m => c.isUpper), \n\e[31m\e[31m   |\e[0m     \
    \                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ extension\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0hxs2ls9.scala:22:23\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                       extension.head.capitalize\
    \ -> extension.count(\e[36mc\e[0m => c.isLower))\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ extension\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0hxs2ls9.scala:23:21\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m      \e[33mval\e[0m \e[36mstrength\e\
    [0m = extension \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: extension\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0hxs2ls9.scala:27:37\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m          \e[33mval\e[0m\
    \ \e[36mmax\e[0m = (counts(list(\e[31m0\e[0m)) - counts(list(\e[31m1\e[0m))).max(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     value - is not a member of Nothing\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010026
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // TODO: Write your\
    \ code here.\n        val class_strongest = mutable.HashMap[Int, Int]()\n    \
    \    val extension_strongest = mutable.HashMap[Int, Int]()\n        for (extension\
    \ <- extensions) {\n            var class_index = class_name.lastIndexOf(extension)\n\
    \            var extension_index = extension.lastIndexOf(class_name)\n       \
    \     val str_class = class_name.substring(class_index + 1, class_index + CAP.size)\n\
    \            val str_extension = extension.substring(extension_index + 1, extension_index\
    \ + SM.size)\n            val class_strength = CAP.size - SM.size + (CAP.size\
    \ - CAP.size)\n            if (class_strength > class_strongest.getOrElse(class_index,\
    \ class_strength)) {\n                class_strongest.put(class_index, class_strength)\n\
    \            }\n            if (extension_strength > extension_strongest.getOrElse(extension_index,\
    \ extension_strength)) {\n                extension_strongest.put(extension_index,\
    \ extension_strength)\n            }\n        }\n        extension_strongest.max\
    \ foreach {\n            case (extension, strength) => class_strongest.get(extension)\
    \ match {\n                case Some(strength) =>\n                    val class_name\
    \ = class_name.substring(0, class_index)\n                    val extension_name\
    \ = extension.substring(0, extension_index)\n                    \"$class_name.$extension_name\"\
    \n                case None =>\n                    val class_name = class_name.substring(0,\
    \ class_index)\n                    \"$class_name\"\n            }\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyyff05hd.scala:22:30 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mclass_strongest\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyyff05hd.scala:23:34\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mextension_strongest\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                  Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpyyff05hd.scala:27:80 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mstr_class\e[0m = class_name.substring(class_index\
    \ + \e[31m1\e[0m, class_index + CAP.size)\n\e[31m\e[31m   |\e[0m             \
    \                                                                   ^^^\e[0m\n\
    \e[31m   |\e[0m                                                          Not found:\
    \ CAP\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyyff05hd.scala:28:91\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m\
    \ \e[36mstr_extension\e[0m = extension.substring(extension_index + \e[31m1\e[0m,\
    \ extension_index + SM.size)\n\e[31m\e[31m   |\e[0m                          \
    \                                                                 ^^\e[0m\n\e\
    [31m   |\e[0m                                                           Not found:\
    \ SM\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyyff05hd.scala:29:33\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mval\e[0m\
    \ \e[36mclass_strength\e[0m = CAP"
  stdout: ''
  timestamp: 1660010026
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strongest_extensions\
    \ = extensions.foldLeft(Map[String, Int]()) { (prev, curr) =>\n            val\
    \ cap = curr.toList.count(x => x.isUpper)\n            val sm = curr.toList.count(x\
    \ => x.isLower)\n            (prev + (curr -> (cap - sm)))\n        }\n      \
    \  val max_value = strongest_extensions.getOrElse(class_name, 0)\n        val\
    \ max_key = strongest_extensions.keys.max\n        strongest_extensions(max_key)\
    \ + class_name + max_key\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8tq5dmy3.scala:31)\n\tat Problem.main(tmp8tq5dmy3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        def checkForStrength(extensionName\
    \ : String) : Int = {\n          val parts = extensionName.split(\"_\")\n    \
    \      val name = parts(0)\n          val strength = parts(1).size.toDouble\n\
    \          (strength / name.length)\n        }\n        def sortByStrength(extensionName\
    \ : String) : Int = {\n          checkForStrength(extensionName)\n        }\n\
    \        val newList = extensions.sortWith(sortByStrength).reverse\n        newList.takeWhile(checkForStrength).last\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0fwfvza.scala:25:11\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m          (strength / name.length)\n\
    \e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \          Found:    Double\n\e[31m   |\e[0m           Required: Int\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0fwfvza.scala:30:42 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mnewList\e[0m = extensions.sortWith(sortByStrength).reverse\n\
    \e[31m\e[31m   |\e[0m                                          ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                          Found:    Int\n\e\
    [31m   |\e[0m                                          Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt0fwfvza.scala:31:26 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        newList.takeWhile(checkForStrength).last\n\e\
    [31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                          Found:    Int\n\e[31m   |\e[0m                  \
    \        Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // TODO: Your code\
    \ here\n        val s = extensions.length.toDouble\n        if(s < 0){\n     \
    \       return class_name\n        }\n        val c = extensions.length.toDouble\n\
    \        if(c <= 0){\n            return class_name\n        }\n        val c1\
    \ = (c - 1).toDouble\n        val c2 = (c1 + 1).toDouble\n        val c3 = c1\
    \ + c2\n        val c4 = c1 + c3\n        val c5 = c1 + c4\n        val c6 = c1\
    \ + c5\n        val c7 = c1 + c6\n        val c8 = c1 + c7\n        val c9 = c1\
    \ + c8\n        val c10 = c1 + c9\n        val c11 = c1 + c10\n        val c12\
    \ = c1 + c11\n        val c13 = c1 + c12\n        val c14 = c1 + c13\n       \
    \ val c15 = c1 + c14\n        val c16 = c1 + c15\n        val c17 = c1 + c16\n\
    \        val c18 = c1 + c17\n        val c19 = c1 + c18\n        val c20 = c1\
    \ + c19\n        val c21 = c1 + c20\n        val c22 = c1 + c21\n        val c23\
    \ = c1 + c22\n        val c24 = c1 + c23\n        val c25 = c1 + c24\n       \
    \ val c26 = c1 + c25\n        val c27 = c1 + c26\n        val c28 = c1 + c27\n\
    \        val c29 = c1 + c28\n        val c30 = c1 + c29\n        val c31 = c1\
    \ + c30\n        val c32 = c1 + c31\n        val c33 = c1 + c32\n        val c34\
    \ = c1 + c33\n        val c35 = c1 + c34\n        val c36 = c1 + c35\n       \
    \ val c37 = c1 + c36\n        val c38 = c1 + c37\n        val c39 = c1 + c38\n\
    \        val c40 = c1 + c39\n        val c41 = c1 + c40\n        val c42 = c1\
    \ + c41\n        val c43 = c1 + c42\n        val c44 = c1 + c43\n        val c45\
    \ = c1 + c44\n        val c46 = c1 + c45\n        val c47 = c1 + c46\n       \
    \ val c48 = c1 + c47\n        val c49 = c1 + c48\n        val c50 = c1 + c49\n\
    \        val c51 = c1 + c50\n        val c52 = c1 + c51\n        val c53 = c1\
    \ + c52\n\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8s6944qw.scala:84:5\
    \ ---------------------\e[0m\e[0m\n\e[31m84 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val classes = new\
    \ mutable.HashMap[String, Int]()\n        val class_arr = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr2 = new mutable.ArrayBuffer[String]()\n        val class_arr3\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr4 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr5 = new mutable.ArrayBuffer[String]()\n        val class_arr6\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr7 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr8 = new mutable.ArrayBuffer[String]()\n        val class_arr9\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr10 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr11 = new mutable.ArrayBuffer[String]()\n        val class_arr12\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr13 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr14 = new mutable.ArrayBuffer[String]()\n        val class_arr15\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr16 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr17 = new mutable.ArrayBuffer[String]()\n        val class_arr18\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr19 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr20 = new mutable.ArrayBuffer[String]()\n        val class_arr21\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr22 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr23 = new mutable.ArrayBuffer[String]()\n        val class_arr24\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr25 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr26 = new mutable.ArrayBuffer[String]()\n        val class_arr27\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr28 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr29 = new mutable.ArrayBuffer[String]()\n        val class_arr30\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr31 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr32 = new mutable.ArrayBuffer[String]()\n        val class_arr33\
    \ = new mutable.ArrayBuffer[String]()\n        val class_arr34 = new mutable.ArrayBuffer[String]()\n\
    \        val class_arr35 = new mutable.ArrayBuffer[String]()\n        val class_arr36\
    \ = new mutable.\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp16xy218h.scala:58:4 ----------------------------\e\
    [0m\e[0m\n\e[31m58 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp16xy218h.scala:21:26 ------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mclasses\e[0m = \e[33mnew\e[0m mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp16xy218h.scala:22:28\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mclass_arr\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                            Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp16xy218h.scala:23:29 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclass_arr2\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp16xy218h.scala:24:29\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mclass_arr3\e[0m = \e[33mnew\e[0m mutable.ArrayBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp16xy218h.scala:25:29 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mclass_arr4\e[0m = \e[33mnew\e\
    [0m mutable.ArrayBuffer[\e"
  stdout: ''
  timestamp: 1660010030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Initialize a mutable\
    \ map with the extension names as keys and the \n        // strongest extension\
    \ names as values.\n        val strongest = mutable.Map[String, String]()\n  \
    \      val len = extensions.length\n\n        // Initialize two counters, one\
    \ for the number of lowercase letters\n        // and one for the number of uppercase\
    \ letters.\n        var sm = 0, cap = 0\n        for (i <- 0 until len) {\n  \
    \          val e = extensions(i)\n            if (e.isUpper) {\n             \
    \   cap = cap + 1\n            }\n            else {\n                sm = sm\
    \ + 1\n            }\n        }\n\n        // Calculate the strength of the extension.\n\
    \        val strength = cap - sm\n\n        // Add the extension's name to the\
    \ strongest map only if it has the strongest\n        // strength.\n        val\
    \ add = if (strength > 0) strongest.updated(extensions(0), extensions(1)) \n \
    \       else strongest.update(extensions(0), extensions(1))\n\n        // Return\
    \ the strongest extension name.\n        strongest.minOption.getOrElse(\"\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp74ijhngd.scala:28:18 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mvar\e[0m \e[36msm\e[0m = \e[31m0\e[0m,\
    \ cap = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m  \
    \ |\e[0m                  end of statement expected but ',' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp74ijhngd.scala:23:24 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mstrongest\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp74ijhngd.scala:31:18\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            \e[33mif\e[0m\
    \ (e.isUpper) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                value isUpper is not a member of String\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp74ijhngd.scala:32:16 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                cap = cap + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m                Not found:\
    \ cap\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74ijhngd.scala:32:22\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m                cap = cap\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                      ^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: cap\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp74ijhngd.scala:40:23 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = cap - sm\n\
    \e[31m\e[31m   |\e[0m                       ^^^\e[0m\n\e[31m   |\e[0m        \
    \               Not found: cap\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660010030
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = Integer.MAX_VALUE\n\
    \        var strongest_extension = \"\"\n        extensions.foreach {\n      \
    \      if (extension.map(_.toUpperCase).count > strongest) {\n               \
    \ strongest = extension.map(_.toUpperCase).count\n                strongest_extension\
    \ = extension\n            }\n        }\n        class_name + \".\" + strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4xjce0e0.scala:24:16 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (extension.map(_.toUpperCase).count\
    \ > strongest) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                Not found: extension\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4xjce0e0.scala:25:28 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                strongest = extension.map(_.toUpperCase).count\n\
    \e[31m\e[31m   |\e[0m                            ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                            Not found: extension\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp4xjce0e0.scala:26:38 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                strongest_extension = extension\n\e[31m\e\
    [31m   |\e[0m                                      ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                      Not found: extension\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010029
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Write your code\
    \ here\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph868dghv.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m        \e[34m// Write your\
    \ code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n      require(extensions.nonEmpty,\
    \ \"Empty list extension\")\n      require(class_name.nonEmpty, \"Empty class\
    \ name\")\n      require(extensions.forall(_.isLetter), \"Bad extension\")\n \
    \     require(extensions.forall(_.isLower), \"Bad extension\")\n\n      val cap\
    \ = class_name match { case c : String if c.forall(_.isUpper) => (c.toUpperCase.length)\n\
    \        case c : String if c.forall(_.isLower) => (c.toLowerCase().length)\n\
    \        case c => 0 }\n      val sm = class_name match { case c : String if c.forall(_.isUpper)\
    \ => (c.toLowerCase().length)\n        case c : String if c.forall(_.isLower)\
    \ => (c.toUpperCase.length)\n        case c => 0 }\n\n      val strength = (cap\
    \ - sm).toDouble / (cap + sm)\n      val firstExtension = extensions.min { s =>\
    \ strength >= s.length }\n      firstExtension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo6aulav1.scala:23:34 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m      require(extensions.forall(_.isLetter), \e[31m\"\
    Bad extension\"\e[0m)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo6aulav1.scala:24:34\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m      require(extensions.forall(_.isLower),\
    \ \e[31m\"Bad extension\"\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value\
    \ isLower is not a member of String\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpo6aulav1.scala:34:46\
    \ ---------------------------\e[0m\e[0m\n\e[31m34 |\e[0m      \e[33mval\e[0m \e\
    [36mfirstExtension\e[0m = extensions.min { \e[36ms\e[0m => strength >= s.length\
    \ }\n\e[31m\e[31m   |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Wrong number of parameters,\
    \ expected: 2\n3 errors found\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var bestStrongest\
    \ = \"\"\n        var bestStrength = -1\n        var bestExtension = \"\"\n  \
    \      var bestExtensionIndex = -1\n        \n        for ( extension <- extensions\
    \ ) {\n            val strenght = class_name.count( c => c.isUpper ) - class_name.count(\
    \ c => c.isLower )\n            if ( strenght > bestStrength ) {\n           \
    \     bestStrength = strenght\n                bestExtension = extension\n   \
    \             bestExtensionIndex = extensions.indexOf ( extension )\n        \
    \    }\n        }\n\n        return class_name + \".\" + bestExtension\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfnzdf_bx.scala:38)\n\tat Problem.main(tmpfnzdf_bx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010032
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        def strongest_extension(extension:\
    \ String, list: List[String]) : String = {\n            if (list == Nil) extension\n\
    \            else strongest_extension(extension, list.tail) \n        }\n    \
    \    val max_strength = 0\n        val max_strength_extension = extensions(0)\n\
    \        for(extension <- extensions){\n            val strength = extension.map(_.toUpper.toInt).sum\
    \ - extension.map(_.toLower.toInt).sum\n            if (strength > max_strength)\
    \ {\n                max_strength = strength\n                max_strength_extension\
    \ = extension\n            }\n        }\n        class_name +  \".\" + max_strength_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpd50xsmtj.scala:30:29 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                max_strength = strength\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \          Reassignment to val max_strength\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpd50xsmtj.scala:31:39 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                max_strength_extension = extension\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Reassignment to val max_strength_extension\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val c = class_name.charAt(0).toLower\n\
    \        val s = class_name.substring(1).toLower\n        val c = extensions(0).charAt(0).toLower\n\
    \        val s = extensions(0).substring(1).toLower\n        val c = extensions(1).charAt(0).toLower\n\
    \        val s = extensions(1).substring(1).toLower\n        val c = extensions(2).charAt(0).toLower\n\
    \        val s = extensions(2).substring(1).toLower\n        var strength = 0\n\
    \        if (c.toLong > s.toLong)\n            strength = -1\n        else\n \
    \           if (c.toLong == s.toLong)\n                if (c.toLong < c.toLong)\n\
    \                    strength = c.toLong\n                if (s.toLong < s.toLong)\n\
    \                    strength = s.toLong\n            if (strength == 0)\n   \
    \             strength = 1\n        val strongest = extensions(extensions.indexWhere(s\
    \ => strength == s.toLong) + 1)\n        (class_name + \".\" + strongest)\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpkid4ugxp.scala:23:12 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = extensions(\e[31m0\e\
    [0m).charAt(\e[31m0\e[0m).toLower\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mc is already defined as \e[33mvalue\e[0m \e[35mc\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkid4ugxp.scala:24:12 ---------------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = extensions(\e[31m0\e[0m).substring(\e\
    [31m1\e[0m).toLower\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ms is already defined as \e[33mvalue\e[0m \e[35ms\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkid4ugxp.scala:25:12 ---------------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = extensions(\e[31m1\e[0m).charAt(\e\
    [31m0\e[0m).toLower\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mc is already defined as \e[33mvalue\e[0m \e[35mc\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkid4ugxp.scala:26:12 ---------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = extensions(\e[31m1\e[0m).substring(\e\
    [31m1\e[0m).toLower\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0ms is already defined as \e[33mvalue\e[0m \e[35ms\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpkid4ugxp.scala:27:12 ---------------------------\e[0m\e[0m\n\e[31m27\
    \ |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = extensions(\e[31m2\e[0m).charAt(\e\
    [31m0\e[0m).toLower\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010033
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val map = Map()\n\
    \        val extensions_map = Map[String, Int]()\n        var i = 0\n        while\
    \ (i < extensions.length) {\n            val letter = extensions(i).toLowerCase\n\
    \            val lower_letter = letter.toLowerCase\n            val count = extensions_map.getOrElse(lower_letter,\
    \ 0)\n            extensions_map.put(lower_letter, count + 1)\n            i +=\
    \ 1\n        }\n        val strongest_extension = extensions_map.keys.max\n  \
    \      val letter = strongest_extension.toLowerCase \n        val lower_letter\
    \ = letter.toLowerCase\n        if (map.contains(class_name)) {\n            map.get(class_name)\
    \ match {\n                case Some(class_object) => {\n                    val\
    \ class_array = class_object.asInstanceOf[Array[String]]\n                   \
    \ val class_name = class_array.last\n                    val strongest_extensions\
    \ = map.get(class_name).asInstanceOf[List[String]]\n                    val new_class\
    \ = strongest_extensions(0) + strongest_extensions(1)\n                    if\
    \ (new_class == class_name) {\n                        strongest_extensions\n\
    \                    } else {\n                        val new_class_array = class_array\n\
    \                        new_class_array.init = new_class_array.init + \"_\" +\
    \ strongest_extensions\n                        new_class_array\n            \
    \        }\n                }\n                case None => Map()\n          \
    \  }\n        } else {\n            Map[String, List[String]]()\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb38uk6zj.scala:34:25\
    \ --------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mif\e[0m (map.contains(class_name))\
    \ {\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         Found:    (class_name : String)\n\e[31m   |\e[0m \
    \                        Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpb38uk6zj.scala:35:20 --------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m            map.get(class_name) \e[33mmatch\e[0m {\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \        Found:    (class_name : String)\n\e[31m   |\e[0m                    Required:\
    \ Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb38uk6zj.scala:39:55\
    \ --------------------\e[0m\e[0m\n\e[31m39 |\e[0m                    \e[33mval\e\
    [0m \e[36mstrongest_extensions\e[0m = map.get(class_name).asInstanceOf[\e[35mList\e\
    [0m[\e[35mString\e[0m]]\n\e[31m\e[31m   |\e[0m                               \
    \                        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                     Found:    (class_name : String)\n\e[31m   |\e[0m       \
    \                                  Required: Nothing\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpb38uk6zj.scala:42:24 --------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                        strongest_extensions\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                        Found:    (strongest_extensions : List[String])\n\e[31m\
    \   |\e[0m                        Required: String\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpb38uk6zj.scala:45:68 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m                        new_class_array.init = new_class_a"
  stdout: ''
  timestamp: 1660010036
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strongest = extensions.maxBy(extension\
    \ => extension.count(c => c.isUpperCase && c.isLowerCase && c.isLetter))\n   \
    \     val strength = strongest.count(c => c.isUpperCase && c.isLowerCase && c.isLetter)\n\
    \        class_name +(strongest match {\n            case Some(ext) => s\"$ext.$strength\"\
    \n            case None => \"\"\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpme98ua1d.scala:21:77 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstrongest\e[0m = extensions.maxBy(\e\
    [36mextension\e[0m => extension.count(\e[36mc\e[0m => c.isUpperCase && c.isLowerCase\
    \ && c.isLetter))\n\e[31m\e[31m   |\e[0m                                     \
    \                                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                            value isUpperCase is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpme98ua1d.scala:22:46 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = strongest.count(\e\
    [36mc\e[0m => c.isUpperCase && c.isLowerCase && c.isLetter)\n\e[31m\e[31m   |\e\
    [0m                                            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                               value isUpperCase is not a member of Char\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpme98ua1d.scala:25:17 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mcase\e[0m None => \e[31m\"\"\e[0m\n\
    \e[31m\e[31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m             \
    \    Found:    None.type\n\e[31m   |\e[0m                 Required: String\n\e\
    [31m   |\e[0m                 pattern type is incompatible with expected type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010037
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = (extensions\
    \ map {extension => extension.filter(_.isUpper).toSet.size / (extension.filter(_.isLower).toSet.size)\
    \ }).toSeq\n        val strength = strengths.max\n        if (strength == 0) {\n\
    \            class_name.dropRight(class_name.lastIndexOf('.')).dropRight(1)\n\
    \        }\n        else {\n            class_name +\n                extensions.find(extension\
    \ => extension.substring(0, strength.abs).mkString.equalsIgnoreCase(extension)).map(_.substring(1,\
    \ strength.abs)).getOrElse(\"\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgshyhcqq.scala:32)\n\tat Problem.main(tmpgshyhcqq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val className = class_name.split('.').last\n\
    \n        val strengths = (0 until extensions.size).map( i => (class_name, extensions(i))\
    \ -> i)\n        val sorted = strengths.toList.sortBy(_._2)\n        val maxValue\
    \ = sorted.last._2\n        val maxExtension = sorted.last._1\n        className+\"\
    .\"+maxExtension\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxjnv_ckn.scala:30)\n\tat Problem.main(tmpxjnv_ckn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extensions_map\
    \ = Map[(Int, Int), List[String]]((1,2), (2,3), (3,4), (4,5), (5,6))\n       \
    \ var class_name_copy = class_name match {\n            case Some(name) => name\n\
    \            case None => \"Slices\"\n        }\n        var best_score = -1\n\
    \        var best_extension = \"\"\n        for (extension <- extensions) {\n\
    \            var extension_copy = extension match {\n                case Some(name)\
    \ => name\n                case None => extension_copy = \"Slice\"\n         \
    \   }\n            var score = extensions_map.getOrElse(extension_copy, 0).zip(extensions_map.getOrElse(extension_copy,\
    \ 1)).map(x => (x._1 - x._2)/x._1).sum\n            if (score > best_score) {\n\
    \                best_score = score\n                best_extension = extension_copy\n\
    \            }\n        }\n        (class_name_copy + \".\" + best_extension)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb1f68qbl.scala:21:60\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e\
    [0m = Map[(\e[35mInt\e[0m, \e[35mInt\e[0m), \e[35mList\e[0m[\e[35mString\e[0m]]((\e\
    [31m1\e[0m,\e[31m2\e[0m), (\e[31m2\e[0m,\e[31m3\e[0m), (\e[31m3\e[0m,\e[31m4\e\
    [0m), (\e[31m4\e[0m,\e[31m5\e[0m), (\e[31m5\e[0m,\e[31m6\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                            ^\e[0m\n\
    \e[31m   |\e[0m                                                    Found:    (\e\
    [31m1\e[0m : Int)\n\e[31m   |\e[0m                                           \
    \         Required: (Int, Int)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpb1f68qbl.scala:21:62 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = Map[(\e[35mInt\e[0m,\
    \ \e[35mInt\e[0m), \e[35mList\e[0m[\e[35mString\e[0m]]((\e[31m1\e[0m,\e[31m2\e\
    [0m), (\e[31m2\e[0m,\e[31m3\e[0m), (\e[31m3\e[0m,\e[31m4\e[0m), (\e[31m4\e[0m,\e\
    [31m5\e[0m), (\e[31m5\e[0m,\e[31m6\e[0m))\n\e[31m\e[31m   |\e[0m             \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                              Found:    (\e[31m2\e[0m : Int)\n\
    \e[31m   |\e[0m                                                  Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpb1f68qbl.scala:21:67\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e\
    [0m = Map[(\e[35mInt\e[0m, \e[35mInt\e[0m), \e[35mList\e[0m[\e[35mString\e[0m]]((\e\
    [31m1\e[0m,\e[31m2\e[0m), (\e[31m2\e[0m,\e[31m3\e[0m), (\e[31m3\e[0m,\e[31m4\e\
    [0m), (\e[31m4\e[0m,\e[31m5\e[0m), (\e[31m5\e[0m,\e[31m6\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                                                                   ^\e\
    [0m\n\e[31m   |\e[0m                                                    Found:\
    \    (\e[31m2\e[0m : Int)\n\e[31m   |\e[0m                                   \
    \                 Required: (Int, Int)\n\e[31m   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1660010042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val className = class_name.substring(0,\
    \ class_name.length() - 1)\n        val classExtensions = className.split(\"\\\
    \\.\")\n        val extensionSet = extensions.toSet\n        val strongestExtension\
    \ = classExtensions.map(extension => {\n            if (extensionSet.contains(extension))\
    \ extension\n            else null\n        }).filter(_.isDefined)\n        strongestExtension.headOption.map\
    \ { s =>\n            className.concat(\".\").concat(s)\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptz24sd2w.scala:27:20 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        }).filter(_.isDefined)\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value isDefined\
    \ is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptz24sd2w.scala:28:42\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m        strongestExtension.headOption.map\
    \ { \e[36ms\e[0m =>\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m    \
    \    Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\
    \e[31m   |\e[0m        Required: String\n\e[31m29 |\e[0m            className.concat(\e\
    [31m\".\"\e[0m).concat(s)\n\e[31m30 |\e[0m        }\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010038
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val letters = new\
    \ mutable.HashSet[String]()\n        val letterCount = new mutable.HashMap[String,Int]()\n\
    \n        for(ext <- extensions) {\n            val len = ext.length\n       \
    \     val cap = ext.toUpperCase match {\n                case c => c.toUpperCase\n\
    \                case _ => throw new Exception(\"String has non-uppercase\")\n\
    \            }\n            val sm = ext.toLowerCase match {\n               \
    \ case c => c.toUpperCase\n                case _ => throw new Exception(\"String\
    \ has non-lowercase\")\n            }\n            val c = cap - sm\n        \
    \    if(letterCount.containsKey(ext)) {\n                letterCount(ext) += c\n\
    \            } else {\n                letterCount(ext) = c\n            }\n \
    \           letters += cap\n        }\n        val strengths = letterCount.toSeq.sortBy(_._1)\n\
    \        val strongest = strengths.find(_._1 < letterCount.size).get\n       \
    \ if(strongest.get.size == 1) {\n            className + \".\" + strongest.get\n\
    \        } else {\n            val first = strengths.head\n            className\
    \ + \".\" + first._1 + first.last\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr94tgkl8.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr94tgkl8.scala:22:30\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mletterCount\e[0m = \e[33mnew\e[0m mutable.HashMap[\e[35mString\e[0m,\e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpr94tgkl8.scala:34:24 ------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mval\e[0m \e[36mc\e[0m = cap - sm\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpr94tgkl8.scala:45:12 ------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m            className + \e[31m\".\"\e[0m + strongest.get\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Not\
    \ found: className\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr94tgkl8.scala:48:12\
    \ ------------------------\e[0m\e[0m\n\e[31m48 |\e[0m            className + \e\
    [31m\".\"\e[0m + first._1 + first.last\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Not "
  stdout: ''
  timestamp: 1660010040
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val maxStrength =\
    \ extensions flatMap { ext => \n            ext.toSet.filter(x => x.isUpper) map\
    \ {\n                case x => (ext.toSet.count - ext.toSet.filter(_.isLower).length.toDouble\
    \ / ext.toSet.count).toInt\n            }\n        }.max\n        if (maxStrength\
    \ == -1) return class_name\n        val maxStrengths = extensions.sortBy(x =>\
    \ x.toSet.filter(x => x.isUpper).count - x.toSet.filter(_.isLower).count)\n  \
    \      val index = maxStrengths.indexOfMax(x => x._1)\n        val extensionWithStrength\
    \ = extensions.sortBy(x => x.toSet.filter(x => x.isUpper).count - x.toSet.filter(_.isLower).count(_))(index\
    \ - 1)\n        s\"$class_name.$extensionWithStrength\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpoiuxegiq.scala:21:47 -----------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mmaxStrength\e[0m = extensions\
    \ flatMap { \e[36mext\e[0m => \n\e[31m\e[31m   |\e[0m                        \
    \                       ^^^\e[0m\n\e[31m   |\e[0m                        Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                        I could\
    \ not infer the type of the parameter ext.\n\e[31m\e[31m-- Error: /tmp/tmpoiuxegiq.scala:26:12\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m26 |\e[0m       \
    \ \e[33mif\e[0m (maxStrength == -\e[31m1\e[0m) \e[33mreturn\e[0m class_name\n\e\
    [31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  Values\
    \ of types List[Nothing] and Int cannot be compared with == or !=\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpoiuxegiq.scala:27:87 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxStrengths\e[0m = extensions.sortBy(\e\
    [36mx\e[0m => x.toSet.filter(\e[36mx\e[0m => x.isUpper).count - x.toSet.filter(_.isLower).count)\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Char => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmpoiuxegiq.scala:27:121 ----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mmaxStrengths\e[0m = extensions.sortBy(\e\
    [36mx\e[0m => x.toSet.filter(\e[36mx\e[0m => x.isUpper).count - x.toSet.filter(_.isLower).count)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                                                 ^\e[0m\n\e[31m\
    \   |\e[0mambiguous given instances: both \e[33mobject\e["
  stdout: ''
  timestamp: 1660010042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n      val (cap,sm,exts) =\
    \ extensions match {\n        case Nil => (0,0,Nil)\n        case x :: y => (x.toUpperCase\
    \ length, (y.toLowerCase length), x)\n      }\n      var result = class_name\n\
    \      val strongest_extension = if (cap > sm) exts(0) else exts(1)\n      for(e\
    \ <- exts.tail) result += \".\" + strongest_extension\n      result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9nkej__9.scala:23:44 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mcase\e[0m x :: y => (x.toUpperCase length,\
    \ (y.toLowerCase length), x)\n\e[31m\e[31m   |\e[0m                          \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \    expression expected but \e[31m','\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmp9nkej__9.scala:23:67 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mcase\e[0m x :: y => (x.toUpperCase length,\
    \ (y.toLowerCase length), x)\n\e[31m\e[31m   |\e[0m                          \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                           expression expected but \e[31m')'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9nkej__9.scala:23:49 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mcase\e[0m x :: y => (x.toUpperCase length,\
    \ (y.toLowerCase length), x)\n\e[31m\e[31m   |\e[0m                          \
    \                     ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \   value toLowerCase is not a member of List[String]\n\e[31m\e[31m-- [E050] Type\
    \ Error: /tmp/tmp9nkej__9.scala:26:46 -----------------------------\e[0m\e[0m\n\
    \e[31m26 |\e[0m      \e[33mval\e[0m \e[36mstrongest_extension\e[0m = \e[33mif\e\
    [0m (cap > sm) exts(\e[31m0\e[0m) \e[33melse\e[0m exts(\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                              ^^^^\e[0m\n\e[31m \
    \  |\e[0m                                     \e[33mvalue\e[0m \e[35mexts\e[0m\
    \ does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmp9nkej__9.scala:26:59 -----------------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m      \e[33mval\e[0m \e[36mstrongest_extension\e[0m = \e[33mif\e[0m (cap\
    \ > sm) exts(\e[31m0\e[0m) \e[33melse\e[0m exts(\e[31m1\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                       "
  stdout: ''
  timestamp: 1660010039
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = ListBuffer.empty[Int]\n\
    \        for (ext <- extensions) {\n            val name = ext.toLowerCase\n \
    \           var numLetters = name.length\n            var capLetters = name.toUpperCase.length\n\
    \            for (c <- name.substring(1, capLetters)) {\n                numLetters\
    \ -= 1\n                if (name.toUpperCase.charAt(numLetters) == c.toUpper)\
    \ {\n                    capLetters -= 1\n                }\n            }\n \
    \           strengths += capLetters - numLetters\n        }\n        val maxValue\
    \ = strengths.max\n        val strengthIndex = strengths.indexOf(-1)\n       \
    \ val name = class_name.toLowerCase\n        val extensionName = extensions.filter(ext\
    \ => ext.toLowerCase.startsWith(name))(0)\n        return name + extensionName.substring(name.length,\
    \ extensionName.length).capitalize\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IndexOutOfBoundsException: 0\n\tat scala.collection.LinearSeqOps.apply(LinearSeq.scala:117)\n\
    \tat scala.collection.LinearSeqOps.apply$(LinearSeq.scala:114)\n\tat scala.collection.immutable.List.apply(List.scala:79)\n\
    \tat Problem$.StrongestExtension(tmpo85xgc50.scala:37)\n\tat Problem$.main(tmpo85xgc50.scala:41)\n\
    \tat Problem.main(tmpo85xgc50.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010042
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var extensions_with_same_strength\
    \ = mutable.HashMap[String, Int]()\n        val extensions_count = extensions.count\n\
    \        // Get all the extensions that start with the same letter than the class\n\
    \        val letters = class_name.split(\"(?=[A-Z])\")\n        val class_letters\
    \ = class_name.split(\"(?=[A-Z])\").filter(_.length == 1).length\n        \n \
    \       val class_letters_count = letters.length\n        // For each extension\n\
    \        for (i <- 0 until extensions_count) {\n            val current_extension\
    \ = extensions(i)\n            val current_extension_letters = current_extension.split(\"\
    (?=[A-Z])\").filter(_.length == 1).length\n            // If the extension has\
    \ the same letter than the class get the index\n            if (current_extension_letters\
    \ == class_letters) {\n                // Get the index of the extension\n   \
    \             val extensions_index = i - extensions.indexWhere(_ == current_extension)\n\
    \                // If the extension has the same strength than the class, add\
    \ it else get it\n                if (extensions_with_same_strength.get(current_extension)\
    \ != extensions_index) {\n                    extensions_with_same_strength +=\
    \ (current_extension -> extensions_index)\n                }\n            }\n\
    \        }\n        // Get the strongest extension\n        val strongest_extension\
    \ = extensions_with_same_strength.sortBy(_._2).reverse.head._1\n        class_name+\"\
    .\"+strongest_extension\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbpm3orsq.scala:21:44 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mextensions_with_same_strength\e\
    [0m = mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbpm3orsq.scala:29:26 --------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until extensions_count)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m               Found:    (extensions_count : (String => Boolean)\
    \ => Int)\n\e[31m   |\e[0m               Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010039
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // your code here\n\
    \        var strength = -1\n        var resultString = \".\"\n        val extensionMap\
    \ = Map()\n        for (extension <- extensions) {\n            val tempCap =\
    \ extension.substring(0, 1).toLowerCase\n            val tempSm  = extension.substring(1,\
    \ 2).toLowerCase\n            if (strength > 0) {\n                if (tempCap\
    \ > tempSm) {\n                    strength = tempCap - tempSm\n             \
    \       resultString = className + \".\" + extension\n                } else if\
    \ (tempCap < tempSm) {\n                    strength = tempSm - tempCap\n    \
    \                resultString = className + \".\" + extension\n              \
    \  } else {\n                    resultString = className + \".\" + extension\n\
    \                }\n            }\n            extensionMap(tempCap, tempSm) +=\
    \ 1\n        }\n        resultString\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu65eqjdw.scala:30:39 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    strength = tempCap - tempSm\n\e[31m\e\
    [31m   |\e[0m                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ - is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpu65eqjdw.scala:31:35 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    resultString = className + \e[31m\"\
    .\"\e[0m + extension\n\e[31m\e[31m   |\e[0m                                  \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   Not found:\
    \ className\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu65eqjdw.scala:33:38\
    \ ------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                    strength\
    \ = tempSm - tempCap\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpu65eqjdw.scala:34:35 ------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m                    resultString = className + \e[31m\".\"\
    \e[0m + extension\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   Not found: className\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m l"
  stdout: ''
  timestamp: 1660010042
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var extensions_names\
    \ = extensions.map(ext => ext.replaceAll(\"[A-Z]\", \"_\").replaceAll(\"[a-z]\"\
    , \"_\"))\n        var extensions_strength = extensions.map(ext => ext.replaceAll(\"\
    [A-Z]\", \"\").replaceAll(\"[a-z]\", \"\").toInt)\n\n        var extensions_sorted\
    \ = extensions_names.sortWith(_ < _)\n\n        var index = 1\n        var strength\
    \ = 1\n        var highest_strength = extensions_strength(0)\n        var first_extension_name\
    \ = extensions_names(0)\n\n        while (index <= extensions_names.size) {\n\
    \            if (extensions_strength(index) > highest_strength) {\n          \
    \      highest_strength = extensions_strength(index)\n                first_extension_name\
    \ = extensions_names(index)\n            }\n            index += 1\n        }\n\
    \n        (class_name + first_extension_name).replaceFirst(\"_\", \".\")\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:678)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$2(tmpebpannqs.scala:22)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.StrongestExtension(tmpebpannqs.scala:22)\n\
    \tat Problem$.main(tmpebpannqs.scala:42)\n\tat Problem.main(tmpebpannqs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        //TODO: Complete\
    \ the code here\n        val counts = extensions.map(e => e.count(c => c.isUpper))\n\
    \        val sum = extensions.map(e => e.count(c => c.isUpper)).sum\n        val\
    \ average = sum / extensions.size\n        val strength = extensions.count(c =>\
    \ c.isUpper) - extensions.count(c => c.isLower)\n        val strengthOfExtension\
    \ = strength / extensions.size\n        val strongestExtension = extensions.find(c\
    \ => c.count(c => c.isUpper) - c.count(c => c.isLower) == 0).get\n        val\
    \ secondStrongestExtension = extensions.find(c => c.count(c => c.isUpper) == 0).get\n\
    \        (class_name.getClass.getName + \".\" + strongestExtension.getClass.getName\
    \ + \n            ((if (strengthOfExtension > 0) \".\" + strengthOfExtension else\
    \ \"\")) + (if (secondStrongestExtension != null) \".\" + secondStrongestExtension\
    \ else \"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg6tc1fm3.scala:25:47 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions.count(\e\
    [36mc\e[0m => c.isUpper) - extensions.count(\e[36mc\e[0m => c.isLower)\n\e[31m\e\
    [31m   |\e[0m                                             ^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value isUpper is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg6tc1fm3.scala:25:82 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions.count(\e\
    [36mc\e[0m => c.isUpper) - extensions.count(\e[36mc\e[0m => c.isLower)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \    value isLower is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010043
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extensions_sorted\
    \ = extensions sortBy {\n            case ext => ext.map(_.toUpperCase).length\
    \ - ext.map(_.toLowerCase).length\n        }\n        val extensions_sorted =\
    \ extensions_sorted filter (ext => ext.matches(\"[A-Z]+\"))\n        val extensions_sorted\
    \ = extensions_sorted filter (ext => ext.matches(\"[a-z]+\"))\n        val extensions_sorted\
    \ = extensions_sorted filter (ext => ext.length() >= CAP - SM)\n        val extensions_sorted\
    \ = extensions_sorted sortBy {\n            case ext => ext.map(_.toUpperCase).length\
    \ - ext.map(_.toLowerCase).length\n        }\n        val extensions_sorted =\
    \ extensions_sorted filter (ext => ext.matches(\"[A-Z]+\"))\n        val extensions_sorted\
    \ = extensions_sorted filter (ext => ext.matches(\"[a-z]+\"))\n        val extensions_sorted\
    \ = extensions_sorted filter (ext => ext.length() >= CAP - SM)\n        val extensions_sorted\
    \ = extensions_sorted sortBy {\n            case ext => ext.map(_.toUpperCase).length\
    \ - ext.map(_.toLowerCase).length\n        }\n        val extensions_sorted =\
    \ extensions_sorted filter (ext => ext.matches(\"[A-Z]+\"))\n        val extensions_sorted\
    \ = extensions_sorted filter (ext => ext.matches(\"[a-z]+\"))\n        val extensions_sorted\
    \ = extensions_sorted filter (ext => ext.length() >= CAP - SM)\n        val extensions_sorted\
    \ = extensions_sorted sortBy {\n            case ext => ext.map(_.toUpperCase).length\
    \ - ext.map(_.toLowerCase).length\n        }\n        val extensions_sorted =\
    \ extensions_sorted filter (ext => ext.matches(\"[A-Z]+\"))\n        val extensions_sorted\
    \ = extensions_sorted filter (ext => ext.matches(\"[a-z]+\"))\n        val extensions_sorted\
    \ = extensions_sorted filter (ext => ext.length() >= CAP - SM)\n        val extensions_sorted\
    \ = extensions_sorted sortBy {\n            case ext => ext.map(_.toUpperCase).length\
    \ - ext.map(_.toLowerCase).length\n        }\n        val extensions_sorted =\
    \ extensions_sorted filter (ext => ext.matches(\"[A-Z]+\"))\n        val extensions_sorted\
    \ = extensions_sorted filter (ext => ext.matches(\"[a-z]+\"))\n        val extensions_sorted\
    \ = extensions_sorted filter (ext => ext.length() >= CAP - SM)\n        val extensions_sorted\
    \ = extensions_sorted sortBy {\n            case ext => ext.map(_.toUpperCase).length\
    \ - ext.map(_.toLowerCase).length\n        }\n        val extensions_sorted =\
    \ extensions_sorted filter (\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\",\
    \ \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpfq9wpujc.scala:54:58 ---------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted filter (\n\e[31m\e[31m   |\e[0m                          \
    \                                ^\e[0m\n\e[31m   |\e[0m                     \
    \                  expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpfq9wpujc.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted filter (\e[36mext\e[0m => ext.matches(\e[31m\"[A-Z]+\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfq9wpujc.scala:25:12 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted filter (\e[36mext\e[0m => ext.matches(\e[31m\"[a-z]+\"\e[0m))\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmpfq9wpujc.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mextensions_sorted\e[0m =\
    \ extensions_sorted filter (\e[36mext\e[0m => ext.length() >= CAP - SM)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_sorted is already defined as \e[33mvalue\e[0m \e\
    [35mextensions_sorted\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that o"
  stdout: ''
  timestamp: 1660010044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extensions_count\
    \ = extensions.foldLeft(0) { (acc, element) =>\n            val char_count = element.toCharArray.foldLeft(0)\
    \ { (acc, c) =>\n                if (c >= 65 && c <= 90) acc + 1\n           \
    \     else acc\n            }\n            acc + char_count\n        }\n     \
    \   val strength = extensions_count / extensions.size.toDouble\n        val class_names\
    \ = class_name.split(\"\\\\.\").drop(1).map(_.capitalize).mkString\n        val\
    \ class_names = class_names + extensions_count.toString\n        val class_name_with_extensions\
    \ = class_name + class_names.toLowerCase\n        val extension_strings = extensions.map(e\
    \ => e.split(\"\\\\.\").take(1).mkString).toList\n        if (extension_strings.contains(\"\
    \")) {\n            throw new RuntimeException(\"Extension list has empty string\"\
    )\n        }\n        val extension_strings_count = extension_strings.foldLeft(0)\
    \ { (acc, e) =>\n            val extensions_count = e.split(\",\").map(_.toLowerCase).foldLeft(0)\
    \ { (acc, e) =>\n                if (e == \"\") acc\n                else acc\
    \ + e\n            }\n            acc + extensions_count\n        }\n        val\
    \ extension_strings_count = extension_strings_count.toDouble\n        if (strength\
    \ > extension_strings_count) {\n            val strength_strongest = extension_strings(extension_strings_count.toInt)\n\
    \            val extension_strings_strongest = extension_strings.take(extension_strings_count.toInt)\n\
    \            val extension_strings_strongest_count = extension_strings_strongest.map(_.toLowerCase).foldLeft(0)\
    \ { (acc, e) =>\n                if (e == \"\") acc\n                else acc\
    \ + e\n            }\n            val extensions_strongest = extension_strings_strongest.map(_.split(\"\
    \\\\.\").take(1).mkString).toList\n            val extensions_strongest_count\
    \ = extensions_strongest.foldLeft(0) { (acc, e) =>\n                if (e == \"\
    \") acc\n                else acc + e\n            }\n            val extensions_strongest_count\
    \ = extensions_strongest_count.toDouble\n            if (strength_strongest ==\
    \ \"\") {\n                val extension_strongest_strongest = extensions_strongest(extensions_strongest_count.toInt)\n\
    \                val extension_strongest_strongest_count = extension_strongest_strongest.map(_.toLowerCase).foldLeft(0)\
    \ { (acc, e) =>\n                    if (e == \"\") acc\n                    else\
    \ acc + e\n                }\n                val extensions_strongest_\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9gugaokh.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp9gugaokh.scala:78:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m78 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9gugaokh.scala:30:12 ---------------------------\e[0m\e[0m\n\e\
    [31m30 |\e[0m        \e[33mval\e[0m \e[36mclass_names\e[0m = class_names + extensions_count.toString\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mclass_names is already defined as \e[33mvalue\e[0m \e[35mclass_names\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9gugaokh.scala:43:12 ---------------------------\e[0m\e[0m\n\e\
    [31m43 |\e[0m        \e[33mval\e[0m \e[36mextension_strings_count\e[0m = extension_strings_count.toDouble\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextension_strings_count is already defined as \e[33mvalue\e\
    [0m \e[35mextension_strings_count\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9gugaokh.scala:39:21 --------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                \e[33melse\e[0m acc + e\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    Found:    String\n\e[31m   |\e[0m                     Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9gugaokh.scala:56:16 ---------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m            \e[33mval\e[0m \e[36mextensions_strongest_count\e\
    [0m = extensions_strongest_count.toDouble\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val c = class_name.foldLeft((0,0))(_\
    \ + _)\n        val s = extensions.foldLeft((0,0))(_ + _)\n        val cap = c.toDouble\
    \ - s.toDouble\n        val sm = s.toDouble - c.toDouble\n        if(cap > sm)\
    \ class_name + extensions.head else StrongestExtension(class_name, extensions)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc3ve6nsv.scala:21:45 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mc\e[0m = class_name.foldLeft((\e\
    [31m0\e[0m,\e[31m0\e[0m))(_ + _)\n\e[31m\e[31m   |\e[0m                      \
    \                     ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of (Int,\
    \ Int), but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpc3ve6nsv.scala:22:45 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = extensions.foldLeft((\e\
    [31m0\e[0m,\e[31m0\e[0m))(_ + _)\n\e[31m\e[31m   |\e[0m                      \
    \                     ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of (Int,\
    \ Int), but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might make progress towards fixing\
    \ the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpc3ve6nsv.scala:23:20 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mcap\e[0m = c.toDouble -\
    \ s.toDouble\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mvalue toDouble is not a member of (Int, Int), but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[3"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Write your code\
    \ here\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph868dghv.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m        \e[34m// Write your\
    \ code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010031
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = extensions.length\
    \ / 2\n        var strongest = null\n        var i = 0\n        while (i < extensions.length)\
    \ {\n            val c = extensions(i)\n            val sl = c.toLowerCase //\
    \ to find sm\n            val cap = c.toUpperCase // to find cap\n           \
    \ val sm = i + 1 < extensions.length ? extensions(i + 1) : \"\"\n            if\
    \ (cap.size < sm.size) {\n                strongest = class_name\n           \
    \     break\n            } else if (cap == sm && i != 0) {\n                strongest\
    \ = class_name\n                break\n            } else if (cap.size == sm.size\
    \ && i == 0) {\n                if (strength < 0f - Float.parseFloat(sm.replaceAll(\"\
    [^A-Z]\", \"\")) - Float.parseFloat(cap.replaceAll(\"[^A-Z]\", \"\"))) {\n   \
    \                 strongest = class_name\n                }\n                break\n\
    \            } else if (i == 0 && strength < 0f - Float.parseFloat(sm.replaceAll(\"\
    [^A-Z]\", \"\")) - Float.parseFloat(cap.replaceAll(\"[^A-Z]\", \"\"))) {\n   \
    \             strongest = class_name\n            }\n            i += 1\n    \
    \    }\n        strongest\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptrrr0qsh.scala:28:47 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36msm\e[0m = i + \e[31m1\e\
    [0m < extensions.length ? extensions(i + \e[31m1\e[0m) : \e[31m\"\"\e[0m\n\e[31m\e\
    [31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             value ? is not a member of Int\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmptrrr0qsh.scala:30:28 --------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                strongest = class_name\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Found:    (class_name : String)\n\e[31m   |\e[0m       \
    \                     Required: Null\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmptrrr0qsh.scala:31:16 ------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                break\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptrrr0qsh.scala:33:28 --------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m                strongest = class_name\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                     Found:    (class_name : String)\n\e[31m   |\e[0m       \
    \                     Required: Null\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmptrrr0qsh.scala:34:16 ------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m                break\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptrrr0qsh.scala:36:42 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                \e[33mif\e[0m (strength < \e[31m0f\e\
    [0m - Float.parseFloat(sm.replace"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var sorted_extensions\
    \ = extensions.sortWith((a, b) => b.length - a.length)\n        val max_length\
    \ = sorted_extensions.length\n        for (i <- 0 until max_length) {\n      \
    \      var extension = sorted_extensions(i)\n            val letter = extension.charAt(0)\n\
    \            val lower_letter = extension.charAt(1)\n            if (letter.equalsIgnoreCase(class_name.charAt(class_name.length()\
    \ - 1))) {\n                sorted_extensions = sorted_extensions.drop(1)\n  \
    \          } else {\n                val length = class_name.length\n        \
    \        if (lower_letter != letter) {\n                    for (j <- 0 until\
    \ length) {\n                        if (class_name.charAt(j) != lower_letter)\
    \ {\n                            sorted_extensions = sorted_extensions.drop(j)\n\
    \                            break\n                        }\n              \
    \      }\n                } else \n                    sorted_extensions = sorted_extensions.drop(length\
    \ - 2)\n            }\n        }\n        sorted_extensions.head\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"),\
    \ (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpciekepkp.scala:21:62\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36msorted_extensions\e\
    [0m = extensions.sortWith((\e[36ma\e[0m, \e[36mb\e[0m) => b.length - a.length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \      ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \                          Found:    Int\n\e[31m   |\e[0m                    \
    \                                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpciekepkp.scala:27:23 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m (letter.equalsIgnoreCase(class_name.charAt(class_name.length()\
    \ - \e[31m1\e[0m))) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value equalsIgnoreCase is not a member of\
    \ Char\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpciekepkp.scala:35:28 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                            break\n\e[31m\e[31m   |\e\
    [0m                            ^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \         Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strength = -1\n\
    \        val extensions_map = extensions.toMap\n        extensions_map foreach\
    \ (x => {\n                val y = x.toUpperCase - x.toLowerCase\n           \
    \     val c = x.toLowerCase - x\n                val n = x + y + c\n         \
    \       if (strength < 0) strength = n\n                else if (n > strength)\
    \ strength = n\n            })\n            val key = extensions_map.maxBy(x =>\
    \ x._2)\n            val result = class_name + key._1\n            return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbd_7il84.scala:22:45 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_map\e[0m = extensions.toMap\n\
    \e[31m\e[31m   |\e[0m                                             ^\e[0m\n\e[31m\
    \   |\e[0m                                     Cannot prove that String <:< (K,\
    \ V)\n\e[31m   |\e[0m\n\e[31m   |\e[0m                                     where:\
    \    K is a type variable\n\e[31m   |\e[0m                                   \
    \            V is a type variable\n\e[31m   |\e[0m                           \
    \          .\n1 error found\n"
  stdout: ''
  timestamp: 1660010044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n      // Your code here!\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkgbdwz1m.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m      \e[34m// Your code here!\e\
    [0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010044
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // The map function\
    \ takes a string and generates a tuple of uppercase letters\n        // and lowercase\
    \ letters. \n        // For each extension in the list, you will be able to generate\
    \ the number\n        // of uppercase letters and lowercase letters.\n       \
    \ // For example, for the first extension you will be able to generate the number\n\
    \        // of uppercase letters to be 2 and lowercase letters to be 0, since\
    \ 'AA' is\n        // the first string in the list and there are no uppercase\
    \ letters before it\n        // ('AA' is followed by 'Be' which is not the first\
    \ letter in the list).\n        // For the second extension you will be able to\
    \ generate the number of\n        // uppercase letters to be 1 and lowercase letters\
    \ to be 1, since 'Be' is \n        // the second string in the list and there\
    \ are no uppercase letters before it\n        // ('Be' is followed by 'CC' which\
    \ is not the first letter in the list).\n        // In case there are no extensions,\
    \ you should return an empty string. \n        \n        def number_of_uppercase_letters(s\
    \ : String) : Int = {\n            s.toCharArray.count(_ == 'A')\n        }\n\n\
    \        def number_of_lowercase_letters(s : String) : Int = {\n            s.toCharArray.count(_\
    \ == 'a')\n        }\n\n        // The hash function takes a string and returns\
    \ a hash of the string\n        // with all the uppercase letters replaced by\
    \ \"A\" and the lowercase letters\n        // replaced by \"a\". The hash function\
    \ ensures that the hash is the same for \n        // strings that have the same\
    \ number of uppercase and lowercase letters.\n        // For example, if the string\
    \ to be hashed is 'AAA', then 'A' would be the \n        // hash of 'AAA'. You\
    \ must use these hash functions to ensure your solution\n        // works correctly\
    \ even if the string to be hashed is changed (for example,\n        // to 'aAA').\
    \ The hash function should work for strings of any length.\n        def hasher(s\
    \ : String) : Int = {\n            val hashMap = new mutable.HashMap[String, Int]()\n\
    \            for (a <- s) {\n                hashMap += (a -> ('a' -> 1, 'A' ->\
    \ 1))\n            }\n            hashMap.foldLeft(0)((h, e) => h * e._2._1 +\
    \ e._2._2)\n        }\n\n        // This function finds the highest number of\
    \ uppercase letters and \n        // lowercase letters that appear in the string.\
    \ If there are more than\n        // two strings with the same number of uppercase\
    \ letters and lowercase letters\n        // then you choose the one that comes\
    \ first in the list of strings. \n        // For example, if there are two strings\
    \ with uppercase letters 'AB' and \n        // lowercase letters 'cd', then you\
    \ choose the one that comes first in the \n        // list of strings (i.e., you\
    \ choose 'AB')\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7cjua1i9.scala:52:30 ------------------------\e\
    [0m\e[0m\n\e[31m52 |\e[0m            \e[33mval\e[0m \e[36mhashMap\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                              ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp7cjua1i9.scala:66:5 ---------------------\e[0m\e[0m\n\e[31m66\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010045
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extension_strength\
    \ = extensions.foldLeft(-1)((x,y)=>{\n            if(x.length>y.length) -1 \n\
    \            else x.length<y.length ? x.toString.compareTo(y.toString) \n    \
    \            : x.toString.compareTo(y.toString)\n        })\n        val class_name\
    \ = class_name.replaceAll(\"[_]\", \"\").replaceAll(\"[-]\", \"\").replaceAll(\"\
    [a-z]\", \"\").toCharArray\n        val class_name_strength = class_name.foldLeft(0)((x,y)=>{\n\
    \            if(x.length>y.length) x \n            else y\n        })\n      \
    \  return if (class_name_strength>extension_strength) \n                class_name\
    \ + \"_\" + extensions.foldLeft(0)((x,y)=>{\n                    if(x.length>y.length)\
    \ x \n                    else y\n                }) \n            else\n    \
    \            class_name + \"_\" + extensions.foldLeft(0)((x,y)=>{\n          \
    \          if(x.length>y.length) y \n                    else x\n            \
    \    }) \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpqybobh97.scala:24:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                : x.toString.compareTo(y.toString)\n\e\
    [31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                 end of statement expected but '(' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpqybobh97.scala:25:9 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        })\n\e[31m\e[31m   |\e[0m         ^\e[0m\n\e\
    [31m   |\e[0m         '}' expected, but ')' found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpqybobh97.scala:22:17 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m            \e[33mif\e[0m(x.length>y.length) -\e[31m1\e[0m \n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value\
    \ length is not a member of Int\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqybobh97.scala:23:19\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e\
    [0m x.length<y.length ? x.toString.compareTo(y.toString) \n\e[31m\e[31m   |\e\
    [0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m                 value length\
    \ is not a member of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1660010046
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val length = extensions.length\n\
    \        val extensionMap = mutable.HashMap[String, Int]()\n\n        for ((extension,\
    \ strength) <- extensions) {\n            if (extension.length > 0) {\n      \
    \          val key = extension.foldLeft(0)(_ + _.length)\n                extensionMap\
    \ += (key -> strength)\n            }\n        }\n\n        val maxValue = extensionMap.maxBy(_._2)\n\
    \        val maxKey = maxValue.key\n\n        val maxExtensions = extensionMap.filter(kvp\
    \ => kvp._1 == maxKey)\n\n        if (maxExtensions.isEmpty) class_name\n    \
    \    else if (maxExtensions.size === 1) maxExtensions(0)._1\n        else class_name\
    \ + extensions(0)\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgqqelr53.scala:22:27 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensionMap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgqqelr53.scala:25:26\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m\
    \ (extension.length > \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value length is not a member of Any\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpgqqelr53.scala:26:36 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e[0m \e[36mkey\e[0m = extension.foldLeft(\e\
    [31m0\e[0m)(_ + _.length)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value foldLeft is not a member of\
    \ Any\n3 errors found\n"
  stdout: ''
  timestamp: 1660010049
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val max_strength\
    \ : Int = -1\n        val max_extension : Option[String] = None\n        val name_array\
    \ = class_name.split(\"\\\\.\")\n        extensions foreach {\n            ext\
    \ => {\n                val ext_array = ext.split(\"\\\\.\")\n               \
    \ val name_cmp = ext_array.zip(name_array).map(x => x._1.toUpper compareTo x._2.toUpper)\n\
    \                val strength = name_cmp.foldLeft(0) { (acc, x) => acc + x._1\
    \ }\n                if ((strength > max_strength) || (strength == max_strength\
    \ && ext_array == max_extension.getOrElse(ext))) {\n                    max_strength\
    \ = strength\n                    max_extension = Some(ext)\n                }\n\
    \            }\n        }\n        max_extension.getOrElse(\"\")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"),\
    \ (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo8prykrt.scala:27:71 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mval\e[0m \e[36mname_cmp\e[0m =\
    \ ext_array.zip(name_array).map(\e[36mx\e[0m => x._1.toUpper compareTo x._2.toUpper)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                \
    \ value toUpper is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpo8prykrt.scala:27:102\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \
    \        \e[33mval\e[0m \e[36mname_cmp\e[0m = ext_array.zip(name_array).map(\e\
    [36mx\e[0m => x._1.toUpper compareTo x._2.toUpper)\n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m    \
    \                                      where:    B is a type variable\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpo8prykrt.scala:30:33 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                    max_strength = strength\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                    Reassignment to val max_strength\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpo8prykrt.scala:31:34 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    max_extension = Some(ext)\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    Reassignment to val max_extension\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = extensions.map{e\
    \ =>\n            if (e.toUpperCase.size < e.toLowerCase.size)\n             \
    \ -1\n            else if (e.toUpperCase.size > e.toLowerCase.size)\n        \
    \      1\n            else\n              e.toUpperCase.toCharArray.count(_ ==\
    \ 'A') - e.toLowerCase.toCharArray.count(_ == 'a')\n        }\n        strengths.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpzy4v9l89.scala:29:8\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m        strengths.max\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Int\n\
    \e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strength = extensions.size\n\
    \        var max_strongest_extension = \"\"\n        for(e <- extensions){\n \
    \           val cap = e.filter(_ <= 'Z').size\n            val sm = e.filter(_\
    \ >= 'A').size\n            var strongest = if (cap - sm > 0) true\n         \
    \   else false\n            if(strongest){\n                strongest = cap -\
    \ sm\n            }else{\n                strongest = cap + sm\n            }\n\
    \            if(strongest > strength){\n                strength = strongest\n\
    \                max_strongest_extension = e\n            }\n        }\n     \
    \   class_name + \".\" + max_strongest_extension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k_fe3x.scala:29:28\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                strongest = cap\
    \ - sm\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                            Found:    Int\n\e[31m   |\e[0m         \
    \                   Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpx9k_fe3x.scala:31:28 --------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m                strongest = cap + sm\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \          Found:    Int\n\e[31m   |\e[0m                            Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx9k_fe3x.scala:33:27\
    \ --------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mif\e[0m(strongest\
    \ > strength){\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Found:    (strength : Int)\n\e[31m \
    \  |\e[0m                           Required: Boolean\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpx9k_fe3x.scala:34:27 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                strength = strongest\n\e[31m\e[31m  \
    \ |\e[0m                           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                Found:    (strongest : Boolean)\n\e[31m   |\e[0m            \
    \               Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010052
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Use mutable sets\
    \ to track which extensions have already been used.\n        val extensions_used:\
    \ mutable.Set[String] = mutable.Set()\n\n        // Use a mutable set to keep\
    \ track of the most used extension.\n        val most_used_extension: Option[String]\
    \ = None\n\n        // The extension with the greatest strength must come first.\n\
    \        var extensions_with_greatest_strength: List[String] = extensions \n\n\
    \        // Loop through the extensions list\n        for( extension <- extensions_with_greatest_strength\
    \ ) {\n            // If the extension has already been used, skip this extension.\n\
    \            // This extension has been used twice.\n            if( extensions_used.contains(extension)\
    \ ) continue;\n            // If this is the first time the extension has been\
    \ used, \n            // add it to the extensions set.\n            if( most_used_extension.isEmpty\
    \ ) {\n                extensions_with_greatest_strength += extension;\n     \
    \           extensions_used += extension;\n                continue;\n       \
    \     }\n\n            // Otherwise, this extension has been used before. \n \
    \           // We will keep the extension with the greatest strength.\n      \
    \      val strength = most_used_extension.get.count - extension.count\n      \
    \      if( strength > 0 ) {\n                extensions_with_greatest_strength\
    \ += extension;\n                extensions_used += extension;\n             \
    \   most_used_extension = Some(extension)\n            }\n        }\n\n      \
    \  // Return the string that has the greatest strength.\n        extensions_with_greatest_strength.max\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpivouf853.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensions_used\e[0m: mutable.Set[\e\
    [35mString\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                      \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpivouf853.scala:22:51\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e\
    [36mextensions_used\e[0m: mutable.Set[\e[35mString\e[0m] = mutable.Set()\n\e[31m\e\
    [31m   |\e[0m                                                   ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpivouf853.scala:34:54\
    \ ------------------------\e[0m\e[0m\n\e[31m34 |\e[0m            \e[33mif\e[0m(\
    \ extensions_used.contains(extension) ) continue;\n\e[31m\e[31m   |\e[0m     \
    \                                                 ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                     Not found: continue\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpivouf853.scala:38:50\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m                extensions_with_greatest_strength\
    \ += extension;\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpivouf853.scala:40:16 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                continue;\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpivouf853.scala:45:57\
    \ -----------"
  stdout: ''
  timestamp: 1660010053
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n       val caps = extensions.length\n\
    \       val sms = extensions.map(_.length)\n       val min = math.min(caps, sms)\n\
    \       extensions.sortWith(_.length - _.length)\n       extensions.headOption\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpnsmmjqwl.scala:23:22 -----------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m       \e[33mval\e[0m \e[36mmin\e[0m = math.min(caps,\
    \ sms)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0mNone\
    \ of the overloaded alternatives of \e[33mmethod\e[0m \e[35mmin\e[0m in \e[33mpackage\e\
    [0m \e[35mscala.math\e[0m with types\n\e[31m   |\e[0m (x: Double, y: Double):\
    \ Double\n\e[31m   |\e[0m (x: Float, y: Float): Float\n\e[31m   |\e[0m (x: Long,\
    \ y: Long): Long\n\e[31m   |\e[0m (x: Int, y: Int): Int\n\e[31m   |\e[0mmatch\
    \ arguments ((caps : Int), (sms : List[Int]))\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpnsmmjqwl.scala:24:27 --------------------\e[0m\e[0m\n\e[31m24\
    \ |\e[0m       extensions.sortWith(_.length - _.length)\n\e[31m\e[31m   |\e[0m\
    \                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        \
    \                   Found:    Int\n\e[31m   |\e[0m                           Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnsmmjqwl.scala:25:18\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m       extensions.headOption\n\
    \e[31m\e[31m   |\e[0m       ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \ Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e\
    [31m   |\e[0m       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var extension_name\
    \ : String = \"\"\n        var extension_strength : Int = -1\n        var extension_class\
    \ : String = \"\"\n        \n        for (extension <- extensions) {\n       \
    \     extension_class = extension.substring(0, 1)\n            extension_name\
    \ = extension.substring(2)\n            if (extension_strength == -1 || extension_strength\
    \ > extension_strength) {\n                extension_strength = extension_strength\n\
    \                extension_class = extension_class\n                extension_name\
    \ = extension_name\n            }\n        }\n        return class_name + \".\"\
    \ + extension_class + extension_name\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpe_wm8wdy.scala:37)\n\tat Problem.main(tmpe_wm8wdy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val classes = ListBuffer(new\
    \ mutable.HashMap[String, String]())\n        val strengths = ListBuffer(0)\n\
    \        extensions.foreach { e =>\n            val cap = e.length\n         \
    \   val sm = e.toLowerCase().length\n            val strength = cap - sm\n   \
    \         if (classes.contains(e + \"__\" + strength)) {\n                strengths(strengths.indexOf(strength)\
    \ + 1) = strength\n            }\n            else {\n                strengths(strengths.size)\
    \ = strength\n                classes += e + \"__\" + strength\n            }\n\
    \        }\n        val strongest_extension = classes.filter(_._2.length == strengths.max).sortBy(_._2).head._1\n\
    \        class_name + \".\" + strongest_extension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpovs5a15e.scala:21:37 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mclasses\e[0m = ListBuffer(\e\
    [33mnew\e[0m mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]())\n\e[31m\e\
    [31m   |\e[0m                                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpovs5a15e.scala:32:27 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                classes += e + \e[31m\"__\"\e[0m + strength\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                           Found:    String\n\e[31m   |\e[0m       \
    \                    Required: Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpovs5a15e.scala:35:51 ------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mstrongest_extension\e[0m = classes.filter(_._2.length\
    \ == strengths.max).sortBy(_._2).head._1\n\e[31m\e[31m   |\e[0m              \
    \                                   ^^^^\e[0m\n\e[31m   |\e[0m               \
    \                      value _2 is not a member of Nothing\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpovs5a15e.scala:35:88 ------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mstrongest_extension\e[0m = classes.filter(_._2.length\
    \ == strengths.max).sortBy(_._2).head._1\n\e[31m\e[31m   |\e[0m              \
    \                                                                        ^^^^\e\
    [0m\n\e[31m   |\e[0mvalue _2 is not a member of Nothing, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import concurrent.duration.durationToPair\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- Error: /tmp/tmpovs5a15e.scala:35:91 -----------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mval\e[0m \e[36mstrongest_extension\e[0m "
  stdout: ''
  timestamp: 1660010055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val result = new\
    \ mutable.HashMap[Int, String]()\n        val extensions_length = extensions.size\n\
    \        val extensions_map = extensions.map(e => e -> 1)\n        val all_upper\
    \ = extensions_map.flatMap(e => e.filter(_ == e.toUpper))\n        val all_lower\
    \ = extensions_map.flatMap(e => e.filter(_ == e.toLower))\n        val strongest_extension_upper\
    \ = all_upper.maxBy(e => extensions_map.getOrElse(e, 0))\n        val strongest_extension_lower\
    \ = all_lower.minBy(e => extensions_map.getOrElse(e, 0))\n        val strongest_extension\
    \ = extensions_map.get(strongest_extension_upper) match {\n            case None\
    \ => strongest_extension_lower\n            case Some(strongest_extension) =>\
    \ strongest_extension\n        }\n        result.getOrElse(extensions_length,\
    \ \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_hzqp90t.scala:21:25 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_hzqp90t.scala:24:54\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mall_upper\e[0m = extensions_map.flatMap(\e[36me\e[0m => e.filter(_ == e.toUpper))\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value filter is not a member of\
    \ (String, Int)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_hzqp90t.scala:25:54\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mval\e[0m \e\
    [36mall_lower\e[0m = extensions_map.flatMap(\e[36me\e[0m => e.filter(_ == e.toLower))\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                           value filter is not a member of\
    \ (String, Int)\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_hzqp90t.scala:26:76\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e\
    [36mstrongest_extension_upper\e[0m = all_upper.maxBy(\e[36me\e[0m => extensions_map.getOrElse(e,\
    \ \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \           value getOrElse is not a member of List[(String, Int)]\n\e[31m\e[31m--\
    \ Error: /tmp/tmp_hzqp90t.scala:26:92 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mstrongest_extension_upper\e\
    [0m = all_upper.maxBy(\e[36me\e[0m => extensions_map.getOrElse(e, \e[31m0\e[0m))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                    ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByte\e"
  stdout: ''
  timestamp: 1660010057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strength = 0\n\
    \        var strongest_extension = null\n        for(extension <- extensions)\
    \ {\n            var s = extension.filter(letter => letter.isUpper).length\n \
    \           var t = extension.filter(letter => letter.isLower).length\n      \
    \      strength = if (s > t) s else t\n            if (strength > 0) {\n     \
    \           if (strongest_extension == null) {\n                    strongest_extension\
    \ = extension\n                } else {\n                    if (strength > strongest_extension.filter(letter\
    \ => letter.isUpper).length)\n                        strongest_extension = extension\n\
    \                }\n            }\n        }\n        if (strongest_extension\
    \ == null) {\n            throw Exception(\"Strongest extension has no strength\"\
    )\n        }\n        return s\"${class_name.split(\"$\").head}${strongest_extension}\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprf4fxoq_.scala:29:42\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                    strongest_extension\
    \ = extension\n\e[31m\e[31m   |\e[0m                                         \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                          Found:\
    \    (extension : String)\n\e[31m   |\e[0m                                   \
    \       Required: Null\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprf4fxoq_.scala:31:55\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                    \e[33mif\e\
    [0m (strength > strongest_extension.filter(\e[36mletter\e[0m => letter.isUpper).length)\n\
    \e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue filter is not a member of Null, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\
    \e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.list asScalaBuffer\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration AsScalaIterator\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator asScala\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.map AsScalaConcurrentMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.set asScala\n\e\
    [31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprf4fxoq_.scala:32:46\
    \ --------------------\e[0m\e[0m\n\e[31m32 |\e[0m                        strongest_extension\
    \ = extension\n\e[31m\e[31m   |\e[0m                                         \
    \     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \  Found:    (extension : Strin"
  stdout: ''
  timestamp: 1660010057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val classNamesStr\
    \ = class_name +\".\"\n        val extensionStrs = extensions.map((_, extensionStr\
    \ => classNamesStr + extensionStr))\n        val extensions = extensionStrs.toSet\n\
    \        val classes = extensionStrs.map((_, classNamesStr)).toMap\n        val\
    \ classes_and_extensions = classes.zip(extensions).toMap\n        val strengths\
    \ = classes_and_extensions.map {\n            case (k,(classNamesStr, extensionStr))\
    \ => extensionStr.split(\"\"\"[A-Z]\"\"\").map(_.length.toDouble).sum - k\n  \
    \      }\n        val maxStrength = strengths.max\n        classes_and_extensions.map\
    \ { case (k,(classNamesStr, extensionStr)) => classNamesStr + extensionStr }.max\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0hir4j2b.scala:23:25 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensions\e[0m = extensionStrs.toSet\n\
    \e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m   |\e[0m        \
    \                 Recursive \e[33mvalue\e[0m \e[35mextensionStrs\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010051
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Initialize your\
    \ data structures, add your code here\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1m3ei3tu.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m        \e[34m// Initialize\
    \ your data structures, add your code here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpizcpmes5.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m        \e[34m// Your code\
    \ goes here\e[0m\n\e[31m22 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010055
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n      var result = \"\"\n\
    \      var strength = -1\n      extensions.foreach {ext => \n        val m = ext.toLowerCase\
    \ \n        val n = ext.toUpperCase \n        val cap = m.length\n        val\
    \ sm = n.length \n        val c = cap - sm \n        val s = c / sm\n        if(strength\
    \ == -1 || strength == s) \n          result = class_name\n        strength =\
    \ s \n      }\n      result\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvmpa9ivm.scala:37)\n\tat Problem.main(tmpvmpa9ivm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010056
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val exts = mutable.ArrayBuffer[String]()\n\
    \        val extensions_map = extensions map { ext => ext.toUpperCase -> ext }\n\
    \        class_name match {\n            case name if (name.size() == 1) => {\n\
    \                val first_ext = extensions_map.get(name head)\n             \
    \   first_ext match {\n                    case Some(s) => {\n               \
    \         exts.append(s)\n                        exts.append(first_ext)\n   \
    \                 }\n                    case None => \"\"\n                }\n\
    \            }\n            case name if (name.size() == 2) => {\n           \
    \     val first_ext = extensions_map.get(name head)\n                val second_ext\
    \ = extensions_map.get(name tail)\n                if (first_ext.size > second_ext.size)\
    \ {\n                    exts.append(first_ext)\n                    exts.append(second_ext)\n\
    \                } else {\n                    exts.append(second_ext)\n     \
    \               exts.append(first_ext)\n                }\n            }\n   \
    \         case name if (name.size() > 2) => {\n                val first_ext =\
    \ extensions_map.get(name head)\n                val second_ext = extensions_map.get(name\
    \ tail)\n                val third_ext = extensions_map.get(name last index)\n\
    \                if (first_ext.size > second_ext.size && first_ext.size > third_ext.size)\
    \ {\n                    exts.append(first_ext)\n                    exts.append(second_ext)\n\
    \                    exts.append(third_ext)\n                } else if (first_ext.size\
    \ > second_ext.size && first_ext.size < third_ext.size) {\n                  \
    \  exts.append(first_ext)\n                    exts.append(third_ext)\n      \
    \          } else if (first_ext.size > third_ext.size) {\n                   \
    \ exts.append(third_ext)\n                    exts.append(first_ext)\n       \
    \         }\n            }\n            case _ => \"\"\n        }\n        exts\
    \ mkString \".\"\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzdl8008r.scala:25:60 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e[0m \e[36mfirst_ext\e[0m =\
    \ extensions_map.get(name head)\n\e[31m\e[31m   |\e[0m                       \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                       expression expected but \e[31m')'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzdl8008r.scala:35:60 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                \e[33mval\e[0m \e[36mfirst_ext\e[0m =\
    \ extensions_map.get(name head)\n\e[31m\e[31m   |\e[0m                       \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                       expression expected but \e[31m')'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzdl8008r.scala:36:61 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                \e[33mval\e[0m \e[36msecond_ext\e[0m\
    \ = extensions_map.get(name tail)\n\e[31m\e[31m   |\e[0m                     \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                          expression expected but \e[31m')'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzdl8008r.scala:46:60 ---------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                \e[33mval\e[0m \e[36mfirst_ext\e[0m =\
    \ extensions_map.get(name head)\n\e[31m\e[31m   |\e[0m                       \
    \                                     ^\e[0m\n\e[31m   |\e[0m                \
    \                       expression expected but \e[31m')'\e[0m found\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzdl8008r.scala:47:61 ---------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                \e[33mval\e[0m \e[36msecond_ext\e[0m\
    \ = extensions_map.get(name tail)\n\e[31m\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660010059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var className = class_name\n\
    \        var strongestExtension = \"\"\n        var strength = 0\n        for(extension\
    \ <- extensions) {\n            var name = extension\n            var name = name.substring(0,1).toLowerCase()\
    \ + name.substring(1).toUpperCase()\n            strength = strength * 2\n   \
    \         if (strength > name.indexOf(\"C\") ) strength = name.indexOf(\"C\")\n\
    \            if (strength > name.indexOf(\"S\") ) strength = name.indexOf(\"S\"\
    )\n            if (strength > name.indexOf(\"N\") ) strength = name.indexOf(\"\
    N\")\n            if (strength > name.indexOf(\"R\") ) strength = name.indexOf(\"\
    R\")\n            if (strength > name.indexOf(\"P\") ) strength = name.indexOf(\"\
    P\")\n            if (strength > name.indexOf(\"I\") ) strength = name.indexOf(\"\
    I\")\n            if (strength > name.indexOf(\"G\") ) strength = name.indexOf(\"\
    G\")\n            if (strength > name.indexOf(\"H\") ) strength = name.indexOf(\"\
    H\")\n            if (strength > name.indexOf(\"E\") ) strength = name.indexOf(\"\
    E\")\n            if (strength > name.indexOf(\"F\") ) strength = name.indexOf(\"\
    F\")\n            if (strength > name.indexOf(\"D\") ) strength = name.indexOf(\"\
    D\")\n            if (strength > name.indexOf(\"C\") ) strength = name.indexOf(\"\
    C\")\n            if (strength > name.indexOf(\"A\") ) strength = name.indexOf(\"\
    A\")\n            if (strength > name.indexOf(\"Z\") ) strength = name.indexOf(\"\
    Z\")\n            if (strength > name.indexOf(\"W\") ) strength = name.indexOf(\"\
    W\")\n            if (strength > name.indexOf(\"V\") ) strength = name.indexOf(\"\
    V\")\n            if (strength > name.indexOf(\"G\") ) strength = name.indexOf(\"\
    G\")\n            if (strength > name.indexOf(\"F\") ) strength = name.indexOf(\"\
    F\")\n            if (strength > name.indexOf(\"E\") ) strength = name.indexOf(\"\
    E\")\n            if (strength > name.indexOf(\"D\") ) strength = name.indexOf(\"\
    D\")\n            if (strength > name.indexOf(\"C\") ) strength = name.indexOf(\"\
    C\")\n            if (strength > name.indexOf(\"A\") ) strength = name.indexOf(\"\
    A\")\n            if (strength > name.indexOf(\"Z\") ) strength = name.indexOf(\"\
    Z\")\n            if (strength > name.indexOf(\"W\") ) strength = name.indexOf(\"\
    W\")\n            if (strength > name.indexOf(\"V\") ) strength = name.indexOf(\"\
    V\")\n            if (strength > name.indexOf(\"H\") ) strength = name.indexOf(\"\
    H\")\n            if (strength > name.indexOf(\"F\") ) strength = name.indexOf(\"\
    F\")\n            if (strength > \n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpe9oc5p7m.scala:55:26 ---------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m            \e[33mif\e[0m (strength > \n\e[31m\e[31m\
    \   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m                  \
    \        expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpe9oc5p7m.scala:70:0 ----------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe9oc5p7m.scala:26:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mvar\e\
    [0m \e[36mname\e[0m = name.substring(\e[31m0\e[0m,\e[31m1\e[0m).toLowerCase()\
    \ + name.substring(\e[31m1\e[0m).toUpperCase()\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mname is already defined as \e[33mvariable\e[0m \e[35mname\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpe9oc5p7m.scala:69:1 ---------------------\e[0m\e[0m\n\
    \e[31m69 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmpe9oc5p7m.scala:57:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m57 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n4 errors found\n"
  stdout: ''
  timestamp: 1660010057
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strengths = mutable.Map[Int,\
    \ String]()\n        extensions.foreach {\n            e =>\n                val\
    \ c = e.toUpperCase\n                val s = e.toLowerCase\n                val\
    \ v = (c - s) / c.toString.length\n                strengths += (v -> e)\n   \
    \     }\n        val max = strengths.maxBy(_._1)._1\n        val maxStrengths\
    \ = strengths.filter(_._1 == max)\n        val maxExtensions = maxStrengths.map(_._2)\n\
    \        val s = maxExtensions.sortBy(_).toList.mkString(\"\")\n        class_name\
    \ + s\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp60l4tas6.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstrengths\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \    ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp60l4tas6.scala:26:27\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e\
    [0m \e[36mv\e[0m = (c - s) / c.toString.length\n\e[31m\e[31m   |\e[0m        \
    \                 ^^^\e[0m\n\e[31m   |\e[0mvalue - is not a member of String,\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmp60l4tas6.scala:32:37 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36ms\e[0m = maxExtensions.sortBy(_).toList.mkString(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                                     ^\e\
    [0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \   I could not infer the type of the parameter _$4 of expanded function:\n\e\
    [31m   |\e[0m   _$4 => maxExtensions.sortBy(_$4).toList.mkString(\e[32m\"\"\e\
    [0m).\n3 errors found\n"
  stdout: ''
  timestamp: 1660010057
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_extension_name\
    \ : String = \"\"\n        var max_extension_strength : Int = -1\n\n        extensions.foreach(extension\
    \ => {\n            if(class_name.matches(extension)) {\n                val uppercase_letters\
    \ = class_name.substring(class_name.indexOf(\"CAP\") + 3, class_name.indexOf(\"\
    SM\") - 1).toUpperCase().toInt\n                val lowercase_letters = class_name.substring(class_name.indexOf(\"\
    SM\") + 3, class_name.indexOf(\"CAP\") - 1).toLowerCase().toInt\n            \
    \    max_extension_name = extension\n                if(uppercase_letters > lowercase_letters)\
    \ max_extension_strength = uppercase_letters - lowercase_letters\n           \
    \     else max_extension_strength = lowercase_letters - uppercase_letters\n  \
    \          }\n        })\n\n        if(max_extension_strength > 0) max_extension_name\
    \ + \".\" + max_extension_name\n        else \"\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5aktuanz.scala:38)\n\tat Problem.main(tmp5aktuanz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extension_len\
    \ = extensions.length\n        val strength = extension_len - 1\n        val strength_max\
    \ = strength * ( 1 + math.log(extension_len) )\n        val strength_min = strength\
    \ / ( 1 + math.log(extension_len) )\n        val strength_sum = 0\n        val\
    \ max_index = -1\n        val min_index = -1\n        for ( i <- 1 to extension_len\
    \ ) {\n            if ( extensions(i).toUpperCase.count != extensions(i).toUpperCase.count\
    \ ) {\n                val tmp_len = extensions(i).toUpperCase.count\n       \
    \         val tmp_strength = tmp_len * ( 1 + math.log(extension_len) )\n     \
    \           if ( tmp_strength > strength_sum ) {\n                    strength_sum\
    \ = tmp_strength\n                    max_index = i\n                }\n     \
    \       }\n            if ( extensions(i).toLowerCase.count != extensions(i).toLowerCase.count\
    \ ) {\n                val tmp_len = extensions(i).toLowerCase.count\n       \
    \         val tmp_strength = tmp_len * ( 1 + math.log(extension_len) )\n     \
    \           if ( tmp_strength > strength_sum ) {\n                    strength_sum\
    \ = tmp_strength\n                    min_index = i\n                }\n     \
    \       }\n        }\n        val max_strength = strength_sum * ( 1 + math.log(extension_len)\
    \ )\n        val min_strength = strength_sum / extension_len\n        val strength_diff\
    \ = max_strength - min_strength\n        if ( strength_diff < 0 ) {\n        \
    \    class_name + extensions(max_index)\n        }\n        else {\n         \
    \   class_name + extensions(min_index)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbrlr2f20.scala:31:43 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                \e[33mval\e[0m \e[36mtmp_strength\e[0m\
    \ = tmp_len * ( \e[31m1\e[0m + math.log(extension_len) )\n\e[31m\e[31m   |\e[0m\
    \                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue * is\
    \ not a member of (Char => Boolean) => Int, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpbrlr2f20.scala:33:33\
    \ -----------------------------\e[0m\e[0m\n\e[31m33 |\e[0m                   \
    \ strength_sum = tmp_strength\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Reassignment to val strength_sum\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpbrlr2f20.scala:34:30 -----------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                    max_index = i\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ Reassignment to val max_index\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbrlr2f20.scala:39:43 ------------------------\e[0m\e[0m\n\e[31m39 |\e\
    [0m                \e[33mval\e[0m \e[36mtmp_strength\e[0m = tmp_len * ( \e[31m1\e\
    [0m + math.log(extension_len) )\n\e[31m\e[31m   |\e[0m                       \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue * is not a member of (Char =>\
    \ Boolean) => Int, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e"
  stdout: ''
  timestamp: 1660010058
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here.\n        val s = extensions reduce { (max,ext) => {\n            val cap\
    \ = ext.map(_.toUpperCase).filter(_.isLetter).length\n            val sm = ext.map(_.toLowerCase).filter(_.isLetter).length\n\
    \            val s = cap - sm\n            if(s == 0) ext\n            else if(s\
    \ > max) ext\n            else max\n        }} \n        s\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_beon433.scala:23:32 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mcap\e[0m = ext.map(_.toUpperCase).filter(_.isLetter).length\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              value toUpperCase is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_beon433.scala:24:31 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36msm\e[0m = ext.map(_.toLowerCase).filter(_.isLetter).length\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                             value toLowerCase is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010057
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_strength\
    \ = extensions.length\n        var strongest_extension = \"\"\n\n        for (extension\
    \ <- extensions) {\n            var extension_cap = extension.split(\"\").map(_.toUpperCase).length\n\
    \            var extension_sm  = extension.split(\"\").map(_.toLowerCase).length\n\
    \            var strongest_extension_strength = extension_cap - extension_sm\n\
    \            if (strongest_strength < strongest_extension_strength) {\n      \
    \          strongest_strength = strongest_extension_strength\n               \
    \ strongest_extension = extension\n            }\n        }\n        return class_name\
    \ + strongest_extension\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpap82vb1_.scala:36)\n\tat Problem.main(tmpap82vb1_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010059
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strongest = scala.math.min(extensions.length,\
    \ extensions.length / 2)\n        \n        val classMap = mutable.HashMap[String,\
    \ String]()\n        \n        extensions.zipWithIndex.foreach { e =>\n      \
    \      if(e._1.matches(\"[A-Z]\")) {\n                classMap.put(e._1, e._2\
    \ + \".\" + e._1)\n            } else {\n                classMap.put(e._1, e._2)\n\
    \            }\n        }\n        \n        var strongestClass = \"\"\n     \
    \   \n        classMap.keys.toList.sortWith(_ < _).foreach { s =>\n          \
    \  if(s.matches(\"[A-Z]\")) {\n                strongestClass = s + \"$\" + strongest\n\
    \            } else {\n                strongestClass = s + \"$\" + strongest\n\
    \            }\n        }\n        \n        strongestClass + \"$\" + strongest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpv1vojqkx.scala:23:23 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mclassMap\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        if (extensions.length\
    \ == 0) {\n          class_name\n        }\n        else {\n          val CAP\
    \ = extensions(0).length\n          val SM = extensions(1).length\n          val\
    \ strength = CAP - SM\n          extensions match {\n            case Nil => \"\
    null\"\n            case head :: tail => {\n              if (strength < CAP)\
    \ {\n                head.substring(0, CAP) + StrongestExtension(class_name +\"\
    .\" +head, tail)\n              }\n              else if ((CAP - SM) == strength)\
    \ {\n                head.substring(0, SM) + StrongestExtension(class_name +\"\
    .\" +head, tail)\n              }\n              else if ((CAP - SM) > strength)\
    \ {\n                head.substring(0, SM - strength) + StrongestExtension(class_name\
    \ +\".\" +head, tail)\n              }\n              else {\n               \
    \ head.substring(0, CAP) + StrongestExtension(class_name +\".\" +head, tail)\n\
    \              }\n            }\n          }\n        }\n      }\n}\n\n\"\"\"\n\
    \nobject Solution {\n    def main(args: Array[String]): Unit = {\n        val\
    \ in = new java.io.BufferedReader(new java.io.InputStreamReader(System.in))\n\
    \        val sz = in.readLine().trim\n        val input = in.mkString.split(\"\
    \\\\s+\").map(x => x.trim).toList\n        val classNames = input(0)\n       \
    \ val extensions  = input.drop(1)\n        val classNames = classNames.split(\"\
    \\\\.\")\n        val result = classNames.map( _.reverse ).foldLeft[String](\"\
    \") { case (acc, x) => acc + x.head.toUpperCase + x.tail }\n        println(result)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp_vnuab47.scala:49:0 ------------------------------------------\e\
    [0m\e[0m\n\e[31m49 |\e[0m\"\"\"\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0munclosed\
    \ multi-line string literal\n1 error found\n"
  stdout: ''
  timestamp: 1660010054
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val class_name_lower\
    \ = class_name match {\n            case \"_\" => throw new Exception(\"class\
    \ name can not be _\")\n            case x => x.toLowerCase\n        }\n     \
    \   val extensions_lower = extensions.map(x => x.toLowerCase)\n\n        var strongest\
    \ = extensions_lower.toSet.min\n        var index = -1\n        for(i <- 0 until\
    \ extensions_lower.length) {\n            val extension = extensions_lower(i)\n\
    \            if(extension.indexOf(strongest) != -1) {\n                index =\
    \ i\n                break\n            }\n        }\n        if(index < 0) throw\
    \ new Exception(\"no extension could be found\")\n\n        val class_name_lower\
    \ = class_name match {\n            case \"_\" => throw new Exception(\"class\
    \ name can not be _\")\n            case x => x.toLowerCase\n        }\n     \
    \   val extension = extensions_lower(index)\n        val extension_lower = extension.toLowerCase\n\
    \        val strongest_extension = class_name_lower + \".\" + extension\n    \
    \    val strongest_extension_lower = strongest_extension.toLowerCase\n       \
    \ if(extension_lower.indexOf(strongest_extension_lower) == -1) {\n           \
    \ throw new Exception(\"no extension could be found\")\n        }\n        strongest_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmptxwug5jl.scala:38:12 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mval\e[0m \e[36mclass_name_lower\e[0m =\
    \ class_name \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m \
    \  |\e[0mclass_name_lower is already defined as \e[33mvalue\e[0m \e[35mclass_name_lower\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m39 |\e[0m         \
    \   \e[33mcase\e[0m \e[31m\"_\"\e[0m => \e[33mthrow\e[0m \e[33mnew\e[0m \e[35mException\e\
    [0m(\e[31m\"class name can not be _\"\e[0m)\n\e[31m40 |\e[0m            \e[33mcase\e\
    [0m x => x.toLowerCase\n\e[31m41 |\e[0m        }\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmptxwug5jl.scala:33:16 ------------------------\e[0m\e[0m\n\e[31m33\
    \ |\e[0m                break\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\
    \e[31m   |\e[0m                Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010059
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strongest_extension\
    \ = extensions.foldLeft((\"\", -1)){ (result, ext) =>\n            val name_parts\
    \ = ext.split(\"[|]\")\n            val strongest_name = name_parts(name_parts.size\
    \ - 2)\n            val strongest_strength = name_parts.last.map(_.toInt).sum\n\
    \            val strength = if (strongest_strength == 0) -1 else (strongest_strength\
    \ - name_parts.last.map(_.toChar).sum)\n            if (strength > 0) (strongest_name\
    \ + \".\" + ext, strength) else (\"\", -1)\n        }._1\n        String.format(\"\
    %s.%s\", class_name, strongest_extension)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length\
    \ 1\n\tat Problem$.$anonfun$1(tmpztc_k6m3.scala:23)\n\tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\
    \tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\
    \tat Problem$.StrongestExtension(tmpztc_k6m3.scala:26)\n\tat Problem$.main(tmpztc_k6m3.scala:31)\n\
    \tat Problem.main(tmpztc_k6m3.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        def frac(x : String)\
    \ =\n            if (x.isEmpty) 0.0\n            else x.toCharArray.map(_.toUpperCase).length\
    \ - x.toCharArray.map(_.toLowerCase).length\n        // A helper method which\
    \ returns a list of extensions with the same strength.\n        def sameStrength(extensions\
    \ : List[String]) : List[String] = {\n            def sort(x : List[String], y:\
    \ List[String]) : Boolean = \n                if (frac(x._1) - frac(y._1)) ==\
    \ 0.0 // compare length of extension strings\n                else frac(x._1)\
    \ == frac(y._1)\n            def compare(x : List[String], y: List[String]) :\
    \ Int = \n                if (frac(x._1) == frac(y._1))\n                    else\
    \ if (frac(x._1) > frac(y._1)) -1\n                    else 1\n            def\
    \ xLen = x\n            def yLen = y\n            def compareLength = compare(xLen,\
    \ yLen)\n            if (compareLength != 0) xLen else yLen\n        }\n     \
    \   def extensionsWithSameStrength = sameStrength(extensions)\n        def extensionsWithSameStrengthOrder\
    \ = extensionsWithSameStrength.sortBy(x => frac(x._1))\n        def extensionsWithSameStrengthOrderWithIndex\
    \ = extensionsWithSameStrengthOrder\n        var highestStrengthExtension = \"\
    \"\n        var highestStrengthExtensionIndex = -1\n        for (i <- 0 until\
    \ extensionsWithSameStrengthOrderWithIndex.size) {\n            var currentExtension\
    \ = extensionsWithSameStrengthOrderWithIndex(i)\n            if (frac(currentExtension._1)\
    \ > frac(highestStrengthExtension)) {\n                highestStrengthExtension\
    \ = currentExtension\n                highestStrengthExtensionIndex = i\n    \
    \        }\n        }\n        className +\".\" + highestStrengthExtension\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmppx7z7t9l.scala:27:48 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m (frac(x._1) - frac(y._1))\
    \ == \e[31m0.0\e[0m \e[34m// compare length of extension strings\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                ^\e[0m\n\e[31m  \
    \ |\e[0m                      end of statement expected but number literal found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmppx7z7t9l.scala:31:20 ---------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    \e[33melse\e[0m \e[33mif\e[0m (frac(x._1)\
    \ > frac(y._1)) -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^\e\
    [0m\n\e[31m   |\e[0m                    'then' expected, but 'else' found\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmppx7z7t9l.scala:23:37 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33melse\e[0m x.toCharArray.map(_.toUpperCase).length\
    \ - x.toCharArray.map(_.toLowerCase).length\n\e[31m\e[31m   |\e[0m           \
    \                        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \              value toUpperCase is not a member of Char\n\e[31m\e[31m-- Error:\
    \ /tmp/tmppx7z7t9l.scala:23:49 -----------------------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m            \e[33melse\e[0m x.toCharArray.map(_.toUpperCase).length\
    \ - x.toCharArray.map(_.toLowerCase).length\n\e[31m\e[31m   |\e[0m           \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                           No ClassTag available for B\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m                                          where:    B is a type variable\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppx7z7t9l.scala:27:27 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mif\e[0m (frac(x._1) - frac(y._1))\
    \ == \e[31m0.0\e[0m \e[34m// compare length of extension strings\e[0m\n\e[31m\e\
    [31m   |\e[0m                         ^^^^\e[0m\n\e[31m   |\e[0m             \
    \            value _1 is not a member of List[String]\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmppx7z7t9l.scala:27:40 ------------------------\e[0m\e[0m\n\
    \e[31m27 |\e[0m                \e[33mif\e"
  stdout: ''
  timestamp: 1660010065
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n      var index = 0\n   \
    \   val strongest_index = -1\n      var strength = -1\n      var strongest_extension\
    \ = \"\"\n      for (i <- 0 until extensions.length) {\n        val extension\
    \ = extensions(i)\n        val length = extension.length\n        if (length ==\
    \ 0) {\n          continue\n        }\n        if (strength == -1) {\n       \
    \   strength = extension.toUpperCase - extension.toLowerCase - 1\n        }\n\
    \        else {\n          if (extension.toUpperCase - extension.toLowerCase >\
    \ strength) {\n            strength = extension.toUpperCase - extension.toLowerCase\
    \ - 1\n          }\n        }\n        index += length\n        if (index > strongest_index)\
    \ {\n          strongest_index = index\n          strongest_extension = extension\n\
    \        }\n      }\n      class_name + \".\" + strongest_extension\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0e909sde.scala:29:10 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m          continue\n\e[31m\e[31m   |\e[0m          ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp0e909sde.scala:32:43 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m          strength = extension.toUpperCase - extension.toLowerCase\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0e909sde.scala:35:36 ------------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m          \e[33mif\e[0m (extension.toUpperCase - extension.toLowerCase\
    \ > strength) {\n\e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp0e909sde.scala:36:45 ------------------------\e[0m\e\
    [0m\n\e[31m36 |\e[0m            strength = extension.toUpperCase - extension.toLowerCase\
    \ - \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1660010066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = ListBuffer.empty[String]\n        var strongest_strength : Int = -1\n    \
    \    \n        for (ex <- extensions)\n        {\n            if(ex.contains(class_name))\
    \ {\n                strongest_strength = ex.length - class_name.length\n    \
    \            strongest_extension += ex\n            }\n        }\n        \n \
    \       if(strongest_strength == -1)\n        {\n            if(strongest_extension.nonEmpty)\
    \ {\n                strongest_strength = strongest_extension.head.index - class_name.index\n\
    \                strongest_extension = strongest_extension.tail\n            }\n\
    \        }\n        \n        strongest_extension.foreach { x => \n          \
    \  if(x.contains(class_name))\n            {\n                strongest_strength\
    \ = strongest_strength - 1\n                strongest_extension = strongest_extension.filter(x\
    \ => x != x)\n            }\n        }\n        \n        if(strongest_strength\
    \ == -1) {\n            return \"ERROR\"\n        }\n        else if(strongest_strength\
    \ == 0)\n        {\n            return class_name\n        }\n        else\n \
    \       {\n            return class_name + \".\" + strongest_extension.head\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0sizi5yc.scala:35:62 ------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                strongest_strength = strongest_extension.head.index\
    \ - class_name.index\n\e[31m\e[31m   |\e[0m                                  \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value index is not\
    \ a member of String - did you mean String.indent?\n1 error found\n"
  stdout: ''
  timestamp: 1660010064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        if (extensions.isEmpty)\
    \ {\n           throw new Exception(\"No extensions\")\n        }\n        val\
    \ extensions_names_count = extensions.map(e => e.count(_ == '_')).sum\n      \
    \  val extensions_names_count_sorted = extensions.map(e => e.count(_ == '_')).sortBy(-_).take(extensions_names_count).toArray\n\
    \        val extensions_names_count_sorted.foreach(n => {\n            if (n %\
    \ 2 == 0) {\n                println(s\"$class_name.$n\")\n            }\n   \
    \     })\n        val extensions_names_count_sorted_2 = extensions.map(e => e.count(_\
    \ == '_')).sortBy(-_).take(extensions_names_count).toArray\n        val extensions_names_count_sorted_2.foreach(n\
    \ => {\n            if (n % 2 == 1) {\n                println(s\"$class_name.$n\"\
    )\n            }\n        })\n        throw new Exception(\"not implemeted\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphjcl5tva.scala:26:52 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m extensions_names_count_sorted.foreach(n\
    \ => {\n\e[31m\e[31m   |\e[0m                                                \
    \    ^^\e[0m\n\e[31m   |\e[0m                                            ')' expected,\
    \ but '=>' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphjcl5tva.scala:31:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m\
    \ \e[36mextensions_names_count_sorted_2\e[0m = extensions.map(\e[36me\e[0m =>\
    \ e.count(_ == \e[31m'_'\e[0m)).sortBy(-_).take(extensions_names_count).toArray\n\
    \e[31m\e[31m   |\e[0m^^^\e[0m\n\e[31m   |\e[0m'=' expected, but 'end of statement'\
    \ found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphjcl5tva.scala:32:54 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m extensions_names_count_sorted_2.foreach(n\
    \ => {\n\e[31m\e[31m   |\e[0m                                                \
    \      ^^\e[0m\n\e[31m   |\e[0m                                            ')'\
    \ expected, but '=>' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphjcl5tva.scala:37:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m37 |\e[0m        \e[33mthrow\e\
    [0m \e[33mnew\e[0m \e[35mException\e[0m(\e[31m\"not implemeted\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m^^^^^\e[0m\n\e[31m   |\e[0m'=' expected, but 'end of statement' found\n\
    \e[31m\e[31m-- [E127] Syntax Error: /tmp/tmphjcl5tva.scala:26:12 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m extensions_names_count_sorted.foreach(n\
    \ => {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mextensions_names_count_sorted.foreach cannot be used as an\
    \ extractor in a pattern because it lacks an unapply or unapplySeq method\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmphjcl5tva.scala:30:10\
    \ ---------------------------\e[0m\e[0m\n\e[31m30 |\e[0m        })\n\e[31m\e[31m\
    \   |\e[0m          ^\e[0m\n\e[31m   |\e[0m          Recursive \e[33mvalue\e[0m\
    \ \e[35mn\e[0m needs type\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660010062
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var highest_strength\
    \ = -1\n        var best_extension = class_name.last\n        for (extension <-\
    \ extensions){\n            if (extension.matches(class_name)){\n            \
    \    var strength = extension.split(class_name).map(_.toUpperCase).count(_ ==\
    \ 'A')/extension.split(class_name).map(_.toLowerCase).count(_ == 'a')\n      \
    \          if (strength > highest_strength){\n                    best_extension\
    \ = extension\n                    highest_strength = strength\n             \
    \   }\n            }\n        }\n        return class_name + best_extension\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3j0chl2c.scala:25:84 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mvar\e[0m \e[36mstrength\e[0m =\
    \ extension.split(class_name).map(_.toUpperCase).count(_ == \e[31m'A'\e[0m)/extension.split(class_name).map(_.toLowerCase).count(_\
    \ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                                                  ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types String and Char cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmp3j0chl2c.scala:25:147 ----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                \e[33mvar\e[0m \e[36mstrength\e[0m =\
    \ extension.split(class_name).map(_.toUpperCase).count(_ == \e[31m'A'\e[0m)/extension.split(class_name).map(_.toLowerCase).count(_\
    \ == \e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \                                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values\
    \ of types String and Char cannot be compared with == or !=\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp3j0chl2c.scala:27:37 --------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m                    best_extension = extension\n\e[31m\e[31m\
    \   |\e[0m                                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                     Found:    (extension : String)\n\e[31m \
    \  |\e[0m                                     Required: Char\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010067
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val map = Map(\"\
    AA\"->0, \"BB\"->0, \"CC\"->0, \"DD\"->0, \"EE\"->0, \"FF\"->0, \"GG\"->0, \"\
    HH\"->0, \"II\"->0, \"JJ\"->0, \"KK\"->0, \"LL\"->0, \"MM\"->0, \"NN\"->0, \"\
    OO\"->0, \"PP\"->0, \"QQ\"->0, \"RR\"->0, \"SS\"->0, \"TT\"->0, \"UU\"->0, \"\
    VV\"->0, \"WW\"->0, \"XX\"->0, \"YY\"->0, \"ZZ\"->0, \"A\"->0, \"B\"->0, \"C\"\
    ->0, \"D\"->0, \"E\"->0, \"F\"->0, \"G\"->0, \"H\"->0, \"I\"->0, \"J\"->0, \"\
    K\"->0, \"L\"->0, \"M\"->0, \"N\"->0, \"O\"->0, \"P\"->0, \"Q\"->0, \"R\"->0,\
    \ \"S\"->0, \"T\"->0, \"U\"->0, \"V\"->0, \"W\"->0, \"X\"->0, \"Y\"->0, \"Z\"\
    ->0, \"AA\"->1, \"BB\"->1, \"CC\"->1, \"DD\"->1, \"EE\"->1, \"FF\"->1, \"GG\"\
    ->1, \"HH\"->1, \"II\"->1, \"JJ\"->1, \"KK\"->1, \"LL\"->1, \"MM\"->1, \"NN\"\
    ->1, \"OO\"->1, \"PP\"->1, \"QQ\"->1, \"RR\"->1, \"SS\"->1, \"TT\"->1, \"UU\"\
    ->1, \"VV\"->1, \"WW\"->1, \"XX\"->1, \"YY\"->1, \"ZZ\"->1, \"A\"->1, \"B\"->1,\
    \ \"C\"->1, \"D\"->1, \"E\"->1, \"F\"->1, \"G\"->1, \"H\"->1, \"I\"->1, \"J\"\
    ->1, \"K\"->1, \"L\"->1, \"M\"->1, \"N\"->1, \"O\"->1, \"P\"->1, \"Q\"->1, \"\
    R\"->1, \"S\"->1, \"T\"->1, \"U\"->1, \"V\"->1, \"W\"->1, \"X\"->1, \"Y\"->1,\
    \ \"Z\"->1)\n        var best_extension = 0\n        var best_extension_strength\
    \ = -1\n        var class_name_chars = class_name.split(\"\").toList\n       \
    \ for (ext <- extensions) {\n            var ext_chars = ext.split(\"\").toList\n\
    \            var ext_strength = 0\n            var ext_strength_diff = -1\n  \
    \          var ext_index = -1\n            var ext_index_diff = -1\n         \
    \   for(i<-0 until ext_chars.size) {\n                ext_strength += map.get(ext_chars(i)).get\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp6nq6ax0z.scala:47:0 ----------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6nq6ax0z.scala:25:8\
    \ ---------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mfor\e[0m (ext\
    \ <- extensions) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m     \
    \   Found:    Unit\n\e[31m   |\e[0m        Required: String\n\e[31m26 |\e[0m \
    \           \e[33mvar\e[0m \e[36mext_chars\e[0m = ext.split(\e[31m\"\"\e[0m).toList\n\
    \e[31m27 |\e[0m            \e[33mvar\e[0m \e[36mext_strength\e[0m = \e[31m0\e\
    [0m\n\e[31m28 |\e[0m            \e[33mvar\e[0m \e[36mext_strength_diff\e[0m =\
    \ -\e[31m1\e[0m\n\e[31m29 |\e[0m            \e[33mvar\e[0m \e[36mext_index\e[0m\
    \ = -\e[31m1\e[0m\n\e[31m30 |\e[0m            \e[33mvar\e[0m \e[36mext_index_diff\e\
    [0m = -\e[31m1\e[0m\n\e[31m31 |\e[0m            \e[33mfor\e[0m(i<-\e[31m0\e[0m\
    \ until ext_chars.size) {\n\e[31m32 |\e[0m                ext_strength += map.get(ext_chars(i)).get\n\
    \e[31m33 |\e[0m    }\n\e[31m34 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e\
    [0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m35 |\e[0m    assert(StrongestExtension((\e\
    [31m\"Watashi\"\e[0m), (List[\e[35mString\e[0m](\e[31m\"tEN\"\e[0m, \e[31m\"niNE\"\
    \e[0m, \e[31m\"eIGHt8OKe\"\e[0m))).equals((\e[31m\"Watashi.eIGHt8OKe\"\e[0m)));\n\
    \e[31m36 |\e[0m    assert(StrongestExtension((\e[31m\"Boku123\"\e[0m), (List[\e\
    [35mString\e[0m](\e[31m\"nani\"\e[0m, \e[31m\"NazeDa\"\e[0m, \e[31m\"YEs.WeCaNe\"\
    \e[0m, \e[31m\"32145tggg\"\e[0m))).equals((\e[31m\"Boku123.YEs.WeCaNe\"\e[0m)));\n\
    \e[31m37 |\e[0m    assert(StrongestExtension((\e[31m\"__YESIMHERE\"\e[0m), (List[\e\
    [35mString\e[0m](\e[31m\"t\"\e[0m, \e[31m\"eMptY\"\e[0m, \e[31m\"nothing\"\e[0m,\
    \ \e[31m\"zeR00\"\e[0m, \e[31m\"NuLl__\"\e[0m, \e[31m\"123NoooneB321\"\e[0m))).equals((\e\
    [31m\"__YESIMHERE.NuLl__\"\e[0m)));\n\e[31m38 |\e[0m    assert(StrongestExtension((\e\
    [31m\"K\"\e[0m), (List[\e[35mString\e[0m](\e[31m\"Ta\"\e[0m, \e[31m\"TAR\"\e[0m,\
    \ \e[31m\"t234An\"\e[0m, \e[31m\"cosSo\"\e[0m))).equals((\e[31m\"K.TAR\"\e[0m)));\n\
    \e[31m39 |\e[0m    assert(StrongestExtension((\e[31m\"__HAHA\"\e[0m), (List[\e\
    [35mString\e[0m](\e[31m\"Tab\"\e[0m, \e[31m\"123\"\e[0m, \e[31m\"781"
  stdout: ''
  timestamp: 1660010068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strength : Int\
    \ = -1\n        var index : Int = 0\n        for (e <- extensions) {\n       \
    \     if (e.length == 0) continue\n            if (e.length == class_name.length)\
    \ continue\n            if (strength == -1) strength = e.toUpperCase.count(_ ==\
    \ 'A') - e.toUpperCase.count(_ == 'B')\n            val diff = e.toUpperCase.count(_\
    \ == 'A') - e.toUpperCase.count(_ == 'B')\n            if (strength > diff) continue\n\
    \            strength = diff\n            index = extensions.indexOf (e)\n   \
    \     }\n        if (strength == -1) class_name + extensions.last\n        else\
    \ if (strength < 0) class_name + extensions(index)\n        else class_name +\
    \ extensions(index)\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp54h9_pg8.scala:24:31 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (e.length == \e[31m0\e[0m)\
    \ continue\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               Not found: continue\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp54h9_pg8.scala:25:47 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (e.length == class_name.length)\
    \ continue\n\e[31m\e[31m   |\e[0m                                            \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                           \
    \    Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp54h9_pg8.scala:28:33 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m            \e[33mif\e[0m (strength > diff) continue\n\e[31m\e[31m   |\e[0m\
    \                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                    Not found: continue\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        \n        var maxS\
    \ = 0\n        var maxStr = \"\"\n        \n        for(i <- 0 until extensions.length){\n\
    \            val c = extensions(i).toChar\n            val str = c.toString\n\
    \            var s = str.length\n            for(j <- 0 until s.length){\n   \
    \             val l = s(j).toLower\n                s += l.length\n          \
    \  }\n            if(s > maxS){\n                maxS = s\n                maxStr\
    \ = str\n            }\n        }\n        \n        return s\"${class_name.split(\"\
    \\\\.\").last}.${maxStr}\"\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppsz969eg.scala:26:34 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mc\e[0m = extensions(i).toChar\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value toChar is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code here\n\
    \        val extension = extensions match {\n            case(ext) => ext.map\
    \ { ext => ext.toLowerCase().toUpperCase }\n            case(_) => Nil\n     \
    \   }\n\n        val nameArray = class_name.toLowerCase().split(\"\\\\.\").toList\n\
    \        var strength = nameArray.length match {\n            case 1 => -1\n \
    \           case _ => nameArray.map(x => x.toUpperCase).map(x => x.count(_ ==\
    \ 'A')).sum - nameArray.map(x => x.toUpperCase).count(_ == 'A')\n        }\n\n\
    \        val newName = nameArray.reverse.find(_.isLetter).zip(extension.reverse).find\
    \ {\n            case (name, _) => name.count(_ == 'A') == strength\n        }._1\n\
    \        class_name.toString.replaceFirst(class_name + \".\", \"\") + newName\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmnhxqrzf.scala:30:130 ----------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mcase\e[0m _ => nameArray.map(x => x.toUpperCase).map(x\
    \ => x.count(_ == \e[31m'A'\e[0m)).sum - nameArray.map(x => x.toUpperCase).count(_\
    \ == \e[31m'A'\e[0m)\n\e[31m\e[31m   |\e[0m                                  \
    \                                                                            \
    \                    ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types String\
    \ and Char cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpmnhxqrzf.scala:33:47 ------------------------\e[0m\e[0m\n\e[31m33 |\e\
    [0m        \e[33mval\e[0m \e[36mnewName\e[0m = nameArray.reverse.find(_.isLetter).zip(extension.reverse).find\
    \ {\n\e[31m\e[31m   |\e[0m                                             ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660010068
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strongest_extension\
    \ = extensions.minBy(extension =>\n            extension.filter(_.isUpper).length\
    \ - extension.filter(_.isLower).length)\n        s\"$class_name.${strongest_extension}\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_dr721dy.scala:26)\n\tat Problem.main(tmp_dr721dy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extensions_hash\
    \ = HashMap[String, Int]()\n        val sorted_extensions = extensions sortBy\
    \ (x => extensions_hash(x.toLowerCase()))\n        val strength_map = new mutable.HashMap[String,\
    \ Int]()\n        sorted_extensions.foreach{x => if (strength_map.contains(x.toLowerCase()))\
    \ \n        strength_map(x.toLowerCase()) <- strength_map(x.toLowerCase()) + 1}\
    \ else {\n            strength_map(x.toLowerCase()) <- 1}\n        val max_strength\
    \ = strength_map max(_._2)\n        var class_name_to_return = class_name\n  \
    \      for ( x <- strength_map ){\n            class_name_to_return = class_name_to_return\
    \ + \".\" + x\n        }\n        return class_name_to_return\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"),\
    \ (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpzcz_xtm1.scala:25:38 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        strength_map(x.toLowerCase()) <- strength_map(x.toLowerCase())\
    \ + \e[31m1\e[0m} \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m                   \
    \                   ^^\e[0m\n\e[31m   |\e[0m                                end\
    \ of statement expected but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmpzcz_xtm1.scala:25:76\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m25 |\e[0m       \
    \ strength_map(x.toLowerCase()) <- strength_map(x.toLowerCase()) + \e[31m1\e[0m}\
    \ \e[33melse\e[0m {\n\e[31m\e[31m   |\e[0m                                   \
    \                                         ^^^^\e[0m\n\e[31m   |\e[0m         \
    \                     end of statement expected but 'else' found\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzcz_xtm1.scala:23:31 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mstrength_map\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                               ^^^^^^^\e[0m\n\e[31m   |\e[0m                \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010064
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extensionSet\
    \ = extensions grouped by  {_.toUpperCase.length}\n        val extensionNames\
    \ = extensionSet.toList\n        val extensionNameSet = extensionNames map (_.toLowerCase)\n\
    \        val extensionNameSetSizes = extensionNameSet map (_=> extensionSet.size)\n\
    \        var max = extensionNameSetSizes.max\n        val strongestExtension =\
    \ extensionNames.find(x=> extensionNameSetSizes(x) == max)\n        val strongestExtensionName\
    \ = strongestExtension.getOrElse(\"\")\n        class_name + \"_\" + strongestExtensionName\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpt7r2an44.scala:21:46 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mextensionSet\e[0m = extensions\
    \ grouped by  {_.toUpperCase.length}\n\e[31m\e[31m   |\e[0m                  \
    \                            ^^\e[0m\n\e[31m   |\e[0m                        \
    \                      Not found: by\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpt7r2an44.scala:23:53 ------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mextensionNameSet\e[0m = extensionNames\
    \ map (_.toLowerCase)\n\e[31m\e[31m   |\e[0m                                 \
    \                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value\
    \ toLowerCase is not a member of List[String]\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpt7r2an44.scala:26:79 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mval\e[0m \e[36mstrongestExtension\e[0m = extensionNames.find(\e\
    [36mx\e[0m=> extensionNameSetSizes(x) == max)\n\e[31m\e[31m   |\e[0m         \
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0m                                            Found:    (x : List[String])\n\
    \e[31m   |\e[0m                                            Required: Int\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010069
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var longest = extensions(0)\n\
    \        var count = 1\n\n        for (x <- extensions){\n            if (x.length\
    \ > longest.length) longest = x\n            if (x.length == longest.length &&\
    \ x.toUpper == longest.toUpper) {\n                count +=1\n            }\n\
    \        }\n\n        className + longest.substring(0,longest.length-count) +\
    \ longest.substring(longest.length-count).toLowerCase\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp111stkvz.scala:26:48 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m (x.length == longest.length\
    \ && x.toUpper == longest.toUpper) {\n\e[31m\e[31m   |\e[0m                  \
    \                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \                value toUpper is not a member of String\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp111stkvz.scala:31:8 -------------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m        className + longest.substring(\e[31m0\e[0m,longest.length-count)\
    \ + longest.substring(longest.length-count).toLowerCase\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: className\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010068
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Write your code\
    \ here.\n        var result = \"\"\n        var strongest = extension(0)\n   \
    \     var index = 0\n        var count = 0\n        while (index < extensions.size)\
    \ {\n            val item = extensions(index)\n            val match = item.toUpperCase().contains(strongest.toUpperCase())\n\
    \            if (match) {\n                count += 1\n            }\n       \
    \     if (count == strongest.toString.toUpperCase().count() - strongest.toString.toLowerCase().count())\
    \ {\n                strongest = item\n            }\n            index += count\n\
    \        }\n        result = class_name + strongest\n        result\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmphlrhfpx4.scala:28:16 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[33mmatch\e[0m = item.toUpperCase().contains(strongest.toUpperCase())\n\
    \e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmphlrhfpx4.scala:29:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e\
    [0m (\e[33mmatch\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e\
    [31m   |\e[0m                expression expected but \e[31mmatch\e[0m found\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphlrhfpx4.scala:23:24\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e\
    [36mstrongest\e[0m = extension(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m          \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ extension\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010066
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var class_name_length\
    \ = class_name.count(' ') + 1\n        var extension_length = 0\n        extensions.foreach\
    \ {\n            extension =>\n            val extension_length = extension.length\n\
    \        }\n        \n        var strongest_extension = \"\"\n        var max_extension_strength\
    \ = 0\n        extensions.foreach {\n            extension =>\n            var\
    \ extension_strength = extension_length - extension_length.toString.toUpperCase.count\
    \ - extension_length.toString.toUpperCase.count\n            max_extension_strength\
    \ = extension_strength if extension_strength > max_extension_strength\n      \
    \  }\n        if (max_extension_strength == 0) strongest_extension = \"\"\n  \
    \      if (max_extension_strength == 1) strongest_extension = class_name\n   \
    \     if (max_extension_strength > 1) {\n            val extension_strength_list\
    \ = ListBuffer[String]()\n            extensions.foreach {\n                extension\
    \ =>\n                var extension_strength = extension_length - extension_length.toString.toUpperCase.count\
    \ - extension_length.toString.toUpperCase.count\n                extension_strength_list.append(extension)\n\
    \                if (extension_strength == max_extension_strength) strongest_extension\
    \ = extension\n            }\n            if (extension_strength_list.size > 1)\
    \ \n                strongest_extension = extension_strength_list.toList.sortBy(x\
    \ => x).head\n        }\n        return strongest_extension\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmps1or26h2.scala:33:56 -----------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            max_extension_strength = extension_strength\
    \ \e[33mif\e[0m extension_strength > max_extension_strength\n\e[31m\e[31m   |\e\
    [0m                                                        ^^\e[0m\n\e[31m   |\e\
    [0m                                end of statement expected but 'if' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps1or26h2.scala:21:49 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mclass_name_length\e[0m =\
    \ class_name.count(\e[31m' '\e[0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m     \
    \                                            ^^^\e[0m\n\e[31m   |\e[0m       \
    \                                        Found:    (\e[31m' '\e[0m : Char)\n\e\
    [31m   |\e[0m                                               Required: Char =>\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmps1or26h2.scala:32:54\
    \ -----------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33mvar\e\
    [0m \e[36mextension_strength\e[0m = extension_length - extension_length.toString.toUpperCase.count\
    \ - extension_length.toString.toUpperCase.count\n\e[31m\e[31m   |\e[0m       \
    \                              ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m None of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e[33mclass\e\
    [0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m  \
    \ |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m\
    \  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short):\
    \ Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments ((Char\
    \ => Boolean) => Int)\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmps1or26h2.scala:41:58\
    \ -----------------------------\e[0m\e[0m\n\e[31m41 |\e[0m                \e[33mvar\e\
    [0m \e[36mextension_strength\e[0m = extension_length - extension_length.toString.toUpperCase.count\
    \ - extension_length.toString.toUpperCase.count\n\e[31m\e[31m   |\e[0m       \
    \                                  ^^^^^^^^^^^^^^^^^^\e"
  stdout: ''
  timestamp: 1660010070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n      var bestStrongest =\
    \ \"\"\n      var bestStrength = 0\n      extensions.foreach{s =>\n        var\
    \ strength = s.toList.map(x => ((x.toUpperCase.length) - (x.toLowerCase.length))).max\n\
    \        if (strength > bestStrength) {\n          bestStrongest = s\n       \
    \   bestStrength = strength\n        }\n      }\n      class_name + \"_\" + bestStrongest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp99wdz3u0.scala:24:45 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mstrength\e[0m = s.toList.map(\e\
    [36mx\e[0m => ((x.toUpperCase.length) - (x.toLowerCase.length))).max\n\e[31m\e\
    [31m   |\e[0m                                           ^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                               value toUpperCase is not a member\
    \ of Char\n\e[31m\e[31m-- Error: /tmp/tmp99wdz3u0.scala:24:95 -----------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m \e[36mstrength\e[0m = s.toList.map(\e\
    [36mx\e[0m => ((x.toUpperCase.length) - (x.toLowerCase.length))).max\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                               ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mByte\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m and \e[33mobject\e[0m \e[35mChar\e[0m in \e[33mobject\e[0m \e[35mOrdering\e\
    [0m match type Ordering[B] of parameter ord of \e[33mmethod\e[0m \e[35mmax\e[0m\
    \ in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n2 errors found\n"
  stdout: ''
  timestamp: 1660010070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest_extension\
    \ = 0\n        var strongest_extension_name = \"\"\n        var index = -1\n \
    \       for(index <- 0 until extensions.length) {\n            if(extensions(index).count(x\
    \ => (x.isUpperCase) && (x.toLowerCase() == class_name.charAt(0)) >= strongest_extension)\
    \ {\n                strongest_extension = extensions(index).count(x => (x.isLowerCase)\
    \ && (x.toLowerCase() == class_name.charAt(0)) >= strongest_extension\n      \
    \          strongest_extension_name = extensions(index)\n            }\n     \
    \   }\n        return class_name + \".\" + strongest_extension_name\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(StrongestExtension((\"Watashi\"\
    ), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp24u27kuj.scala:27:41 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                strongest_extension_name = extensions(index)\n\
    \e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m \
    \  |\e[0m                                         expression expected but \e[31m=\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp24u27kuj.scala:29:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m29 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        ')' expected, but '}' found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp24u27kuj.scala:25:47 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m(extensions(index).count(\e\
    [36mx\e[0m => (x.isUpperCase) && (x.toLowerCase() == class_name.charAt(\e[31m0\e\
    [0m)) >= strongest_extension) {\n\e[31m\e[31m   |\e[0m                       \
    \                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \            value isUpperCase is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp24u27kuj.scala:26:70 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m                strongest_extension = extensions(index).count(\e\
    [36mx\e[0m => (x.isLowerCase) && (x.toLowerCase() == class_name.charAt(\e[31m0\e\
    [0m)) >= strongest_extension\n\e[31m\e[31m   |\e[0m                          \
    \                                          ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                               value isLowerCase is not a member of Char\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        extensions match\
    \ {\n            case Nil => \"\"\n            case _ => {\n                val\
    \ classObject = scala.reflect.io.Codec.lookup(class_name)\n                val\
    \ classNameToObject = classObject.getClass\n                val classes = classObject.getClasses()\n\
    \                val extensionsWithSameStrength = classes.flatMap(_.asInstanceOf[List[String]]).filter(e\
    \ => e.filter(_.isUpperCase).length == e.filter(_.isLowerCase).length).sortWith(_.isInstanceOf[String]\
    \ compare _).takeWhile(_.isInstanceOf[String]).toList\n                val extensionsWithDifferentStrength\
    \ = classes.flatMap(_.asInstanceOf[List[String]]).filter(e => e.filter(_.isUpperCase).length\
    \ != e.filter(_.isLowerCase).length).sortWith(_.isInstanceOf[String] compare _).takeWhile(_.isInstanceOf[String]).toList\n\
    \                val strongestExtension = extensionsWithSameStrength.head // TODO:\
    \ check for exceptions here.\n                (className + strongestExtension).getOrElse(\"\
    \")\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjzkm4070.scala:24:48 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mclassObject\e[0m\
    \ = scala.reflect.io.Codec.lookup(class_name)\n\e[31m\e[31m   |\e[0m         \
    \                         ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                     value io is not a member of reflect\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpjzkm4070.scala:30:17 ------------------------\e[0m\e\
    [0m\n\e[31m30 |\e[0m                (className + strongestExtension).getOrElse(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 Not found: className\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010071
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val class_ext = extensions.foldLeft(class_name)\
    \ { (a, b) => a + b + \".\" } \n        val length = class_ext.length\n      \
    \  if(length == 0) {\n            return class_name\n        }\n        val class_name\
    \ = class_ext.substring(0, length - 1)\n        val extension = class_ext.substring(length\
    \ - 1)\n        val class_length = class_name.length\n        val strength = extension.split(\"\
    \").map(x => (x to 0).foldLeft(0){ (acc, elem) =>\n            if(x.toUpperCase()\
    \ == elem.toUpperCase()) {\n                acc + 1;\n            } else {\n \
    \               acc;\n            }\n        }) match {\n            case x if\
    \ x != 0 => x - 1\n            case x => 0\n        }\n        if(strength ==\
    \ 0) {\n            return class_name\n        }\n        var result = \"\"\n\
    \        if(strength < class_length) {\n            result = class_name + extension.substring(0,\
    \ strength + 1)\n        } else if(strength > class_length) {\n            result\
    \ = class_name + extension.substring(strength + 1)\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp8xxmifsz.scala:26:25 ---------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mval\e[0m \e[36mclass_name\e[0m = class_ext.substring(\e\
    [31m0\e[0m, length - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \     ^\e[0m\n\e[31m   |\e[0m                         Recursive \e[33mvalue\e\
    [0m \e[35mclass_ext\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp8xxmifsz.scala:21:70 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m        \e[33mval\e[0m \e[36mclass_ext\e[0m = extensions.foldLeft(class_name)\
    \ { (\e[36ma\e[0m, \e[36mb\e[0m) => a + b + \e[31m\".\"\e[0m } \n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \ ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Any, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8xxmifsz.scala:22:31 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mlength\e[0m = class_ext.length\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                     value length is not a member of Any\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp8xxmifsz.scala:27:34 ------------------------\e[0m\e\
    [0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mextension\e[0m = class_ext.substring(length\
    \ - \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value substring is not a member of\
    \ Any\n4 errors found\n"
  stdout: ''
  timestamp: 1660010072
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Write your code\
    \ here\n        // let strongest_extension = ??\n        // strongest_extension\
    \ should be the strongest extension\n        // of class_name with the list extensions\n\
    \        // The order of the extensions should not matter\n        // The extensions\
    \ should not have duplicated names\n        // The extensions should be in lowercase\
    \ letters\n        // The strength of each extension should be positive\n    \
    \    // The strongest extension should be the first extension in the list\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp35nhglme.scala:20:86\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m    \e[33mdef\e[0m \e[36mStrongestExtension\e\
    [0m(\e[36mclass_name\e[0m : \e[35mString\e[0m, \e[36mextensions\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m]) : \e[35mString\e[0m = {\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \   ^\e[0m\n\e[31m   |\e[0m                                                  \
    \      Found:    Unit\n\e[31m   |\e[0m                                       \
    \                 Required: String\n\e[31m21 |\e[0m        \e[34m// Write your\
    \ code here\e[0m\n\e[31m22 |\e[0m        \e[34m// let strongest_extension = ??\e\
    [0m\n\e[31m23 |\e[0m        \e[34m// strongest_extension should be the strongest\
    \ extension\e[0m\n\e[31m24 |\e[0m        \e[34m// of class_name with the list\
    \ extensions\e[0m\n\e[31m25 |\e[0m        \e[34m// The order of the extensions\
    \ should not matter\e[0m\n\e[31m26 |\e[0m        \e[34m// The extensions should\
    \ not have duplicated names\e[0m\n\e[31m27 |\e[0m        \e[34m// The extensions\
    \ should be in lowercase letters\e[0m\n\e[31m28 |\e[0m        \e[34m// The strength\
    \ of each extension should be positive\e[0m\n\e[31m29 |\e[0m        \e[34m// The\
    \ strongest extension should be the first extension in the list\e[0m\n\e[31m30\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010070
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = \"\
    \"\n        var extensions_counter = Map[String,Int]()\n        for (ext in extensions)\
    \ {\n            extensions_counter += (ext -> (extensions_counter.getOrElse(ext,0)+1))\
    \ \n        }\n        val strength = extensions_counter.filter(_._2 > extensions_counter.filter(_._1\
    \ == class_name)._2).map(_._2).sum\n        if (strength > 0) strongest = class_name\
    \ + \".\" + extensions_counter.filter(_._2 == strength).map(_._1).head\n     \
    \   else strongest = class_name\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"niNE\"\
    , \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpf093mmgs.scala:23:32 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m (ext in extensions) {\n\e[31m\e\
    [31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m         \
    \                       '<-' expected, but '{' found\n\e[31m\e[31m-- [E018] Syntax\
    \ Error: /tmp/tmpf093mmgs.scala:27:36 ---------------------------\e[0m\e[0m\n\e\
    [31m27 |\e[0m        \e[33mif\e[0m (strength > \e[31m0\e[0m) strongest = class_name\
    \ + \e[31m\".\"\e[0m + extensions_counter.filter(_._2 == strength).map(_._1).head\n\
    \e[31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e\
    [0m                                    expression expected but \e[31m=\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpf093mmgs.scala:25:9\
    \ -------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not a member of\
    \ Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660010071
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var strongest = \"\
    \"\n        var counter = extensions.length\n        for (i <- 0 until extensions.length)\
    \ {\n            strongest += class_name + extensions(i).toUpperCase\n       \
    \     strongest += extensions(i).toLowerCase\n        }\n        if (extensions.count(_\
    \ == strongest) == 0) {\n            return \"\"\n        } else {\n         \
    \   val strength = extensions.count(_ == strongest)\n            for (i <- 0 until\
    \ strength) {\n                strongest = extensions(i)\n            }\n    \
    \        return strongest\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfsv56h16.scala:38)\n\tat Problem.main(tmpfsv56h16.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010073
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        var max_index = -1\n\
    \        var max_ext = \"\"\n        var max_ext_strength = -1\n        for (ext\
    \ of extensions){\n            val ext_strength = ext.toUpperCase.count - ext.toLowerCase.count\n\
    \            if (ext_strength > max_ext_strength){\n                max_ext_strength\
    \ = ext_strength\n                max_index = extensions.length - 1\n        \
    \        max_ext = ext\n            }\n        }\n        val class_parts = class_name.split('.')\n\
    \        class_parts(max_index) +\".\"+max_ext\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5yl3d_i7.scala:24:31 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m (ext of extensions){\n\e[31m\e\
    [31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m          \
    \                     '<-' expected, but '{' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp5yl3d_i7.scala:34:4 ----------------------------\e[0m\e[0m\n\e\
    [31m34 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '<-' expected,\
    \ but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5yl3d_i7.scala:31:9\
    \ -------------------------\e[0m\e[0m\n\e[31m31 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m         ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not a member of\
    \ Null, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mOne of the following imports might fix the problem:\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e[0m  import collection.LazyZip2.lazyZip2ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\e[31m   |\e[0m\
    \  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.list\
    \ asScalaBuffer\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties\
    \ AsScalaMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.enumeration\
    \ AsScalaIterator\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.iterator\
    \ asScala\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.map\
    \ AsScalaConcurrentMap\n\e[31m   |\e[0m  import collection.convert.ImplicitConversions.set\
    \ asScala\n\e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660010074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        if (extensions.isEmpty)\
    \ throw new Exception(\"Invalid input\")\n        var class_strength = extension.Count(_.toChar.toUpperCase.toInt)\n\
    \        var extension_strength = extension.Count(_.toChar.toLowerCase.toInt)\n\
    \        if (extension_strength == 0) return class_name\n        var extension_max\
    \ = extension.Max(i => (extension_strength - i.toChar.toLowerCase.toInt))\n  \
    \      var class_max = extension.Max(i => (class_strength - i.toChar.toUpperCase.toInt))\n\
    \        var class_key = extension.Min(i=> i.toChar)\n        var max_score =\
    \ extension.Max(i => i.toChar)\n        val new_class = class_name+extension_max.toChar\n\
    \        for ((key, value) <- extension.zipWithIndex) {\n            if (key.toChar\
    \ == max_score) {\n                new_class += key.substring(1)\n           \
    \ }\n        }\n        new_class += class_max.toChar\n        return new_class\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpki1ci2uv.scala:22:29 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mclass_strength\e[0m = extension.Count(_.toChar.toUpperCase.toInt)\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             Not found: extension\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpki1ci2uv.scala:23:33 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mextension_strength\e[0m\
    \ = extension.Count(_.toChar.toLowerCase.toInt)\n\e[31m\e[31m   |\e[0m       \
    \                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \              Not found: extension\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpki1ci2uv.scala:25:28 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m        \e[33mvar\e[0m \e[36mextension_max\e[0m = extension.Max(\e[36mi\e[0m\
    \ => (extension_strength - i.toChar.toLowerCase.toInt))\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \           Not found: extension\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpki1ci2uv.scala:26:24 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        \e[33mvar\e[0m \e[36mclass_max\e[0m = extension.Max(\e[36mi\e[0m =>\
    \ (class_strength - i.toChar.toUpperCase.toInt))\n\e[31m\e[31m   |\e[0m      \
    \                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: extension\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpki1ci2uv.scala:27:24\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        \e[33mvar\e[0m \e\
    [36mclass_key\e[0m = extension.Min(\e[36mi\e[0m=> i.toChar)\n\e[31m\e[31m   |\e\
    [0m                        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \     Not found: extension\n\e[31m   |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1660010074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val strength = extensions.map(s\
    \ => s.toUpperCase.count - s.toLowerCase.count).sum.toDouble / extensions.length\n\
    \        val strength_sorted = extensions.sortBy(s => s.toUpperCase.count - s.toLowerCase.count)\n\
    \        if (strength_sorted.length == 1) {\n            class_name +\".\"+strength_sorted.head\n\
    \        } else {\n            if (strength_sorted.last != strength) {\n     \
    \           val first_extension = strength_sorted.take(strength_sorted.length\
    \ - 1).last\n                class_name +\".\"+first_extension\n            }\
    \ else {\n                class_name +\".\"+strength_sorted.last\n           \
    \ }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6sho3b57.scala:21:63 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions.map(\e\
    [36ms\e[0m => s.toUpperCase.count - s.toLowerCase.count).sum.toDouble / extensions.length\n\
    \e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Char => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- Error: /tmp/tmp6sho3b57.scala:21:89 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions.map(\e\
    [36ms\e[0m => s.toUpperCase.count - s.toLowerCase.count).sum.toDouble / extensions.length\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                 ^\e[0m\n\e[31m   |\e[0mambiguous given instances:\
    \ both \e[33mobject\e[0m \e[35mBigIntIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e\
    [0m and \e[33mobject\e[0m \e[35mBigDecimalIsFractional\e[0m in \e[33mobject\e\
    [0m \e[35mNumeric\e[0m match type Numeric[B] of parameter num of \e[33mmethod\e\
    [0m \e[35msum\e[0m in \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp6sho3b57.scala:22:73 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mstrength_sorted\e[0m = extensions.sortBy(\e\
    [36ms\e[0m => s.toUpperCase.count - s.toLowerCase.count)\n\e[31m\e[31m   |\e[0m\
    \                                                     ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue - is not a member of (Char => Boolean) => Int, but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0"
  stdout: ''
  timestamp: 1660010076
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n       val strongest = extensions.foldLeft(0)((max,\
    \ x) => {\n          if (x.toCharArray.filter(x => x.toUpper == x.toUpper).length\
    \ == x.toCharArray.filter(x => x.toLower == x.toLower).length) max else max -\
    \ 1\n       })\n       return s\"$class_name.$extensions(${strongest})\"\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqrl2ghy_.scala:27)\n\tat Problem.main(tmpqrl2ghy_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010075
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code goes\
    \ here\n        var extensions_ = extensions ++ List(\"\")\n        var strength\
    \ = -1\n        var strongest_extension = \"\"\n        extensions_.foreach {\
    \ extension =>\n            val cap = extension.substring(0, 1).toUpperCase().toInt\n\
    \            val sm = extension.substring(0, 1).toLowerCase().toInt\n        \
    \    val diff = cap - sm\n            if (diff > 0) {\n                if (strength\
    \ > 0) {\n                    strongest_extension = extension\n              \
    \  }\n                strength = diff\n            } else {\n                extensions_\
    \ = extensions_.filter(_ != extension)\n            }\n        }\n        return\
    \ class_name + \".\" + strongest_extension\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"T\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.StrongestExtension$$anonfun$1(tmp5g25qmtn.scala:26)\n\
    \tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:15)\n\tat scala.runtime.function.JProcedure1.apply(JProcedure1.java:10)\n\
    \tat scala.collection.immutable.List.foreach(List.scala:333)\n\tat Problem$.StrongestExtension(tmp5g25qmtn.scala:36)\n\
    \tat Problem$.main(tmp5g25qmtn.scala:41)\n\tat Problem.main(tmp5g25qmtn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericR"
  stdout: ''
  timestamp: 1660010076
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val s = extensions.size\n\
    \        var n = 0\n        var m = -1\n        var k = -1\n        extensions.foreach(x\
    \ => { \n            if(x.contains(class_name)) {\n                if(x.charAt(0)\
    \ == x.charAt(0)) {\n                    k = x.charAt(0).toInt\n             \
    \       n = k\n                }\n                if(x.charAt(x.length - 1) ==\
    \ x.charAt(x.length - 1)) {\n                    m = x.charAt(x.length - 1).toInt\n\
    \                }\n            }\n        })\n        return s\"$class_name.$k$m\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyu9bacc2.scala:39)\n\tat Problem.main(tmpyu9bacc2.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val letters = extensions\
    \ filter (_.isUpper)\n        val letters_count = letters.map(_.length).sum\n\n\
    \        val lowers = extensions filter (_.isLower)\n        val lowers_count\
    \ = lowers.map(_.length).sum\n\n        val caps = extensions filter (_.isUpper)\n\
    \        val caps_count = caps.map(_.length).sum\n\n        val sm = letters.toSet.size\
    \ == letters_count && lowers.toSet.size == lowers_count\n        val strength\
    \ = (caps_count - sm) / caps_count\n        s\"$class_name.$extensions.$strength\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj0uxaasq.scala:21:43 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = extensions\
    \ filter (_.isUpper)\n\e[31m\e[31m   |\e[0m                                  \
    \       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                 value\
    \ isUpper is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpj0uxaasq.scala:24:42\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e\
    [36mlowers\e[0m = extensions filter (_.isLower)\n\e[31m\e[31m   |\e[0m       \
    \                                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \                     value isLower is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpj0uxaasq.scala:27:40 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mval\e[0m \e[36mcaps\e[0m = extensions filter\
    \ (_.isUpper)\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 value isUpper is not a member\
    \ of String\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpj0uxaasq.scala:31:35 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = (caps_count\
    \ - sm) / caps_count\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m None of the overloaded alternatives of \e[33mmethod\e[0m\
    \ \e[35m-\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m\
    \  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x:\
    \ Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\
    \e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e\
    [0m match arguments ((sm : Boolean))\n4 errors found\n"
  stdout: ''
  timestamp: 1660010076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // The map function\
    \ returns a map of class name to extension.\n        var extensions_map = Map(className\
    \ -> extensions)\n        // The reduce function will reduce an extension list\
    \ using the strongest extension\n        // that has already encountered the particular\
    \ class name.\n        // We need to keep track of the strongest extension so\
    \ far, starting with -1 as the default value.\n        var strongest_extension_strength\
    \ = -1\n        // Traverse through the extensions list\n        for (extension\
    \ <- extensions) {\n            // If the current extension is already in the\
    \ map, increase the strongest extension strength\n            if (extensions_map.contains(extension))\
    \ {\n                strongest_extension_strength = extensions_map(extension).get.count(_.isUpper)\n\
    \            }\n            // If the current extension is in the map and the\
    \ current strongest extension strength\n            // is less than the given\
    \ extension strength, then replace the strongest extension strength\n        \
    \    // with the current strength.\n            if (extensions_map.contains(extension)\
    \ && (strongest_extension_strength < extensions_map(extension).get.count(_.isLower)))\
    \ {\n                strongest_extension_strength = extensions_map(extension).get.count(_.isUpper)\n\
    \            }\n        }\n        // Return the class name with strongest extension\
    \ name appended.\n        class_name + (extensions_map.get(class_name).get.maxBy(_.isUpper).getOrElse(\"\
    \"))\n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5mzhqarl.scala:22:33 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36mextensions_map\e[0m = Map(className\
    \ -> extensions)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Not found: className\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5mzhqarl.scala:30:40\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33mif\e[0m (extensions_map.contains(extension))\
    \ {\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    (extension\
    \ : String)\n\e[31m   |\e[0m                                        Required:\
    \ Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5mzhqarl.scala:31:62\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m                strongest_extension_strength\
    \ = extensions_map(extension).get.count(_.isUpper)\n\e[31m\e[31m   |\e[0m    \
    \                                                          ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                          Found:    (extension :\
    \ String)\n\e[31m   |\e[0m                                          Required:\
    \ Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5mzhqarl.scala:36:40\
    \ --------------------\e[0m\e[0m\n\e[31m36 |\e[0m            \e[33mif\e[0m (extensions_map.contains(extension)\
    \ && (strongest_extension_strength < extensions_map(extension).get.count(_.isLower)))\
    \ {\n\e[31m\e[31m   |\e[0m                                        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                        Found:    (extension\
    \ : String)\n\e[31m   |\e[0m                                        Required:\
    \ Nothing\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Misma"
  stdout: ''
  timestamp: 1660010076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val c = class_name\
    \ match { case \"Slices\" => 0 \n            case \"Cheese\" => 1 \n         \
    \   case \"StuFfed\" => 2 }\n        val strength = extensions map { e => e.toUpperCase(Locale.ROOT).count(_.isUpper)\
    \ - e.toUpperCase(Locale.ROOT).count(_.isLower) }\n        val strengths = strength.toArray\n\
    \        val index = strengths.indexOf(-strength(0))\n        extensions.apply(index)\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4zh9doan.scala:24:59 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions\
    \ map { \e[36me\e[0m => e.toUpperCase(Locale.ROOT).count(_.isUpper) - e.toUpperCase(Locale.ROOT).count(_.isLower)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m                                        \
    \               Not found: Locale\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4zh9doan.scala:24:105 -----------------------\e[0m\e[0m\n\e[31m24 |\e\
    [0m        \e[33mval\e[0m \e[36mstrength\e[0m = extensions map { \e[36me\e[0m\
    \ => e.toUpperCase(Locale.ROOT).count(_.isUpper) - e.toUpperCase(Locale.ROOT).count(_.isLower)\
    \ }\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                      ^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                       Not found: Locale\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010074
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        // Your code here\n\
    \        var strength : Int = -1\n        var strongest : String = \"\"\n    \
    \    extensions.foreach(e => {\n            if (strength > 0) return\n       \
    \     if (e.matches(\"[A-Z][a-z]\"))\n                strength = e.length() -\
    \ e.toLowerCase().length()\n            else return\n        })\n        extensions.foreach(e\
    \ => {\n            if (strength > 0) return\n            if (e.matches(\"[a-z]\"\
    ))\n                strength = e.length() - e.toLowerCase().length()\n       \
    \     else return\n        })\n        extensions.foreach(e => {\n           \
    \ if (strength > 0) return\n            if (e.matches(\"[A-Z]\"))\n          \
    \      strength = e.length() - e.toLowerCase().length()\n            else return\n\
    \        })\n        if (strength > 0) strongest = class_name + extensions.sortWith(_._2\
    \ > _._2).head._1\n        else strongest = class_name\n        return strongest\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(StrongestExtension((\"\
    Watashi\"), (List[String](\"tEN\", \"niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\"\
    )));\n    assert(StrongestExtension((\"Boku123\"), (List[String](\"nani\", \"\
    NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"))).equals((\"Boku123.YEs.WeCaNe\")));\n\
    \    assert(StrongestExtension((\"__YESIMHERE\"), (List[String](\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"))).equals((\"__YESIMHERE.NuLl__\"\
    )));\n    assert(StrongestExtension((\"K\"), (List[String](\"Ta\", \"TAR\", \"\
    t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n    assert(StrongestExtension((\"\
    __HAHA\"), (List[String](\"Tab\", \"123\", \"781345\", \"-_-\"))).equals((\"__HAHA.123\"\
    )));\n    assert(StrongestExtension((\"YameRore\"), (List[String](\"HhAas\", \"\
    okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"))).equals((\"YameRore.okIWILL123\"\
    )));\n    assert(StrongestExtension((\"finNNalLLly\"), (List[String](\"Die\",\
    \ \"NowW\", \"Wow\", \"WoW\"))).equals((\"finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"\
    _\"), (List[String](\"Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"\
    Sp\"), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbpzcw5h.scala:25:30\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (strength\
    \ > \e[31m0\e[0m) \e[33mreturn\e[0m\n\e[31m\e[31m   |\e[0m                   \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m                              Found: \
    \   Unit\n\e[31m   |\e[0m                              Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbpzcw5h.scala:28:17 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33melse\e[0m \e[33mreturn\e[0m\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:\
    \    Unit\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbpzcw5h.scala:31:30 --------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mif\e[0m (strength > \e[31m0\e[0m) \e\
    [33mreturn\e[0m\n\e[31m\e[31m   |\e[0m                              ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              Found:    Unit\n\e[31m   |\e[0m \
    \                             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpsbpzcw5h.scala:34:17 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33melse\e[0m \e[33mreturn\e[0m\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^\e[0m\n\e[31m   |\e[0m                 Found:\
    \    Unit\n\e[31m   |\e[0m                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsbpzcw5h.scala:37:30 --------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m            \e[33mif\e[0m (strength > \e[31m0\e[0m) \e\
    [33mreturn\e[0m\n\e[31m\e[31m   |\e[0m                              ^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              Found:    Unit\n\e[31m   |\e[0m \
    \                             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation availa"
  stdout: ''
  timestamp: 1660010076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val extension_set\
    \ = extensions.toSet\n        var strength = 0\n        var name = \"\"\n    \
    \    var i = -1\n        for (extension <- extensions) {\n            i = i +\
    \ 1\n            if (extension_set contains extension) {\n                strength\
    \ = strength + i.toDouble / extension_set.size\n            }\n        }\n   \
    \     strength.toDouble match {\n            case x if x > strength => name =\
    \ extensions(strength)\n            case x if x == strength => name = extensions(strength)\n\
    \            case _ => name = extensions(strength)\n        }\n        name +\
    \ (if(name != \"\") \".\" + class_name else \"\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjz7yn9nn.scala:28:27\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                strength = strength\
    \ + i.toDouble / extension_set.size\n\e[31m\e[31m   |\e[0m                   \
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                       Found:    Double\n\e[31m   |\e[0m                    \
    \       Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010076
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given the name of a class (a string) and a list of extensions.\n\
    \    // The extensions are to be used to load additional classes to the class.\
    \ The\n    // strength of the extension is as follows: Let CAP be the number of\
    \ the uppercase\n    // letters in the extension's name, and let SM be the number\
    \ of lowercase letters \n    // in the extension's name, the strength is given\
    \ by the fraction CAP - SM. \n    // You should find the strongest extension and\
    \ return a string in this \n    // format: ClassName.StrongestExtensionName.\n\
    \    // If there are two or more extensions with the same strength, you should\n\
    \    // choose the one that comes first in the list.\n    // For example, if you\
    \ are given \"Slices\" as the class and a list of the\n    // extensions: ['SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'] then you should\n    // return 'Slices.SErviNGSliCes' since\
    \ 'SErviNGSliCes' is the strongest extension \n    // (its strength is -1).\n\
    \    // Example:\n    // >>> StrongestExtension((\"my_class\"), (List[String](\"\
    AA\", \"Be\", \"CC\")))\n    // (\"my_class.AA\")\n    def StrongestExtension(class_name\
    \ : String, extensions : List[String]) : String = {\n        val countMap = collection.mutable.Map[String,\
    \ Int]()\n        val extensionList = new collection.mutable.Array[String](extensions.length)\n\
    \n        for (extension <- extensions) {\n            val extensionString = extension.toLowerCase\n\
    \            val extensionArray = extensionString.split(\"(?!^)\")\n\n       \
    \     for (i <- 0 until extensionArray.length) {\n                val count =\
    \ countMap.getOrElse(extensionArray(i), 0)\n                countMap += (extensionArray(i)\
    \ -> count + 1)\n            }\n        }\n\n        val sortedCountMap = collection.mutable.Map[Int,\
    \ (String, Int)](countMap.toSeq.sortBy(_._2).reverse.toSeq)\n        \n      \
    \  val maxStrongestCount = 0\n        val maxStrongestExtension = \"\"\n     \
    \   val maxStrongestExtensionCount = 0\n\n        for (i <- 0 until extensionList.length)\
    \ {\n            val extension = extensionList(i)\n            val extensionCount\
    \ = sortedCountMap.getOrElse(i, 0)\n            val extensionString = extension.toLowerCase\n\
    \            val extensionArray = extensionString.split(\"(?!^)\")\n         \
    \   val strongestCount = extensionArray.length\n            val strongestExtension\
    \ = extensionArray(0)\n            val strongestExtensionCount = countMap.getOrElse(strongestExtension,\
    \ 0)\n            \n            if (strongestCount > maxStrongestCount) {\n  \
    \              maxStrongestCount = strongestCount\n                maxStrongestExtension\
    \ = strongestExtension\n                maxStrongestExtensionCount = strongestExtensionCount\n\
    \            }\n        }\n\n        return (class_name + maxStrongestExtension\
    \ + \".\" + maxStrongestExtensionCount)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(StrongestExtension((\"Watashi\"), (List[String](\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"))).equals((\"Watashi.eIGHt8OKe\")));\n    assert(StrongestExtension((\"\
    Boku123\"), (List[String](\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ))).equals((\"Boku123.YEs.WeCaNe\")));\n    assert(StrongestExtension((\"__YESIMHERE\"\
    ), (List[String](\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ))).equals((\"__YESIMHERE.NuLl__\")));\n    assert(StrongestExtension((\"K\"),\
    \ (List[String](\"Ta\", \"TAR\", \"t234An\", \"cosSo\"))).equals((\"K.TAR\")));\n\
    \    assert(StrongestExtension((\"__HAHA\"), (List[String](\"Tab\", \"123\", \"\
    781345\", \"-_-\"))).equals((\"__HAHA.123\")));\n    assert(StrongestExtension((\"\
    YameRore\"), (List[String](\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\",\
    \ \"-_-\"))).equals((\"YameRore.okIWILL123\")));\n    assert(StrongestExtension((\"\
    finNNalLLly\"), (List[String](\"Die\", \"NowW\", \"Wow\", \"WoW\"))).equals((\"\
    finNNalLLly.WoW\")));\n    assert(StrongestExtension((\"_\"), (List[String](\"\
    Bb\", \"91245\"))).equals((\"_.Bb\")));\n    assert(StrongestExtension((\"Sp\"\
    ), (List[String](\"671235\", \"Bb\"))).equals((\"Sp.671235\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc7lk5vnn.scala:22:51 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mextensionList\e[0m = \e\
    [33mnew\e[0m collection.mutable.Array[\e[35mString\e[0m](extensions.length)\n\e\
    [31m\e[31m   |\e[0m                                ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mtype Array is not a member of scala.collection.mutable - did\
    \ you mean mutable.ArraySeq.type?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc7lk5vnn.scala:30:56\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                countMap\
    \ += (extensionArray(i) -> count + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m      \
    \                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ + is not a member of (String, Int), but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc7lk5vnn.scala:34:108\
    \ -------------------\e[0m\e[0m\n\e[31m34 |\e[0m        \e[33mval\e[0m \e[36msortedCountMap\e\
    [0m = collection.mutable.Map[\e[35mInt\e[0m, (\e[35mString\e[0m, \e[35mInt\e[0m)](countMap.toSeq.sortBy(_._2).reverse.toSeq)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                          Found:    \e[1m\e[31mSeq\e[0m\e[1m\e\
    [31m[\e[0m(String, Int)\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                    \
    \                      Required: \e[1m\e[32m(\e[0m\e[1m\e[32mInt\e[0m\e[1m\e[32m,\e\
    [0m\e[1m\e[32m \e[0m(String, Int)\e[1m\e[32m)\e[0m\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpc7lk5vnn.scala:50:34 -----------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m                maxStrongestCount = strongestCount\n\e\
    [31m\e"
  stdout: ''
  timestamp: 1660010076
