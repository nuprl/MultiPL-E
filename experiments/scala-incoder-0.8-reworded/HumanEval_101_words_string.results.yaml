language: scala
name: HumanEval_101_words_string
results:
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[\\\\s,]+\")\n \
    \       val list = new collection.mutable.ListBuffer[String]()\n        for (word\
    \ <- words) {\n            list += word\n        }\n        list += words.head\n\
    \        list.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjcf9nlr3.scala:21)\n\tat Problem.main(tmpjcf9nlr3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var words = \"\"\n        for (c <- s)\
    \ {\n            if (c==\",\" || c == \" \") {\n                words = words\
    \ ::: List(c)\n            } else {\n                words += c\n            }\n\
    \        }\n        words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjrbhzxh9.scala:14:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (c==\e[31m\",\"\e[0m || c ==\
    \ \e[31m\" \"\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpjrbhzxh9.scala:14:26 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (c==\e[31m\",\"\e[0m || c ==\
    \ \e[31m\" \"\e[0m) {\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjrbhzxh9.scala:15:24\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                words = words\
    \ ::: List(c)\n\e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Found:    (words : String)\n\e[31m   |\e[0m\
    \                        Required: List[Char]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpjrbhzxh9.scala:20:8 ---------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        words\n\e[31m\e[31m   |\e[0m        ^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    (words : String)\n\e[31m   |\e[0m        Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        s.trim().split(\"\\\\s*,\\\\s*\").toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyf0k783w.scala:15)\n\tat Problem.main(tmpyf0k783w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        //Your code goes here\n        s.split(\"\
    ,\\\\s+\").map(x=>x.trim).filter(x => x.trim.length >0).map(x => x.toLowerCase())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc3tk49e2.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        s.split(\e[31m\",\\\\\
    s+\"\e[0m).map(\e[36mx\e[0m=>x.trim).filter(\e[36mx\e[0m => x.trim.length >\e\
    [31m0\e[0m).map(\e[36mx\e[0m => x.toLowerCase())\n\e[31m\e[31m   |\e[0m      \
    \  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        if(s.isEmpty) {\n            Nil\n   \
    \     } else {\n            val splits = s.split(' ')\n            val wordsArray\
    \ = splits.toList\n            val wordsString = wordsArray.toList.mkString(\"\
    \ \")\n            val wordsList = wordsString.split(' ')\n            wordsList.map(word\
    \ => word.toUpperCase)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoqiz5e31.scala:19:12\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            wordsList.map(\e\
    [36mword\e[0m => word.toUpperCase)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m\
    \   |\e[0m            Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var words = mutable.ListBuffer[String]()\n\
    \        var words = s.split(\"[, ]+\")\n        for (str <- words) {\n      \
    \      if (str != \"\") words += str\n        }\n        words.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpctyeudao.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mwords\e[0m = s.split(\e\
    [31m\"[, ]+\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mwords is already defined as \e[33mvariable\e[0m \e[35mwords\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not\
    \ Found Error: /tmp/tmpctyeudao.scala:12:20 ------------------------\e[0m\e[0m\n\
    \e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mwords\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def split_word(w : String) : List[String]\
    \ = {\n            val ws = w.split(\", | , | , | \")\n            for (wa <-\
    \ ws) yield {wa.trim}\n        }\n        def add_word(w : List[String]) : List[String]\
    \ = {\n            w match {\n                case Nil => Nil\n              \
    \  case x :: Nil => x\n                case x :: y => x :: add_word(y)\n     \
    \       }\n        }\n        val words = s.split(\", | , | , | \")\n        val\
    \ new_words = (for ( x <- words) yield {\n            if (x.length() > 0)\n  \
    \              split_word(x) ++ add_word(split_word(x))\n            else Nil\n\
    \        }).flatten.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three,\
    \ four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp199atig2.scala:14:12\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mfor\e[0m (wa\
    \ <- ws) \e[33myield\e[0m {wa.trim}\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m\
    \   |\e[0m            Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp199atig2.scala:19:33 --------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e[0m x :: Nil => x\n\e[31m\e\
    [31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m        \
    \                         Found:    (x : String)\n\e[31m   |\e[0m            \
    \                     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp199atig2.scala:29:5 ---------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n      var ret = new mutable.ListBuffer[String]\n\
    \      var prev = \"\"\n      for(i <- 0 until s.length){\n          val temp\
    \ = s(i)\n          if(prev ne \"\"){\n              ret += prev\n          }\n\
    \          ret += temp\n          prev = temp\n      }\n      ret.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5mn_304l.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m      \e[33mvar\e[0m \e[36mret\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m               \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5mn_304l.scala:20:17\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m          prev = temp\n\e[31m\e\
    [31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0m                 Found:\
    \    (temp : Char)\n\e[31m   |\e[0m                 Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.trim.split(\", \").toList\n\
    \        if (words.length > 1) {\n            words.reverse.tail\n        }\n\
    \        else {\n            List()\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphwqus56c.scala:21)\n\tat Problem.main(tmphwqus56c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var words = mutable.Set[String]()\n  \
    \      val array = s.split(\",\")\n        array.foreach(x => {\n            val\
    \ array2 = x.split(\" \")\n            array2.foreach(y => {\n               \
    \ if (words.contains(y)) {\n                    println(s\"$y already in words\
    \ set\")\n                } else {\n                    words += y\n         \
    \       }\n            })\n        })\n        return words.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is\
    \ John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n\
    \    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgyoav1rc.scala:12:20 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36mwords\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        //use regular expression to split into\
    \ words and map into a list\n        val list = s.replaceAll(\",\", \" \").split(\"\
    \ \").toList\n        val wordsString = list.map(_.replaceAll(\"\\\\s\", \"\"\
    ))\n        return wordsString\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7y9009kf.scala:18)\n\tat Problem.main(tmp7y9009kf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013374
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = s.split(\",\").toList\n   \
    \     list.map(_.trim).filter(_.nonEmpty)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkim20idi.scala:16)\n\tat Problem.main(tmpkim20idi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Your code here\n        s.replaceAll(\"\
    \ \", \"\")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0kpc4s8s.scala:13:20\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        s.replaceAll(\e[31m\"\
    \ \"\e[0m, \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Write your code here\n        var lst\
    \ = s.split(\",\")\n        var list = List[String]()\n        var word = List[String]()\n\
    \        for(i <- 0 until lst.length){\n            if(lst(i).length() > 0){\n\
    \                for(j <- 0 until lst(i).length()){\n                    if(lst(i)(j)\
    \ != \" \" && lst(i)(j) != \",\"){\n                        if(j == (lst(i).length()\
    \ - 1)){\n                            lst(i) += lst(i)(j)\n                  \
    \          word += lst(i)\n                            list = word :: list\n \
    \                       }else{\n                            lst(i) += lst(i)(j)\n\
    \                            word += lst(i)\n                        }\n     \
    \               }\n                }\n            }\n        }\n        return\
    \ list\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpffhomo7s.scala:19:23 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                    \e[33mif\e[0m(lst(i)(j) != \e[31m\"\
    \ \"\e[0m && lst(i)(j) != \e[31m\",\"\e[0m){\n\e[31m\e[31m   |\e[0m          \
    \             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char\
    \ and String cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpffhomo7s.scala:19:43\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \             \e[33mif\e[0m(lst(i)(j) != \e[31m\" \"\e[0m && lst(i)(j) != \e[31m\"\
    ,\"\e[0m){\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpffhomo7s.scala:22:33\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                        \
    \    word += lst(i)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpffhomo7s.scala:23:35 --------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                            list = word :: list\n\e[31m\e\
    [31m   |\e[0m                                   ^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                Found:    (word : List[String])\n\e[31m   |\e\
    [0m                                   Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpffhomo7s.scala:26:33 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                            word += lst(i)\n\e[31m\e\
    [31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue +=\
    \ is not a member of List[String] - did you mean List[String].!=?\n5 errors found\n"
  stdout: ''
  timestamp: 1660013374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val l = s.split(\"\"\"\\W+\"\"\").toList\n\
    \        l.head :: words.filter(w => w < l.size).toList ::: l.tail\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is\
    \ John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n\
    \    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfrgj58pc.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        l.head :: words.filter(\e[36mw\e[0m => w < l.size).toList\
    \ ::: l.tail\n\e[31m\e[31m   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: words\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013369
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var words: List[String] = List()\n   \
    \     var currentWord = \"\"\n        var charArray = s.toCharArray()\n      \
    \  for (i <- charArray){\n            if (Character.isWhitespace(i)){\n      \
    \          currentWord = currentWord + i\n                currentWord = currentWord.trim\n\
    \                if (currentWord.trim.length() > 0){\n                    words\
    \ ::= currentWord\n                }\n                currentWord = \"\"\n   \
    \         }\n            else {\n                currentWord = currentWord + i\n\
    \                currentWord = currentWord.trim\n            }\n        }\n  \
    \      words ::= currentWord\n        words\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuf3ch_iq.scala:33)\n\tat Problem.main(tmpuf3ch_iq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def splitString(s : String) : List[String]\
    \ = {\n            val list = new mutable.ListBuffer[String]\n            val\
    \ words = s.split(\"[,\\\\s]+\".toRegex)\n            for(word <- words) {\n \
    \               list.+= word.trim\n            }\n            list.toList\n  \
    \      }\n\n        val list = splitString(s)\n        var list2 : List[String]\
    \ = new mutable.ListBuffer[String]\n        for(i <- 0 until list.length) {\n\
    \            list2.+= list.apply(i)\n        }\n        list2.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpk_7c_pos.scala:16:28 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                list.+= word.trim\n\e[31m\e[31m   |\e\
    [0m                            ^\e[0m\n\e[31m   |\e[0m                       \
    \     expression expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpk_7c_pos.scala:24:25 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            list2.+= list.apply(i)\n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         expression\
    \ expected but \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpk_7c_pos.scala:13:27 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m            \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpk_7c_pos.scala:14:42 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mwords\e[0m = s.split(\e\
    [31m\"[,\\\\s]+\"\e[0m.toRegex)\n\e[31m\e[31m   |\e[0m                       \
    \         ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \    value toRegex is not a member of String\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpk_7c_pos.scala:22:39 ------------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m        \e[33mvar\e[0m \e[36mlist2\e[0m : \e[35mList\e[0m[\e[35mString\e\
    [0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e\
    [0m                                       ^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpk_7c_pos.scala:24:18 ------------------------\e\
    [0m\e[0m\n\e"
  stdout: ''
  timestamp: 1660013373
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = s.split(\"\"\"\\W+\"\"\").map(_.trim).toList\n\
    \        list.groupBy(x => x).map(x => (x._1, x._2.map(_._2))).toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0_drx72_.scala:13:56 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        list.groupBy(\e[36mx\e[0m => x).map(\e[36mx\e\
    [0m => (x._1, x._2.map(_._2))).toList\n\e[31m\e[31m   |\e[0m                 \
    \                                     ^^^^\e[0m\n\e[31m   |\e[0m             \
    \                         value _2 is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660013372
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\")\n        val\
    \ res = new collection.mutable.ListBuffer[String]()\n        words.map(word =>\
    \ {\n            if (word != \" \") res += word\n        })\n        res.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9z9y4sz1.scala:20)\n\tat Problem.main(tmp9z9y4sz1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013374
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def split(s: String): List[String] = s.split(\"\
    , | [,]| \").toList\n        def getWords(s: String, splits: List[String]): List[String]\
    \ = splits match {\n            case Nil => List(s)\n            case _ => getWords(s.tail,\
    \ split(s.head):_*)\n        }\n        getWords(s, split(s))\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3xfzf6gn.scala:15:39 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m _ => getWords(s.tail, split(s.head):_*)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mSequence argument type annotation `*` cannot be used here:\n\
    \e[31m   |\e[0mthe corresponding parameter has type List[String] which is not\
    \ a repeated parameter type\n1 error found\n"
  stdout: ''
  timestamp: 1660013370
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Split string into array of words\n\
    \        val words = s.split(\", \").map(_.trim)\n        // Return array of words\n\
    \        words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo45vht6m.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        words\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (words : Array[String])\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013372
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val wordList = mutable.ListBuffer[String]()\n\
    \        // Iterate over each character in the string\n        for ( char <- s\
    \ ) {\n            // If the character is a letter, add it to the list\n     \
    \       if ( char.isLetter ) {\n                wordList += char\n           \
    \ }\n        }\n        // Return the list\n        wordList.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is\
    \ John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n\
    \    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4lbrw_28.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013369
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var words: List[String] = List()\n   \
    \     var currentWord = \"\"\n        var charIndex = 0\n        while(words.length\
    \ < s.length){\n            val currentChar = s(charIndex)\n            if(currentChar\
    \ == \",\"){\n                currentWord ++= currentChar\n                charIndex\
    \ += 1\n            }\n            else if(currentChar == \" \"){\n          \
    \      currentWord ++= currentChar\n                charIndex += 1\n         \
    \       if(currentWord.isEmpty){\n                    currentWord ++= currentChar\n\
    \                }\n                else{\n                    if(words.length\
    \ == 0){\n                        words = currentWord.split(',')\n           \
    \             currentWord = \"\"\n                    }\n                    else{\n\
    \                        words = words :+ currentWord\n                      \
    \  currentWord = \"\"\n                    }\n                }\n            }\n\
    \            else{\n                currentWord ++= currentChar\n            \
    \    charIndex += 1\n            }\n        }\n        if(currentWord.length >\
    \ 0){\n            if(words.length == 0){\n                words = currentWord.split(',')\n\
    \            }\n            else{\n                words = words :+ currentWord\n\
    \            }\n        }\n        return words\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpxqcx7z8p.scala:17:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(currentChar == \e[31m\",\"\e\
    [0m){\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqcx7z8p.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                currentWord ++= currentChar\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     value ++= is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpxqcx7z8p.scala:21:20\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m       \
    \     \e[33melse\e[0m \e[33mif\e[0m(currentChar == \e[31m\" \"\e[0m){\n\e[31m\e\
    [31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \    Values of types Char and String cannot be compared with == or !=\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpxqcx7z8p.scala:22:28 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                currentWord ++= currentChar\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     value ++= is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpxqcx7z8p.scala:25:32 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m                    currentWord ++= currentChar\n\e[31m\e[31m   |\e[0m    \
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value\
    \ ++= is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxqcx7z8p.scala:29:49\
    \ --------------------\e[0m\e[0m\n\e[31m29 |\e[0m                        words\
    \ = currentWord.split(\e[31m','\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \               ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \               Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m     \
    \                           Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxqcx7z8p.scala:39:28 ------"
  stdout: ''
  timestamp: 1660013373
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.trim().split(\",\")\n  \
    \      words.map(_.trim()).filter(_.nonEmpty).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpx2uijfup.scala:16)\n\tat Problem.main(tmpx2uijfup.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // TODO: Write your code here\n      \
    \  val strs = s.split(\",\")\n        strs.flatMap(_.split(\" \"))\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is\
    \ John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n\
    \    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1kg_pfd5.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        strs.flatMap(_.split(\e\
    [31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m\
    \        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words: mutable.MutableList[String]\
    \ = mutable.MutableList\n        for(i <- 0 until s.length - 1) if s(i) = ','\
    \ {\n            words += s(i+1); i+=1;\n        } else words += s(i)\n      \
    \  words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp2_978s5s.scala:15:10 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        } \e[33melse\e[0m words += s(i)\n\e[31m\e[31m\
    \   |\e[0m          ^^^^\e[0m\n\e[31m   |\e[0m          'then' expected, but 'else'\
    \ found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_978s5s.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: mutable.MutableList[\e\
    [35mString\e[0m] = mutable.MutableList\n\e[31m\e[31m   |\e[0m                \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp2_978s5s.scala:12:49 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: mutable.MutableList[\e\
    [35mString\e[0m] = mutable.MutableList\n\e[31m\e[31m   |\e[0m                \
    \                                 ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp2_978s5s.scala:13:42 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until s.length\
    \ - \e[31m1\e[0m) \e[33mif\e[0m s(i) = \e[31m','\e[0m {\n\e[31m\e[31m   |\e[0m\
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                       value update is not a member of String\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmp2_978s5s.scala:13:49 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until s.length\
    \ - \e[31m1\e[0m) \e[33mif\e[0m s(i) = \e[31m','\e[0m {\n\e[31m\e[31m   |\e[0m\
    \                                                 ^^^\e[0m\n\e[31m   |\e[0m  \
    \                                   expression does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp2_978s5s.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            wor"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        if (s.isEmpty || s == null || s.isEmpty())\
    \ List.empty\n        else {\n            var words = s.trim.split(\"\\\\s+\"\
    ).toList\n            val lastWord = words.last\n            val lastIndex = words.length\
    \ - 1\n            if (words.size > lastIndex) {\n                words.drop(lastIndex)\
    \ ++ lastWord\n            } else words\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ygkbl0k.scala:18:41\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m                words.drop(lastIndex)\
    \ ++ lastWord\n\e[31m\e[31m   |\e[0m                                         ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         Found:    (lastWord\
    \ : String)\n\e[31m   |\e[0m                                         Required:\
    \ IterableOnce[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013380
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val tokens = s.trim().split(\",|\\s+\"\
    ).map(_.trim).toList\n        val words   = tokens.filter( !_.isEmpty )\n    \
    \    val result  = words.toList\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpw2lvs24m.scala:12:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mtokens\e[0m = s.trim().split(\e\
    [31m\",|\\s+\"\e[0m).map(_.trim).toList\n\e[31m\e[31m   |\e[0m               \
    \                         ^\e[0m\n\e[31m   |\e[0m                            \
    \            invalid escape character\n1 error found\n"
  stdout: ''
  timestamp: 1660013378
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val r = new scala.util.parsing.input.CharArrayReader(s.toCharArray)\n\
    \        val p = new java.util.Scanner(r)\n        val words = new mutable.MutableList[String]()\n\
    \        while(p.findWithinHorizon(\".\", 0) != -1){\n          words += p.next()\n\
    \        }\n        words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp66wlmwla.scala:12:31 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = \e[33mnew\e[0m\
    \ scala.util.parsing.input.CharArrayReader(s.toCharArray)\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      value parsing\
    \ is not a member of util - did you mean util.Sorting?\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp66wlmwla.scala:14:24 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = \e[33mnew\e[0m mutable.MutableList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var words = s.split(\",\").toList.map(_.trim).toSet\n\
    \        var list = List[String]()\n        for(word <- words) {\n           \
    \ if (words.contains(word)) {\n                words.remove(word)\n          \
    \      list ::= word\n            } else {\n                list ::= word\n  \
    \          }\n        }\n        list.distinct\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvpl0gz4a.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                words.remove(word)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue remove is not a member\
    \ of Set[String] - did you mean Set[String].reduce?\n1 error found\n"
  stdout: ''
  timestamp: 1660013383
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = s.split(\" \").map(_.trim).toList\n\
    \        if(list.contains(\"\")) list.clear()\n        list\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwzr5izec.scala:13:35 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m(list.contains(\e[31m\"\"\e[0m))\
    \ list.clear()\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m  value clear is not a member of List[String] - did you mean\
    \ list.clone?\n1 error found\n"
  stdout: ''
  timestamp: 1660013383
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\\\\s*,\\\\s*\"\
    ).map(_.trim).toList\n        if (words.isEmpty) List()\n        else words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp53p8iux1.scala:17)\n\tat Problem.main(tmp53p8iux1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.replace(\",\", \" \").replace(\"\
    ( )\", \" \").trim().split(\" \").filter(_.nonEmpty).map(_.toLowerCase)\n    \
    \    val words = words.takeRight(10)\n        val wordList = words.toList\n  \
    \      wordList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp4c86j6xr.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = words.takeRight(\e\
    [31m10\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mwords is already defined as \e[33mvalue\e[0m \e[35mwords\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n1 error found\n"
  stdout: ''
  timestamp: 1660013381
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[\\\\s,]+\").filter(_.length\
    \ > 0).toList\n        words.sort\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcv3n0ckd.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        words.sort\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m value sort is not a member of List[String] - did you mean\
    \ words.sortBy?\n1 error found\n"
  stdout: ''
  timestamp: 1660013384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        words.toList.map(_.trim).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm7wfw_9m.scala:16)\n\tat Problem.main(tmpm7wfw_9m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.toList.map(_.toLowerCase)\n\
    \        var list = List[String]()\n        val splitList = words.split(\", |,\\\
    \\s+\")\n        for (str <- splitList) {\n          if(str.trim.isEmpty) list\
    \ = list :+ str\n        }\n        list = list :+ list.last\n        return list\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6bba6bp8.scala:12:35 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = s.toList.map(_.toLowerCase)\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value toLowerCase is not a member of\
    \ Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6bba6bp8.scala:14:30 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msplitList\e[0m = words.split(\e\
    [31m\", |,\\\\s+\"\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue split is not a member of List[Nothing] - did you mean\
    \ words.splitAt?\n2 errors found\n"
  stdout: ''
  timestamp: 1660013385
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val result = mutable.MutableList[String]()\n\
    \        val splits = s.split(\"\"\"[, ]+\"\"\")\n        splits.foreach(w =>\
    \ {\n            w match {\n                case \"\" => ()\n                case\
    \ w =>\n                    result.add(w)\n            }\n        })\n       \
    \ return result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrlvkhqp.scala:12:21 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.MutableList[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val wordsList = s.toList.split(\"[, ]+\"\
    )\n        wordsList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvr9kki8r.scala:12:33 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwordsList\e[0m = s.toList.split(\e\
    [31m\"[, ]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue split is not a member of List[Char] - did you mean List[Char].splitAt?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013384
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def words(s: String) : List[String] =\
    \ {\n            s.split(\", \").toList match {\n                case Nil => List()\n\
    \                case x::xs => List(x)+words(xs)\n            }\n        }\n \
    \       words(s)\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc67sqnpg.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mcase\e[0m x::xs => List(x)+words(xs)\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of List[String], but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpc67sqnpg.scala:15:44\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                \e[33mcase\e\
    [0m x::xs => List(x)+words(xs)\n\e[31m\e[31m   |\e[0m                        \
    \                    ^^\e[0m\n\e[31m   |\e[0m                                \
    \           Found:    (xs : List[String])\n\e[31m   |\e[0m                   \
    \                        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        s.split(\" \").filter(!_.isEmpty).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2iu3urij.scala:15)\n\tat Problem.main(tmp2iu3urij.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Write your code here!\n        val\
    \ list = s.split(\",\")\n        val list2 = list.map(_.split(\" \"))\n      \
    \  list2\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt6ss5oor.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        list2\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (list2 : Array[Array[String]])\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Split the string into words\n     \
    \   val words = s.split(\"\"\"\\s*,\\s*|\\s*,\\s*\\W\"\"\", -1).toList\n     \
    \   // Remove the commas from the words\n        val fixed = words.map(x => x.replace(\"\
    ,\", \"\"))\n        // Join the words back into a single string\n        val\
    \ fixedString = fixed.mkString(\",\")\n        // Return a list of words delimited\
    \ by commas\n        fixed.map(x => x.toUpperCase()).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp92l_j6iz.scala:22)\n\tat Problem.main(tmp92l_j6iz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013386
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = new mutable.ListBuffer[String]()\n\
    \        for (wd <- s.split(\" \")) {\n            if (words.size == 0) words.append(wd)\n\
    \            else words.append(wd).append(',')\n        }\n        words.reverse.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8r0mlc4k.scala:12:24 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013382
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split( \",\" ).toList //\
    \ split by ,\n        val words1 = words.map( _.trim) // remove leading and trailing\
    \ space\n        val words2 = words1.map( w => w.split( \" \" ) ) // split by\
    \ space\n        val words3 = (words2 ++ words1) flatMap List(_) // concatenate\
    \ two lists\n        words3.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp6q8f8gvc.scala:15:53 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mwords3\e[0m = (words2 ++\
    \ words1) flatMap List(_) \e[34m// concatenate two lists\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                                                     ^\e[0m\n\e[31m  \
    \ |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$2 of expanded function:\n\e[31m   |\e\
    [0m   _$2 => (words2 ++ words1) flatMap List(_$2).\n1 error found\n"
  stdout: ''
  timestamp: 1660013384
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var newList: List[String] = Nil\n    \
    \    for (x <- s.split(\" \")) {\n            newList = newList :+ x\n       \
    \ }\n        return newList\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2lhmgqup.scala:19)\n\tat Problem.main(tmp2lhmgqup.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013387
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Return the list of words from the given\
    \ string.\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpje4lm81e.scala:11:49\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mwordsString\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    Unit\n\
    \e[31m   |\e[0m                                                 Required: List[String]\n\
    \e[31m12 |\e[0m        \e[34m// Return the list of words from the given string.\e\
    [0m\n\e[31m13 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013385
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        if (s == \"\") List()\n        else s.split(\"\
    \ \").filter(_.nonEmpty).map(_.trim).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpin1i9gns.scala:16)\n\tat Problem.main(tmpin1i9gns.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        if (s.contains(\",\")) s.split(\"\\\\\
    s*,\\\\s*\").map(_.toLowerCase).toList\n        else if (s.contains(\".\"))  s.split(\"\
    \\\\s*\\\\.\\\\s*\").map(_.toLowerCase).toList\n        else                 \
    \     s.split(\" \").map(_.toLowerCase).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpl5bwbies.scala:17)\n\tat Problem.main(tmpl5bwbies.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var splittedString : List[String] = List();\n\
    \        var splittedStringList : List[List[String]] = List();\n        \n   \
    \     for(a <- s.split(\" \")) {\n            if(a.contains(\",\")) {\n      \
    \          splittedStringList += a.split(\",\");\n            }\n            else{\n\
    \                splittedString += a;\n            }\n        }\n        \n  \
    \      for(i <- splittedStringList) {\n            splittedStringList += i;\n\
    \        }\n        \n        return splittedStringList;\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1wffd9_s.scala:17:35 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                splittedStringList += a.split(\e[31m\"\
    ,\"\e[0m);\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue += is not a member of List[List[String]] - did you mean List[List[String]].!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1wffd9_s.scala:20:31 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                splittedString += a;\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not\
    \ a member of List[String] - did you mean List[String].!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp1wffd9_s.scala:25:31 ------------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m            splittedStringList += i;\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member\
    \ of List[List[String]] - did you mean List[List[String]].!=?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1wffd9_s.scala:28:15 --------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mreturn\e[0m splittedStringList;\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      Found:    (splittedStringList : List[List[String]])\n\e[31m   |\e[0m  \
    \             Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Split the string into words using split\
    \ method.\n        // The split method returns an Array[String] so you need to\
    \ typecast it to a\n        // List[String].\n        (s.split(\", \")).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpy7o_3emr.scala:18)\n\tat Problem.main(tmpy7o_3emr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013394
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", | \")\n      \
    \  words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvhnt89gm.scala:19)\n\tat Problem.main(tmpvhnt89gm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        s.split(\",\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn5y9t0h5.scala:12:15\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        s.split(\e[31m\",\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    \e[1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e\
    [0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013393
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val splits = s.trim().split(\",|,\\\\\
    s+\").map(_.replaceAll(\"\\\\s+\",\" \"))\n        splits.toList.map(_.trim())\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpkmokps4l.scala:16)\n\tat Problem.main(tmpkmokps4l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013394
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var splitString : List[String] = s.split(\"\
    ,\")\n        splitString = (s.split(\",\").toList).reverse\n        splitString.takeWhile(_.nonEmpty)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiqfczyzl.scala:12:48\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mvar\e[0m \e[36msplitString\e\
    [0m : \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\",\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                         ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                         Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                         Required:\
    \ \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013393
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        //TODO: Implement here\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoat3fe32.scala:11:49\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mwordsString\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    Unit\n\
    \e[31m   |\e[0m                                                 Required: List[String]\n\
    \e[31m12 |\e[0m        \e[34m//TODO: Implement here\e[0m\n\e[31m13 |\e[0m    }\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013392
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\").toList\n  \
    \      val newList = words.toList.map(w => (w.toUpperCase))\n        newList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7_18flhm.scala:17)\n\tat Problem.main(tmp7_18flhm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013395
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = s.split(\" \").toList.sorted\n\
    \        val list2 = list.map(_.toUpperCase).reverse\n        list2.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvito7cr1.scala:17)\n\tat Problem.main(tmpvito7cr1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.toCharArray\n        val\
    \ wordsArray = mutable.ArrayBuffer.empty[String]\n        for (i <- 0 until words.length)\
    \ {\n            val word = words(i)\n            if (word != ' ' && word != '\\\
    t') {\n                wordsArray += word\n            }\n        }\n        wordsArray.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7skepb43.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mwordsArray\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013391
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def word(i : Int) : List[String] = {\n\
    \            s match {\n                case s if(s.size > i) => words(s.take(i+1).mkString(\"\
    ,\"))\n                case s => List(\"\")\n            }\n        }\n      \
    \  val words = s.split(\" |,\")\n        val wordList = new mutable.ArrayList[String]()\n\
    \        var curWord = word(0)\n        var curIndex = 0\n        var wordCount\
    \ = 0\n        while (curIndex < words.length) {\n            wordCount += 1\n\
    \            val nextWord = word(curIndex+1)\n            if (nextWord.isEmpty)\
    \ {\n                wordList.add(curWord)\n                curWord = \"\"\n \
    \               curIndex += 1\n            } else {\n                curWord +=\
    \ \", \" + nextWord\n            }\n        }\n        wordList.add(curWord)\n\
    \        wordList.size()\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6pr3t9q1.scala:14:67\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m                \e[33mcase\e\
    [0m s \e[33mif\e[0m(s.size > i) => words(s.take(i+\e[31m1\e[0m).mkString(\e[31m\"\
    ,\"\e[0m))\n\e[31m\e[31m   |\e[0m                                            \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                     Found:    String\n\e[31m   |\e[0m                      \
    \                         Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmp6pr3t9q1.scala:19:27 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mwordList\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                           Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6pr3t9q1.scala:28:26\
    \ --------------------\e[0m\e[0m\n\e[31m28 |\e[0m                curWord = \e\
    [31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m                          ^^\e[0m\n\e[31m\
    \   |\e[0m                          Found:    (\e[32m\"\"\e[0m : String)\n\e[31m\
    \   |\e[0m                          Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp6pr3t9q1.scala:31:24 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                curWord += \e[31m\", \"\e[0m + nextWord\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue +=\
    \ is not a member of List[String] - did you mean List[String].!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1660013396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def wordsSplitter(ss: List[String], words:\
    \ mutable.Buffer[String]) : List[String] = {\n            ss match {\n       \
    \         case Nil => words.toList\n                case x::xs => wordsSplitter(xs,\
    \ words +: x) ::: wordsSplitter(xs, words)\n            }\n        }\n       \
    \ val words: mutable.Buffer[String] = mutable.Buffer[String]()\n        wordsSplitter(s.split(\"\
    , \"), words).toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6sjip7ky.scala:12:51 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mdef\e[0m \e[36mwordsSplitter\e[0m(\e[36mss\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m], \e[36mwords\e[0m: mutable.Buffer[\e[35mString\e\
    [0m]) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\e[31m\e[31m   |\e[0m        \
    \                                           ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                               Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6sjip7ky.scala:18:19 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m: mutable.Buffer[\e\
    [35mString\e[0m] = mutable.Buffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6sjip7ky.scala:18:44\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e\
    [36mwords\e[0m: mutable.Buffer[\e[35mString\e[0m] = mutable.Buffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                            ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6sjip7ky.scala:19:29\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        wordsSplitter(s.split(\e\
    [31m\", \"\e[0m), words).toList\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                      Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660013394
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[,\\\\s]+\").map(x\
    \ => x.trim).toList\n        if (words.isEmpty) List(\"\")\n        else words.reverse\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmps3_7i85h.scala:17)\n\tat Problem.main(tmps3_7i85h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val splitWords = s.split(\"\"\"\\W+\"\"\
    \").toList\n        splitWords.filter(_.nonEmpty)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013396
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.toList.split(\"\"\"\\s*,\\\
    s*\"\"\")\n        words.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyfs3og_t.scala:12:29 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = s.toList.split(\e\
    [31m\"\"\"\\s*,\\s*\"\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue split is not a member of List[Char] - did you mean List[Char].splitAt?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val ps = Iterator.fromString(s).map(_.toUpperCase).takeWhile(_.nonEmpty).dropWhile(_.isDigit)\n\
    \        val p  = ps.toList\n        p.tail.flatMap(_.split(\",\"))\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is\
    \ John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n\
    \    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe29f0omn.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mps\e[0m = Iterator.fromString(s).map(_.toUpperCase).takeWhile(_.nonEmpty).dropWhile(_.isDigit)\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ fromString is not a member of object scala.collection.Iterator - did you mean\
    \ Iterator.toString?\n1 error found\n"
  stdout: ''
  timestamp: 1660013395
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n      val tokens = s.split(\",\")\n      val n\
    \ = tokens.size\n      val a = new Array[String](n)\n      a.fill(\"\")\n    \
    \  val out = new mutable.ListBuffer[String]()\n      for (i <- 0 to n-1){\n  \
    \      a(i) = tokens(i)\n      }\n      out.+=(tokens.toList)\n      out.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7vyvqav0.scala:15:8 -------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      a.fill(\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \      ^^^^^^\e[0m\n\e[31m   |\e[0m      value fill is not a member of Array[String]\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7vyvqav0.scala:16:20 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m      \e[33mval\e[0m \e[36mout\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013396
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",|\\\\s+\").toList\n\
    \        val noDouble = words.map(_.trim).filter(_.nonEmpty)\n        return noDouble\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw6rpigup.scala:16)\n\tat Problem.main(tmpw6rpigup.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013397
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val a = s.toString.split(\", \")\n   \
    \     a.map(x => x.trim).toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4ak33u95.scala:16)\n\tat Problem.main(tmp4ak33u95.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013398
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var strList = ListBuffer[String]()\n \
    \       for (word <- s.split(\",\\\\s+\")) {\n            strList.append(word.trim())\n\
    \        }\n        return strList.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnyqa2d9w.scala:19)\n\tat Problem.main(tmpnyqa2d9w.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013400
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val wordsArray = s.split(\",\")\n    \
    \    val wordList = wordsArray.filter(_.trim.length > 0)\n        wordList.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1o0hql08.scala:17)\n\tat Problem.main(tmp1o0hql08.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val input = s.split(\",\")\n        val\
    \ output = ListBuffer[String]()\n        for (w <- input) {\n            output.append(w.split(\"\
    \ \").map(_.trim).toList)\n        }\n        return output.toList\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is\
    \ John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n\
    \    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpeyn6pjlb.scala:15:19 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            output.append(w.split(\e[31m\" \"\e[0m).map(_.trim).toList)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35mappend\e[0m in \e[33mtrait\e\
    [0m \e[35mBuffer\e[0m with types\n\e[31m   |\e[0m (elems: String*): (output :\
    \ scala.collection.mutable.ListBuffer[String])\n\e[31m   |\e[0m (elem: String):\
    \ (output : scala.collection.mutable.ListBuffer[String])\n\e[31m   |\e[0mmatch\
    \ arguments ((scala.collection.mutable.ArraySeq.ofRef[String]#toList : => List[String]))\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013400
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = s.split(\", \")\n        val\
    \ result = new collection.mutable.ArrayBuffer[String]\n        for (i <- list.length-1;\
    \ i>= 0) {\n            val word = list(i)\n            result.append(word)\n\
    \        }\n        val result = new collection.mutable.ArrayBuffer[String]\n\
    \        for (i <- list.head.length-1; i>= 0) {\n            val word = list.head(i)\n\
    \            result.append(word)\n        }\n        return result.toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp67nect78.scala:14:38 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (i <- list.length-\e[31m1\e[0m;\
    \ i>= \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                                 \
    \     ^\e[0m\n\e[31m   |\e[0m                                      '<-' expected,\
    \ but ')' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp67nect78.scala:19:43\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mfor\e[0m\
    \ (i <- list.head.length-\e[31m1\e[0m; i>= \e[31m0\e[0m) {\n\e[31m\e[31m   |\e\
    [0m                                           ^\e[0m\n\e[31m   |\e[0m        \
    \                                   '<-' expected, but ')' found\n\e[31m\e[31m--\
    \ [E161] Naming Error: /tmp/tmp67nect78.scala:18:12 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m collection.mutable.ArrayBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mresult is already defined as \e[33mvalue\e[0m \e[35mresult\e[0m\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp67nect78.scala:14:18 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mfor\e[0m (i <- list.length-\e[31m1\e[0m; i>= \e[31m0\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \               value foreach is not a member of Int\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmp67nect78.scala:19:18 ------------------------\e[0m\e[0m\n\
    \e[31m19 |\e[0m        \e[33mfor\e[0m (i <- list.head.length-\e[31m1\e[0m; i>=\
    \ \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value foreach is not a member of Int\n5\
    \ errors found\n"
  stdout: ''
  timestamp: 1660013404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var ret: List[String] = Nil\n        val\
    \ tmp = s.split(\",\")\n        for (a <- tmp) {\n            var b: List[String]\
    \ = Nil\n            if (a != \"\") {\n                b = a.split(\" \")\n  \
    \          }\n            if (b.length != 0) {\n                ret :+= b\n  \
    \          }\n        }\n        return ret\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6vbbai7f.scala:17:27\
    \ --------------------\e[0m\e[0m\n\e[31m17 |\e[0m                b = a.split(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m\
    \   |\e[0m                    Required: \e[1m\e[32mList\e[0m[String]\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6vbbai7f.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                ret :+= b\n\e[31m\e[31m   |\e[0m    \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue :+= is not a member of List[String]\
    \ - did you mean List[String].:+?\n2 errors found\n"
  stdout: ''
  timestamp: 1660013403
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Implement here\n        s.split(\"\
    ,\").toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpsmmt1fyy.scala:16)\n\tat Problem.main(tmpsmmt1fyy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.trim().split(\",\")\n  \
    \      if(words.size < 2) {\n            return List()\n        }\n        val\
    \ first = words.head\n        val last = words.last\n        var list = List[String]()\n\
    \        if(first != last) {\n            list = words :: list\n        }\n  \
    \      list\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpapphnh6j.scala:20:19\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m            list = words :: list\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^\e[0m\n\e[31m   |\e[0m          \
    \         Found:    (words : Array[String])\n\e[31m   |\e[0m                 \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Write your code here\n        val l\
    \ = s.split(\" \").toList\n        l.filter(_ != \"\")\n        val a = l.map(_.replaceAll(\"\
    ,\", \"\").toLowerCase).toList\n        val b = l.filter(_ != \"\")\n        b.filter(!_.equals(\"\
    ,\"))\n        b.filter(_ != \" \")\n        b.filter(_ != \",\")\n        b\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6bhhlbra.scala:23)\n\tat Problem.main(tmp6bhhlbra.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val r = new scala.util.matching.Regex(\"\
    \"\"((\\w+)\\s+(\\w+)\\s+(\\w+)\\s+(\\w+)\\s+(\\w+))|(\\w+),\"\"\".r)\n      \
    \  val r2 = new scala.util.matching.Regex(\"\"\"((\\w+)\\s+(\\w+)\\s+(\\w+)\\\
    s+(\\w+)\\s+(\\w+))\"\"\".r)\n        val r3 = new scala.util.matching.Regex(\"\
    \"\"((\\w+)\\s+(\\w+))\"\"\".r)\n        val result = new mutable.ArrayList[String]()\n\
    \        r.findAllIn(s).foreach(x => {\n            val y = x.group(5)\n     \
    \       if (y == null) result.add(r2.findAllIn(x).toList)\n            else result.add(r3.findAllIn(x).toList)\n\
    \        })\n        result\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd9vdos_y.scala:12:99\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mr\e\
    [0m = \e[33mnew\e[0m scala.util.matching.Regex(\e[31m\"\"\"((\\w+)\\s+(\\w+)\\\
    s+(\\w+)\\s+(\\w+)\\s+(\\w+))|(\\w+),\"\"\"\e[0m.r)\n\e[31m\e[31m   |\e[0m   \
    \                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    scala.util.matching.Regex\n\
    \e[31m   |\e[0m                                     Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd9vdos_y.scala:13:93 --------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mr2\e[0m = \e[33mnew\e[0m\
    \ scala.util.matching.Regex(\e[31m\"\"\"((\\w+)\\s+(\\w+)\\s+(\\w+)\\s+(\\w+)\\\
    s+(\\w+))\"\"\"\e[0m.r)\n\e[31m\e[31m   |\e[0m                               \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                     Found:    scala.util.matching.Regex\n\
    \e[31m   |\e[0m                                     Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpd9vdos_y.scala:14:69 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mr3\e[0m = \e[33mnew\e[0m\
    \ scala.util.matching.Regex(\e[31m\"\"\"((\\w+)\\s+(\\w+))\"\"\"\e[0m.r)\n\e[31m\e\
    [31m   |\e[0m                                               ^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     Found:    scala.util.matching.Regex\n\
    \e[31m   |\e[0m                                     Required: String\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd9vdos_y.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ArrayList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m         "
  stdout: ''
  timestamp: 1660013405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        s.split(\"\\\\s*,\\\\s*\").toList\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk4qe2cyg.scala:15)\n\tat Problem.main(tmpk4qe2cyg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013405
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Your code goes here\n        return\
    \ null\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NullPointerException: Cannot invoke \"scala.collection.immutable.List.equals(Object)\"\
    \ because the return value of \"Problem$.wordsString(String)\" is null\n\tat Problem$.main(tmpn15utl4w.scala:16)\n\
    \tat Problem.main(tmpn15utl4w.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013405
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \", -1).filter(_.nonEmpty)\n\
    \        if (words.isEmpty) List(\"\")\n        else words.map(_.trim.toLowerCase\
    \ + \",\")\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa5j930g5.scala:14:13\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m words.map(_.trim.toLowerCase\
    \ + \e[31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m\
    \   |\e[0m             Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n      val (s1,s2) = s.split(\" \\\\,\\\\s*\")\n\
    \      s1.split(\" \").map(_.toLowerCase).toList ++ s2.split(\" \").map(_.toLowerCase).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzsmyeox1.scala:13:9 -------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      s1.split(\e[31m\" \"\e[0m).map(_.toLowerCase).toList\
    \ ++ s2.split(\e[31m\" \"\e[0m).map(_.toLowerCase).toList\n\e[31m\e[31m   |\e\
    [0m      ^^^^^^^^\e[0m\n\e[31m   |\e[0m      value split is not a member of Any\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013405
- exit_code: -1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var lst : List[String] = List()\n    \
    \    var words = s.split(\"[\\\\s,]+\").filter(!_.isEmpty)\n        words = words.dropWhile(_.isEmpty)\n\
    \        while (words.length > 0){\n            lst = lst :+ words.last\n    \
    \        words = words.drop(words.length-1)\n        }\n        return lst\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660013410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def wordsString(s : String) : List[String]\
    \ = {\n            var ls = \"\"\n            for (i <- 0 to (s.length - 1)) {\n\
    \                if (s.charAt(i) == ',' || s.charAt(i) == ' ') {\n           \
    \         ls = ls + s.charAt(i)\n                }\n            }\n          \
    \  ls.replace(\",\", \"\").replace(\",\", \"\").split(\" \")\n        }\n    \
    \    val list = wordsString(s)\n        list.sortWith((a,b) => a.compareTo(b)\
    \ == 0)\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpiszhbjh0.scala:19:54\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m            ls.replace(\e[31m\"\
    ,\"\e[0m, \e[31m\"\"\e[0m).replace(\e[31m\",\"\e[0m, \e[31m\"\"\e[0m).split(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m\
    \   |\e[0m            Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013406
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"\"\"[, ]+\"\"\"\
    )\n        words.toList.filterNot(_.isEmpty)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\").toList\n  \
    \      val wordsArray = words.toArray\n        var wordsArraySorted = wordsArray\n\
    \        var wordsArraySortedLength = wordsArray.length\n        while(wordsArraySortedLength\
    \ > 1) {\n            wordsArraySorted = wordsArray.sortBy(_)\n            wordsArraySortedLength\
    \ = wordsArraySorted.length\n        }\n        wordsArraySorted\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplzs51ur3.scala:17:51 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            wordsArraySorted = wordsArray.sortBy(_)\n\
    \e[31m\e[31m   |\e[0m                                                   ^\e[0m\n\
    \e[31m   |\e[0mNo implicit Ordering defined for Any..\n\e[31m   |\e[0mI found:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m    scala.math.Ordering.ordered[\e[35mAny\e[0m](\n\
    \e[31m   |\e[0m      /* missing */summon[scala.math.Ordering.AsComparable[Any]]\n\
    \e[31m   |\e[0m    )\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values were\
    \ found that match type scala.math.Ordering.AsComparable[Any].\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplzs51ur3.scala:20:8 ---------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        wordsArraySorted\n\e[31m\e[31m   |\e[0m     \
    \   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (wordsArraySorted\
    \ : Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013407
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Your code goes here!\n        val list\
    \ = s.split(\" \").filter(x => !x.isEmpty).map(x => x.trim())\n        list.sortWith((a,\
    \ b) => a.length < b.length)\n        list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphrkud26k.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        list\n\e[31m\e[31m \
    \  |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    (list : Array[String])\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013406
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = new mutable.ListBuffer[String]\n\
    \        for(i <- 0 until s.length){\n            if(s.charAt(i) != ',' && s.charAt(i)\
    \ != ' ')\n                list += s.charAt(i)\n        }\n        list.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvo96kni2.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013404
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = s.split(\",\")\n        var\
    \ i = 0\n        val ans = List[String]()\n        while (i < list.length) {\n\
    \            ans ::: if (list(i).isEmpty) Nil else list(i).split(\", \")\n   \
    \         i += 1\n        }\n        ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzuegx711.scala:16:20 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            ans ::: \e[33mif\e[0m (list(i).isEmpty) Nil\
    \ \e[33melse\e[0m list(i).split(\e[31m\", \"\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \                ^^\e[0m\n\e[31m   |\e[0m                    expression expected\
    \ but \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013404
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        s.split(\",\").toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbqaosd78.scala:15)\n\tat Problem.main(tmpbqaosd78.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var strs = s.split(\",\")\n        var\
    \ words = new mutable.ListBuffer[String]\n        for (x <- strs){\n         \
    \   var parts = x.split(\", \")\n            val words = parts.toList\n      \
    \      for (y <- words){\n                words += y\n            }\n        }\n\
    \        return words.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4zbqjvi3.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mwords\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4zbqjvi3.scala:18:22\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                words +=\
    \ y\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \  value += is not a member of List[String] - did you mean words.!=?\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013410
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Split on space, then split on comma\n\
    \        s.split(\"\\\\s+\").map(_.split(\"\\\\s*,\\\\s*\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpi194d7b5.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        s.split(\e[31m\"\\\\\
    s+\"\e[0m).map(_.split(\e[31m\"\\\\s*,\\\\s*\"\e[0m))\n\e[31m\e[31m   |\e[0m \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \  Found:    Array[Array[String]]\n\e[31m   |\e[0m        Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013409
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val splits = s.split(\",\")\n        var\
    \ i = 0\n        val words = new collection.mutable.ListBuffer[String]\n     \
    \   while(i < splits.length){\n            val split = splits(i)\n           \
    \ if(split.isEmpty) break\n            words.append(split)\n            i += 1\n\
    \        }\n        words.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvo8bd6u5.scala:17:30 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(split.isEmpty) break\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                       Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013408
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        s.replace(\",\",\" \").split(\" \").toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfjpf2so8.scala:15)\n\tat Problem.main(tmpfjpf2so8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013412
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Complete the implementation here.\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpru5ca12g.scala:11:49\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mwordsString\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    Unit\n\
    \e[31m   |\e[0m                                                 Required: List[String]\n\
    \e[31m12 |\e[0m        \e[34m// Complete the implementation here.\e[0m\n\e[31m13\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", | \")\n      \
    \  val list = mutable.ListBuffer[String]()\n        words.foreach(x => list +=\
    \ x.trim())\n        list.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp853e3b0e.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013411
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" |,\")\n       \
    \ words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgoykm7lh.scala:16)\n\tat Problem.main(tmpgoykm7lh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").toList\n  \
    \      var list: List[String] = Nil\n        for (word <- words)\n        {\n\
    \            if (list.isEmpty)\n            {\n                list = List(word)\n\
    \            }\n            else\n            {\n                list = list.reverse::List(word)\n\
    \            }\n        }\n        list.tail\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph_vwmxq9.scala:22:28\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                list = list.reverse::List(word)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                       Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m                       Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val split = s.split(\", | \")\n      \
    \  split.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4_7q8_9f.scala:19)\n\tat Problem.main(tmp4_7q8_9f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        if (s.isEmpty)\n            Nil\n    \
    \    else s.split(',').toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8s79liss.scala:17)\n\tat Problem.main(tmp8s79liss.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013416
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val ws = scala.collection.mutable.ArrayBuffer.empty[String]\n\
    \        var word = \"\"\n        for (c <- s) {\n            if (c.isLetter)\
    \ {\n                word += c\n            }\n            else if (word.length\
    \ > 0) {\n                ws += word\n                word = \"\"\n          \
    \  }\n        }\n        if (word.length > 0) {\n            ws += word\n    \
    \    }\n        ws.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013417
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def splitString(s: String) : List[String]\
    \ = {\n            val words = s.split(\",\")\n            words.tail.map(_.trim).toList\n\
    \        }\n        if (s == \"\")\n            Nil\n        else\n          \
    \  splitString(s).toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp2qznrmxi.scala:22)\n\tat Problem.main(tmp2qznrmxi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013417
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Your code here\n        val words =\
    \ s.split( \",\" ).toList\n        val words2 = words.filter( _.length() != 0\
    \ )\n        val words3 = words2.map(_.split(\" \" ))\n        words3\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprf154djm.scala:16:8\
    \ ---------------------\e[0m\e[0m\n\e[31m16 |\e[0m        words3\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mwords3\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mList[\e\
    [1m\e[31mArray\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m]\e[1m\e[31m)\e[0m\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var res : List[String] = Nil\n       \
    \ var splitted = s.split(\",\")\n        for(i <- 0 until splitted.length) {\n\
    \            res = res :+ splitted[i]\n        }\n        return res\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps2xo3nmp.scala:15:34 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            res = res :+ splitted[\e[35mi\e[0m]\n\e[31m\e\
    [31m   |\e[0m                                  ^\e[0m\n\e[31m   |\e[0m       \
    \                           Not found: type i\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.trim.replace(\",\", \" \"\
    ).split(\" \").toList\n        words.filter(_.nonEmpty)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660013416
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = mutable.ArrayBuffer.empty[String]\n\
    \        for(i <- 0 to s.length - 1 by 1) {\n            val next = s.substring(i)\n\
    \            list.append (next)\n        }\n        list.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph5laixr5.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words: List[String] = s.split(\" +\"\
    )\n        words\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpegl845ur.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\" +\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                  Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013415
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val ws = s.split(\",\").toList\n     \
    \   val words = mutable.Buffer.empty[String]\n        for (h <- 0 until w.size)\
    \ {\n            for (w <- ws)\n                if (w.contains(ws(h))) {\n   \
    \                 words += w\n                }\n        }\n        words.size.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphj8ohq5k.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = mutable.Buffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphj8ohq5k.scala:14:26 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m (h <- \e[31m0\e[0m until w.size)\
    \ {\n\e[31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m  \
    \                        Not found: w\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013413
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", | | \").toList\n\
    \        val wordsString: List[String] = words.map( _.trim )\n        return wordsString\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbpklcap7.scala:20)\n\tat Problem.main(tmpbpklcap7.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013418
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = new mutable.ListBuffer[String]()\n\
    \        // Split string on space or comma to get the individual words.\n    \
    \    s.split(\"[\\\\s,]+\").foreach(list+=_)\n        list.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is\
    \ John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n\
    \    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxorkr27j.scala:12:23 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m           \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013414
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.toLowerCase split \",\"\n\
    \        words.toList filter (_.length > 0)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp3cvy6xi.scala:16)\n\tat Problem.main(tmpp3cvy6xi.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val split = s.split(\"\\\\s*,\\\\s*\"\
    )\n        split.map (_.trim.split(\" \")).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcklmbn07.scala:13:38\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        split.map (_.trim.split(\e\
    [31m\" \"\e[0m)).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mArray\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m]\n\e[31m   |\e[0m        Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013419
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var wlst : List[String] = Nil\n      \
    \  for(i <- 0 until s.length-1) {\n            if(s.charAt(i) == ','){\n     \
    \           wlst = wlst.::(s.substring(0,i))\n            }\n        }\n     \
    \   if(s.length == 0)\n            wlst = Nil\n        wlst\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1myubtye.scala:23)\n\tat Problem.main(tmp1myubtye.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var strings = List.empty[String]\n   \
    \     strings.toList match {\n            case Nil => strings.toList\n       \
    \     case x => strings.toList + x\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb00v20ve.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x => strings.toList + x\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of List[String], but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660013421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = s.split(\"\\\\W+\")\n     \
    \   list.filter(_.nonEmpty)\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9tz12rqg.scala:13:19\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        list.filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \     Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val tokens = s.split(\",\")\n        val\
    \ newTokens = tokens.map( _.trim() )\n        var list: List[String] = Nil\n \
    \       val newTokensLength = newTokens.size\n        newTokens.foreach{item =>\n\
    \          list = list :+ item\n        }\n        if (newTokensLength == list.length)\n\
    \          list\n        else\n          println(s\"Invalid input: ${list.size}\
    \ != ${newTokensLength}\")\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\", \"\
    my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two, three,\
    \ four, five, six\")).equals((List[String](\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpl3zkmn5x.scala:22:17\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m          println(\e[31ms\"Invalid\
    \ input: \e[0m${list.size}\e[31m != \e[0m${newTokensLength}\e[31m\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Found:    Unit\n\e[31m   |\e[0m          Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013421
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        if (s.length == 0)\n            Nil\n\
    \        else\n        { \n            val splits = s.split(\" \")\n         \
    \   val words = splits.map(s => s.trim)\n            if (words.isEmpty)\n    \
    \            Nil\n            else\n            { \n                words.head\
    \ :: wordsString(words.tail)\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptfctzija.scala:22:48\
    \ --------------------\e[0m\e[0m\n\e[31m22 |\e[0m                words.head ::\
    \ wordsString(words.tail)\n\e[31m\e[31m   |\e[0m                             \
    \             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \           Found:    \e[1m\e[31mArray\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e\
    [0m\n\e[31m   |\e[0m                                          Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013421
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\")\n        words.toList\
    \ match {\n            case Nil => Nil\n            case _ => words.toList.flatMap(word\
    \ => List(word.trim))\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7wkbfyjg.scala:19)\n\tat Problem.main(tmp7wkbfyjg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val sSplit = s.split(\"\"\"[\\s,]+\"\"\
    \")\n        var res: List[String] = List()\n        for (i <- 0 until sSplit.size)\
    \ {\n            val words = sSplit.get(i).split(\"\"\"[\\\\s,]+\"\"\")\n    \
    \        val resList = words.foldLeft[List[String]](List(\"\")){ (resList, word)\
    \ =>\n                if (word != \"\") {\n                    word :: resList\n\
    \                } else {\n                    resList\n                }\n  \
    \          }\n            res = res ++ resList\n        }\n        return res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsyx3m7_9.scala:15:31 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mwords\e[0m = sSplit.get(i).split(\e\
    [31m\"\"\"[\\\\s,]+\"\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                       \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value get is not a member\
    \ of Array[String]\n1 error found\n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val splitedString = s.split(\", \")\n\
    \        val splitedWords = splitedString.map(_.split(\" \"))\n        val listOfWords\
    \ = splitedWords.map(word => word.mkString.trim).toList\n        return listOfWords\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptz3pyy31.scala:18)\n\tat Problem.main(tmptz3pyy31.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def getWords(s : String) : List[String]\
    \ = { \n            if (s.isEmpty) Nil\n            else (s split (\" \")).filter(_.nonEmpty).toList\n\
    \        }\n        val wordList : List[String] = getWords(s)\n        var lastString\
    \ : String = \"\"\n        wordList.foreach {\n            case word : String\
    \ => lastString = word\n            case word : List[String] => {\n          \
    \      val newWords : List[String] = word map { word =>\n                    if\
    \ (lastString.length > 0) s\"$lastString,$word\" else word\n                }\n\
    \                lastString = \"\"\n                newWords.foreach(lastString\
    \ += _)\n            }\n        }\n        lastString\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5ib1uxb8.scala:28:8\
    \ ---------------------\e[0m\e[0m\n\e[31m28 |\e[0m        lastString\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (lastString\
    \ : String)\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = new mutable.ListBuffer[String]()\n\
    \        val words = s.split(\",\")\n        for (w <- words) words += w.trim\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp1bn61qdo.scala:13:12 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m = s.split(\e\
    [31m\",\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mwords is already defined as \e[33mvalue\e[0m \e[35mwords\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp1bn61qdo.scala:12:24 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mwords\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013420
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var words = s.split(\" +\");\n       \
    \ var res = [];\n        for (i <- 0 until words.length)\n            res ::=\
    \ words(i);\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpojf1jeas.scala:13:19 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mres\e[0m = [];\n\e[31m\e\
    [31m   |\e[0m                   ^\e[0m\n\e[31m   |\e[0m                   an identifier\
    \ expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpojf1jeas.scala:13:20\
    \ ---------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mres\e[0m = [];\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m\
    \   |\e[0m                    '=>' expected, but ';' found\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpojf1jeas.scala:15:16 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            res ::= words(i);\n\e[31m\e[31m   |\e[0m     \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m            value ::= is not a member of\
    \ Null\n3 errors found\n"
  stdout: ''
  timestamp: 1660013424
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list: List[String] = s.split(/,| /)\n\
    \        return list\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpamy1r8tv.scala:12:46 ---------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(/,| /)\n\e[31m\e[31m   |\e[0m               \
    \                               ^\e[0m\n\e[31m   |\e[0m                      \
    \                 expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpamy1r8tv.scala:12:41 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = s.split(/,| /)\n\e[31m\e[31m   |\e[0m               \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \              Not found: /\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpamy1r8tv.scala:12:43 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m        \e[33mval\e[0m \e[36mlist\e[0m: \e[35mList\e[0m[\e[35mString\e[0m]\
    \ = s.split(/,| /)\n\e[31m\e[31m   |\e[0m                                    \
    \       ^\e[0m\n\e[31m   |\e[0m                                           Not\
    \ found: |\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660013421
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = s.replaceAll(\",\", \"\").replaceAll(\"\
    \\\\s+\", \" \")\n        return list.split(\",\").toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_ph00o07.scala:16)\n\tat Problem.main(tmp_ph00o07.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def isNotEmpty(str : String) : Boolean\
    \ = str.length > 0\n        def splitter(str : String) : List[String] = {\n  \
    \          def splitter(str : String) : List[String] = {\n                val\
    \ str1 = str.trim\n                if (str1.length == 0) List(\"Empty\")\n   \
    \             else {\n                    var str2 = str1.substring(0, str1.length\
    \ - 1)\n                    if (str2.startsWith(\",\")) str2.split(\",\").map(splitter)\n\
    \                    else if (str2.startsWith(\" \")) str2.split(\" \").map(splitter)\n\
    \                    else List(str2)\n                }\n            }\n     \
    \       splitter(str)\n        }\n        splitter(s).filter(isNotEmpty).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphgfcp1fu.scala:19:46\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m                    \e[33mif\e\
    [0m (str2.startsWith(\e[31m\",\"\e[0m)) str2.split(\e[31m\",\"\e[0m).map(splitter)\n\
    \e[31m\e[31m   |\e[0m                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Found:    \e[1m\e\
    [31mArray\e[0m\e[1m\e[31m[\e[0mList[String\e[1m\e[31m]\e[0m]\n\e[31m   |\e[0m\
    \                                           Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphgfcp1fu.scala:20:51 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                    \e[33melse\e[0m \e[33mif\e[0m (str2.startsWith(\e\
    [31m\" \"\e[0m)) str2.split(\e[31m\" \"\e[0m).map(splitter)\n\e[31m\e[31m   |\e\
    [0m                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Found:    \e[1m\e\
    [31mArray\e[0m\e[1m\e[31m[\e[0mList[String\e[1m\e[31m]\e[0m]\n\e[31m   |\e[0m\
    \                                           Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660013427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprm69_9lm.scala:11:49\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mwordsString\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    Unit\n\
    \e[31m   |\e[0m                                                 Required: List[String]\n\
    \e[31m12 |\e[0m        \e[34m// Your code here\e[0m\n\e[31m13 |\e[0m    }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def wordList(n:Int) : List[String] = {\n\
    \            var l : List[String] = List()\n            for (i<-0 until n) {\n\
    \                l ::= s(i).split(\", \")\n            }\n            l\n    \
    \    }\n        wordList(s.length)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpo2nzapxt.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                l ::= s(i).split(\e[31m\", \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not\
    \ a member of List[String] - did you mean List[String].::?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpo2nzapxt.scala:15:27 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m                l ::= s(i).split(\e[31m\", \"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \            value split is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660013427
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n    \tvar str = s.replace(\",\",\" \")\n    \t\
    var list = str.split(\" \")\n    \tlist.map(_.trim).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpebgis083.scala:17)\n\tat Problem.main(tmpebgis083.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val word = s.split(\", \") \n        word.map(_.trim).filter(_.nonEmpty)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1iitcb9x.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        word.map(_.trim).filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m   \
    \     Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013428
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var words: List[String] = List()\n   \
    \     var word = \"\"\n        var inComma = false\n        for (c <- s) {\n \
    \           if (c == ',' && !inComma) {\n                words += word\n     \
    \           word = \"\"\n                inComma = false\n            } else {\n\
    \                word += c\n            }\n        }\n        words += word\n\
    \        words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpljyb81h7.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                words += word\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of List[String]\
    \ - did you mean List[String].!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpljyb81h7.scala:24:14\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        words += word\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member\
    \ of List[String] - did you mean List[String].!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660013429
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").toList\n  \
    \      val wordsList = words.toIndexedSeq.sortBy(word => word.length).reverse\n\
    \        wordsList.map((word, index) => word.length -> word).toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is\
    \ John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n\
    \    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpwnanab5i.scala:14:36 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        wordsList.map((\e[36mword\e[0m, \e[36mindex\e\
    [0m) => word.length -> word).toList\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \       Wrong number of parameters, expected: 1\n1 error found\n"
  stdout: ''
  timestamp: 1660013425
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = s.split(\",\")\n        return\
    \ list.map(_.trim).toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpbm7cxj6j.scala:16)\n\tat Problem.main(tmpbm7cxj6j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013432
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        s.split(\"\\\\s*,\\\\s*\".r).map(_.trim).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpko6wbh14.scala:12:28\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        s.split(\e[31m\"\\\\\
    s*,\\\\s*\"\e[0m.r).map(_.trim).toList\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    scala.util.matching.Regex\n\e[31m\
    \   |\e[0m                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Your code here!\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmphl9he6tq.scala:11:49\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mwordsString\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    Unit\n\
    \e[31m   |\e[0m                                                 Required: List[String]\n\
    \e[31m12 |\e[0m        \e[34m// Your code here!\e[0m\n\e[31m13 |\e[0m    }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013430
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val w = s.split(\"[,\\s]+\").filter(_.nonEmpty).toList\n\
    \        val v0 = mutable.HashMap[String, String]()\n        w.map(word => v0\
    \ += word -> word)\n        return v0.toList.distinct\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcajvmuqw.scala:12:28 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mw\e[0m = s.split(\e[31m\"\
    [,\\s]+\"\e[0m).filter(_.nonEmpty).toList\n\e[31m\e[31m   |\e[0m             \
    \               ^\e[0m\n\e[31m   |\e[0m                            invalid escape\
    \ character\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcajvmuqw.scala:13:17\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mv0\e[0m = mutable.HashMap[\e[35mString\e[0m, \e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                 Not\
    \ found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013429
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.replaceAll(\",\", \" \"\
    ).trim().split(\"\\\\s+\")\n        val wordList = words.map(_.toLowerCase).toList\n\
    \        wordList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1ek7qmnx.scala:17)\n\tat Problem.main(tmp1ek7qmnx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Your code goes here\n        val list\
    \ = s.split(\",\")\n        list.map{\n            s => s.trim\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcasfj7gt.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        list.map{\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e\
    [31m15 |\e[0m            \e[36ms\e[0m => s.trim\n\e[31m16 |\e[0m        }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013431
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var lst = s.split(\",\")\n        lst\
    \ = lst.map(_.trim).filter(_.length > 0)\n        lst\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpo4gl5tnj.scala:14:8\
    \ ---------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst\n\e[31m\e[31m  \
    \ |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Found:    (lst : Array[String])\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013433
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val strings = s.split(\"\"\"\\s*,\\s*|\\\
    s+\"\"\")\n        strings.map(word => word.replaceAll(\"[^\\\\w]\", \"\").toLowerCase)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ktbc7df.scala:13:8\
    \ ---------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strings.map(\e[36mword\e\
    [0m => word.replaceAll(\e[31m\"[^\\\\w]\"\e[0m, \e[31m\"\"\e[0m).toLowerCase)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013432
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var result : List[String] = Nil\n    \
    \    var tmp : List[String] = Nil\n        s.split(',').foreach(x => {\n     \
    \       tmp ::= x.trim\n        })\n        tmp.foreach(x => {\n            result\
    \ ::= x.toUpperCase\n        })\n        result.reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpuw0ej65q.scala:23)\n\tat Problem.main(tmpuw0ej65q.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013435
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def words(s: String) : List[String] =\
    \ {\n            val split = s.split(\", | \\\\s+\")\n            split.filter(_.nonEmpty).map(_.trim.toLowerCase).toList\n\
    \        }\n        words(s)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp56e88cwc.scala:19)\n\tat Problem.main(tmp56e88cwc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def isWhitespace(i: Int) : Boolean = i\
    \ >= s.length or s(i) == '\\n' || s(i) == ' '\n        def getWords(s : String,\
    \ words: List[String], word = \"\", i : Int = 0, j : Int = s.length) : List[String]\
    \ = {\n            if (j < 0) word\n            else if (isWhitespace(i)) getWords(s,\
    \ words, word, i, j)\n            else if (s(i) == ',' || s(i) == ' ') getWords(s,\
    \ words, word, i, j)\n            else words match {\n                case Nil\
    \ => Nil\n                case ws :: wss => getWords(s, wss, w :: w, i + 1, j\
    \ - 1)\n            }\n        }\n        getWords(s, Nil)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmphxfym5my.scala:13:59 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mdef\e[0m \e[36mgetWords\e[0m(\e[36ms\e\
    [0m : \e[35mString\e[0m, \e[36mwords\e[0m: \e[35mList\e[0m[\e[35mString\e[0m],\
    \ \e[36mword\e[0m = \e[31m\"\"\e[0m, \e[36mi\e[0m : \e[35mInt\e[0m = \e[31m0\e\
    [0m, \e[36mj\e[0m : \e[35mInt\e[0m = s.length) : \e[35mList\e[0m[\e[35mString\e\
    [0m] = {\n\e[31m\e[31m   |\e[0m                                              \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \     ':' expected, but '=' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphxfym5my.scala:12:59\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mdef\e[0m \e\
    [36misWhitespace\e[0m(\e[36mi\e[0m: \e[35mInt\e[0m) : \e[35mBoolean\e[0m = i >=\
    \ s.length or s(i) == \e[31m'\\n'\e[0m || s(i) == \e[31m' '\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                             ^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                     value or is not a member of\
    \ Boolean\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphxfym5my.scala:19:56\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mcase\e\
    [0m ws :: wss => getWords(s, wss, w :: w, i + \e[31m1\e[0m, j - \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        ^\e\
    [0m\n\e[31m   |\e[0m                                                        Not\
    \ found: w\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmphxfym5my.scala:22:16\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \ getWords(s, Nil)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        missing argument for parameter word of \e[33mmethod\e[0m \e\
    [35mgetWords\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1660013434
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprm69_9lm.scala:11:49\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mwordsString\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    Unit\n\
    \e[31m   |\e[0m                                                 Required: List[String]\n\
    \e[31m12 |\e[0m        \e[34m// Your code here\e[0m\n\e[31m13 |\e[0m    }\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013427
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def wordList(s: String) : List[String]\
    \ = if(s.contains(\",\")) s.split(\",\") else s.split(\" \")\n        val list\
    \ = wordList(s)\n        list.map(_.trim)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsrz52xxg.scala:12:76\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mdef\e[0m \e[36mwordList\e\
    [0m(\e[36ms\e[0m: \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = \e\
    [33mif\e[0m(s.contains(\e[31m\",\"\e[0m)) s.split(\e[31m\",\"\e[0m) \e[33melse\e\
    [0m s.split(\e[31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m                         \
    \                                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                 Found:    \e[1m\e[31mArray\e\
    [0m[String]\n\e[31m   |\e[0m                                                 Required:\
    \ \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpsrz52xxg.scala:12:94 --------------------\e[0m\e[0m\n\e[31m12\
    \ |\e[0m        \e[33mdef\e[0m \e[36mwordList\e[0m(\e[36ms\e[0m: \e[35mString\e\
    [0m) : \e[35mList\e[0m[\e[35mString\e[0m] = \e[33mif\e[0m(s.contains(\e[31m\"\
    ,\"\e[0m)) s.split(\e[31m\",\"\e[0m) \e[33melse\e[0m s.split(\e[31m\" \"\e[0m)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                               ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \                                      Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                                 Required: \e[1m\e\
    [32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013435
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\" \").filter(_.nonEmpty)\n\
    \        words.reverse\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy7ie3i13.scala:13:14\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        words.reverse\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e\
    [31mArray\e[0m[String]\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013436
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val split = s.split(\",\")\n        var\
    \ words1 = split.map(_.trim).toSet\n        var words2 = split.filter(_.isEmpty).map(_.trim).toSet\n\
    \        val words3 = split.filter(_.isEmpty).map(_.trim).toSet\n        val words4\
    \ = (split.map {\n            x => if (x.trim.isEmpty) x else x.trim\n       \
    \ }).toSet\n        var words5 = split.map(_.trim).toSet\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\"\"))\n        if (words2.contains(\"\
    \")) words2 = words2.filter(x => !x.equals(\"\"))\n        if (words4.contains(\"\
    \")) words4 = words4.filter(x => !x.equals(\"\"))\n        if (words5.contains(\"\
    \")) words5 = words5.filter(x => !x.equals(\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpsueo3xkn.scala:43:71 ---------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mif\e[0m (words5.contains(\e[31m\"\"\e[0m))\
    \ words5 = words5.filter(\e[36mx\e[0m => !x.equals(\n\e[31m\e[31m   |\e[0m   \
    \                                                                    ^\e[0m\n\e\
    [31m   |\e[0m                                       expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsueo3xkn.scala:21:40\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m\
    \ (words4.contains(\e[31m\"\"\e[0m)) words4 = words4.filter(\e[36mx\e[0m => !x.equals(\e\
    [31m\"\"\e[0m))\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Reassignment to val words4\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsueo3xkn.scala:24:40 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mif\e[0m (words4.contains(\e[31m\"\"\e[0m))\
    \ words4 = words4.filter(\e[36mx\e[0m => !x.equals(\e[31m\"\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Reassignment to val words4\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsueo3xkn.scala:27:40 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m (words4.contains(\e[31m\"\"\e[0m))\
    \ words4 = words4.filter(\e[36mx\e[0m => !x.equals(\e[31m\"\"\e[0m))\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Reassignment to val words4\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmpsueo3xkn.scala:30:40 -----------------------------\e\
    [0m\e[0m\n\e[31m30 |\e["
  stdout: ''
  timestamp: 1660013434
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Complete the code here\n        s.split(\"\
    \ \").filter(!_.isEmpty).toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm6tu_atf.scala:16)\n\tat Problem.main(tmpm6tu_atf.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013438
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val wordsSplit = s.split(\",\")\n    \
    \    val wordsStrings: List[String] = wordsSplit.map(_.trim).toList\n        wordsStrings.toList.sorted\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhf9me68.scala:17)\n\tat Problem.main(tmpnhf9me68.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        def wordsString(s : String) : List[String]\
    \ = {\n            var words: List[String] = List()\n            \n          \
    \  var tempString = \"\"\n            \n            for(letter <- s) {\n     \
    \           if(letter == \",\" || letter == \" \") {\n                    if(tempString\
    \ != \"\") {\n                        words += tempString\n                  \
    \      tempString = \"\"\n                    }\n                } else {\n  \
    \                  tempString += letter\n                }\n            }\n  \
    \          if(tempString != \"\") {\n                words += tempString\n   \
    \         }\n            \n            return words\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpztwwudmx.scala:18:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m(letter == \e[31m\",\"\e\
    [0m || letter == \e[31m\" \"\e[0m) {\n\e[31m\e[31m   |\e[0m                  \
    \ ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpztwwudmx.scala:18:36\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m18 |\e[0m       \
    \         \e[33mif\e[0m(letter == \e[31m\",\"\e[0m || letter == \e[31m\" \"\e\
    [0m) {\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpztwwudmx.scala:20:30\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m                        words\
    \ += tempString\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpztwwudmx.scala:28:22 ------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                words += tempString\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of List[String]\
    \ - did you mean List[String].!=?\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmpztwwudmx.scala:33:5 ---------------------\e[0m\e[0m\n\e[31m33 |\e[0m\
    \    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\
    \e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660013440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Split string into a list of strings\
    \ using a delimiter (,, or space)\n        s.split(\",\").toList.map(_.trim).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxij68etu.scala:16)\n\tat Problem.main(tmpxij68etu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013440
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\"[, ]+\")\n     \
    \   val wordsRevised = words.map( w => w.replaceAll(\"[^a-zA-Z ]\", \"\") )\n\
    \        val filteredWords = wordsRevised.filterNot(_.isEmpty)\n        val wordsArray\
    \ = filteredWords.toArray\n        wordsArray.mkString(\", \")\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm9uahaqj.scala:16:27\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        wordsArray.mkString(\e\
    [31m\", \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required: \e[1m\e\
    [32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.trim.split(\"[, ]+\")\n\
    \        words.filter(!_.isEmpty)\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsg0n7517.scala:13:20\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        words.filter(!_.isEmpty)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \      Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013438
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words : List[String] = new mutable.ListBuffer[String]\n\
    \        var word = \"\"\n        var i = -1\n        while (i < s.length) {\n\
    \            if (s.charAt(i) == ' ') {\n                word += s.charAt(i+1)\n\
    \                words += word\n                word = \"\"\n                i\
    \ += 1\n            } else {\n                word += s.charAt(i)\n          \
    \      i += 1\n            }\n        }\n        words += word\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbh7vqyd6.scala:12:39 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwords\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbh7vqyd6.scala:18:22 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                words += word\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m       value += is not a member\
    \ of List[String] - did you mean words.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpbh7vqyd6.scala:26:14 ------------------------\e[0m\e[0m\n\e[31m26 |\e\
    [0m        words += word\n\e[31m\e[31m   |\e[0m        ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m       value += is not a member of List[String] - did you mean words.!=?\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660013440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n      val words = s.split(\"\"\"\\W+\"\"\")\n\
    \      words.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp62pcja5c.scala:20)\n\tat Problem.main(tmp62pcja5c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Return the empty list\n        if (s.isEmpty)\
    \ Nil\n        // Split the string into words\n        else s.toLowerCase().split(\"\
    , \") toList map (_.trim())\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp14qr_g0l.scala:15:48 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m s.toLowerCase().split(\e[31m\"\
    , \"\e[0m) toList map (_.trim())\n\e[31m\e[31m   |\e[0m                      \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                       Not found: map\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013437
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n       val words = s.split(\",\").toList\n   \
    \    val list: List[String] = words.map(x => x.split(\" \").mkString)\n      \
    \ return list\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp0e3vtkg.scala:17)\n\tat Problem.main(tmpp0e3vtkg.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = new Array[String](s.length)\n\
    \        var i = 0\n        while (i < s.length()) {\n            var j = i +\
    \ 1\n            while (j < s.length()) {\n                if (j != i + 1) {\n\
    \                    if (s.charAt(i) == ',' || s.charAt(i) == ' ') {\n       \
    \                 words(j - 2) = s.substring(i, j + 1)\n                     \
    \   i = j\n                        break\n                    }\n            \
    \    }\n                j += 1\n            }\n        }\n        words\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpsfivp5eh.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsfivp5eh.scala:27:8\
    \ ---------------------\e[0m\e[0m\n\e[31m27 |\e[0m        words\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (words : Array[String])\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660013441
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var result: List[String] = Nil\n     \
    \   var currentWord = \"\"\n        for (i <- 0 to s.length() - 1) {\n       \
    \     if (s(i) == \",\" || s(i) == \" \") {\n                currentWord += s(i)\n\
    \                result += currentWord.trim().split(\"\\\\s+\").filterNot(_.isEmpty).toList\n\
    \                currentWord = \"\"\n            }\n            else {\n     \
    \           currentWord += s(i)\n            }\n        }\n        result += currentWord.trim().split(\"\
    \\\\s+\").filterNot(_.isEmpty).toList\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpz8ko7w4x.scala:15:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (s(i) == \e[31m\",\"\e[0m ||\
    \ s(i) == \e[31m\" \"\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpz8ko7w4x.scala:15:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (s(i) == \e[31m\",\"\e[0m ||\
    \ s(i) == \e[31m\" \"\e[0m) {\n\e[31m\e[31m   |\e[0m                         \
    \      ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String\
    \ cannot be compared with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpz8ko7w4x.scala:17:23\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                result +=\
    \ currentWord.trim().split(\e[31m\"\\\\s+\"\e[0m).filterNot(_.isEmpty).toList\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is\
    \ not a member of List[String] - did you mean List[String].!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpz8ko7w4x.scala:24:15 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        result += currentWord.trim().split(\e[31m\"\\\
    \\s+\"\e[0m).filterNot(_.isEmpty).toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660013443
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.toLowerCase.split(\", \"\
    );\n        val arr = new mutable.ArrayList[String](words.length)\n        for(i<-\
    \ 0 until words.length){\n            arr(i) = words(i).toLowerCase;\n       \
    \ }\n        return arr;\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbrk5s99q.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36marr\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayList[\e[35mString\e[0m](words.length)\n\e[31m\e[31m   |\e[0m  \
    \                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013439
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = s.split(\",\")\n        list.map(_.trim).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp5ey_g2dq.scala:16)\n\tat Problem.main(tmp5ey_g2dq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013445
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var strs = s.split(\",\")\n        var\
    \ ans = mutable.ListBuffer[String]()\n        for( i <- 0 until strs.length )\
    \ {\n            ans += strs(i)\n        }\n        return ans.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcgm99x9c.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mans\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013440
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // TODO: Define wordsString function\n\
    \        return List[String]()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One, two,\
    \ three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphtt_izvp.scala:16)\n\tat Problem.main(tmphtt_izvp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // TODO: complete this method\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpptc_ckp1.scala:11:49\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mwordsString\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    Unit\n\
    \e[31m   |\e[0m                                                 Required: List[String]\n\
    \e[31m12 |\e[0m        \e[34m// TODO: complete this method\e[0m\n\e[31m13 |\e\
    [0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013444
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = s.split(\" \").filter(_.nonEmpty)\n\
    \        list.map(_.capitalize).filter(_.length<2)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuus_3qxk.scala:13:37\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        list.map(_.capitalize).filter(_.length<\e\
    [31m2\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m  \
    \ |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013445
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Complete the code!\n        val words\
    \ = s.split(\", \").flatMap { w => w.split(\", \") }\n        words.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvxwt4t54.scala:17)\n\tat Problem.main(tmpvxwt4t54.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val wordsArray = s.split(\", | ,| \").toList\n\
    \        val wordsList = wordsArray.map(word => word.trim.replaceAll(\"\\\\s+\"\
    ,\"\").toLowerCase)\n        return wordsList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq60sxxdo.scala:17)\n\tat Problem.main(tmpq60sxxdo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var result : List[String] = Nil\n    \
    \    s.split( \",\" ).foreach( x => { result += x.split( \" \" ) } )\n       \
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplhslm511.scala:13:46 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        s.split( \e[31m\",\"\e[0m ).foreach( \e[36mx\e\
    [0m => { result += x.split( \e[31m\" \"\e[0m ) } )\n\e[31m\e[31m   |\e[0m    \
    \                                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is\
    \ not a member of List[String] - did you mean List[String].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        //Split it into words\n        val words\
    \ = s.split(\",\")\n        //Remove commas if present\n        val newWords =\
    \ for (word <- words) yield word.trim\n        //Return result\n        newWords\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2cp3xnlm.scala:17:8\
    \ ---------------------\e[0m\e[0m\n\e[31m17 |\e[0m        newWords\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (newWords :\
    \ Array[String])\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n      // TODO - Implement your logic here\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9459mf2p.scala:11:49\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mwordsString\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    Unit\n\
    \e[31m   |\e[0m                                                 Required: List[String]\n\
    \e[31m12 |\e[0m      \e[34m// TODO - Implement your logic here\e[0m\n\e[31m13\
    \ |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013446
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var result : List[String] = List()\n \
    \       for(i <- s.toCharArray) {\n            if(i > ' ') {\n               \
    \ result += List(i)\n            }\n        }\n        return result\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdsenbmzq.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                result += List(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of\
    \ List[String] - did you mean List[String].!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val wordsString = s.replaceAll(\",\",\
    \ \" \").trim()\n        val words = wordsString.split(\" \")\n        words.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3eihzgz1.scala:17)\n\tat Problem.main(tmp3eihzgz1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013450
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var wordsStr : List[String] = Nil\n  \
    \      var words : List[String] = Nil\n        var wordIndex = 0\n        var\
    \ i : Int = -1\n        while ( (i = s.indexOf(\",\", wordIndex)) >= 0) {\n  \
    \          val wordStr = s.substring(wordIndex, i+1)\n            if (words.isEmpty)\
    \ {\n                words = List( wordStr ).filter(_.nonEmpty)\n            }\n\
    \            else {\n                words ::= List( wordStr ).filter(_.nonEmpty)\n\
    \            }\n            wordIndex = i+1\n        }\n        while ( (i = s.indexOf(\"\
    \ \", wordIndex)) >= 0) {\n            val wordStr = s.substring(wordIndex, i+1)\n\
    \            if (words.isEmpty) {\n                words = List( wordStr ).filter(_.nonEmpty)\n\
    \            }\n            else {\n                words ::= List( wordStr ).filter(_.nonEmpty)\n\
    \            }\n            wordIndex = i+1\n        }\n        if (words.isEmpty)\
    \ {\n            words = Nil\n        }\n        else {\n            wordsStr\
    \ ::= words\n        }\n        return wordsStr\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkd01ovvn.scala:16:48 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mwhile\e[0m ( (i = s.indexOf(\e[31m\",\"\
    \e[0m, wordIndex)) >= \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue >= is not a member of Unit, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordering.Unit.mkOrderingOps\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpkd01ovvn.scala:22:22 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                words ::= List( wordStr ).filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::=\
    \ is not a member of List[String] - did you mean List[String].::?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpkd01ovvn.scala:26:48 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mwhile\e[0m ( (i = s.indexOf(\e[31m\" \"\
    \e[0m, wordIndex)) >= \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue >= is not a member of Unit, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Ordering.Unit.mkOrderingOps\n\
    \e[31m   |\e[0m  import math.Ordering.Implicits.infixOrderingOps\n\e[31m   |\e\
    [0m  import math.Ordered.orderingToOrdered\n\e[31m   |\e[0m\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpkd01ovvn.scala:32:22 ------------------------\e[0m\e\
    [0m\n\e[31m32 |\e[0m                words ::= List( wordStr ).filter(_.nonEmpty)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::=\
    \ is not a member of List[String] - did you mean List[String].::?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpkd01ovvn.scala:40:21 ------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m            wordsStr ::= words"
  stdout: ''
  timestamp: 1660013451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val strs = s.split(\",\")\n        strs.toList.map(_.split(\"\
    \ \"))\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpba5zqdog.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        strs.toList.map(_.split(\e\
    [31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Found:    \e[1m\e[31mArray\e[0m\e\
    [1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e[31m   |\e[0m                      \
    \  Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var words = s.split(\",\")\n        val\
    \ list = new mutable.ListBuffer[String]\n        for (i<-0 until words.length){\n\
    \            val tempString = words.apply(i)\n            list.add(tempString)\n\
    \        }\n        list.mkString\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkqq2rfpc.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013447
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Your code goes here\n        val lst\
    \ = s.split(\",\").toList\n        lst.headOption.map( _.split(\"\\\\s+\") ).map(\
    \ x => x.toList ).toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpfdggix6o.scala:14:67\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.headOption.map( _.split(\e\
    [31m\"\\\\s+\"\e[0m) ).map( \e[36mx\e[0m => x.toList ).toList\n\e[31m\e[31m  \
    \ |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mList\e[0m\e[1m\e[31m[\e\
    [0mString\e[1m\e[31m]\e[0m]\n\e[31m   |\e[0m        Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\", \")\n        val\
    \ l = new mutable.ListBuffer[String]()\n        for (w <- words) {\n         \
    \   val words = w.split(\"\\\\s+\")\n            l += words\n        }\n     \
    \   l.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp38j4m58l.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m             \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013448
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        if (s.length == 0) Nil\n        else {\n\
    \            val (words, rest) = s.split(\", \", -1);\n            words.toList.dropWhile(_.isEmpty)\
    \ ++ wordsString(rest)\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpab961_bw.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            words.toList.dropWhile(_.isEmpty) ++ wordsString(rest)\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value toList is not a member of Any\n1 error found\n"
  stdout: ''
  timestamp: 1660013451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        s.toList.split(\"\\\\s*,\\\\s*\").toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpa47mf2ni.scala:12:17 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        s.toList.split(\e[31m\"\\\\s*,\\\\s*\"\e[0m).toList\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue split is\
    \ not a member of List[Char] - did you mean List[Char].splitAt?\n1 error found\n"
  stdout: ''
  timestamp: 1660013451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words : List[String] = s.split(\"\
    ,\").toList\n        var w: List[String] = Nil\n        var c : Int = 0\n    \
    \    var i : Int = 0\n        while ( i < words.length ) {\n            if ( words(i)\
    \ != \"\" ) {\n                if ( w == Nil ) {\n                    w = List(words(i))\n\
    \                    c += 1\n                }\n                else {\n     \
    \               w ::= List(words(i))\n                    c += 1\n           \
    \     }\n            }\n            i += 1\n        }\n        if ( words.length\
    \ > c ) {\n            w = w.take(c)\n        }\n        return w\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is\
    \ John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n\
    \    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphprh75x3.scala:23:22 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    w ::= List(words(i))\n\e[31m\e[31m\
    \   |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member\
    \ of List[String] - did you mean List[String].::?\n1 error found\n"
  stdout: ''
  timestamp: 1660013451
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val result = new mutable.ListBuffer[String]\n\
    \        val words = s.split(\",\")\n        for (word <- words) {\n         \
    \   result.append(word)\n        }\n        return result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8javdtrn.scala:12:25 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013449
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val ls = s.split(\", \")\n        val\
    \ l1 = ls.foldLeft[List[String]](List())( (l1,l) => l1 :+ l(0))\n        l1\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp06d2tx2q.scala:13:69\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36ml1\e\
    [0m = ls.foldLeft[\e[35mList\e[0m[\e[35mString\e[0m]](List())( (\e[36ml1\e[0m,\e\
    [36ml\e[0m) => l1 :+ l(\e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                 \
    \                                                   ^^^^\e[0m\n\e[31m   |\e[0m\
    \                                                        Found:    Char\n\e[31m\
    \   |\e[0m                                                        Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013453
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words: List[String] = s.split(\",\"\
    )\n        words.map( _.trim).filter( _.nonEmpty)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpx_ebriv5.scala:12:41\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        \e[33mval\e[0m \e[36mwords\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = s.split(\e[31m\",\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                  ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                  Found:    \e[1m\e[31mArray\e[0m[String]\n\
    \e[31m   |\e[0m                                  Required: \e[1m\e[32mList\e[0m[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013454
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val splitStr = s.split(\" \")\n      \
    \  val result = new mutable.MutableList[String]()\n        splitStr.foreach(e\
    \ => result += e)\n        result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxvz7amsy.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013452
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val s = \"\"\n        val ls = s.split(\"\
    ,\").toList\n        ls.map(word => word + s.substring(1))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 1, end 0, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat java.base/java.lang.String.substring(String.java:2680)\n\tat Problem$.wordsString$$anonfun$1(tmpvlezi18u.scala:14)\n\
    \tat scala.collection.immutable.List.map(List.scala:246)\n\tat Problem$.wordsString(tmpvlezi18u.scala:14)\n\
    \tat Problem$.main(tmpvlezi18u.scala:17)\n\tat Problem.main(tmpvlezi18u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = new ListBuffer[String]()\n\
    \        var currentWord = \"\"\n        var currentChar = s.charAt(0)\n     \
    \   while (currentChar != ',') {\n            if (currentChar == ' ' || currentChar\
    \ == '\\t') {\n                if (currentWord != \"\") {\n                  \
    \  list += currentWord\n                    currentWord = \"\"\n             \
    \   }\n            } else {\n                currentWord += currentChar\n    \
    \        }\n            currentChar = s.charAt(1)\n        }\n        list +=\
    \ currentWord\n        list.filter(_.isAlpha).toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7i0vf9fe.scala:27:22 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        list.filter(_.isAlpha).toList\n\e[31m\e[31m \
    \  |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \   value isAlpha is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660013455
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        if(s == null) Nil\n        else s.split(\"\
    , \").map(_.trim).toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdzcr26xj.scala:16)\n\tat Problem.main(tmpdzcr26xj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        // Write your code here\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is John\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"\
    One, two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"\
    three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\"\
    )).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdziwgntl.scala:11:49\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m    \e[33mdef\e[0m \e[36mwordsString\e\
    [0m(\e[36ms\e[0m : \e[35mString\e[0m) : \e[35mList\e[0m[\e[35mString\e[0m] = {\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                                 Found:    Unit\n\
    \e[31m   |\e[0m                                                 Required: List[String]\n\
    \e[31m12 |\e[0m        \e[34m// Write your code here\e[0m\n\e[31m13 |\e[0m   \
    \ }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val list = s.replace(\",\",\" \").split(\"\
    \ \")\n        val list2 = list.foldLeft(List[String]())((x, y) => x :: y :: Nil)\n\
    \        list2.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmxtikaxq.scala:13:60\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mlist2\e\
    [0m = list.foldLeft(List[\e[35mString\e[0m]())((\e[36mx\e[0m, \e[36my\e[0m) =>\
    \ x :: y :: Nil)\n\e[31m\e[31m   |\e[0m                                      \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \             Found:    (x : List[String])\n\e[31m   |\e[0m                  \
    \                          Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val strings = s.replaceAll(\"\\\\s\",\
    \ \"\").split(\",\")\n        strings.map(_.trim).filter(_.nonEmpty).toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpf8oio7fq.scala:16)\n\tat Problem.main(tmpf8oio7fq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        s.split(\" \").map(w => w.split(\"[,\\\
    \\s]\")).flatten\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpyvzikszk.scala:12:8\
    \ ---------------------\e[0m\e[0m\n\e[31m12 |\e[0m        s.split(\e[31m\" \"\e\
    [0m).map(\e[36mw\e[0m => w.split(\e[31m\"[,\\\\s]\"\e[0m)).flatten\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m   \
    \     Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n      val words =\n        if (s.isEmpty) Nil\n\
    \        else s.split(\"[, ]+\".r).toList\n      val mutableWords = mutable.ArrayBuffer.empty[String]\n\
    \      for (word <- words) mutableWords += word\n      mutableWords\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is\
    \ John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n\
    \    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwwovd_k5.scala:14:29\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m s.split(\e\
    [31m\"[, ]+\"\e[0m.r).toList\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    scala.util.matching.Regex\n\
    \e[31m   |\e[0m                     Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpwwovd_k5.scala:15:25 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m      \e[33mval\e[0m \e[36mmutableWords\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        if(s.isEmpty) return Nil\n        val\
    \ a = s.split(\", \").toList\n        var l = Nil\n        for(str <- a){ l =\
    \ l::splitWords(str) }\n        l\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp85o0sdm0.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(str <- a){ l = l::splitWords(str)\
    \ }\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                              Not found: splitWords\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013455
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val words = s.split(\",\\\\s+\").toList\n\
    \        var newList: List[String] = Nil\n        for(i <- 0 until words.length){\n\
    \            newList = newList ::: words(i)\n        }\n        newList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkov7py74.scala:15:30 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            newList = newList ::: words(i)\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                              value ::: is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660013457
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var output : List[String] = List()\n \
    \       for( a <- s.toCharArray )\n            if( Character.isLetter(a) || Character.isDigit(a)\
    \ )\n                output = output :+ a\n        return output.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name\
    \ is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpku3s3ktk.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                output = output\
    \ :+ a\n\e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m\
    \   |\e[0m                                   Found:    (a : Char)\n\e[31m   |\e\
    [0m                                   Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val split = s.split(\", \") //Split using\
    \ commas\n        val wordsSplit = split.map(_.trim) //trim leading and trailing\
    \ spaces\n        return wordsSplit\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpu1t78jbr.scala:14:15\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mreturn\e[0m wordsSplit\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \      Found:    (wordsSplit : Array[String])\n\e[31m   |\e[0m               Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        s.split(\"\"\"\\W+\"\"\")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my name is\
    \ John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))));\n\
    \    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprlj65fma.scala:12:15\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        s.split(\e[31m\"\"\"\\\
    W+\"\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m        Found:    \e[1m\e[31mArray\e[0m[String]\n\e[31m   |\e[0m    \
    \    Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val l = s.split(\",\")\n        val result\
    \ = new mutable.ListBuffer[String]\n        for (x <- l)\n            result.append(x)\n\
    \        result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptafti7m1.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m             \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660013456
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        val splits = s.trim().split(\"[, ]+\"\
    );\n        if (splits.size == 0) List(\"\")\n        else {\n            var\
    \ list: List[String] = List(splits.head);\n            for (var i = 1 ; i < splits.size\
    \ ; i++) {\n                var split = splits(i);\n                if (split.endsWith(\"\
    ,\")) {\n                    list = list.head :: splits(i).split(\",\").toList;\n\
    \                } else if (split.endsWith(\".\")) {\n                    list\
    \ = list.head :: splits(i).split(\".\").toList;\n                } else {\n  \
    \                  list = list.head :: splits(i).toList;\n                }\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"\
    Hi, my name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"))));\n    assert(wordsString((\"One, two, three, four, five, six\"\
    )).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"Hi\",\
    \ \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four, five,\
    \ six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n  \
    \  assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmp9p0s0zwr.scala:16:17 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m (\e[33mvar\e[0m i = \e[31m1\e\
    [0m ; i < splits.size ; i++) {\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\
    \e[31m   |\e[0m                 pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp9p0s0zwr.scala:16:45 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m (\e[33mvar\e[0m i = \e[31m1\e\
    [0m ; i < splits.size ; i++) {\n\e[31m\e[31m   |\e[0m                        \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \            '<-' expected, but ';' found\n\e[31m\e[31m-- [E032] Syntax Error:\
    \ /tmp/tmp9p0s0zwr.scala:16:50 ---------------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m            \e[33mfor\e[0m (\e[33mvar\e[0m i = \e[31m1\e[0m ; i < splits.size\
    \ ; i++) {\n\e[31m\e[31m   |\e[0m                                            \
    \      ^\e[0m\n\e[31m   |\e[0m                                               \
    \   pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9p0s0zwr.scala:16:26\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m\
    \ (\e[33mvar\e[0m i = \e[31m1\e[0m ; i < splits.size ; i++) {\n\e[31m\e[31m  \
    \ |\e[0m                          ^\e[0m\n\e[31m   |\e[0mvalue withFilter is not\
    \ a member of Null, but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might fix the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import Option.option2Iterable\n\e[31m   |\e\
    [0m  import collection.LazyZip2.lazyZip2ToIterable\n\e[31m   |\e[0m  import collection.LazyZip3.lazyZip3ToIterable\n\
    \e[31m   |\e[0m  import collection.LazyZip4.lazyZip4ToIterable\n\e[31m   |\e[0m\
    \  import collection.convert.ImplicitConversions.list asScalaBuffer\n\e[31m  \
    \ |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions"
  stdout: ''
  timestamp: 1660013459
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        if(s.length == 0) {\n          List[String]()\n\
    \        } else {\n          var tempWords = Array[String]()\n          var startIndex\
    \ = 0\n          var endIndex = 0\n          var i : Int = 0\n          while(i<s.length())\
    \ {\n              if(s.charAt(i) == ',' || s.charAt(i) == ' ') {\n          \
    \        endIndex = i + 1\n                  tempWords = tempWords :+ s.substring(startIndex,\
    \ endIndex)\n                  startIndex = i + 1\n              } else {\n  \
    \              i += 1\n              }\n          }\n          if(tempWords.isEmpty)\
    \ {\n            tempWords = Array(s.substring(startIndex, s.length))\n      \
    \    }\n          tempWords\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(wordsString((\"Hi, my name is John\")).equals((List[String](\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"))));\n    assert(wordsString((\"One,\
    \ two, three, four, five, six\")).equals((List[String](\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"Hi, my name\")).equals((List[String](\"\
    Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"One,, two, three, four,\
    \ five, six,\")).equals((List[String](\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp396jyk35.scala:31:10\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m          tempWords\n\e[31m\e\
    [31m   |\e[0m          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m          Found:    (tempWords\
    \ : Array[String])\n\e[31m   |\e[0m          Required: List[String]\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660013458
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // You will be given a string of words separated by commas or spaces.\
    \ Your task is\n    // to split the string into words and return a list of the\
    \ words.\n    // For example:\n    // >>> wordsString((\"Hi, my name is John\"\
    ))\n    // (List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"))\n    //\
    \ >>> wordsString((\"One, two, three, four, five, six\"))\n    // (List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))\n    def wordsString(s\
    \ : String) : List[String] = {\n        var listOfWords = ListBuffer[String]()\n\
    \        var word = \"\"\n        var wordWithComma = \"\"\n        var inQuotes\
    \ = false\n        for( i <- 0 until s.length ) {\n            if( !inQuotes )\
    \ {\n                if( s.charAt(i) == ',' ) {\n                    listOfWords\
    \ += wordWithComma\n                    wordWithComma = \"\"\n               \
    \ } else {\n                    word += s.charAt(i)\n                }\n     \
    \       } else {\n                word += s.charAt(i)\n                if( s.charAt(i)\
    \ == '\"' ) {\n                    inQuotes = false\n                    wordWithComma\
    \ += word\n                    listOfWords += wordWithComma\n                \
    \    word = \"\"\n                }\n            }\n        }\n        wordWithComma\
    \ += word\n        listOfWords += wordWithComma\n        listOfWords.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(wordsString((\"Hi, my\
    \ name is John\")).equals((List[String](\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ))));\n    assert(wordsString((\"One, two, three, four, five, six\")).equals((List[String](\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\
    Hi, my name\")).equals((List[String](\"Hi\", \"my\", \"name\"))));\n    assert(wordsString((\"\
    One,, two, three, four, five, six,\")).equals((List[String](\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"))));\n    assert(wordsString((\"\")).equals((List[String]())));\n\
    \    assert(wordsString((\"ahmed     , gamal\")).equals((List[String](\"ahmed\"\
    , \"gamal\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpthno8378.scala:39)\n\tat Problem.main(tmpthno8378.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660013459
