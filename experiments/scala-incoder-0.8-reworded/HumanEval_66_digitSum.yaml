name: HumanEval_66_digitSum
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Task\n    // Write a function that takes a string as input and returns the\
  \ sum of the upper characters only'\n    // ASCII codes.\n    // Examples:\n   \
  \ // >>> digitSum((\"\"))\n    // (0l)\n    // >>> digitSum((\"abAB\"))\n    //\
  \ (131l)\n    // >>> digitSum((\"abcCd\"))\n    // (67l)\n    // >>> digitSum((\"\
  helloE\"))\n    // (69l)\n    // >>> digitSum((\"woArBld\"))\n    // (131l)\n  \
  \  // >>> digitSum((\"aAaaaXa\"))\n    // (153l)\n    def digitSum(s : String) :\
  \ Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(digitSum((\"\"))\
  \ == (0l));\n    assert(digitSum((\"abAB\")) == (131l));\n    assert(digitSum((\"\
  abcCd\")) == (67l));\n    assert(digitSum((\"helloE\")) == (69l));\n    assert(digitSum((\"\
  woArBld\")) == (131l));\n    assert(digitSum((\"aAaaaXa\")) == (153l));\n    assert(digitSum((\"\
  \ How are yOu?\")) == (151l));\n    assert(digitSum((\"You arE Very Smart\")) ==\
  \ (327l));\n    }\n\n}\n"
completions: ["        val nums = mutable.Buffer[Char]()\n        var sum = 0L\n \
    \       for (ch <- s.toCharArray) \n            if (ch >= 'a' && ch <= 'z') nums\
    \ += ch\n            else sum += ch\n        sum", "        var result : Long\
    \ = 0\n        for(x <- s.toCharArray) {\n            if(x.isDigit) result +=\
    \ x.toInt\n            else result -= x.toInt\n        }\n        result", " \
    \       var sum = 0\n        for (i <- 0 until s.length)\n            sum += (s.charAt(i)\
    \ - 'A') + 1\n        sum", "        var sum = 0\n        var i = 0\n        while\
    \ (i < s.length)\n        {\n            val currentChar = s.charAt(i)\n     \
    \       val upperCaseChar = Character.toUpperCase(currentChar)\n            val\
    \ asciiValue = currentChar - 65 + upperCaseChar - 97\n            sum += asciiValue\n\
    \            i += 1\n        }\n        sum", "        val uppers = mutable.Map[Char,Long]()\n\
    \        for (ch <- s) {\n            uppers.get(ch) match {\n               \
    \ case Some(code) =>\n                    uppers += (ch -> code+32)\n        \
    \        case None =>\n                    uppers += (ch -> 32)\n            }\n\
    \        }\n        uppers.values.sum", "        var ret = 0\n        var max\
    \ = 0L\n        for (c <- s) {\n            ret += (if (c.isDigit) c.toLong else\
    \ 0)\n            if (c > max) max = c\n        }\n        if (max > 0) ret +=\
    \ max - 48\n        ret", "        var sum = 0L\n        var codes = mutableSet[Int]()\n\
    \n        for(c <- s) {\n            if((c >= 'A' && c <= 'Z') || (c >= 'a' &&\
    \ c <= 'z')) {\n                codes += c\n            }\n        }\n\n     \
    \   for(c <- codes) {\n            sum += c\n        }\n\n        return sum",
  "        val countMap = mutable.HashMap[String,Long]()\n        for (i <- 0 until\
    \ s.length)\n            countMap += (s.charAt(i) + s.charAt(i) + s.charAt(i)\
    \ + s.charAt(i) + s.charAt(i) + s.charAt(i) + s.charAt(i) + s.charAt(i) + s.charAt(i)\
    \ + s.charAt(i) + s.charAt(i) + s.charAt(i) + s.charAt(i)).toString() -> 1\n \
    \       return countMap.toMap.values.toSet.map(_.toLong).sum", "        val strArray\
    \ = s.toCharArray.filter(x => x >= '0' && x <= '9')\n        val sum = strArray.length.toLong\n\
    \        val count = strArray.map(x => x - '0').length\n        sum * count",
  "        var sum = 0L\n        var temp = 0L\n        for(i <- s.indices) {\n  \
    \          temp = s.charAt(i).toInt\n            if (temp >= 65 && temp <= 90)\
    \ {\n                sum += temp - 65\n            }\n        }\n        return\
    \ sum", "        val chars = mutable.Buffer.empty[Char]\n        for (char <-\
    \ s.toCharArray) chars += char\n        chars.toList.map(_.asDigit).reduce(_ +\
    \ _)", "        var sum = 0\n        var i = s.length - 1\n        while (i >=\
    \ 0) {\n            sum += s.charAt(i).toChar.asDigit().asInstanceOf[Long]\n \
    \           i--\n        }\n        sum", "        var sum = 0\n        for (i\
    \ <- 0 until s.length)\n            if (i.toChar.isUpper)\n                sum\
    \ += i.toChar.asDigit - 'A'\n        sum", "        var sum = 0\n        var count\
    \ = 0\n        var currChar: Char = 'a'\n        s.toList foreach {\n        \
    \    currChar match {\n                case ' ' if (currChar == ' ') => // skip\
    \ space\n                case c => count = count + Character.getNumericValue(c)\n\
    \                default => sum += Character.getNumericValue(c)\n            }\n\
    \            currChar = s.toList.head\n        }\n        sum", "        def getUp(s\
    \ : String) : Long = s.map(x => x.toInt)\n        val d = getUp(s.tail)\n    \
    \    d + (getUp(s.init))", "        var sum = 0L\n        var index = 0\n    \
    \    for (c <- s) {\n            if (c.toString.toUpperCase == \"A\" || c.toString.toUpperCase\
    \ == \"B\" || c.toString.toUpperCase == \"C\" || c.toString.toUpperCase == \"\
    D\" || c.toString.toUpperCase == \"E\") {\n                sum = sum + c.toString.toUpperCase.toLong\n\
    \            }\n        }\n        sum = sum * Math.pow(26l, index)\n        return\
    \ sum", "        // TODO: Write code here\n        val map = mutable.Map[Char,\
    \ Long]()\n        for (c <- s) {\n            map(c) += math.min(math.max(c.toInt,\
    \ 0), 10)\n        }\n        map.values.sum", "        var sum = 0L\n       \
    \ for (i <- 0 until s.length)\n            if (s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z')\n                sum += s.charAt(i) - 'A' + 10\n            else\n \
    \               sum += s.charAt(i)\n        sum", "        var result : Long =\
    \ 0\n\n        for (c <- s) {\n            if (c.toUpper <= 'z') {\n         \
    \       result += c.toUpper - 'A' + 1\n            }\n        }\n\n        result",
  "        var sum = 0\n        for (c: Int <- s) {\n            if (c > 48 && c <\
    \ 57)\n                sum += c - 48\n        }\n        sum", "        val result\
    \ = s.map(i => if (i >= 65 && i <= 90) return i else if (i >= 97 && i <= 122)\
    \ return ((i - 65) + 10).toLong else 0).toLong\n        result", "        var\
    \ sum = 0L\n        for (x <- s.toCharArray) {\n            if (x.toInt > 47 &&\
    \ x.toInt < 58)\n                sum += x.toInt\n        }\n        sum", "  \
    \      val sum = mutable.Set[Int]()\n        var sum = 0\n        s.toList().foreach(char\
    \ => {\n            if (char.asDigit() < 48 || char.asDigit() > 57) sum -= char.asDigit()\n\
    \            else sum += char.asDigit()\n        })\n        sum", "        var\
    \ sum = 0\n        for(char c : s.toCharArray) {\n            sum += c\n     \
    \   }\n        sum", "        var sum = 0\n        var chars = scala.collection.mutable.ListBuffer[Char](s.toCharArray)\n\
    \        chars.tail.filter(_ >= 'a' && _ <='z').foreach(char => { sum += char.asInstanceOf[Int]\
    \ })\n        sum", "        var sum = 0\n        var i = 0\n        var c = null\n\
    \        val length = s.length()\n        for (i  <- 0 until length) {\n     \
    \       c = s.charAt(i)\n            if (c.toUpper == c) sum += c.toInt\n    \
    \    }\n        sum", "        val codes = Array.tabulate(s.length){ i =>\n  \
    \          val n = s.codePointAt(i)\n            if((n < 47) || (n > 57)) {\n\
    \                n\n            }\n            else {\n                n + (n/43)\n\
    \            }\n        }\n        codes.sum", "        val sChars = s.toCharArray\n\
    \        val i = 1\n        val sum = 0\n        while (i < sChars.length) {\n\
    \            val c = sChars(i).toInt\n            val charUp = c - 64\n      \
    \      if (charUp > 0) {\n                sum += charUp\n                i +=\
    \ 1\n            } else {\n                i += 1\n            }\n        }\n\
    \        sum", "        val counts = mutable.Map.empty[Char, Long]\n        s.toList.foreach{x\
    \ =>\n            counts.getOrElse(x.toChar, 0)+=1\n        }\n        val sum\
    \ = counts.filter(_._2 > 0).map(_._2).sum\n        sum.toLong", "        var sum\
    \ : Long = 0\n        var length : Int = s.length()\n        for(i <- 0 to length-1){\n\
    \            val cur : Int = s.charAt(i).toInt\n            sum += cur\n     \
    \   }\n        return sum", '        // Solution code goes here', "        var\
    \ sum = 0L\n        for(c<- s.toCharArray) if (c.toUpper >= '0') sum += c.toUpper.toLong\n\
    \        sum", "        var result : Long = 0\n        var chars = s.toList\n\
    \        for(i <- 0 until chars.size){\n            if(i==0) result += chars(i).toInt\n\
    \            else\n            if(chars(i) >= 65 && chars(i) <= 90){\n       \
    \         chars(i) -= 65\n                result += chars(i).toInt\n         \
    \   } else if(chars(i) >= 97 && chars(i) <= 122){\n                chars(i) -=\
    \ 97\n                result += chars(i).toInt\n            }\n        }\n   \
    \     result", "        val l = new mutable.ListBuffer[Long]()\n        var sum\
    \ = 0L\n        var x = 0L\n        for (i <- 0 until s.length)\n            sum\
    \ += x.toString.toChar\n            x += 1L\n            l.append(sum)\n     \
    \   l.sum", "        def digitSumHelper(s : String) : Long = if(s.isEmpty) 0 else\
    \ s.head match {\n            case 'a' => digitSumHelper(s.substring(1))\n   \
    \         case 'b' => digitSumHelper(s.substring(2)) + 12\n            case 'c'\
    \ => digitSumHelper(s.substring(2)) + 36\n            case 'd' => digitSumHelper(s.substring(2))\
    \ + 60\n            case 'e' => digitSumHelper(s.substring(2)) + 144\n       \
    \     case 'f' => digitSumHelper(s.substring(2)) + 216\n            case 'g' =>\
    \ digitSumHelper(s.substring(2)) + 288\n            case 'h' => digitSumHelper(s.substring(2))\
    \ + 360\n            case 'i' => digitSumHelper(s.substring(2)) + 432\n      \
    \      case 'j' => digitSumHelper(s.substring(2)) + 528\n            case 'k'\
    \ => digitSumHelper(s.substring(2)) + 660\n            case 'l' => digitSumHelper(s.substring(2))\
    \ + 704\n            case 'm' => digitSumHelper(s.substring(2)) + 768\n      \
    \      case 'n' => digitSumHelper(s.substring(2)) + 800\n            case 'o'\
    \ => digitSumHelper(s.substring(2)) + 896\n            case 'p' => digitSumHelper(s.substring(2))\
    \ + 912\n            case 'q' => digitSumHelper(s.substring(2)) + 992\n      \
    \      case 'r' => digitSumHelper(s.substring(2)) + 1056\n            case 's'\
    \ => digitSumHelper(s.substring(2)) + 1120\n            case 't' => digitSumHelper(s.substring(2))\
    \ + 1184\n            case 'u' => digitSumHelper(s.substring(2)) + 1248\n    \
    \        case 'v' => digitSumHelper(s.substring(2)) + 1328\n            case 'w'\
    \ => digitSumHelper(s.substring(2)) + 1408\n            case 'x' => digitSumHelper(s.substring(2))\
    \ + 1480\n            case 'y' => digitSumHelper(s.substring(2)) + 1568\n    \
    \        case 'z' => digitSumHelper(s.substring(2)) + 1556\n            case _\
    \ => digitSumHelper(s.substring(2))\n        }\n        digitSumHelper(s)", " \
    \       // Solution goes here\n        val len = s.length\n        var sum = 0\n\
    \        for (i <- 0 to len){\n            if (s.charAt(i) >= '0' && s.charAt(i)\
    \ <= '9')\n                sum += s.charAt(i)\n        }\n        sum.toLong",
  "        var result = new collection.mutable.HashMap[Char, Long]();\n        for\
    \ (i <- 0 until s.length)\n            result += s.charAt(i) -> s.codePointAt(i);\n\
    \        s.codePointIterator.foreach { i => result += i -> i }\n        \n   \
    \     result.toList", "        val sum = 0\n        var i = 0\n        var j =\
    \ 0\n        val size = s.length\n        while (i < size) {\n            val\
    \ v = s(i)\n            if (v >= 'A' && v <= 'Z') {\n                val upper\
    \ = v.toLong\n                sum ++= upper\n            }\n            i += 1\n\
    \        }\n        sum", "       var sum = 0\n       val upper = s.toList.toSet.map(_.toUpper.charAt(0))\n\
    \       for ( i <- 0 until s.length; \n             letter <- s.substring(i, i\
    \ + 1)\n             if upper.contains(letter)) \n              sum += math.pow(2,\
    \ letter.toInt)\n       sum.toLong", "        var chars = s.length\n        for(i\
    \ <- 0 until chars) s += s.charAt(i).asInstanceOf[Int].toString \n        if(chars\
    \ == 0) 0\n        else chars.toString.map(_.asInstanceOf[Int].toString.toInt).sum",
  '        // TODO: your code goes here', "        // SOLUTION\n        val digits\
    \ = mutable.ListBuffer(0)\n        var digit = s.charAt(0)\n        for ( i=1;\
    \ i<s.length; i++ ) {\n            digit = digit * 10 + s.charAt(i) - '0'\n  \
    \          digits += digit\n        }\n        return digits.sum.toLong", "  \
    \      val map = new mutable.HashMap[String, Long]\n        for (c <- s) {\n \
    \           map.getOrElse(c.toUpper, 0l) += c.toInt\n        }\n        map.values.sum",
  "        val nums = mutable.ArrayBuffer.empty[Int]\n        for (i <- 0 until s.length)\n\
    \            if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n                nums.append(s.charAt(i)\
    \ - 'A' + 1)\n        val sum = nums.sum\n        sum.toLong", "        var sum\
    \ = 0\n        var currentChar = 0\n        for(i <- 0 until s.length){\n    \
    \        val c = s.charAt(i)\n            if(Character.isDigit(c)){\n        \
    \        currentChar = c.toInt\n                sum += currentChar\n         \
    \   }\n        }\n        return sum", "       def digitSumHelper(s:String, result:Long):Long\
    \ = {\n           if (s.length == 0) result\n           else {\n             \
    \  val ch = s.charAt(0)\n               if (ch == 'a') digitSumHelper(s.substring(1),\
    \ result + ch.toInt)\n               else if (ch == 'A') digitSumHelper(s.substring(1),\
    \ result + 36)\n               else if (ch == '0') digitSumHelper(s.substring(1),\
    \ result + ch)\n               else if (ch == '9') digitSumHelper(s.substring(1),\
    \ result + ch.toInt)\n               else digitSumHelper(s.substring(1), result\
    \ + ch.toInt)\n           }\n       }\n       digitSumHelper(s, 0)", "       \
    \ var sum = 0\n        var index = 0\n        while (index < s.length)\n     \
    \   {\n            var c = s.charAt(index)\n            if (('A' <= c) && (c <=\
    \ 'Z')) {\n                sum += Character.getNumericValue(c)\n            }\n\
    \            index += 1\n        }\n        sum", "        val countMap = mutable.Map.empty[Char,\
    \ Int]\n        for (i <- 0 until s.length - 1) countMap.getOrElse(s.charAt(i),\
    \ 0L) += 1 \n        val sum = 0\n        for (c: Char <- countMap) sum += countMap(c)\n\
    \        sum", "        val result = mutable.Map.empty[String, Long]\n       \
    \ for (x <- s.toCharArray) {\n            result += (x -> x.toInt)\n        }\n\
    \        result(\"A\".toLong + result(\"a\".toLong) + result(\"X\".toLong) + result(\"\
    x\".toLong))", "        var sum = 0\n        for (i <- 0 to s.length - 1) {\n\
    \            sum += digit(s.charAt(i)) * powerOf10(s.length - 1 - i)\n       \
    \ }\n        return sum", "        s.foldLeft(0l){ (sum, ch) =>\n            val\
    \ ch = ch.toChar\n            if (ch >= 'a' && ch <= 'z') sum + ch.toInt \n  \
    \          else sum\n        }", "        var result = 0\n        for(i <- 0 until\
    \ s.length)\n        { if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n        result\
    \ += (s.charAt(i) - 'A' + 10)\n        else\n        result += (s.charAt(i) -\
    \ '0')\n        }\n        result", "        def digSum(s : String) : Long = {\n\
    \            val sum = 0L\n            var last = 0L\n            s.foreach {\
    \ c =>\n                if (c.toString.toUpper <= 'Z') {\n                   \
    \ last += c.toString.toUpper\n                } else {\n                    sum\
    \ += last\n                    last = 0L\n                }\n            }\n \
    \           sum += last\n            sum\n        }\n        val l = (s + \".\"\
    ).map(_.toUpperCase).map(c => c.toLong).reduce(_+_)\n        l", "       if (s.isEmpty)\
    \ {\n          0\n       } else if ((s.length == 1) && ('A' == s.head)) {\n  \
    \        1\n       } else if ((s.length == 1) && ('a' == s.head)) {\n        \
    \  2\n       } else if ((s.length >= 2) && ('A' == s.head) && ('a' == s.tail.head))\
    \ {\n          digitSum(s.tail.tail) + digitSum(s.tail.tail)\n       } else if\
    \ ((s.length >= 3) && ('A' == s.head) && ('a' == s.tail.head) && ('A' == s.tail.tail.head))\
    \ {\n          digitSum(s.tail.tail) + digitSum(s.tail.tail) + digitSum(s.tail.tail.tail)\n\
    \       } else {\n          digitSum(s.tail) + digitSum(s.tail)\n       }", " \
    \       if (s.isEmpty)\n            return 0\n        var sum = 0\n        for\
    \ (c <- s.toCharArray) {\n            if (c.isDigit)\n                sum += c.toInt\n\
    \        }\n        sum", "        var sum = 0l\n        for( ch <- s) {\n   \
    \         if( ch.isLetterOrDigit) {\n                sum += ch.toString.toLong\n\
    \            }\n        }\n        return sum", "        var i = 0\n        var\
    \ sum = 0\n        for (char <- s) {\n            if (char > 0) {\n          \
    \      sum = sum + char\n                i += 1\n            }\n        }\n  \
    \      if (i == 0) 0\n        else sum", "        var sum = 0L\n        for (i\
    \ <- s.indices) {\n            val c = s.charAt(i)\n            if (c >= 'a' &&\
    \ c <= 'z') sum += (c - 'a' + 10)\n        }\n        sum", "        val sum =\
    \ mutable.Map[Character, Long]()\n        for (x <- s.toCharArray) {\n       \
    \     val char = x.toInt\n            if (char > 57)\n                sum += (x.toString\
    \ -> 1)\n            else\n                sum += (x.toString -> char)\n     \
    \   }\n        sum.foldLeft(0l) { (sum, entry) =>\n            sum + entry._2.toLong\n\
    \        }", "        val result = s.foldLeft((0l, 0))((x, y) => (x._1 + y._1,\
    \ x._2 + y._2))\n        result._1", "        val stringChars = mutable.StringBuilder.newBuilder\n\
    \        for (c <- s) {\n            stringChars.append(c.toChar)\n        }\n\
    \        stringChars.reverse.tail.foldLeft(0l){ (sum, i) => (sum + math.pow(i.toInt,\
    \ 10)) }", "        var sum = 0L\n        for(i <- 0 until s.length)\n       \
    \     if(s(i) >= 'a' && s(i) <= 'z')\n                sum+ = s(i) -+ 'a'\n   \
    \         else\n                sum+ = s(i) -+ '0'\n        sum", "        val\
    \ sum = 0L\n        var idx = 0\n        var c = 0\n        while (idx < s.length){\n\
    \            c = s(idx)\n            sum +=\n                if (c >= 'A' && c\
    \ <= 'Z') c - 'A'\n                else if (c >= 'a' && c <= 'z') c - 'a'\n  \
    \              else 0\n            idx += 1\n        }\n        sum", "      \
    \  var sum = 0\n        for ( i <- 1 to s.length ) {\n          sum += s.charAt(i).toString.toUpperCase\n\
    \        }\n        sum", "        val result = 0\n        for (i <- 0 to s.length\
    \ - 1) {\n            val c = s.charAt(i)\n            result += ('A' + c) toLong\n\
    \        }\n        return result", "        def sum(num : Long, acc : Long) :\
    \ Long = \n            if (num > acc) num + sum(acc + num % 10, 0) else num\n\
    \        val result = sum(s.length, 0L)\n        for (i <- 0 until s.length) result\
    \ += if (s.charAt(i) > 'z') 36 + (s.charAt(i) - 'a' + 10) else s.charAt(i) - '0'\n\
    \        result", "        val chars = mutable.MutableList.empty[Char]\n     \
    \   var sum = 0\n        for(c <- s) {\n            if(c >= 'A' && c <= 'Z') {\n\
    \                sum += c - 'A' + 1\n            }\n            else {\n     \
    \           chars += c\n            }\n        }\n        sum", "        var sum\
    \ = 0L\n        var index = s.length\n        while(index > 0){\n            val\
    \ x = s.charAt(index-1)\n            val y = x.toInt\n            if(y > 96 &&\
    \ y <= 111) sum = sum + y\n            index--\n        }\n        return sum",
  "      val chars = s.toCharArray\n\n      val sum = 0L\n\n      for (c <- chars)\
    \ {\n        if (c >= 'A' && c <= 'Z') sum += c - 'A' + 1\n      }\n\n      sum",
  "        // split string at uppercase\n        var chars = s.toList.map(_.toLower)\n\
    \        val result = mutable.ListBuffer.empty[Int]\n        for ((index, char)\
    \ <- chars.zipWithIndex){\n            if (char >= 'a' && char <= 'z') result.append(char.toInt)\n\
    \        }\n        result.toList.length", "        var sum = 0\n        var idx\
    \ = 0\n        while(idx < s.length){\n            val code = s.charAt(idx).toInt\n\
    \            sum += code\n            idx += 1\n        }\n        sum", "   \
    \     val l = s.length\n        val sum = 0L\n        for (i <- 0 until l) {\n\
    \            val digit = s.charAt(i).toChar\n            val code = digit.asInstanceOf[Int]\n\
    \            if (code >= '0' && code <= '9') {\n                sum += code\n\
    \            } else {\n                continue\n            }\n        }\n  \
    \      sum", "        val sum = 0L\n        for(i <- 0 to s.length - 1) sum +=\
    \ s.charAt(i).toInt * (s.charAt(i) + 1)\n        sum", "        // Your code goes\
    \ here\n        val len = s.length\n        var sum = 0\n        var i = 0\n \
    \       while (i < len){\n            val c  = s.charAt(i)\n            val uc\
    \ = Character.toUpperCase(c)\n            if (uc == 'A' || uc == 'B' || uc ==\
    \ 'C' || uc == 'D'){\n                sum += Character.toUpperCase(c)\n      \
    \          i += 1\n            } else {\n                sum -= Character.toUpperCase(c)\n\
    \            }\n        }\n        sum", "        // Solution\n        val uppers\
    \ = s.map(_.toUpperCase)\n        val counts = mutable.Map[Char, Int]()\n    \
    \    uppers.foreach(c => { counts(c) += 1 })\n        counts.filter(_._2 > 1).map(x\
    \ => (x._1, x._2))\n                .map(x => (x._1 + 48, x._2))\n           \
    \     .foldLeft(0L)(_ + _)", "        val result = mutable.Map[Int, Long]()\n\
    \        for (i <- 0 to s.length)\n            if (s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z')\n                result(s.charAt(i) - 'A' + 1) = (result(s.charAt(i)\
    \ - 'A' + 1) or 0L) + i\n        result.toList.length", "        val sum = 0\n\
    \        s.map(c => (c - '0').toLong)\n            .filter(_ > 0)\n          \
    \  .foreach { c =>\n                sum += c\n            }\n        sum.toLong",
  "        // TODO: Write a function that takes a string as input and returns the\
    \ sum of the upper characters only'\n        // ASCII codes.\n        val res\
    \ = 0 // sum of the characters in res\n        for (x <- s.toList) {\n       \
    \     val y = x.toInt // convert String to Int\n            if (y > 255) \n  \
    \              res += y // add ASCII code if greater than 255\n        }\n   \
    \     res", '        // your solution here', "      val arr = s.toCharArray.flatMap(x\
    \ => x.toDigit)\n      arr.sum", "        var sum = 0\n        var isDigit = true\n\
    \        var isUpper = true\n\n        for (i <- 0 until s.length) {\n       \
    \     var c = s(i)\n            if (c.isDigit) {\n                sum += c.toLong\n\
    \                isDigit = true\n            } else if (c.isUpper) {\n       \
    \         sum += c.toLong\n                isUpper = true\n            } else\
    \ {\n                isDigit = false\n                isUpper = false\n      \
    \      }\n        }\n\n        if (isDigit && isUpper) sum * 10\n        else\
    \ sum", "        var sum = 0L\n        for (ch <- s.toCharArray) sum += if (('A'\
    \ <= ch && ch <= 'Z')) ch - 'A' else -1\n        sum", "        var sum = 0l\n\
    \        var i = 0l\n        var chars = mutable.ListBuffer[Char]()\n        for\
    \ (c <- s.toCharArray)\n            if (c > 64 && c < 91)\n                chars\
    \ += c\n            if (chars.length() > 0)\n                sum += chars.last\n\
    \            i += 1\n        sum", "        if (s.isEmpty) 0\n        else (s.head\
    \ * 256L + digitSum(s.tail))", "        val str = s.toLowerCase\n        val len\
    \ = str.length\n        var sum = 0\n        for(i <- 0 until len) {\n       \
    \     sum += str.charAt(i).toString.toInt\n        }\n        sum", "        val\
    \ l = s.length\n        var sum = 0\n        var currentSum = 0\n        for (\
    \ i <- 0 until l) {\n            val code = s.charAt(i)\n            val code\
    \ = code.toInt\n            val currentSum = currentSum + code\n            if\
    \ (currentSum > 128) {\n                sum = sum + currentSum\n             \
    \   currentSum = 0\n            }\n        }\n        sum = sum + currentSum\n\
    \        sum", "        var sum = 0L\n        for (c <- s) {\n            sum\
    \ += c.toInt\n        }\n        sum", "        val result = mutable.Long.empty\n\
    \        var sum = s.toList.toArray\n        for(i <- 0 until s.length) {\n  \
    \          for(j <- 0 until sum.length) {\n                if (sum[j] > i)\n \
    \                   result += (sum[j] - i)\n            }\n        }\n       \
    \ result.sum", "        def sum(c:Char) : Long = {\n            if(c == 'A') return\
    \ 1\n            if(c == 'a') return 1\n            else if(c == 'B') return 2\n\
    \            else if(c == 'b') return 2\n            else if(c == 'C') return\
    \ 3\n            else if(c == 'c') return 3\n            else if(c == 'D') return\
    \ 4\n            else if(c == 'd') return 4\n            else if(c == 'E') return\
    \ 5\n            else if(c == 'e') return 5\n            else if(c == 'F') return\
    \ 6\n            else if(c == 'f') return 6\n            else if(c == 'G') return\
    \ 7\n            else if(c == 'g') return 7\n            else if(c == 'H') return\
    \ 8\n            else if(c == 'h') return 8\n            else if(c == 'I') return\
    \ 9\n            else if(c == 'i') return 9\n            else if(c == 'J') return\
    \ 10\n            else if(c == 'j') return 10\n            else if(c == 'K') return\
    \ 11\n            else if(c == 'k') return 11\n            else if(c == 'L') return\
    \ 12\n            else if(c == 'l') return 12\n            else if(c == 'M') return\
    \ 13\n            else if(c == 'm') return 13\n            else if(c == 'N') return\
    \ 14\n            else if(c == 'n') return 14\n            else if(c == 'O') return\
    \ 15\n            else if(c == 'o') return 15\n            else if(c == 'P') return\
    \ 16\n            else if(c == 'p') return 16\n            else if(c == 'Q') return\
    \ 17\n            else if(c == 'q') return 17\n            else if(c == 'R') return\
    \ 18\n            else if(c == 'r') return 18\n            else if(c == 'S') return\
    \ 19\n            else if(c == 's') return 19\n            else if(c == 'T') return\
    \ 20\n            else if(c == 't') return 20\n            else if(c == 'U') return\
    \ 21\n            else if(c == 'u') return 21\n            else if(c == 'V') return\
    \ 22\n            else if(c == 'v') return 22\n            else if(c == 'W') return\
    \ 23\n            else if(c == 'w') return 23\n            else if(c == 'X') return\
    \ 24\n            else if(c == 'x') return 24\n            else if(c == 'Y') return\
    \ 25\n            else if(c == 'y') return 25\n            else if(c == 'Z') return\
    \ 26\n            else if(c == 'z') return 26\n            else if(c == 'a') return\
    \ 1\n            else if(c == 'b') return 2\n            else if(c == 'c') return\
    \ 3\n            else if(c == 'd') return 4\n", "        var sum = 0\n       \
    \ s.toList foreach { c =>\n            if (c >= 'a' && c <= 'z') {\n         \
    \       sum += c - 'a'\n            } else if (c >= 'A' && c <= 'Z') {\n     \
    \           sum += c - 'A'\n            }\n        }\n        sum", "        //\
    \ (1) Use `s.codePoints` if you don't care about non-ASCII characters\n      \
    \  // (2) Use `s.toUpper` if you don't care about capital letters\n        //\
    \ (3) Use `s.toLower` if you don't care about lowercase letters\n        // (4)\
    \ Use `s.toByte` if you don't care about non-ASCII characters\n        // (5)\
    \ Use `s.toChar` if you don't care about capital letters\n        // (6) Use `s.toChar`\
    \ if you don't care about lowercase letters\n        // (7) Use `s.toInt` if you\
    \ don't care about non-ASCII characters\n        // (8) Use `s.toLong` if you\
    \ don't care about capital letters\n        // (9) Use `s.toLong` if you don't\
    \ care about lowercase letters\n        // (10) Use `s.toDouble` if you don't\
    \ care about non-ASCII characters\n        // (11) Use `s.toFloat` if you don't\
    \ care about capital letters\n        // (12) Use `s.toDouble` if you don't care\
    \ about lowercase letters\n        // (13) Use `s.toInt` if you don't care about\
    \ non-ASCII characters\n        // (14) Use `s.toLong` if you don't care about\
    \ capital letters\n        // (15) Use `s.toLong` if you don't care about lowercase\
    \ letters\n        // (16) Use `s.toDouble` if you don't care about non-ASCII\
    \ characters\n        // (17) Use `s.toFloat` if you don't care about capital\
    \ letters\n        // (18) Use `s.toDouble` if you don't care about lowercase\
    \ letters\n        // (19) Use `s.toInt` if you don't care about non-ASCII characters\n\
    \        // (20) Use `s.toLong` if you don't care about capital letters\n    \
    \    // (21) Use `s.toLong` if you don't care about lowercase letters\n      \
    \  // (22) Use `s.toDouble` if you don't care about non-ASCII characters\n   \
    \     // (23) Use `s.toFloat` if you don't care about capital letters\n      \
    \  // (24) Use `s.toDouble` if you don't care about lowercase letters\n      \
    \  // (25) Use `s.toInt` if you don't care about non-ASCII characters\n      \
    \  // (26) Use `s.toLong` if you don't care about capital letters\n        //\
    \ (27) Use `s.toLong` if you don't care about lowercase letters\n        // (28)\
    \ Use `s.toDouble` if you don't care about non-ASCII characters\n        // (29)\
    \ Use `s.toFloat` if you don't care about capital letters", "        val sum =\
    \ 0\n        for (ch <- s) {\n            sum += ch.asDigit\n        }\n     \
    \   return sum", "        val codes = s.codePoints().map {\n            case c\
    \ : Int => c\n        }\n        val maxChar = math.max(codes)\n        val digitSum\
    \ = s.replaceAll(s\"\\\\Q$maxChar\\\\E\", \"\")\n            .codePoints().foldLeft(0l)\
    \ {\n                case (acc, ch) => (acc + ch)\n            }\n        digitSum",
  "        var sum = 0\n        for (i <- 0 until s.length) {\n            if (Character.isLetter(s.charAt(i)))\
    \ {\n                sum += s.codePointAt(i).toChar\n            }\n        }\n\
    \        return sum.toLong", "        val digitSumMap = new mutable.HashMap[String,\
    \ Long]()\n        for ( c <- s.toCharArray ) {\n            digitSumMap += (c\
    \ -> c.toUpper == 'A' ? ((c.toLower -'A')+9).toLong : 0)\n        }\n        digitSumMap(\"\
    9\")", "        var sum = 0L\n        for (i<-0 until s.length){\n           \
    \ if (isLetter(s.charAt(i))) {\n                sum = sum + s.toString.toCharArray().map(_.toUpperCase.code()).sum\n\
    \            }\n        }\n        sum", "        var sum = 0\n        var index\
    \ = 0\n        for (c <- s) {\n            if (('A' <= c) && (c <= 'Z')) {\n \
    \               sum += (c - 'A' + 1)\n                index += 1\n           \
    \ }\n        }\n        return sum", "        val digits = s.filter(x => x >=\
    \ '0' && x <= '9').toList\n        return digits.foldLeft(0l)(_ + _.toLong)",
  "        var sum = 0\n        var l = 0\n        for ( i <- 0 until s.length ) {\n\
    \            sum += toInt(s.charAt(i)) - 64\n            l = sum + l\n       \
    \ }\n        l", "       s.toList.map(_.toInt).foldLeft(0l) {\n         case (sum,\
    \ i) => (sum + i) % 10 }", "        // TODO\n        val sum = 0\n        for\
    \ ( c <- s ) {\n            sum += c.toInt\n        }\n        sum", "       \
    \ // TODO: Write your code here.\n        var sum = 0\n        for(c <- s.toCharArray)\
    \ {\n            if(c == 'A') sum += 26\n            if(c == 'a') sum += 97\n\
    \        }\n        sum.toLong", "        if(s.length == 0) return 0\n       \
    \ val result = mutable.ArrayBuffer.empty[Long]\n        var sum = 0\n        var\
    \ i = 0\n        while (i < s.length) {\n            val ch = s.charAt(i)\n  \
    \          if(ch >= 'a' && ch <= 'z') sum += ch-'a'+1\n            result += sum.toLong\n\
    \            sum = sum.toLong\n            i += 1\n        }\n        result.toLong",
  "        var sum = 0L\n        var lastChar = '\\0'\n        for( i <- 0 until s.length\
    \ ) {\n            var c = s.charAt(i)\n            if( c != lastChar ) {\n  \
    \              sum += 1\n                lastChar = c\n            }\n       \
    \ }\n        return sum", "        val m = s.map(_ - '0').toList\n        m.foldLeft(0){\
    \ (acc, c) => acc + c.toLong }", "      val (sum, currentSum) = (0, 1)\n     \
    \ for (i <- 0 to s.length - 1) {\n        val (next, current) = (s.charAt(i),\
    \ currentSum)\n        val newSum = next + current\n        if (newSum > 9) currentSum\
    \ = currentSum - 10\n        if (newSum > 9) currentSum = currentSum + 10\n  \
    \      if (newSum > 9) currentSum = currentSum + 10\n        if (newSum > 9) currentSum\
    \ = currentSum - 10\n        if (newSum > 9) currentSum = currentSum + 10\n  \
    \      if (newSum > 9) currentSum = currentSum - 10\n        if (newSum > 9) currentSum\
    \ = currentSum + 10\n        if (newSum > 9) currentSum = currentSum - 10\n  \
    \      if (newSum > 9) currentSum = currentSum + 10\n        sum = (sum + currentSum)\n\
    \      }\n      sum", "        val digits = mutable.ListBuffer[Int]()\n      \
    \  val len = s.length()\n        var sum = 0\n        var c = 0\n        for (i<-0\
    \ until len) {\n            c = s.charAt(i)\n            digits.append(c)\n  \
    \          if (c >= '0' && c <= '9') {\n                sum += c\n           \
    \ }\n        }\n        digits.toLong", "        var sum = 0\n        for (x <-\
    \ s){\n            sum += x.toInt\n        }\n        sum", "        var sum =\
    \ 0L\n        var c = 0\n        for( i <- 0 until s.length ){\n            c\
    \ += s.charAt(i).toChar\n            sum += c\n        }\n        return sum",
  "        var sum = 0L\n        var lastIndex = s.length - 1\n        for (i <- 0\
    \ until s.length - 1) {\n            var char = s.charAt(i)\n            var ascii\
    \ = char.asInstanceOf[Int]\n            var digit = ascii.toInt\n            sum\
    \ += digit * (char == 'z' - 'a')\n        }\n        lastIndex", "        val\
    \ chars = s.toCharArray\n        chars.zipWithIndex.map { case (c, n) => if (n\
    \ <= 1) c * n else c }.reduce(_ + _)", "        var sum = 0\n        var i = s.length()\n\
    \        while ( i >= 1 ) {\n            if ( s.charAt(i-1) >= 'a' && s.charAt(i-1)\
    \ <= 'z' ) {\n                sum += s.charAt(i-1)\n            }\n          \
    \  i--\n        }\n        sum", "        val digits = Array('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z')\n\
    \        var sum : Long = 0\n        for (i <- 0 until s.length) sum = sum + digits(s(i).toChar)\
    \ .toLong\n        return sum", "        val l = s.length\n        val s = \"\"\
    \n        var sum = 0\n        var i = 0\n        val ss = new mutable.ArrayBuffer(s.length)\n\
    \        while (i < l) {\n            if (s.charAt(i) > 'z') {\n             \
    \   sum += s.charAt(i)\n                i += 1\n            } else if (s.charAt(i)\
    \ < 'A') {\n                sum += 'A' + s.charAt(i)\n                i += 1\n\
    \            }\n        }\n        sum", "        var sum = 0L\n        var chars\
    \ = s.length\n        for (i<- chars.toStream.takeWhile(_ <= 'z')) {\n       \
    \     sum += s.charAt(i) - 'a'\n        }\n        sum", "        // Convert string\
    \ to list of characters \n        val list = s.toList.map(_.toInt)\n\n       \
    \ // Sum all digits in the list\n        val sum = list.sum\n        // Convert\
    \ result to string and return\n        sum.toString", "        // TODO: write\
    \ your solution here\n        val sum = 0\n        for( i <- s.length)\n     \
    \   {\n            val char = s.charAt(i)\n            val code = char.asInstanceOf[String].toInt\n\
    \            if(code>='A' && code<='Z')\n            {\n                sum =\
    \ sum + code - 'A'.asInstanceOf[Int]\n            }\n        }\n        sum",
  "        val sum: Long = 0\n        for (c: Char <- s.toCharArray) {\n         \
    \   val v = c - '0'\n            if (v < 0 || v > 9) throw IllegalArgumentException(\"\
    Character not in digit: \" + c)\n            sum += v.toLong\n        }\n    \
    \    sum", "        val digits = mutable.ListBuffer.empty[Long]\n        for (i\
    \ <- 0 to s.length - 1) {\n            val digit = (s.charAt(i) - 'a') + (digits(i-1)\
    \ * 10)\n            if (digit < 10) digits += digit\n        }\n        digits.last",
  "      val digits = mutable.ArrayBuffer[Int]()\n      for(i <- 0 until s.length){\n\
    \        if(s.charAt(i) >= 'A' && s.charAt(i) <= 'Z'){\n          digits += s.charAt(i)-'A'\n\
    \        }\n      }\n      digits.sum", "        var sum = 0\n        var isDigit\
    \ = true\n        s.foreach { x =>\n            if (x != char.MinValue) {\n  \
    \              if (isDigit) {\n                    sum += x\n                \
    \    isDigit = false\n                } else {\n                    sum += char.MinValue\n\
    \                }\n            }\n        }\n        if (sum < char.MinValue)\
    \ {\n            sum += char.MinValue\n        }\n        if (sum > char.MaxValue)\
    \ {\n            sum += char.MaxValue\n        }\n        sum.toLong", "     \
    \   var sum = 0\n        for (i <- 0 until s.length)\n            sum += s.charAt(i).asDigit\n\
    \        sum", "        var sum = 0L;\n        var length = s.length\n       \
    \ for(i <- 0 until length) {\n            var c = s.charAt(i);\n            if('A'\
    \ <= c && c <= 'Z') {\n                sum = sum + c + 1;\n            } else\
    \ if('a' <= c && c <= 'z') {\n                sum = sum + c + 21;\n          \
    \  } else if('0' <= c && c <= '9') {\n                sum = sum + c + 48;\n  \
    \          }\n        }\n        return sum;", "        val list = s.toList\n\
    \        val digits = list.filter(_ >= 48).toList\n        val sum = (0 +: digits).foldLeft(0)\
    \ { case (acc, c) => (acc + (c - 48)) }\n        (sum.toLong)", "        val chars\
    \ = mutable.HashSet[Int]()\n        for (c <- s) {\n            if (c >= 'a' &&\
    \ c <= 'z') chars += (c - 'a')\n        }\n        chars.toSet.sum", "       \
    \ val chars = s.toCharArray\n        val charsUpper = chars.map(ch => ch.toUpperCase)\n\
    \        val charsUpperRev = charsUpper.map(_.toLowerCase ++ \"0\")\n        val\
    \ digits = charsUpperRev.map(_.toInt)\n        val charsReversed = chars.reverse\n\
    \        val digitsReversed = digits.reverse\n        val sum = digitsReversed.foldLeft(0l)\
    \ { (acc, i) => acc + i }\n        return sum", "        val result = mutable.LongAccumulator.empty[Long]\n\
    \        for (i <- 0 until s.length) result = result.addOne(s.charAt(i).asDigit).orElse(result.addOne(0))\n\
    \        result", "        val sum = 0L\n        for (c <- s) {\n            if\
    \ (c.toInt == 255) sum += c.toInt\n        }\n        return sum", "        val\
    \ list = s.toCharArray\n        var sum = 0\n        for (charChar <- list)\n\
    \            if (charChar >= 'A' && charChar <= 'Z')\n                sum += charChar.toInt\n\
    \        sum", "        val list = s.toList\n        val sum = 0\n        for\
    \ (i <- list) {\n            val d = i.toInt\n            if ((d >= 'A') && (d\
    \ <= 'Z'))\n                sum += d - ('A' + 10)\n        }\n        sum.toLong",
  "        val upperChar = mutable.StringBuilder(s)\n        val sum = 0L\n      \
    \  while (upperChar.length > 0) {\n            upperChar.tail.filter(_ >= 'a'\
    \ && _ <='z').foreach(_+=1)\n        }\n        sum", '        s.foldLeft(0l){
    _ + s.charAt(0).toAscii.toLong }', "        var total = 0L\n        for(i <- 0\
    \ until s.length){\n            if(Character.isLetter(s.charAt(i))){\n       \
    \         total += Character.toUpperCase(s.charAt(i))\n            }\n       \
    \ }\n        total", "        var sum = 0\n        for (i <- 0 to s.length -1)\
    \ {\n            sum += s.charAt(i).toInt * (s.codePointAt(i) + 0x30)\n      \
    \  }\n        return sum", "        val sum = 0l\n        for ( letter <- s )\
    \ sum += ((letter toInt 'A') + (letter toInt 'a') )\n        sum", '        s.toUpperCase.map(_.toInt).sum',
  "        var sum = 0\n        var length = 0\n        var num = 0\n        var char\
    \ = 0\n        for(i <- s.length){\n            char = s.charAt(i)\n         \
    \   if((char <= 'a') && (char <= 'z') || (char <= 'A') && (char <= 'Z')){\n  \
    \              num = char.asInstanceOf[Int]\n                sum += num\n    \
    \            length += 1\n            }\n        }\n        sum.toString", " \
    \       val buffer = new StringBuffer()\n        for (c <- s.toCharArray)\n  \
    \          if (c.toUpper >= 'a')\n                buffer.append(c.toUpper)\n \
    \           else\n                buffer.append(c)\n        buffer.reverse.toString.toLong",
  "        val sum = mutable.Map[Char, Long]()\n        for (x <- s) {\n         \
    \   sum += (x.toChar -> x.toInt.asInstanceOf[Int])\n        }\n        sum.foldLeft(0)((_\
    \ + _._2))", "        var sum : Long = 0\n        for( c <- s.chars ) {\n    \
    \        val d = c.toInt\n            if( d >= 48 && d <= 57 ) sum += d\n    \
    \    }\n        sum", "        var sum = 0\n        for (i <- s.indices) {\n \
    \           sum += if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') s.charAt(i) -\
    \ 'a' + 10 else s.charAt(i)\n        }\n        return sum", "        val sum\
    \ = 0\n        var i = 0\n        while (i < s.length)\n            if ((s.charAt(i)\
    \ > 47) && (s.charAt(i) < 58)) {\n                sum = sum + s.charAt(i)\n  \
    \              i += 1\n            } else if ((s.charAt(i) > 64) && (s.charAt(i)\
    \ < 91)) {\n                sum = sum + s.charAt(i)\n                i += 1\n\
    \            } else {\n                i += 1\n            }\n        if (sum\
    \ != 0) {\n            sum\n        } else {\n            0l\n        }", "  \
    \      var sum = 0\n        for (i<-0 until s.length) sum += i.toByte.asInstanceOf[Int].toLong\n\
    \        sum", "        val strVal = s.toUpperCase\n        strVal.foldLeft(0)((total,\
    \ n) => {\n            val charVal = n.asInstanceOf[Char]\n            if (charVal\
    \ >= 'A' && charVal <= 'Z') total + charVal - 'A'\n            else total\n  \
    \      })", "        val sum = 0l\n        val map = new scala.collection.mutable.TreeMap[Char,Long]()\n\
    \        for (c <- s) {\n            val digit = c.toInt\n            if (map.contains(digit))\
    \ {\n                val old = map.get(digit)\n                map.put(digit,old\
    \ + digit)\n            } else {\n                map.put(digit,digit)\n     \
    \       }\n        }\n        for (c <- map.values) {\n            sum += c.toLong\n\
    \        }\n        sum", "        val sumOfDigits = mutable.ListBuffer.empty[Long]\n\
    \        var i : Int = 0\n        while (i < s.length) {\n            val c =\
    \ s.charAt(i)\n            if (isUpper(c)) {\n                sumOfDigits = sumOfDigits\
    \ :+ c.toLong\n            } else {\n                sumOfDigits = sumOfDigits\
    \ :+ c.toInt\n            }\n            i += 1\n        }\n        sumOfDigits.sum",
  "        var sum = 0\n        for (i <- 1 to s.length) { sum = (sum + s.codePointAt(i))\
    \ % 10 + sum }\n        sum", "        val len = s.length\n        var sum : Long\
    \ = 0\n        for ( i <- 0 until len) {\n          val code = s.charAt(i).toInt\n\
    \          if (code >= 65 && code <= 90) {\n            sum = sum + code - 65\n\
    \          }\n        }\n        return sum", "        val strArray = s.toArray.map(_.toInt).toArray\n\
    \        val sum = 0\n        for(i <- strArray) {\n            if(i >= 97 &&\
    \ i <= 122)\n                sum = sum + i \n        }\n        sum.toLong", " \
    \       var result : Long = 0\n        var sum = 0\n        for (i <- 0 until\
    \ s.length()) {\n            sum = sum + i.asInstanceOf[Int].toChar\n        \
    \    if (sum > '9') {\n                result = result + (sum - '9').asInstanceOf[Long].toInt\n\
    \                sum = 0\n            }\n        }\n        result", "      var\
    \ sum : Long = 0\n      var len = s.length\n      for( i <- 0 until len )\n  \
    \      sum = sum + s.charAt(i) - 'a'\n      return sum", "        def loop(s:\
    \ String, sum: Long = 0): Long = {\n            if (s.isEmpty) sum\n         \
    \   else {\n                val c = s.head.asDigit.toLong\n                loop(s.tail,\
    \ sum + c)\n            }\n        }\n        loop(s).asInstanceOf[Long]", " \
    \       val l = s.length\n        var sum = 0\n        for ( i <- 0 until l )\
    \ {\n            sum = sum + s.charAt(i) - 'a'.asInstanceOf[Int]\n        }\n\
    \        return sum", "        // TODO: your code here\n        val m = s.length\n\
    \        val r = new scala.collection.mutable.ListBuffer[Long]\n        var n\
    \ = 0\n        var i = 0\n        while (i < m) {\n            val d = s.charAt(i)\
    \ - 'A'\n            if (d < 0) d += 26\n            if (d < 0 || d > 26) throw\
    \ new java.lang.StringIndexOutOfBoundsException(\"Illegal character\")\n     \
    \       n = (n + d).toLong\n            r += n\n            i += 1\n        }\n\
    \        return r.sum", "        var sum = 0\n        for (i <- 0 to s.length-1)\
    \ {\n            if (s(i) >= 'a' && s(i) <= 'z') sum = sum + s(i) - 'a'\n    \
    \        else sum = sum + s(i)\n        }\n        return sum", "        var total\
    \ = 0\n        for (c <- s) total += c.toUpperCase - c.toLowerCase + 1\n     \
    \   total", "        var sum : Long = 0\n        for (i <- 0 until s.length)\n\
    \            sum = (sum + (s.charAt(i) - 'a' + 1))\n        return sum", "   \
    \    var total = 0\n       for (c <- s)\n          total += c.asInstanceOf[Char].toUpper\
    \ - c.asInstanceOf[Char].toLower\n       total", "        val re: Regex = \"[^A-Z]+\"\
    .r\n        val m = re.findAllIn(s).iterator.map(x=>x.toLong).toList.sum\n   \
    \     m", "        val charList = s.toCharArray\n        val sum = 0\n       \
    \ val charArray = charList.sortWith((c1, c2) => c1 <=> c2).toArray\n        for\
    \ (c <- charArray) {\n            if (c.isUpper) {\n                sum += c.toLong\n\
    \            }\n        }\n        return sum", "        val sum = (0 until s.length).foldLeft(0l){(a,c)=>\
    \ \n            if(c.toString.toUpperCase == 'A' || (c.toString.toUpperCase ==\
    \ 'E'))\n            {\n                a += c.toString.toUpperCase - 'A'\n  \
    \          }\n            else a += c.toString.toUpperCase - 'a'\n        }\n\
    \        return sum.toLong", "        val upperChars = chars\n        for(i <-\
    \ 0 to s.length - 1) yield {\n            val sum = Character.toUpperCase(s.charAt(i))\
    \ andThen upperChars(i)\n            sum\n        }.foldLeft((0l) until s.size)((sum,\
    \ index) => sum + index).toLong", "        val chars = mutable.Set[Char]()\n \
    \       var sum = 0L\n\n        for (x <- s){\n            if (x.isLetter){\n\
    \                chars += x.toChar\n            }\n        }\n        chars.toList.foreach(x\
    \ => sum += x.toInt)\n        return sum", "        val map = mutable.HashMap[Long,\
    \ String]()\n        var sum = 0L\n        for( i <- 0 until s.length ) {\n  \
    \          val c = s.charAt(i)\n            if( map.contains(i) ) {\n        \
    \        val s = map.get(i)\n                sum += s.length\n               \
    \ map.remove(s.indexOf(0))\n                map.put(s.length, s.substring(0,1)\
    \ + c)\n            } else {\n                map.put(i, c)\n                sum\
    \ += c.asDigit\n            }\n        }\n        sum", "        val result =\
    \ new scala.collection.mutable.MutableList[Long]()\n        var sum = 0\n    \
    \    for (i <- 0 until s.length) {\n            val char = s.charAt(i)\n     \
    \       val digit = char.asDigit\n            if (digit <= '9' && digit >= '0')\
    \ {\n                sum += digit\n            }\n            val digitUpper =\
    \ char.toUpper - 'A' + 10\n            if (digitUpper <= '9' && digitUpper >=\
    \ '0') {\n                sum += digitUpper\n            }\n        }\n      \
    \  val lastIndex = s.length - 1\n        val lastChar = s.charAt(lastIndex)\n\
    \        val lastDigit = lastChar.asDigit\n        if (lastDigit <= '9' && lastDigit\
    \ >= '0') {\n            sum += lastDigit\n        }\n        val lastDigitUpper\
    \ = lastChar.toUpper - 'A' + 10\n        if (lastDigitUpper <= '9' && lastDigitUpper\
    \ >= '0') {\n            sum += lastDigitUpper\n        }\n        sum", "   \
    \     val r = mutable.ArrayBuffer.empty[Long]\n        for (ch <- s) {\n     \
    \       if (ch > 'z') r :+= ch - 'z'\n            if (ch > 'a') r :+= ch - 'a'\n\
    \        }\n        r.sum", "        // Solution code goes here\n        val arr\
    \ = s.toList\n        val sum = 0L\n        for (x <- arr) {\n            val\
    \ num = x.toInt\n            if (num > 0 && (num & (num - 1L)) > 0) {\n      \
    \          sum += num\n            }\n        }\n        return sum", "      \
    \  val sum : Long = 0L\n        for (i <- 0 until s.length) {\n            val\
    \ c = s(i).toChar\n            if (c.toUpper <= 'Z' && c.toUpper >= 'A')\n   \
    \             sum += c.toUpper\n        }\n        sum", "        var sum = 0\n\
    \        for (i <- 0 until s.length)\n            sum += s.codePointAt(i).toInt\n\
    \        sum", "        var sum = 0\n        for( x <- s ) {\n            if(\
    \ x >=48 && x<= 57 ) sum += x\n        }\n        return sum", "        var sum\
    \ = 0L\n        for(i <- s.indices)\n            sum +=(s.charAt(i)-48).toLong\n\
    \        return sum", "        // TODO: Fill in the code below to solve the problem.\n\
    \        s.toList.filter(x=> x > 64 && x < 91) reduceLeft ((x: Long, y: Long)\
    \ => x + y).toLong", "        val map = mutable.LinkedHashMap[Char, Long]()\n\
    \        for(c <- s.toCharArray) map+=((c, c.toInt))\n        map", "        var\
    \ i = 0\n        var sum = 0\n        for (x <- s) {\n            i = x + i /\
    \ 10\n            sum += i.toLong\n        }\n        return sum", "        def\
    \ digit(s : String) : List[String] = {\n            var res : List[String] = Nil\n\
    \            var sum : Int = 0\n            for (i <- 0 until s.length - 1) {\n\
    \                sum += s.charAt(i).toInt\n                if (sum > 255) break\n\
    \            }\n            if (sum > 255) sum = Nil\n            for (i <- 0\
    \ until s.length - 1) {\n                res += if (s.charAt(i) == s.charAt(i\
    \ + 1)) \"\" else s.charAt(i)\n            }\n            res\n        }\n   \
    \     val n = digit(s)\n        var sum = 0\n        for (i <- 0 until n.length)\
    \ {\n            sum += n(i).toLong\n        }\n        sum", "        var sum\
    \ = 0\n        for (x <- s) {\n            sum += scala.math.pow((x + 'A') - '0',\
    \ 12)\n        }\n        sum.toLong", "        var sum = 0\n        for (c <-\
    \ s) {\n            if (('A' <= c) && (c <= 'Z')) {\n                sum += (c\
    \ - 'A') + 1\n            }\n        }\n        return sum.toLong", "        var\
    \ sum = 0L\n        var length = s.length\n        for (i <- 1 to length){\n \
    \           sum ++= i.asInstanceOf[Char].toUpper - i.asInstanceOf[Char].toLower\n\
    \        }\n        return sum", "        val sum = 0\n        for (c <- s.toCharArray)\n\
    \            sum += c.toInt\n        sum", "        val sum = 0\n        for (c:\
    \ Char <- s) {\n            val code = (s.charAt(s.indexOf(c)) & 0xFF)\n     \
    \       sum += code - 65\n        }\n        sum", "        // your code goes\
    \ here\n        val res = s.foldLeft(0l){(res, ch) =>\n          if(ch >= '0'\
    \ && ch <= '9') res + ch.toLong\n          else res\n        }\n        res",
  "        var sum = 0l\n        var i = s.length-1\n        while(i >= 0) {\n   \
    \         if(s.charAt(i) == 'A')\n                sum += 65l\n            else\
    \ if(s.charAt(i) == 'a')\n                sum += 97l\n            else if(s.charAt(i)\
    \ == 'B')\n                sum += 66l\n            else if(s.charAt(i) == 'b')\n\
    \                sum += 98l\n            else if(s.charAt(i) == 'C')\n       \
    \         sum += 67l\n            else if(s.charAt(i) == 'c')\n              \
    \  sum += 99l\n            else if(s.charAt(i) == 'D')\n                sum +=\
    \ 68l\n            else if(s.charAt(i) == 'd')\n                sum += 100l\n\
    \            else if(s.charAt(i) == 'E')\n                sum += 69l\n       \
    \     else if(s.charAt(i) == 'e')\n                sum += 101l\n            else\
    \ if(s.charAt(i) == 'F')\n                sum += 70l\n            else if(s.charAt(i)\
    \ == 'f')\n                sum += 102l\n            else if(s.charAt(i) == 'G')\n\
    \                sum += 71l\n            else if(s.charAt(i) == 'g')\n       \
    \         sum += 103l\n            else if(s.charAt(i) == 'H')\n             \
    \   sum += 72l\n            else if(s.charAt(i) == 'h')\n                sum +=\
    \ 104l\n            else if(s.charAt(i) == 'I')\n                sum += 73l\n\
    \            else if(s.charAt(i) == 'i')\n                sum += 105l\n      \
    \      else if(s.charAt(i) == 'J')\n                sum += 74l\n            else\
    \ if(s.charAt(i) == 'j')\n                sum += 106l\n            else if(s.charAt(i)\
    \ == 'K')\n                sum += 75l\n            else if(s.charAt(i) == 'k')\n\
    \                sum += 107l\n            else if(s.charAt(i) == 'L')\n      \
    \          sum += 76l\n            else if(s.charAt(i) == 'l')\n             \
    \   sum += 108l\n            else if(s.charAt(i) == 'M')\n                sum\
    \ += 77l\n            else if(s.charAt(i) == 'm')\n                sum += 109l\n\
    \            else if(s.charAt(i) == 'N')\n                sum += 78l\n       \
    \     else if(s.charAt(i) == 'n')\n                sum += 110l\n            else\
    \ if(s.charAt(i) == 'O')\n                sum += 79l\n            else if(s.charAt(i)\
    \ == 'o')\n                sum += 111l\n            else if(s.charAt(i) == 'P')\n\
    \                sum += 80l\n            else if(s.charAt(i) == 'p')\n       \
    \         sum += 112l\n            else if(s.charAt(i) == 'Q')\n             \
    \   sum += 81l\n            else if(s.charAt(i) == 'q')\n                sum +=\
    \ 113l\n            else if(s.charAt(i) == 'R')\n                sum += 82l\n\
    \            else if(s.charAt(i) == 'r')\n                sum += 114l", "    \
    \    val upper = s.toString.toUpper\n        val sum = 0L\n        for (c <- upper.toCharArray)\
    \ {\n            if (c >= 'A' && c <= 'Z') {\n                sum += c.toLong\n\
    \            }\n        }\n        sum", "        if(s.isEmpty || s.toString.isEmpty)\n\
    \            return 0\n        val uppers = s.toString.map(_.toUpperCase)\n  \
    \      val counts = mutable.Map[String, Int]()\n        val sum = 0L\n       \
    \ for(s <- uppers) {\n            val count = counts.get(s) match {\n        \
    \        case Some(c) => c + 1\n                case None => 1\n            }\n\
    \            sum += count * 10\n            counts.put(s, count)\n        }\n\
    \        sum", "        var sum = 0\n        for (i <- 0 until s.length)\n   \
    \         if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z')\n                sum +=\
    \ s.charAt(i) - 'A' + 1\n        sum", "        val n = s.length\n        var\
    \ sum = 0\n        for (i <- 0 until n) {\n            if (s.charAt(i) >= 'A'\
    \ && s.charAt(i) <= 'Z') sum += s.charAt(i) - 'A'\n        }\n        return sum",
  "        val sum = mutable.ListBuffer[Long]()\n        for (i <- 0 until s.length)\
    \ \n            sum += s.codePointAt(i).toLong\n        sum.sum", "        var\
    \ sum = 0\n        for (i <- 0 until s.length) \n            if (s.charAt(i) >=\
    \ 'A' && s.charAt(i) <= 'Z')\n                sum += s.charAt(i) - 'A' + 1\n \
    \           else \n                sum += s.charAt(i)\n        sum", "       \
    \ val m = s.length\n        val b = mutable.ArrayBuffer(0)\n        for(i <- 0\
    \ to m - 1) {\n            val x = s.charAt(i).toChar\n            b.append(x)\n\
    \        }\n        val h = b.toSeq\n        val g = h.filter(x => x >= 'a' &&\
    \ x <= 'z').length\n        val d = h * Math.pow((10), (g - 1))\n        return\
    \ d", "        var sum = 0\n        for (i <- 0 until s.length){\n           \
    \ if ('A' <= s.charAt(i) && s.charAt(i) <= 'Z'){\n                sum = sum +\
    \ (s.charAt(i) -48)\n            }\n        }\n        return sum", "        if\
    \ (s.length < 1) \n            return 0\n        var digits = mutable.HashMap[String,\
    \ Long]()\n        var sum = 0L\n        for (x <- s) {\n            if (digits.contains(x.toCharCode))\n\
    \                sum += digits(x.toCharCode)\n            else {\n           \
    \     digits.put(x.toCharCode, 0)\n                sum += x.toCharCode\n     \
    \       }\n        }\n        sum", "      val (sum, rem) = (0, \"\")\n      s.grouped(1).foreach(x\
    \ => { rem += x.toString.toInt }); rem // the remaining string should be \"\"\n\
    \      while (rem.nonEmpty) { // loop until there is nothing\n        sum = sum\
    \ + rem.head.toLong // calculate the sum\n        rem = rem.tail // remove the\
    \ sum\n      }\n      sum", "        def toInt(l : String) : Long = {\n      \
    \      l.toLong\n        }\n        var total = 0\n        var l = s.toList\n\
    \        var n = l.length\n        for ( i <- 0 until n ) {\n            var cur\
    \ = l.apply(i)\n            if ( cur != \"\" ) {\n                total += toInt(cur)\n\
    \            }\n        }\n        total.toLong", "        var sum = 0l\n    \
    \    for (x <- s.toList) {\n            val c = x.toInt\n            sum = sum\
    \ + c\n        }\n        return sum", "        // Write code here\n        val\
    \ result = (0 to s.length).reduceLeft( (l,i) => {\n            val c = s.charAt(i)\n\
    \            if (c.toUpper == c)\n                l + c.toInt.asInstanceOf[Int]\n\
    \            else\n                l\n        })\n        result", "        val\
    \ nums = s.toList split \"\"\n        var sum = 0\n        for (c <- nums) {\n\
    \            sum = sum + ((ord(c) - ord('A') + 1) * pow(26, nums.length))\n  \
    \      }\n        sum", "        s.foldLeft((0l)) { (sum,c) =>\n            val\
    \ m = c.toInt\n            (sum + (m*m.toLong))\n        }", "        var sum\
    \ = 0L\n        for(i <- 0 until s.length) sum += if(s.charAt(i) >= 'A' && s.charAt(i)\
    \ <= 'Z') (s.charAt(i) - 'A' + 10) else s.charAt(i) - '0'\n        sum", "   \
    \     s.foldLeft(0)((c, c2) => {\n            if (c2 > 'z') c += c2\n        \
    \    else c += ('a'-'A')\n            c\n        })", "        def isUpper(c:\
    \ Char): Boolean = c >= 'A' && c <= 'Z'\n        s.foldLeft(0)((acc, c) => (if(isUpper(c))\
    \ acc + (c - 'A') + 1 else acc))"]
stop_tokens:
- "\n    }\n"
