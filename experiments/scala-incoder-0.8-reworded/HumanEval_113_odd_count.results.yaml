language: scala
name: HumanEval_113_odd_count
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  if(lst.size < 2)\n          return Nil\n        if(lst.size == 2)\n       \
    \   return Nil\n        var odd: Int = 0\n        var odd_count = 0\n        for(i\
    \ <- 0 until lst.size)\n          if(i%2 == 1)\n            odd += 1\n       \
    \   else {\n            odd_count += 1\n            odd = i\n          }\n   \
    \     if(odd == 0)\n          Nil\n        else\n          List(s\"the number\
    \ of odd elements $odd_count ${lst.take(odd).mkString(\"1\")}${lst.take(odd).mkString(\"\
    8\")}.\") ++ oddCount(lst.tail)\n      }\n}\n</code>\n<|/ a tags=scala dscore=0\
    \ |>\n<| a |>\n<code>\nscala> def oddDigits(numbers: List[Int]): Option[String]\
    \ = {\n     |   val odd = numbers.sliding(2).find(_ % 2 == 1).getOrElse(-1)\n\
    \     |   if (numbers.isEmpty) None else {\n     |     numbers.foldLeft(\"\")(\
    \ (acc, n) => acc + (if (n % 2 == 1) s\"${n}\" else s\"$n/2\") ).filter(_ => n\
    \ != -1).map(n => s\"the total odd digits is ${n}.\")\n     |   }\n     | }\n\
    oddDigits: numbers: List[Int]=> Option[String]\n</code>\n<|/ a dscore=0 tags=scala\
    \ |>\n<| a |>\n<code>\ndef oddDigits(numbers: List[Int]): Option[String] = numbers\
    \ match {\n    case Nil => None\n    case x :: Nil => Some(\"the total odd digits\
    \ is 0\")\n    case x :: y :: tail =>\n        if (y % 2 == 1) Some(\"the number\
    \ of odd digits is\" + y.toString) else oddDigits(tail)\n    case x :: y :: tail\
    \ =>\n        oddDigits(tail)\n    case x :: y :: tail =>\n        oddDigits(tail)\n\
    \    case x :: y :: tail =>\n        oddDigits(tail)\n    case x :: y :: tail\
    \ =>\n        oddDigits(tail)\n    case x :: y :: tail =>\n        oddDigits(tail)\n\
    \    case x :: y :: tail =>\n        oddDigits(tail)\n    case x :: y :: tail\
    \ =>\n        oddDigits(tail)\n    case x :: y :: tail =>\n        oddDigits(tail)\n\
    \    case x :: y :: tail =>\n        oddDigits(tail)\n    case x :: y :: tail\
    \ =>\n        oddDigits(tail)\n    case x :: y \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpg1v33kc6.scala:32:0 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpg1v33kc6.scala:73:4 ----------------------------\e[0m\e[0m\n\e[31m73\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e[0m    '=>' expected,\
    \ but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpg1v33kc6.scala:80:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m80 |\e[0m}\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0meof expected, but '}' found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpg1v33kc6.scala:72:15 --------------------\e[0m\e[0m\n\
    \e[31m72 |\e[0m    \e[33mcase\e[0m x :: y \n\e[31m\e[31m   |\e[0m            \
    \   ^\e[0m\n\e[31m   |\e[0m               Found:    Unit\n\e[31m   |\e[0m    \
    \           Required: Option[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpg1v33kc6.scala:75:11 ------------------------\e[0m\e\
    [0m\n\e[31m75 |\e[0m    assert(oddCount((List[\e[35mString\e[0m](\e[31m\"1234567\"\
    \e[0m))).equals((List[\e[35mString\e[0m](\e[31m\"the number of odd elements 4n\
    \ the str4ng 4 of the 4nput.\"\e[0m))));\n\e[31m\e[31m   |\e[0m           ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           Not found: oddCount\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpg1v33kc6.scala:76:11 ------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m    assert(oddCount((List[\e[35mString\e[0m](\e[31m\"\
    3\"\e[0m, \e[31m\"11111111\"\e[0m))).equals((List[\e[35mString\e[0m](\e[31m\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\"\e[0m, \e[31m\"the number\
    \ of odd elements 8n the str8ng 8 of the 8nput.\"\e[0m))));\n\e[31m\e[31m   |\e\
    [0m           ^^^^^^^^\e[0m\n\e[31m   |\e[0m           Not found: oddCount\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp"
  stdout: ''
  timestamp: 1660008687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var odd = 0\n        var cnt = 0\n        for(i <- 0 until lst.length -1) {\n\
    \            var num = new BigDecimal(lst(i))\n            var oddbyt = 0\n  \
    \          for(x <- 0 until num.length -1) {\n                if((x.toInt - num.charAt(x).toInt)\
    \ %2 == 1) {\n                    oddbyt = oddbyt + 1\n                }\n   \
    \         }\n            cnt = cnt + oddbyt\n            odd = odd + oddbyt\n\
    \        }\n        (cnt.toString.replaceAll(\"0\",\"the number of odd elements\
    \ \"), odd.toString.replaceAll(\"0\",\"the number of odd elements \"))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5jatr57e.scala:16:40\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mvar\e[0m \e\
    [36mnum\e[0m = \e[33mnew\e[0m \e[35mBigDecimal\e[0m(lst(i))\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                            Found:    String\n\e[31m   |\e[0m               \
    \                      Required: java.math.BigDecimal\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp5jatr57e.scala:18:33 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mfor\e[0m(x <- \e[31m0\e[0m until num.length\
    \ -\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value length is not a member\
    \ of BigDecimal\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5jatr57e.scala:19:34\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e\
    [0m((x.toInt - num.charAt(x).toInt) %\e[31m2\e[0m == \e[31m1\e[0m) {\n\e[31m\e\
    [31m   |\e[0m                              ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                            value charAt is not a member of BigDecimal\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5jatr57e.scala:26:8 ---------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        (cnt.toString.replaceAll(\e[31m\"0\"\e[0m,\e\
    [31m\"the number of odd elements \"\e[0m), odd.toString.replaceAll(\e[31m\"0\"\
    \e[0m,\e[31m\"the number of odd elements \"\e[0m))\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (String, String)\n\e[31m   |\e[0m      \
    \  Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660008689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val count = new mutable.HashMap[String, Int]()\n        lst.foreach(n => {\n\
    \            count.putIfAbsent(n.replaceAll(\"\\\\D\", \"\").replaceAll(\"^0\"\
    , \"\"), 1).foreach { c =>\n                count.put(n.replaceAll(\"\\\\D\",\
    \ \"\").replaceAll(\"^0\", \"\"), c+1)\n            }\n        })\n        return\
    \ lst.map { n =>\n            count.get(n.replaceAll(\"\\\\D\", \"\").replaceAll(\"\
    ^0\", \"\")).map(_ toString)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpmz3cvxj4.scala:20:82 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            count.get(n.replaceAll(\e[31m\"\\\\D\"\e\
    [0m, \e[31m\"\"\e[0m).replaceAll(\e[31m\"^0\"\e[0m, \e[31m\"\"\e[0m)).map(_ toString)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmz3cvxj4.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \ Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \ lst match {\n          case Nil => Nil\n          case _ => {\n            val\
    \ counter = mutable.Map[String, Int]()\n            for(s <- lst){\n         \
    \     for(c <- s.toInt){\n                if(c % 2 == 1){\n                  val\
    \ count = counter.getOrElse(s,0)\n                  counter += (s -> count+1)\n\
    \                }\n              }\n            }\n            val out = Nil\n\
    \            for(e <- counter) out ::= s\"the number of odd elements in the $e\
    \ string of the input.\"\n            out :: oddCount(counter.values.toList)\n\
    \          }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmnhg5jes.scala:16:26 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mcounter\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                          Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpmnhg5jes.scala:18:23\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m              \e[33mfor\e\
    [0m(c <- s.toInt){\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       value foreach is not a member of Int\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmnhg5jes.scala:27:12 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            out :: oddCount(counter.values.toList)\n\e\
    [31m\e[31m   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            Found:   \
    \ (out : scala.collection.immutable.Nil.type)\n\e[31m   |\e[0m            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var results : List[String] = Nil\n        var oddCount = 0\n        var oddDigits\
    \ = 0\n        for (i <- 0 until lst.length) {\n            oddDigits += lst(i).asDigits.filter(_.isDigit).length\n\
    \            if (oddDigits % 2 == 1)\n                results = results :+ oddDigits\
    \ + \" \" + lst(i)\n            oddDigits += 1\n        }\n        results\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp738b2hru.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            oddDigits += lst(i).asDigits.filter(_.isDigit).length\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \  value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp738b2hru.scala:17:32 ------------------------\e[0m\e\
    [0m\n\e[31m17 |\e[0m            oddDigits += lst(i).asDigits.filter(_.isDigit).length\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                         value asDigits is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  lst.foldLeft((0,List[String]())){\n            case ((i,s) ,str) => if (s.matches(\"\
    [1-9]+\")) (i+1,s.split(\"1\").length-1) \n                else if (s.matches(\"\
    0+\")) (i+1,0) \n                else (i+1, (s.split[String](\"\")+s.split(\"\
    1\").length).sum)\n        }._2\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6293o50_.scala:14:39 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e[0m ((i,s) ,str) => \e[33mif\e\
    [0m (s.matches(\e[31m\"[1-9]+\"\e[0m)) (i+\e[31m1\e[0m,s.split(\e[31m\"1\"\e[0m).length-\e\
    [31m1\e[0m) \n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m   value matches is not a member of List[String] - did you\
    \ mean s.patch?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6293o50_.scala:14:65\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mcase\e\
    [0m ((i,s) ,str) => \e[33mif\e[0m (s.matches(\e[31m\"[1-9]+\"\e[0m)) (i+\e[31m1\e\
    [0m,s.split(\e[31m\"1\"\e[0m).length-\e[31m1\e[0m) \n\e[31m\e[31m   |\e[0m   \
    \                                                            ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m   value split is not a member of List[String] - did you mean s.splitAt?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6293o50_.scala:15:27 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (s.matches(\e\
    [31m\"0+\"\e[0m)) (i+\e[31m1\e[0m,\e[31m0\e[0m) \n\e[31m\e[31m   |\e[0m      \
    \                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m   value matches is not a member\
    \ of List[String] - did you mean s.patch?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp6293o50_.scala:15:47 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (s.matches(\e[31m\"0+\"\e\
    [0m)) (i+\e[31m1\e[0m,\e[31m0\e[0m) \n\e[31m\e[31m   |\e[0m                  \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                       Found:    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m      \
    \                                         Required: List[String]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6293o50_.scala:16:30 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33melse\e[0m (i+\e[31m1\e[0m, (s.split[String](\e\
    [31m\"\"\e[0m)+s.split(\e[31m\"1\"\e[0m).length).sum)\n\e[31m\e[31m   |\e[0m \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0m   value split is not\
    \ a m"
  stdout: ''
  timestamp: 1660008690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var odd = 0\n        for(i <- 0 until lst.size) {\n            if(lst(i).forall(c\
    \ => c.forall(c.isDigit))) {\n                odd += 1\n            }\n      \
    \  }\n        if(odd > 0)\n            List(s\"the number of odd elements $odd\
    \ of the $lst.size.\")\n        else\n            List(\"\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5gt6rkrb.scala:15:36 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m(lst(i).forall(\e[36mc\e[0m\
    \ => c.forall(c.isDigit))) {\n\e[31m\e[31m   |\e[0m                          \
    \        ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                  value\
    \ forall is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1660008687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val oddCounts = new mutable.HashMap[Int, List[String]]()\n        lst.foreach(s\
    \ => {\n            val numOfOdds = s.count(_ == '1')\n            oddCounts(numOfOdds)\
    \ ::= s\n        })\n        oddCounts.toList.map{\n            case (k,v) =>\
    \ s\"the number of odd elements ${k} the str${k.asInstanceOf[Int]} of the ${k.asInstanceOf[Int]}.\"\
    \ :: v\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjr56ntfr.scala:13:28 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddCounts\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mInt\e[0m, \e[35mList\e[0m[\e[35mString\e[0m]]()\n\e\
    [31m\e[31m   |\e[0m                            ^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var ans: List[String] = Nil\n        for (a <- lst) {\n            ans = ans\
    \ ::: oddCount(a)\n        }\n        ans\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4n03wmlp.scala:15:35\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            ans = ans ::: oddCount(a)\n\
    \e[31m\e[31m   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m\
    \                                   Found:    (a : String)\n\e[31m   |\e[0m  \
    \                                 Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // 1. Sort the strings (stable sort if sorted already, non-stable if not).\n\
    \        val sortedList = lst.sort\n        // 2. Initialize sum.\n        var\
    \ sum = 0\n        // 3. Iterate through the list, add even strings to sum and\
    \ add odd strings to sum.\n        for ( i <- 0 to (sortedList.length - 1) ) {\n\
    \            if ( (i % 2 == 0) ) {\n                sum = sum + sortedList(i)\n\
    \            } else {\n                sum = sum - sortedList(i)\n           \
    \ }\n        }\n        // 4. Iterate through the list and add the sum for each\
    \ string.\n        // 5. Return list with strings in odd position added as a single\
    \ string.\n        return lst.map(i => sum + i)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps6ju5bjv.scala:14:29 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36msortedList\e[0m = lst.sort\n\
    \e[31m\e[31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \  value sort is not a member of List[String] - did you mean lst.sortBy?\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  def oddNum(lst: String, acc: Int, cur: List[Int]): List[Int] = {\n        \
    \    if (lst.length < 2) acc\n            else oddNum(lst.substring(1,lst.length-1),\
    \ acc * 2, cur + (if (lst(lst.length - 1) % 2 == 1) 1 else 0))\n        }\n\n\
    \        val res = mutable.ArrayBuffer.empty[String]\n        for {i <- lst} res\
    \ += (if (lst(i).length != 1) \"the number of odd digits of the str\" + i + \"\
    \ is\" else \"\" + oddNum(i, 0, List()))\n        res.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpweqedkc5.scala:14:32\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m            \e[33mif\e[0m (lst.length\
    \ < \e[31m2\e[0m) acc\n\e[31m\e[31m   |\e[0m                                ^^^\e\
    [0m\n\e[31m   |\e[0m                                Found:    (acc : Int)\n\e\
    [31m   |\e[0m                                Required: List[Int]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpweqedkc5.scala:15:68 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33melse\e[0m oddNum(lst.substring(\e[31m1\e\
    [0m,lst.length-\e[31m1\e[0m), acc * \e[31m2\e[0m, cur + (\e[33mif\e[0m (lst(lst.length\
    \ - \e[31m1\e[0m) % \e[31m2\e[0m == \e[31m1\e[0m) \e[31m1\e[0m \e[33melse\e[0m\
    \ \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                          ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of List[Int], but could be made available as an extension method.\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpweqedkc5.scala:18:18 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var nOdd = 0\n        for(i <- 0 until lst.length) if(lst(i).length() % 2 ==\
    \ 0) nOdd += 1\n        // println(s\"nOdd $nOdd\")\n        for(i <- 0 until\
    \ lst.length) lst(i) = lst(i).toString.replaceFirst(\" \", \"\")\n        // println(s\"\
    nOdd $nOdd\")\n        var newLst: List[String] = Nil\n        for(i <- 0 until\
    \ lst.length) if(lst(i).length() % 2 == 0) newLst ::= s\"the number of odd elements\
    \ $nOdd of the $i element\"\n        // println(s\"newLst $newLst\")\n       \
    \ for(i <- 0 until lst.length) lst(i) = lst(i).toString.replaceFirst(\" \", \"\
    \")\n        // println(s\"lst $lst\")\n        // println(s\"lst($i) $lst($i)\"\
    )\n        for(i <- 0 until lst.length) if(lst(i).length() % 2 == 0) lst(i) =\
    \ s\"the number of odd elements $nOdd of the $i element\"\n        // println(s\"\
    lst $lst\")\n        // println(s\"lst($i) $lst($i)\")\n        // println(s\"\
    lst $lst\")\n        // println(s\"lst($i) $lst($i)\")\n        // println(s\"\
    lst $lst\")\n        // println(s\"lst($i) $lst($i)\")\n        // println(s\"\
    lst $lst\")\n        // println(s\"lst($i) $lst($i)\")\n        // println(s\"\
    lst $lst\")\n        // println(s\"lst($i) $lst($i)\")\n        // println(s\"\
    lst $lst\")\n        // println(s\"lst($i) $lst($i)\")\n        // println(s\"\
    lst $lst\")\n        // println(s\"lst($i) $lst($i)\")\n        // println(s\"\
    lst $lst\")\n        // println(s\"lst($i) $lst($i)\")\n        // println(s\"\
    lst $lst\")\n        // println(s\"lst($i) $lst($i)\")\n        // println(s\"\
    lst $lst\")\n        // println(s\"lst($i) $lst($i)\")\n        // println(s\"\
    lst $lst\")\n        // println(s\"lst($i) $lst($i)\")\n        // println(s\"\
    lst $lst\")\n        // println(s\"lst($i) $lst($i)\")\n        // println(s\"\
    lst $lst\")\n        // println(s\"lst($i) $lst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpe3nl72i3.scala:16:37 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until lst.length)\
    \ lst(i) = lst(i).toString.replaceFirst(\e[31m\" \"\e[0m, \e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e\
    [0mvalue update is not a member of List[String] - did you mean lst.updated?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpe3nl72i3.scala:21:37 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until lst.length)\
    \ lst(i) = lst(i).toString.replaceFirst(\e[31m\" \"\e[0m, \e[31m\"\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                     ^^^\e[0m\n\e[31m   |\e\
    [0mvalue update is not a member of List[String] - did you mean lst.updated?\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpe3nl72i3.scala:24:66 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until lst.length)\
    \ \e[33mif\e[0m(lst(i).length() % \e[31m2\e[0m == \e[31m0\e[0m) lst(i) = \e[31ms\"\
    the number of odd elements \e[0m$nOdd\e[31m of the \e[0m$i\e[31m element\"\e[0m\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \          ^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[String]\
    \ - did you mean lst.updated?\n3 errors found\n"
  stdout: ''
  timestamp: 1660008689
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val nums = lst.map(_.replaceAll(\"\\\\D\", \"\").toInt)\n        var str :\
    \ String = \"\"\n        var sum : Int = lst.size + 1\n        for (i <- 0 until\
    \ nums.size) {\n            str = str + nums(i) + \" \"\n            sum = sum\
    \ - nums(i)\n        }\n        if (sum < 0) {\n            str = str + sum.toString\n\
    \        }\n        return List(str.replace(\"1\", \"\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp43kacky6.scala:26)\n\tat Problem.main(tmp43kacky6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evenCount = mutable.ListBuffer[String]()\n        val oddCount = mutable.ListBuffer[String]()\n\
    \        for (i <- lst) {\n            if (i.toString.length == i.toString.length.toInt)\
    \ {\n                evenCount += i\n            } else {\n                oddCount\
    \ += i\n            }\n        }\n        evenCount foreach { x =>\n         \
    \   oddCount += x.toString.length.toInt.toString\n        }\n        oddCount\
    \ foreach { x =>\n            evenCount += x.toString.length.toInt.toString\n\
    \        }\n        oddCount.toList ++ evenCount.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1jdrjatb.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenCount\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp1jdrjatb.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moddCount\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val numOddElems = mutable.ListBuffer.empty[Int]\n        lst.foreach { i =>\n\
    \            val oddElems = i.filter(c => c.isDigit).length\n            i match\
    \ {\n                case x if x.isEmpty() => numOddElems.clear()\n          \
    \      case x => numOddElems += oddElems\n            }\n        }\n        (numOddElems.toList\
    \ ::: List(s\"the number of odd elements ${numOddElems.sum} of the ${lst(0)}input.\"\
    )) ::: lst.tail\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp7a0qk3dx.scala:13:26 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnumOddElems\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                          ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                          Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val digits = lst.flatMap( s => s.split(\"\\\\d+\"))\n        val odds = digits.length.filter(\
    \ i => digits(i).forall(d => d % 2 != 0))\n        (0 until lst.length) map {\
    \ i => s\"the number of odd elements ${odds.toInt}n the str${i.toInt.toString}${(i\
    \ < lst.length -1)? \"n\" : \"\"} ${(i < lst.length - 1)? \"and\" : \".\"}\" }\
    \ toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp1z0zjxym.scala:15:189 --------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        (\e[31m0\e[0m until lst.length) map { \e[36mi\e\
    [0m => \e[31ms\"the number of odd elements \e[0m${odds.toInt}\e[31mn the str\e\
    [0m${i.toInt.toString}${(i < lst.length -\e[31m1\e[0m)? \e[31m\"n\"\e[0m : \e\
    [31m\"\"\e[0m}\e[31m \e[0m${(i < lst.length - \e[31m1\e[0m)? \e[31m\"and\"\e[0m\
    \ : \e[31m\".\"\e[0m}\e[31m\"\e[0m } toList\n\e[31m\e[31m   |\e[0m           \
    \                                                                            \
    \                                                                            \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1z0zjxym.scala:14:33 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = digits.length.filter(\
    \ \e[36mi\e[0m => digits(i).forall(\e[36md\e[0m => d % \e[31m2\e[0m != \e[31m0\e\
    [0m))\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   value filter is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp1z0zjxym.scala:15:131 -----------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        (\e[31m0\e[0m until lst.length) map { \e[36mi\e\
    [0m => \e[31ms\"the number of odd elements \e[0m${odds.toInt}\e[31mn the str\e\
    [0m${i.toInt.toString}${(i < lst.length -\e[31m1\e[0m)? \e[31m\"n\"\e[0m : \e\
    [31m\"\"\e[0m}\e[31m \e[0m${(i < lst.length - \e[31m1\e[0m)? \e[31m\"and\"\e[0m\
    \ : \e[31m\".\"\e[0m}\e[31m\"\e[0m } toList\n\e[31m\e[31m   |\e[0m           \
    \                                                                            \
    \                         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                             value ? is not a member of Boolean\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp1z0zjxym.scala:15:165 -----------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        (\e[31m0\e[0m until lst.length) map { \e[36mi\e\
    [0m => \e[31ms\"the number of odd elements \e[0m${odds"
  stdout: ''
  timestamp: 1660008689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val s = lst.map(_.length)\n        val result = lst.map(s => (s, s.filter(_\
    \ % 2 != 0).toList.length))\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp2hynbywa.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31m(\e\
    [0m\e[1m\e[31mresult\e[0m\e[1m\e[31m \e[0m\e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mList[\e\
    [1m\e[31m(\e[0mString\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e[1m\e\
    [31m)\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m        Required: List[String]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val even = lst.filter (_.toInt % 2 == 0)\n        val odd = lst.filter (_.toInt\
    \ % 2 != 0)\n        val oddCounts = even.toList.zip(odd.toList).map(v => v.map(_\
    \ => 1)).foldLeft(List[Int]())((acc, v) => acc :+ acc.sum + v.toInt)\n       \
    \ even.zip(oddCounts).map(v => v._1 + \"n the str\" + v._2 + \"of the \" + v._3\
    \ + \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpyuaaie1m.scala:15:67 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddCounts\e[0m = even.toList.zip(odd.toList).map(\e\
    [36mv\e[0m => v.map(_ => \e[31m1\e[0m)).foldLeft(List[\e[35mInt\e[0m]())((\e[36macc\e\
    [0m, \e[36mv\e[0m) => acc :+ acc.sum + v.toInt)\n\e[31m\e[31m   |\e[0m       \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could\
    \ not infer the type of the parameter _$3 of expanded function:\n\e[31m   |\e\
    [0m   _$3 => 1.\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpyuaaie1m.scala:15:129\
    \ -----------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36moddCounts\e[0m = even.toList.zip(odd.toList).map(\e[36mv\e[0m => v.map(_ =>\
    \ \e[31m1\e[0m)).foldLeft(List[\e[35mInt\e[0m]())((\e[36macc\e[0m, \e[36mv\e[0m)\
    \ => acc :+ acc.sum + v.toInt)\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \                           ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue toInt is not a\
    \ member of (Nothing, Nothing), but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpyuaaie1m.scala:16:79 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        even.zip(oddCounts).map(\e[36mv\e[0m => v._1\
    \ + \e[31m\"n the str\"\e[0m + v._2 + \e[31m\"of the \"\e[0m + v._3 + \e[31m\"\
    nput.\"\e[0m)\n\e[31m\e[31m   |\e[0m                                         \
    \                                    ^^^^\e[0m\n\e[31m   |\e[0m          value\
    \ _3 is not a member of (String, Int) - did you mean v._1?\n3 errors found\n"
  stdout: ''
  timestamp: 1660008690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  if (lst.size <= 0) {\n            return lst\n        }\n        var oddNum\
    \ = 0.0\n        var oddSum = 0.0\n        var evenNum = 0.0\n        var evenSum\
    \ = 0.0\n        var oddSums = 0.0\n        var evenSums = 0.0\n        var oddSumsTemp\
    \ = 0.0\n        var evenSumsTemp = 0.0\n        var evenNums = 0.0\n        var\
    \ oddNums = 0.0\n        val lst2 = lst.map(s => s.toDouble)\n        lst.foreach(s\
    \ => {\n            val i = s.toInt\n            if (i % 2 != 0) {\n         \
    \       evenNums += i\n                evenSumsTemp += i\n            } else {\n\
    \                oddNums += i\n                oddSumsTemp += i\n            }\n\
    \        })\n        val evenSumsArray = evenSumsTemp.toArray.map(i => i + 0.0)\n\
    \        val evenNumsArray = evenNumsTemp.toArray.map(i => i + 0.0)\n        var\
    \ oddSumsTemp2 = 0.0\n        var evenSumsTemp2 = 0.0\n        lst2.foreach(i\
    \ => {\n            oddSums += i\n            oddSumsTemp2 += i\n        })\n\
    \        val oddSumsArray2 = oddSumsTemp2.toArray.map(i => i + 0.0)\n        lst2.foreach(i\
    \ => {\n            evenSums += i\n            evenSumsTemp2 += i\n        })\n\
    \        val oddSumsArray3 = oddSumsTemp2.toArray.map(i => i + 0.0)\n        lst2.foreach(i\
    \ => {\n            oddSums += i\n            oddSumsTemp2 += i\n        })\n\
    \        val oddSumsArray4 = oddSumsTemp2.toArray.map(i => i + 0.0)\n        lst2.foreach(i\
    \ => {\n            evenSums += i\n            evenSumsTemp2 += i\n        })\n\
    \        val oddSumsArray5 = oddSumsTemp2.toArray.map(i => i + 0.0)\n        lst2.foreach(i\
    \ => {\n            oddSums += i\n            oddSumsTemp2 += i\n        })\n\
    \        val oddSumsArray6 = oddSumsTemp2.toArray.map(i => i + 0.0)\n        lst2.foreach(i\
    \ => {\n            evenSums += i\n            evenSumsTemp2 += i\n        })\n\
    \        val oddSumsArray7 = oddSumsTemp2.toArray.map(i => i + 0.0)\n        lst2.foreach(i\
    \ => {\n            oddSums += i\n            oddSumsTemp2 += i\n        })\n\
    \        val oddSumsArray8 = oddSumsTemp2.toArray.map(i => i + 0.0)\n        lst2.foreach(\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmptlwv8ds0.scala:76:21 ---------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m        lst2.foreach(\n\e[31m\e[31m   |\e[0m        \
    \             ^\e[0m\n\e[31m   |\e[0m                     expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmptlwv8ds0.scala:37:41 ------------------------\e[0m\e[0m\n\e[31m37 |\e\
    [0m        \e[33mval\e[0m \e[36mevenSumsArray\e[0m = evenSumsTemp.toArray.map(\e\
    [36mi\e[0m => i + \e[31m0.0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \ value toArray is not a member of Double\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmptlwv8ds0.scala:38:28 ------------------------\e[0m\e[0m\n\e[31m38 |\e\
    [0m        \e[33mval\e[0m \e[36mevenNumsArray\e[0m = evenNumsTemp.toArray.map(\e\
    [36mi\e[0m => i + \e[31m0.0\e[0m)\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ evenNumsTemp\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptlwv8ds0.scala:45:41\
    \ ------------------------\e[0m\e[0m\n\e[31m45 |\e[0m        \e[33mval\e[0m \e\
    [36moddSumsArray2\e[0m = oddSumsTemp2.toArray.map(\e[36mi\e[0m => i + \e[31m0.0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value toArray is not a member\
    \ of Double\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptlwv8ds0.scala:50:41\
    \ ------------------------\e[0m\e[0m\n\e[31m50 |\e[0m        \e[33mval\e[0m \e\
    [36moddSumsArray3\e[0m = oddSumsTemp2.toArray.map(\e[36mi\e[0m => i + \e[31m0.0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value toArray is not a member\
    \ of Double\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptlwv8ds0.scala:55:41\
    \ ------------------------\e[0m\e[0m\n\e[31m55 |\e[0m        \e[33mval\e[0m \e\
    [36moddSumsArray4\e[0m = oddSumsTemp2.t"
  stdout: ''
  timestamp: 1660008691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  require(lst.length == 1)\n        if (lst.length == 1) lst\n        else oddCount(lst.tail\
    \ ::: List(lst.head)) :: (oddCount(lst.toList))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprmbaw7b6.scala:15:21\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33melse\e[0m oddCount(lst.tail\
    \ ::: List(lst.head)) :: (oddCount(lst.toList))\n\e[31m\e[31m   |\e[0m       \
    \      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \  Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mString\e[1m\e[31m]\e[0m\n\e\
    [31m   |\e[0m             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var result: List[String] = Nil\n        for (i <- 0 until lst.length) {\n \
    \           var sum = 0\n            var odd = 0\n            for(j <- 0 until\
    \ lst(i).length) {\n                if (lst(i).charAt(j).toInt % 2 != 0) {\n \
    \                   sum = 1\n                    odd += 1\n                } else\
    \ {\n                    sum += 0\n                }\n            }\n        \
    \    result :+ sum\n        }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3ljswfoh.scala:30)\n\tat Problem.main(tmp3ljswfoh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  if (lst.size < 2) \n            Nil\n        else {\n            // Store the\
    \ digits in an array in reverse order. For example, for \"23456789\", the array\
    \ would be: [9, 8, 7, 6, 5, 4, 3, 2, 1]\n            var oddNums = lst.map(_.toInt).reverse.filter(x\
    \ => x % 2 != 0)\n            val oddNumCount = oddNums.size\n            val\
    \ numOfOdds  = oddNums.map(x => s\"the number of odd elements $x\")\n        \
    \    val output: List[String] = List(numOfOdds.mkString(\"(\", \", \", \")\"),\
    \ oddNumCount.toString).reverse\n            output ::: oddCount(lst.tail)\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpvnyh5kxh.scala:25)\n\tat Problem.main(tmpvnyh5kxh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008690
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var result : List[String] = Nil\n        var index : Int = 0\n        for (i\
    \ <- lst){\n            index += 1\n            if (i % 2 == 0) result += List(s\"\
    the number of odd elements ${index} of the $i string.\")\n        }\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp7lds4pw.scala:17:18 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result += List(\e[31ms\"the number of odd elements \e[0m${index}\e[31m of\
    \ the \e[0m$i\e[31m string.\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^\e\
    [0m\n\e[31m   |\e[0mvalue % is not a member of String, but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mThe following import\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpp7lds4pw.scala:17:35 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (i % \e[31m2\e[0m == \e[31m0\e\
    [0m) result += List(\e[31ms\"the number of odd elements \e[0m${index}\e[31m of\
    \ the \e[0m$i\e[31m string.\"\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \         ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of List[String]\
    \ - did you mean List[String].!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1660008689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = lst.map(s => s.filterNot(_ < '0'))\n        val oddDigitCounts =\
    \ odds.map(_.map(s => count(_ == 1) length))\n        val oddDigitCountList =\
    \ oddDigitCounts.foldLeft(List[Int]())((acc, v) => acc :+ v)\n        oddDigitCountList.filter(a\
    \ => a > 0).mkString(\"the number of odd elements \", \" n the str\", \" \", \"\
    \ of the \", \" \", \" input.\").split(\", \")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp80of5ii5.scala:14:69 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moddDigitCounts\e[0m = odds.map(_.map(\e\
    [36ms\e[0m => count(_ == \e[31m1\e[0m) length))\n\e[31m\e[31m   |\e[0m       \
    \                                                              ^\e[0m\n\e[31m\
    \   |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp80of5ii5.scala:14:49\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36moddDigitCounts\e[0m = odds.map(_.map(\e[36ms\e[0m => count(_ == \e[31m1\e\
    [0m) length))\n\e[31m\e[31m   |\e[0m                                         \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                                         \
    \        Not found: count\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp80of5ii5.scala:16:54 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m        oddDigitCountList.filter(\e[36ma\e[0m => a > \e[31m0\e[0m).mkString(\e\
    [31m\"the number of odd elements \"\e[0m, \e[31m\" n the str\"\e[0m, \e[31m\"\
    \ \"\e[0m, \e[31m\" of the \"\e[0m, \e[31m\" \"\e[0m, \e[31m\" input.\"\e[0m).split(\e\
    [31m\", \"\e[0m)\n\e[31m\e[31m   |\e[0m                                      \
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m              Found:    (String, String, String, String, String,\
    \ String)\n\e[31m   |\e[0m              Required: Int\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // Your code goes here\n        val evens = lst.filter(x => x.contains(\"\"\
    ) && x.contains(\"0\")).length\n        val odds = lst.filter(x => x.contains(\"\
    1\")).length\n        val result = (evens, odds)\n        lst.map((x) => {\n \
    \           if (x.contains(\"1\")) {\n                x.replace(\"1\", \"odd\"\
    )\n            } else if (x.contains(\"0\")) {\n                x.replace(\"0\"\
    , \"even\")\n            } else {\n                println(\"This should not happen\"\
    )\n            }\n        })\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppjpj6klw.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : (Int,\
    \ Int))\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008699
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var output: List[String] = Nil\n        for(i <- 0 to lst.size){\n        \
    \    val odd = lst.count(x => x.isDigit) filter { x => x.isOdd }\n           \
    \ output ::= s\"the number of odd elements $odd of the str$i\"\n        }\n  \
    \      output ::= \"\"\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph3r_pj9n.scala:15:39 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = lst.count(\e\
    [36mx\e[0m => x.isDigit) filter { \e[36mx\e[0m => x.isOdd }\n\e[31m\e[31m   |\e\
    [0m                                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                           value isDigit is not a member of String\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmph3r_pj9n.scala:18:8 ---------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        output ::= \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m \
    \  |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val oddNumbers: List[String] = lst.map(str => oddNumber(str))\n        oddNumbers.map(strs\
    \ => strs.mkString(\" \"))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp43_94dvh.scala:13:54 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddNumbers\e[0m: \e[35mList\e\
    [0m[\e[35mString\e[0m] = lst.map(\e[36mstr\e[0m => oddNumber(str))\n\e[31m\e[31m\
    \   |\e[0m                                                      ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                                    Not found:\
    \ oddNumber\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer.empty[Int]\n        for (s <- lst) {\n      \
    \      for (i <- s.indices) {\n                if (s(i).isDigit) {\n         \
    \           if (s(i) === \"1\") {\n                        odds += 1\n       \
    \             }\n                }\n            }\n        }\n        odds map\
    \ (_.toString) toList ::: List(\"The number of odd elements \" + odds mkString\
    \ \"n the str\" + odds mkString \"g of the \" + lst.length.toString + \" input.\"\
    ) ::: lst toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_5khflcj.scala:23:181 --------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        odds map (_.toString) toList ::: List(\e[31m\"\
    The number of odd elements \"\e[0m + odds mkString \e[31m\"n the str\"\e[0m +\
    \ odds mkString \e[31m\"g of the \"\e[0m + lst.length.toString + \e[31m\" input.\"\
    \e[0m) ::: lst toList\n\e[31m\e[31m   |\e[0m                                 \
    \                                                                            \
    \                                                                        ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_5khflcj.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_5khflcj.scala:17:29\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                    \e[33mif\e\
    [0m (s(i) === \e[31m\"1\"\e[0m) {\n\e[31m\e[31m   |\e[0m                     \
    \   ^^^^^^^^\e[0m\n\e[31m   |\e[0m               value === is not a member of\
    \ Char - did you mean Char.==?\n3 errors found\n"
  stdout: ''
  timestamp: 1660008704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = new mutable.ListBuffer[Int]()\n        val evens = new mutable.ListBuffer[Int]()\n\
    \        lst.foreach(x => {\n            if (x % 2 == 0) {\n                evens\
    \ += x.length\n            } else {\n                odds += x.length\n      \
    \      }\n        })\n        val len = lst.size\n        if (odds.length == 0)\
    \ List[String]()\n        else lst.map(x => s\"The number of odd elements ${odds.length}\
    \ the str${ x } of the ${ len } input.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa6devfqq.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \         ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpa6devfqq.scala:14:24\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mevens\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \             Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpa6devfqq.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33mif\e[0m (x % \e[31m2\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660008708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[String]()\n        for (i <- 0 until lst.size)\
    \ {\n            val currentNum = lst(i).toInt\n            for (j <- 0 until\
    \ currentNum) {\n                val n = math.ceil(j / 2)\n                if\
    \ (n % 2 != 0) {\n                    odds += s\"the number of odd elements ${n}n\
    \ the str${n}ng ${n} of the ${currentNum}nput.\"\n                }\n        \
    \    }\n        }\n        odds.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplh_w1asu.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \ val oddsCounter = mutable.HashMap[String, Int]()\n       for(i <- 0 until lst.length)\n\
    \           if(lst(i).isDigit) oddsCounter.updated(i, 0 until lst(i).count(_ ==\
    \ '1'))\n           else oddsCounter.updated(i, 0 until lst(i).count(_ == '0'))\n\
    \n       oddsCounter.filter(_._2.length == 1).map(_._1).map(\"the number of odd\
    \ elements \" + _ + \" of the \" + _ + \" of the \" + _)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvu68vhyt.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m       \e[33mval\e[0m \e[36moddsCounter\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvu68vhyt.scala:15:21\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m           \e[33mif\e[0m(lst(i).isDigit)\
    \ oddsCounter.updated(i, \e[31m0\e[0m until lst(i).count(_ == \e[31m'1'\e[0m))\n\
    \e[31m\e[31m   |\e[0m              ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \        value isDigit is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660008707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  def oddCount(str : String, acc : List[String]) : List[String] = {\n       \
    \     var oddCount : Int = 0\n            for (i <- str) {\n                if\
    \ (i.isDigit) {\n                    oddCount += (i.toString.toInt%2) == 1\n \
    \               }\n            }\n            if (oddCount != 0) {\n         \
    \       acc += s\"the number of odd elements $oddCount of the $str\"\n       \
    \     }\n            if (oddCount % 2 == 0) {\n                oddCount(str +\
    \ 1, acc)\n            } else {\n                oddCount(str + 1, acc :+ s\"\
    the number of odd elements $oddCount of the $str\")\n            }\n        }\n\
    \        oddCount(\"\", lst)\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvy18vtio.scala:17:29 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    oddCount += (i.toString.toInt%\e\
    [31m2\e[0m) == \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  value += is not a member of Int - did you\
    \ mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvy18vtio.scala:21:20\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                acc += \e\
    [31ms\"the number of odd elements \e[0m$oddCount\e[31m of the \e[0m$str\e[31m\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \    value += is not a member of List[String] - did you mean acc.!=?\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmpvy18vtio.scala:24:16 -----------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                oddCount(str + \e[31m1\e[0m, acc)\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    \e[33mvariable\e[0m \e[35moddCount\e[0m does not take parameters\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E050] Type Error: /tmp/tmpvy18vtio.scala:26:16 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                oddCount(str + \e[31m1\e[0m, acc :+ \e\
    [31ms\"the number of odd elements \e[0m$oddCount\e[31m of the \e[0m$str\e[31m\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \              \e[33mvariable\e[0m \e[35moddCount\e[0m does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660008710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val oddNumbers = mutable.HashSet.empty[Int]\n        for(str <- lst ) yield\
    \ {\n            val count = mutable.HashMap.empty[Int, Int]\n            for(char\
    \ <- str.chars) yield {\n                count(char.getNumericValue % 2) = (char.getNumericValue\
    \ % 2) + 1\n            }\n            val strCount = count.map(_._2).sum\n  \
    \          if(strCount == 0) {\n                str\n            } else {\n  \
    \              if(oddNumbers.contains(strCount)) {\n                    str +\
    \ \" \" + strCount.toString\n                } else {\n                    oddNumbers\
    \ += strCount\n                    str + \" \" + strCount.toString\n         \
    \       }\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3kf4gmkx.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddNumbers\e[0m = mutable.HashSet.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp3kf4gmkx.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = mutable.HashMap.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var output: List[String] = Nil\n        for (i <- 0 to (lst.length - 1)) {\n\
    \            val num = lst(i).toInt\n            output ::= (0 to (num - 1)).map(n\
    \ => { if (n % 2 != 0) 1 else 0 }).sum\n        }\n        output ::= (lst.length\
    \ - 1).map(n => { if (n % 2 != 0) 1 else 0 }).sum\n        output\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpza1dx_gd.scala:16:19 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            output ::= (\e[31m0\e[0m to (num - \e[31m1\e\
    [0m)).map(\e[36mn\e[0m => { \e[33mif\e[0m (n % \e[31m2\e[0m != \e[31m0\e[0m) \e\
    [31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m }).sum\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String]\
    \ - did you mean List[String].::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpza1dx_gd.scala:18:15\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        output ::= (lst.length\
    \ - \e[31m1\e[0m).map(\e[36mn\e[0m => { \e[33mif\e[0m (n % \e[31m2\e[0m != \e\
    [31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m }).sum\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String]\
    \ - did you mean List[String].::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpza1dx_gd.scala:18:36\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        output ::= (lst.length\
    \ - \e[31m1\e[0m).map(\e[36mn\e[0m => { \e[33mif\e[0m (n % \e[31m2\e[0m != \e\
    [31m0\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m }).sum\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \      value map is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660008711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evenCount = mutable.MutableList[Int]()\n        val oddCount = mutable.MutableList[Int]()\n\
    \n        lst.map(x => {\n            val stringInt = new BigInteger(x)\n    \
    \        evenCount += stringInt.bitLength\n        })\n        lst.map(x => {\n\
    \            val stringInt = new BigInteger(x)\n            oddCount += stringInt.bitLength\n\
    \        })\n\n        val evenList = evenCount.filter(x => x % 2 == 0).map(x\
    \ => x).distinct\n        val oddList = oddCount.filter(x => x % 2 == 1).map(x\
    \ => x).distinct\n\n        if (evenList.length < oddList.length) {\n        \
    \    lst.map(x => {\n                val stringInt = new BigInteger(x)\n     \
    \           val evenBit = stringInt.bitLength % 2\n                val oddBit\
    \ = stringInt.bitLength - evenBit\n                if (evenBit.isOdd && oddBit.isEven)\
    \ {\n                    oddCount += stringInt.bitLength\n                } else\
    \ {\n                    evenCount += stringInt.bitLength\n                }\n\
    \            })\n        } else {\n            lst.map(x => {\n              \
    \  val stringInt = new BigInteger(x)\n                val evenBit = stringInt.bitLength\
    \ % 2\n                val oddBit = stringInt.bitLength - evenBit\n          \
    \      if (evenBit.isOdd && !oddBit.isEven) {\n                    oddCount +=\
    \ stringInt.bitLength\n                } else {\n                    evenCount\
    \ += stringInt.bitLength\n                }\n            })\n        }\n     \
    \   (evenList, oddList)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeg5mveii.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenCount\e[0m = mutable.MutableList[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeg5mveii.scala:14:23 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moddCount\e[0m = mutable.MutableList[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpeg5mveii.scala:17:32 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mstringInt\e[0m = \e\
    [33mnew\e[0m \e[35mBigInteger\e[0m(x)\n\e[31m\e[31m   |\e[0m                 \
    \               ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \   Not found: type BigInteger\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpeg5mveii.scala:21:32 ------------------------\e[0m\e[0m\n\e[31m21 |\e\
    [0m            \e[33mval\e[0m \e[36mstringInt\e[0m = \e[33mnew\e[0m \e[35mBigInteger\e\
    [0m(x)\n\e[31m\e[31m   |\e[0m                                ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                Not found: type BigInteger\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpeg5mveii.scala:30:36\
    \ ------------------------\e[0m\e[0m\n\e[31m30 |\e[0m                \e[33mval\e\
    [0m \e[36mstringInt\e[0m = \e[33mnew\e[0m \e[35mBigInteger\e[0m(x)\n\e[31m\e[31m\
    \   |\e[0m                                    ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                    Not found: type BigInteger\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e"
  stdout: ''
  timestamp: 1660008708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val listOfNums = lst.map{numStr =>\n            val num = numStr.toInt\n  \
    \          val numOfOddDigitsInNum = num.toString.count((num).toChar).filter(_\
    \ % 2 != 0).toInt\n            (num, numOfOddDigitsInNum)\n        }.toList\n\n\
    \        // The first string in the output listOfNums contains the number of odd\
    \ digits in the first string of the input list\n        // The second string in\
    \ the output listOfNums contains the number of odd digits in the second string\
    \ of the input list\n        // and so on\n        listOfNums.map{case (num, numOfOddDigitsInNum)\
    \ => s\"the number of odd elements ${numOfOddDigitsInNum}n the str${num}${numOfOddDigitsInNum}n\
    \ of the ${num}${numOfOddDigitsInNum}nput.\"}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpmm_zh_qc.scala:15:63\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e\
    [36mnumOfOddDigitsInNum\e[0m = num.toString.count((num).toChar).filter(_ % \e\
    [31m2\e[0m != \e[31m0\e[0m).toInt\n\e[31m\e[31m   |\e[0m                     \
    \                                    ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \                                         Found:    Char\n\e[31m   |\e[0m    \
    \                                           Required: Char => Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var list1 = ListBuffer[String]()\n        lst.foreach(s => {\n            val\
    \ x = s.toString\n            list1 += x.split(\"\").map(_.toInt).map(x => (x\
    \ % 2 == 1).toString.toInt)\n        })\n        val list2 = list1.groupBy(_._1).mapValues(_.size)\n\
    \        val list3 = list2.map {\n            case (k, v) => k + \" \" + v\n \
    \       }\n        return list3.map(s => s + \"\\n\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpirqifbd0.scala:16:21\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            list1 += x.split(\e\
    [31m\"\"\e[0m).map(_.toInt).map(\e[36mx\e[0m => (x % \e[31m2\e[0m == \e[31m1\e\
    [0m).toString.toInt)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    Array[Int]\n\e[31m   |\e[0m\
    \                     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpirqifbd0.scala:18:36 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        \e[33mval\e[0m \e[36mlist2\e[0m = list1.groupBy(_._1).mapValues(_.size)\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^\e[0m\n\e[31m   |\e\
    [0m                                  value _1 is not a member of String\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpirqifbd0.scala:20:29 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mcase\e[0m (k, v) => k + \e[31m\" \"\
    \e[0m + v\n\e[31m\e[31m   |\e[0m                           ^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue + is not a member of Nothing, but could be made available as an\
    \ extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might fix the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import Byte.byte2double\n\
    \e[31m   |\e[0m  import Byte.byte2float\n\e[31m   |\e[0m  import Byte.byte2int\n\
    \e[31m   |\e[0m  import Byte.byte2long\n\e[31m   |\e[0m  import Byte.byte2short\n\
    \e[31m   |\e[0m  import Char.char2double\n\e[31m   |\e[0m  import Char.char2float\n\
    \e[31m   |\e[0m  import Char.char2int\n\e[31m   |\e[0m  import Char.char2long\n\
    \e[31m   |\e[0m  import collection.convert.ImplicitConversions.properties AsScalaMap\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660008713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = lst.groupBy(_.length)\n        val odd = odd.map{case (str,len) =>\
    \ (str.length,lst.count(_ == str) / lst.count(_ == len))}\n        odd.map{case\
    \ (s,c) => s\"the number of odd elements $c the str$s ${s.length} of the ${s.length}\"\
    }\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3czv8nr0.scala:14:12 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = odd.map{\e[33mcase\e\
    [0m (str,len) => (str.length,lst.count(_ == str) / lst.count(_ == len))}\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0modd is already defined as \e[33mvalue\e[0m \e[35modd\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3czv8nr0.scala:15:76 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m        odd.map{\e[33mcase\e[0m (s,c) => \e[31ms\"the number of odd elements\
    \ \e[0m$c\e[31m the str\e[0m$s\e[31m \e[0m${s.length}\e[31m of the \e[0m${s.length}\e\
    [31m\"\e[0m}\n\e[31m\e[31m   |\e[0m                                          \
    \                                ^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \                       value length is not a member of Int\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp3czv8nr0.scala:15:95 ------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m        odd.map{\e[33mcase\e[0m (s,c) => \e[31ms\"the number\
    \ of odd elements \e[0m$c\e[31m the str\e[0m$s\e[31m \e[0m${s.length}\e[31m of\
    \ the \e[0m${s.length}\e[31m\"\e[0m}\n\e[31m\e[31m   |\e[0m                  \
    \                                                                           ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                     value length is not a\
    \ member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660008711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  if (lst.isEmpty) return Nil\n        val odds: mutable.Set[Int] = mutable.Set()\n\
    \        val odd: List[String] = Nil\n        for(i <- 0 until lst.size) {\n \
    \           val str: String = lst(i)\n            if (str.isEmpty || str.length()\
    \ > 9) return odd\n            val digits = str.chars.toList.map(_.toInt)\n  \
    \          for(i <- 0 until digits.length) {\n                val d = digits(i)\n\
    \                if (d % 2 != 0) odd ::= s\"the number of odd elements $dn the\
    \ str${d} of the $i\"\n                else odds += d\n            }\n       \
    \ }\n        odd ::: odds.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36do5m2k.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m: mutable.Set[\e\
    [35mInt\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp36do5m2k.scala:14:37 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m: mutable.Set[\e\
    [35mInt\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                         \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0m                                   \
    \  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp36do5m2k.scala:19:35\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mval\e[0m\
    \ \e[36mdigits\e[0m = str.chars.toList.map(_.toInt)\n\e[31m\e[31m   |\e[0m   \
    \                      ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m              value\
    \ toList is not a member of java.util.stream.IntStream\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp36do5m2k.scala:22:36 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m                \e[33mif\e[0m (d % \e[31m2\e[0m != \e[31m0\e\
    [0m) odd ::= \e[31ms\"the number of odd elements \e[0m$dn\e[31m the str\e[0m${d}\e\
    [31m of the \e[0m$i\e[31m\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m        value ::= is not a member of List[String]\
    \ - did you mean odd.::?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp36do5m2k.scala:22:70\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e\
    [0m (d % \e[31m2\e[0m != \e[31m0\e[0m) odd ::= \e[31ms\"the number of odd elements\
    \ \e[0m$dn\e[31m the str\e[0m${d}\e[31m of the \e[0m$i\e[31m\"\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \      ^^\e[0m\n\e[31m   |\e[0m                                              \
    \             Not found: dn\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ avail"
  stdout: ''
  timestamp: 1660008711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val count = mutable.Map.empty[Int, Int]\n        var sum = 0\n        for (\
    \ i <- lst )\n            sum += i.toInt\n        count.putAll((0 until sum).map(_\
    \ -> 0))\n        for ( i <- lst )\n            count.get(sum - i.toInt) += 1\n\
    \        count.map { case (k, v) => s\"the number of odd elements $kn the str$k\
    \ $vn of the $vnumnput.\"}\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvq62q_01.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.Map.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds : List[String] = lst.filterNot(_.isDigit).map(x => s\"the number of\
    \ odd elements for $x are ${ lst.count(y => y != x && Character.isDigit(y)) }.\"\
    )\n        lst.map(x => s\"the number of odd elements for $x are ${ lst.count(y\
    \ => y != x && Character.isDigit(y)) }.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm5z4ffma.scala:13:50 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m] = lst.filterNot(_.isDigit).map(\e[36mx\e[0m => \e[31ms\"\
    the number of odd elements for \e[0m$x\e[31m are \e[0m${ lst.count(\e[36my\e[0m\
    \ => y != x && Character.isDigit(y)) }\e[31m.\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                               ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                 value isDigit is not a member of String\n\e\
    [31m\e[31m-- [E134] Type Error: /tmp/tmpm5z4ffma.scala:13:146 ----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m : \e[35mList\e\
    [0m[\e[35mString\e[0m] = lst.filterNot(_.isDigit).map(\e[36mx\e[0m => \e[31ms\"\
    the number of odd elements for \e[0m$x\e[31m are \e[0m${ lst.count(\e[36my\e[0m\
    \ => y != x && Character.isDigit(y)) }\e[31m.\"\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                                                                            \
    \                                                           ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35misDigit\e[0m in \e[33mobject\e[0m \e[35mCharacter\e[0m with types\n\e[31m\
    \   |\e[0m (x$0: Int): Boolean\n\e[31m   |\e[0m (x$0: Char): Boolean\n\e[31m \
    \  |\e[0mmatch arguments ((y : String))\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpm5z4ffma.scala:14:99\
    \ -----------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e\
    [0m => \e[31ms\"the number of odd elements for \e[0m$x\e[31m are \e[0m${ lst.count(\e\
    [36my\e[0m => y != x && Character.isDigit(y)) }\e[31m.\"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                                    \
    \                     ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mNone of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35misDigit\e[0m in \e[33mobject\e[0m \e\
    [35mCharacter\e[0m with types\n\e[31m   |\e[0m (x$0: Int): Boolean\n\e[31m   |\e\
    [0m (x$0: Char): Boolean\n\e[31m   |\e[0mmatch arguments ((y : String))\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008710
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val lst1 = lst.map(_.toInt)\n        val odd = lst1.filter(x => (x%2) == 0)\n\
    \        val even = lst1.filter(x => (x%2) == 1)\n        lst.map(x => s\"the\
    \ number of odd elements ${odd.count(x => x == x)} the str${x}ng ${x} of the $xnput.\"\
    ).foreach(println)\n        lst.map(x => s\"the number of odd elements ${even.count(x\
    \ => x == x)} the str${x}ng ${x} of the $xnput.\").foreach(println)\n        odd.toList.mkString(\"\
    ,\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcuoltar5.scala:16:103 -----------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        lst.map(\e[36mx\e[0m => \e[31ms\"the number of\
    \ odd elements \e[0m${odd.count(\e[36mx\e[0m => x == x)}\e[31m the str\e[0m${x}\e\
    [31mng \e[0m${x}\e[31m of the \e[0m$xnput\e[31m.\"\e[0m).foreach(println)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                             ^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                                    Not found: xnput\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcuoltar5.scala:17:104 -----------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        lst.map(\e[36mx\e[0m => \e[31ms\"the number of\
    \ odd elements \e[0m${even.count(\e[36mx\e[0m => x == x)}\e[31m the str\e[0m${x}\e\
    [31mng \e[0m${x}\e[31m of the \e[0m$xnput\e[31m.\"\e[0m).foreach(println)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                              ^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                                     Not found: xnput\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcuoltar5.scala:18:27 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        odd.toList.mkString(\e[31m\",\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:\
    \    String\n\e[31m   |\e[0m        Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e\
    [0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // We will store the list of odd digits as we find them\n        var oddCount:\
    \ List[Int] = Nil\n        var currentCount = 0\n        lst.foreach(x => {\n\
    \            x.toInt\n            // The input consists of only digits, so we\
    \ can just check them\n            if (currentCount % 2 == 0) {\n            \
    \    oddCount ::= currentCount\n            } else {\n                currentCount\
    \ += 1\n                oddCount ::= currentCount\n            }\n        })\n\
    \        lst.zipWithIndex.foreach(x => oddCount ::= x._2.toInt - x._1)\n     \
    \   oddCount.map(x => s\"the number of odd elements $x the str$x of the $lst.\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphwnysat0.scala:26:47 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        lst.zipWithIndex.foreach(\e[36mx\e[0m => oddCount\
    \ ::= x._2.toInt - x._1)\n\e[31m\e[31m   |\e[0m                              \
    \        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     value ::= is not a member of List[Int]\
    \ - did you mean List[Int].::?\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmphwnysat0.scala:26:62\
    \ -----------------------------\e[0m\e[0m\n\e[31m26 |\e[0m        lst.zipWithIndex.foreach(\e\
    [36mx\e[0m => oddCount ::= x._2.toInt - x._1)\n\e[31m\e[31m   |\e[0m         \
    \                                          ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \ None of the overloaded alternatives of \e[33mmethod\e[0m \e[35m-\e[0m in \e\
    [33mclass\e[0m \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\
    \e[31m   |\e[0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m \
    \  |\e[0m  (x: Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x:\
    \ Short): Int\n\e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m match arguments\
    \ ((x._1 : => String @uncheckedVariance))\n2 errors found\n"
  stdout: ''
  timestamp: 1660008711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val result = new Array[String](lst.length)\n        for (i<-lst.indices) {\n\
    \            result(i) = \n            if (lst(i).contains(\"9\")) 0\n       \
    \     else {\n                val n = new StringBuffer\n                var cnt\
    \ = 0\n                var isOdd = false\n                for (j<-lst(i).length)\
    \ {\n                    if (!isOdd) if (lst(i)(j).isDigit) {\n              \
    \          n.append(lst(i)(j))\n                        isOdd = true\n       \
    \                 cnt = cnt + 1\n                    }\n                    else\
    \ if (lst(i)(j).isDigit) {\n                        isOdd = false\n          \
    \              cnt = cnt + 0\n                    }\n                }\n     \
    \           result(i) = s\"the number of odd elements ${cnt}n the str$i$n of the\
    \ $i$lst.\"\n            }\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpepc9o9p8.scala:16:38\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m (lst(i).contains(\e\
    [31m\"9\"\e[0m)) \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                         \
    \             ^\e[0m\n\e[31m   |\e[0m                                      Found:\
    \    (\e[31m0\e[0m : Int)\n\e[31m   |\e[0m                                   \
    \   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpepc9o9p8.scala:21:24\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                \e[33mfor\e\
    [0m (j<-lst(i).length) {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value foreach is not a member of Int\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpepc9o9p8.scala:32:16 --------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                result(i) = \e[31ms\"the number of odd\
    \ elements \e[0m${cnt}\e[31mn the str\e[0m$i$n\e[31m of the \e[0m$i$lst\e[31m.\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    Unit\n\e[31m   |\e[0m          \
    \      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpepc9o9p8.scala:35:8\
    \ ---------------------\e[0m\e[0m\n\e[31m35 |\e[0m        result\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (result : Array[String])\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660008713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val result = new collection.mutable.ListBuffer[String]()\n        for (i <-\
    \ 0 until lst.length) {\n            if (isValid(lst, i)) {\n                val\
    \ tmp = lst(i).reverse.toInt\n                if (tmp % 2 != 0) result.append(\"\
    The number of odd elements in \").append(lst(i)).append(\" of the \").append(lst(i).reverse).append(\"\
    \ is \").append(tmp).append(\" .\")\n                else result.append(\"the\
    \ number of odd elements in \").append(lst(i)).append(\" of the \").append(lst(i).reverse).append(\"\
    \ is \").append(lst(i).reverse).append(\" .\")\n            }\n        }\n   \
    \     result.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyri7j905.scala:15:16 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mif\e[0m (isValid(lst, i)) {\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m                Not\
    \ found: isValid\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E134] Type Error: /tmp/tmpyri7j905.scala:17:154\
    \ ----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e\
    [0m (tmp % \e[31m2\e[0m != \e[31m0\e[0m) result.append(\e[31m\"The number of odd\
    \ elements in \"\e[0m).append(lst(i)).append(\e[31m\" of the \"\e[0m).append(lst(i).reverse).append(\e\
    [31m\" is \"\e[0m).append(tmp).append(\e[31m\" .\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mNone of the overloaded alternatives of \e[33mmethod\e[0m \e\
    [35mappend\e[0m in \e[33mtrait\e[0m \e[35mBuffer\e[0m with types\n\e[31m   |\e\
    [0m (elems: String*): (result : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m (elem: String): (result : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0mmatch arguments ((tmp : Int))\n2 errors found\n"
  stdout: ''
  timestamp: 1660008707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        for (x <- lst) {\n       \
    \     val n = x.toInt\n            val m = n.toString.reverse.count('0')\n   \
    \         x match {\n                case \"\" => odd.clear()\n              \
    \  case _ =>\n                    if (n % 2 == 0) {\n                        odd.add(n)\n\
    \                    }\n                    else {\n                        odd.add(odd.sum)\n\
    \                    }\n            }\n        }\n        val out: List[String]\
    \ = odd.reverse.toList.map{\n            case n => \"the number of odd elements\
    \ \" + n + \"n the str\" + n + \"of the \" + n + \"input.\"\n        }\n     \
    \   out\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvn2_yd_2.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpvn2_yd_2.scala:16:45 --------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mm\e[0m = n.toString.reverse.count(\e\
    [31m'0'\e[0m)\n\e[31m\e[31m   |\e[0m                                         \
    \    ^^^\e[0m\n\e[31m   |\e[0m                                             Found:\
    \    (\e[31m'0'\e[0m : Char)\n\e[31m   |\e[0m                                \
    \             Required: Char => Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  if (lst.length == 1) return lst\n\n        // find out how many odd digits\
    \ in each string\n        var odd_count_str : List[Int] = List[Int]()\n      \
    \  for (i <- 0 until lst.length) {\n            odd_count_str = findOddInStr(odd_count_str,\
    \ lst(i))\n        }\n\n        // create a map from the string to its number\
    \ of odd digits\n        var odd_count_str_rdd : RDD[(String, Int)] = rdd.map{\n\
    \            case (a: String, odd_count_str: Int) => a -> odd_count_str\n    \
    \    }\n\n        // calculate the number of odd digits in the strings based on\
    \ the map\n        var result = odd_count_str_rdd.map(x => (x._1, x._2.toInt)).groupByKey().map{\n\
    \            case (k, v) => (k, v.length.toInt)\n        }\n\n        // turn\
    \ the map into one list\n        return result.collect().map{\n            case\
    \ (k: String, v: Int) => \"the number of odd elements \" + v + \"n the str\" +\
    \ v + \"of the \" + k + \".\"\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpane3km7d.scala:18:28 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            odd_count_str = findOddInStr(odd_count_str,\
    \ lst(i))\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                            Not found: findOddInStr\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpane3km7d.scala:22:32 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36modd_count_str_rdd\e[0m :\
    \ \e[35mRDD\e[0m[(\e[35mString\e[0m, \e[35mInt\e[0m)] = rdd.map{\n\e[31m\e[31m\
    \   |\e[0m                                ^^^\e[0m\n\e[31m   |\e[0m          \
    \                      Not found: type RDD\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpane3km7d.scala:22:53 ------------------------\e[0m\e\
    [0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m \e[36modd_count_str_rdd\e[0m : \e[35mRDD\e\
    [0m[(\e[35mString\e[0m, \e[35mInt\e[0m)] = rdd.map{\n\e[31m\e[31m   |\e[0m   \
    \                                                  ^^^\e[0m\n\e[31m   |\e[0m \
    \                                                    Not found: rdd\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660008713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var strList: mutable.Buffer = mutable.Buffer[String]()\n        lst.reverse.foreach(x\
    \ => strList += x)\n        strList.reverse.foreach(x => {\n            var count\
    \ = 0\n            for(i <- 0 until x.length) {\n                if((x.charAt(i)\
    \ - '0') % 2 == 1) {\n                    count += 1\n                }\n    \
    \        }\n            strList.insert(0, \"the number of odd elements \" + count\
    \ + \" the str\" + count + \" of the \" + strList.length + \"nput.\")\n      \
    \  })\n        strList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu74nvx2r.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mstrList\e[0m: mutable.Buffer\
    \ = mutable.Buffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu74nvx2r.scala:13:38\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e\
    [36mstrList\e[0m: mutable.Buffer = mutable.Buffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                                      ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.Set[Int]()\n        for(x <- lst) {\n            for(y <-\
    \ x.toInt) {\n                odds += y\n            }\n        }\n        val\
    \ odd_count = mutable.Map[Int, String]()\n        for(i <- 1 to lst.size) {\n\
    \            odd_count(lst.take(i).length) += lst.take(i).length + \":\" + odds(i)\
    \ + \" \"\n        }\n        odd_count.mapValues(s => s.replace(\"[\", \"\").replace(\"\
    ]\", \"\"))\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpyw3rj7xk.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpyw3rj7xk.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mfor\e[0m(y <- x.toInt) {\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \       value foreach is not a member of Int\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmpyw3rj7xk.scala:19:24 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660008720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evenCount = lst.length - 1\n        val oddCount = evenCount * evenCount\
    \ - 1\n        val oddCountList = evenCount.toList + oddCount.toList\n\n     \
    \   lst.map {\n            case s => oddCountList.foldLeft(0) { (a, v) =>\n  \
    \              val num = s.toInt\n                (a * v) + (if (num % 2 == 0)\
    \ 1 else 0)\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppl0fit9l.scala:15:37 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36moddCountList\e[0m = evenCount.toList\
    \ + oddCount.toList\n\e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m     value toList is not a member of Int - did you mean evenCount.toInt?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val ans = mutable.Buffer.empty[String]\n        var count = 0\n        for(x\
    \ <- lst){\n            if(x.toString.toInt == 0){\n                continue\n\
    \            }\n            count += 1\n            ans += s\"the number of odd\
    \ elements $count the str${x.toString.toInt.toInt}${x.toString.toInt.toInt}${x.toString.toInt.toInt}\
    \ of the str${x.toString.toInt.toInt}${x.toString.toInt.toInt}${x.toString.toInt.toInt}.\"\
    \n        }\n        ans.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp74po9h5c.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mans\e[0m = mutable.Buffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp74po9h5c.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                continue\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^^^\e[0m\n\e[31m   |\e[0m                Not found: continue\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        for(i <- 0 to lst.size) {\n\
    \            val str: String = lst(i)\n            val evenCount = (0 until str.length).filter(x\
    \ => x % 2 == 0).size\n            odd += evenCount\n        }\n        odd.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpe3928r9_.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddSum = 0\n        var oddCount = 0\n        for(s <- lst) yield {\n \
    \           for(i <- 0 until s.length) yield {\n                var oddNumber\
    \ = s.charAt(i) == '1'\n                oddSum = oddSum + oddNumber\n        \
    \        if(oddNumber && oddSum > 1) oddCount = oddCount + 1\n            }\n\
    \        }\n        if(oddCount == 0) List(\"\")\n        else lst.map { s =>\
    \ s\"the number of odd elements $oddCount $s\".toString }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpv2prehdl.scala:18:32 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                oddSum = oddSum + oddNumber\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^^\e[0m\n\e[31m   |\e[0m None of the\
    \ overloaded alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m\
    \ \e[35mInt\e[0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e\
    [0m  (x: Float): Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x:\
    \ Int): Int\n\e[31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\
    \e[31m   |\e[0m  (x: Byte): Int\n\e[31m   |\e[0m  (x: String): String\n\e[31m\
    \   |\e[0m match arguments ((oddNumber : Boolean))\n1 error found\n"
  stdout: ''
  timestamp: 1660008720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evenCount = mutable.HashMap[Int, Int]().withDefaultValue(0)\n        for(i\
    \ <- lst.indices) {\n            val evens = lst(i).split(\"\").filter(x => x\
    \ != \"0\").length\n            val odd = lst(i).split(\"\").filter(x => x ==\
    \ \"0\").length\n            evenCount += even -> (evenCount.getOrElse(even, 0)\
    \ + odd)\n        }\n        val res = mutable.ListBuffer[String]()\n        for(ev\
    \ <- evenCount.keys) {\n            res += \"the number of odd elements \" + ev\
    \ + \" of the \" + lst(ev) + \" of the \" + evenCount.get(ev).toString + \".\"\
    \n        }\n        res\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpklomjd0a.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenCount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]().withDefaultValue(\e[31m0\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                        ^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpklomjd0a.scala:19:18 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \         Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008720
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var res : List[String] = Nil\n        var odd = 0\n        for (i <- 0 until\
    \ lst.size) {\n            var nOdd = lst.filter(_(i).toInt == 0).length\n   \
    \         \n            if (nOdd > odd) {\n                res = Nil\n       \
    \         odd = nOdd\n            }\n            \n            res :+= nOdd.toString\n\
    \        }\n        \n        res\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpm_mu69lr.scala:29)\n\tat Problem.main(tmpm_mu69lr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCountList = mutable.ListBuffer.empty[String]\n        lst.foreach{\n\
    \            s =>\n                if (s.length != 0) {\n                    var\
    \ oddCount = 1\n                    for (x <- s) {\n                        if\
    \ (x == '1') {\n                            oddCount += 1\n                  \
    \      }\n                    }\n                    oddCountList += (\"the number\
    \ of odd elements \" + oddCount + \"n the str\" + s + \" of the \" + s + \".\"\
    )\n                }\n        }\n        return oddCountList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpie46nih0.scala:13:27 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36moddCountList\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008722
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // We want a recursive solution, so we define a helper function\n        //\
    \ that takes the input string and the number of odd digits as parameters and then\n\
    \        // calls itself recursively.\n        odd_count_helper(lst, 0)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpn_senfi4.scala:16:8 -------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        odd_count_helper(lst, \e[31m0\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Not found:\
    \ odd_count_helper\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008720
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val ans = mutable.ListBuffer[String]()\n        for(i <- 1 to lst.size){\n\
    \            ans ++= (i.toString.grouped(2).filter(_ => _ % 2 == 1).size)\n  \
    \      }\n        ans.toList\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn_5rsu8.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mans\e[0m = mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008721
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds  = new mutable.ListBuffer[Int]()\n        var count = 0\n        for\
    \ (el <- lst) {\n            val n = el.count(_ == '1')\n            if (n > 0)\
    \ {\n                count += n\n                odds.push(n)\n            }\n\
    \        }\n        lst.map { x => \n            x.replaceAll(\"1\", \"\").replaceAll(\"\
    8\", \"\") \n        }.foldLeft(List[String]())( (acc, el) => acc :+ \n      \
    \      s\"the number of odd elements $count in the str${count.toString()}${el}\"\
    .stripMargin)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjr4ykes_.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m  = \e[33mnew\e\
    [0m mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m              \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val n = lst.length\n        val odd = new mutable.ArrayBuffer.empty[String]\n\
    \        for (i <- 0 until n) odd += lst(i).takeWhile(c => c != '0').length\n\
    \        odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgt6tqh7z.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayBuffer.empty[\e[35mString\e[0m]\n\e[31m\e[31m   |\e[0m        \
    \              ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var odd_count = mutable.ListBuffer[Int]()\n        for(i <- 0 until lst.size){\n\
    \            var count = 0\n            for(j <- 0 until lst.size){\n        \
    \        if(i != j)\n                    count += lst.apply(i).count(x => x %\
    \ 2 != 0)\n            }\n            odd_count += count\n        }\n        odd_count.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp56h73s4v.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36modd_count\e[0m = mutable.ListBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var count = 0\n        val m = new collection.mutable.HashMap[String, Int]()\n\
    \        for(x <- lst){\n            if(m.containsKey(x)){\n                m\
    \ = m.updated(x, m(x) + 1)\n            } else {\n                m = m.updated(x,\
    \ 1)\n            }\n            if(m(x) % 2 == 1){\n                count +=\
    \ 1\n            }\n        }\n        lst(0) match {\n            case \"1\"\
    \ => lst(1) match {\n                case \"1\" => lst(2) match {\n          \
    \          case \"1\" => lst(3) match {\n                        case \"1\" =>\
    \ lst(4) match {\n                            case \"1\" => lst(5) match {\n \
    \                               case \"1\" => lst(6) match {\n               \
    \                     case \"1\" => lst(7) match {\n                         \
    \               case \"1\" => lst(8) match {\n                               \
    \             case \"1\" => lst(9) match {\n                                 \
    \               case \"1\" => lst(10) match {\n                              \
    \                      case \"1\" => lst(11) match {\n                       \
    \                                 case \"1\" => lst(12) match {\n            \
    \                                                case \"1\" => lst(13) match {\n\
    \                                                                case \"1\" =>\
    \ lst(14) match {\n                                                          \
    \          case \"1\" => lst(15) match {\n                                   \
    \                                     case \"1\" => lst(16) match {\n        \
    \                                                                    case \"1\"\
    \ => lst(17) match {\n                                                       \
    \                         case \"1\" => lst(18) match {\n                    \
    \                                                                case \"1\" =>\
    \ lst(19) match {\n                                                          \
    \                              case \"1\" => lst(20) match {\n               \
    \                                                                            \
    \ case \"1\" => lst(21) match {\n                                            \
    \                                                    case \"1\" => lst(22) match\
    \ {\n                                                                        \
    \                            case \"1\" => lst(23) match {\n                 \
    \                                                                            \
    \           case \"1\" => lst(24) match {\n                                  \
    \                                                                          case\
    \ \"1\" => lst(25) match {\n                                                 \
    \                                                               case \"1\" =>\
    \ lst(26) match {\n                                                          \
    \                                                          case \"1\" => lst(27)\
    \ match {\n                                                                  \
    \                                                      case \"1\" => lst(28) match\
    \ {\n                                                                        \
    \                                                    case \"1\" => lst(29) match\
    \ {\n                                                                        \
    \                                                        case \"1\" => lst(30)\
    \ match {\n                                                                  \
    \                                                                  case \"1\"\
    \ => lst(31) match {\n                                                       \
    \                                                                            \
    \     case \"1\" => lst(32) match {\n                                        \
    \                                                                            \
    \                        case \"1\" => lst(33) match {\n                     \
    \                                                                            \
    \                                               case \"1\" => lst(34) match {\n\
    \                                                                            \
    \                                                                        case\
    \ \"1\" => lst(35) match {\n                                                 \
    \                                                                            \
    \                           case \"1\" => lst(36) match {\n                  \
    \                                                                            \
    \                                                              case \"1\" => lst(37)\
    \ match {\n                                                                  \
    \                                                                            \
    \                  case \"1\" => lst(38) match \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmkzuttxf.scala:64:4 ----------------------------\e\
    [0m\e[0m\n\e[31m64 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '{' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmkzuttxf.scala:72:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m72 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmpmkzuttxf.scala:16:17 ------------------------\e[0m\e[0m\n\
    \e[31m16 |\e[0m            \e[33mif\e[0m(m.containsKey(x)){\n\e[31m\e[31m   |\e\
    [0m               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue containsKey is not\
    \ a member of scala.collection.mutable.HashMap[String, Int] - did you mean m.contains?\n\
    \e[31m\e[31m-- [E052] Type Error: /tmp/tmpmkzuttxf.scala:17:18 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                m = m.updated(x, m(x) + \e[31m1\e[0m)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                Reassignment to val m\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmpmkzuttxf.scala:19:18 -----------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                m = m.updated(x, \e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Reassignment to val m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpmkzuttxf.scala:69:5 ---------------------\e[0m\e[0m\n\e[31m69\
    \ |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e[0m     Found:  \
    \  Unit\n\e[31m   |\e[0m     Required: List[String]\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpmkzuttxf.scala:65:4 ----------------------------------------\e\
    [0m\e[0m\n\e[33m65 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m\
    \   |\e[0m    Line is indented too far to the left, or a `}` is missing\n1 warning\
    \ found\n6 err"
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  lst match {\n            case x if (x.isEmpty) => List()\n            case\
    \ x if (x.size == 1) => List(x.head + \" (number of odd elements is 0)\")\n  \
    \          case x => oddCountRecursive(lst, 0)\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppb1ixa5n.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mcase\e[0m x => oddCountRecursive(lst,\
    \ \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: oddCountRecursive\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008723
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddNumbersAsList = List[Int]()\n        lst.foreach {\n            s =>\
    \ if (s.forall(_.isDigit)) oddNumbersAsList += s.filter(_.isDigit).toInt * 2\n\
    \        }\n        oddNumbersAsList.map (num => (s\"the number of odd elements\
    \ $num in the $lst of the $lst.\"))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp75_h1xm_.scala:15:59 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[36ms\e[0m => \e[33mif\e[0m (s.forall(_.isDigit))\
    \ oddNumbersAsList += s.filter(_.isDigit).toInt * \e[31m2\e[0m\n\e[31m\e[31m \
    \  |\e[0m                                          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m      value += is not a member of List[Int] - did you mean List[Int].!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // Find the length of the string and set the size variable\n        var size:\
    \ Int = 0\n        lst.foreach {\n            x =>\n            if (x.size ==\
    \ size)\n                size += 1\n            else\n                size = 1\n\
    \        }\n\n        // Create a list to return\n        var res: List[String]\
    \ = Nil\n\n        // Go through each string and count the odd digits\n      \
    \  lst.foreach {\n            x =>\n            if (x.size != size)\n        \
    \        return\n            val digits = (for (i <- 0 until x.size) yield x.charAt(i).toInt)\n\
    \            var cnt = 0\n            digits.foreach { x =>\n                if\
    \ (x % 2 == 1)\n                    cnt += 1\n            }\n            res =\
    \ res + x.replaceAll(\".\", \"\") + cnt\n        }\n        res\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpypwrs77q.scala:30:16\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m                \e[33mreturn\e\
    [0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Found:    Unit\n\e[31m   |\e[0m                Required: List[String]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpypwrs77q.scala:37:22\
    \ ------------------------\e[0m\e[0m\n\e[31m37 |\e[0m            res = res + x.replaceAll(\e\
    [31m\".\"\e[0m, \e[31m\"\"\e[0m) + cnt\n\e[31m\e[31m   |\e[0m                \
    \  ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of List[String], but could\
    \ be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne\
    \ of the following imports might make progress towards fixing the problem:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008732
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val even = lst.filterNot(_.isEmpty)\n        val odd = lst.filter(_ => _.isEmpty)\n\
    \        val evenCount = even.map(_.toInt).filter(_ % 2 != 0).toList\n       \
    \ val oddCount = odd.map(_.toInt).filter(_ % 2 == 0).toList\n        val result\
    \ = evenCount.map { e => s\"the number of odd elements ${e}n the str${e}ng ${e}\
    \ of the ${e.toInt}nput.\" } ::: oddCount\n        result.toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmpvmqud2n6.scala:14:34 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = lst.filter(_\
    \ => _.isEmpty)\n\e[31m\e[31m   |\e[0m                                  ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$3 of expanded function:\n\e[31m\
    \   |\e[0m   _$3 => _$3.isEmpty.\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvmqud2n6.scala:18:15\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        result.toList\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[Matchable]\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008730
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.HashSet[String]()\n        for (i<-lst if i.length < 1)\
    \ yield \"\"\n        odds += \"0\"\n        for (i<-lst) {\n            for (i<-0\
    \ until (i.length-1)) {\n                if (i.toString.toInt.toString.isOdd)\
    \ odds += \"1\"\n            }\n            odds += \".\"\n        }\n       \
    \ odds ++ (lst.map(_.length).filter(_%2==1).map { x => x.toString + \" \" } :+\
    \ \"0\".toString + \" \" + \"1\".toString + \".\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6x_1kvof.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp6x_1kvof.scala:18:46 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                \e[33mif\e[0m (i.toString.toInt.toString.isOdd)\
    \ odds += \e[31m\"1\"\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value isOdd is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008729
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = new collection.mutable.ListBuffer[Int]()\n        val oddDigitsMap\
    \ = new collection.mutable.HashMap[String, Int]()\n        for(i <- 0 until lst.size)\
    \ {\n            val input = lst(i)\n            val digits = input.filter(_.isDigit).toList\n\
    \            odd.clear()\n            for(i <- 0 until digits.size) {\n      \
    \          odd(i) = digits(i).toInt\n                val key = input + \"_\" +\
    \ i\n                if(odd.contains(i / 2)) {\n                    oddDigitsMap(key,\
    \ 1)\n                } else {\n                    val count = oddDigitsMap(key)\
    \ match {\n                        case Some(count) => count + 1\n           \
    \             case None => 1\n                    }\n                    oddDigitsMap(key,\
    \ count)\n                }\n            }\n            lst(i) = odd.size.toString\n\
    \        }\n        lst\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps2ap9ba1.scala:23:33\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m                    oddDigitsMap(key,\
    \ \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                                 ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    \e[1m\e[31m(\e\
    [0mString\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e[1m\e[31m)\e[0m\n\
    \e[31m   |\e[0m                                 Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps2ap9ba1.scala:26:50 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                        \e[33mcase\e[0m Some(count) =>\
    \ count + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \            ^^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of Any, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmps2ap9ba1.scala:27:29 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                        \e[33mcase\e[0m None => \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                             ^^^^\e[0m\n\e[31m   |\e\
    [0m                         Found:    None.type\n\e[31m   |\e[0m             \
    \            Required: Int\n\e[31m   |\e[0m                         pattern type\
    \ is incompatible with expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmps2ap9ba1.scala:29:33 --------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m                    oddDigitsMap(key, count)\n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                               Found:    \e[1m\e[31m(\e[0mString\e[1m\e[31m,\e\
    [0m\e[1m\e[31m \e[0m\e[1m\e[31mNothing\e[0m\e[1m"
  stdout: ''
  timestamp: 1660008735
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var odd = 0.0;\n        var oddCount1 = List[String]();\n        lst.foreach(\
    \ i => { \n            if (i.matches(\"\\\\d+\")) {\n                odd += 1.0\n\
    \            }\n            else {\n                odd = 0.0\n            }\n\
    \            if (odd > 0.0) {\n                oddCount1 += s\"the number of odd\
    \ elements $odd n the str$odd $i of the $i\"\n            }\n        })\n    \
    \    oddCount1\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpawy3lwio.scala:23:26 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                oddCount1 += \e[31ms\"the number of odd\
    \ elements \e[0m$odd\e[31m n the str\e[0m$odd\e[31m \e[0m$i\e[31m of the \e[0m$i\e\
    [31m\"\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var odd = new mutable.HashMap[Int, Int]()\n     \
    \   for (str <- lst) {\n            val strList = str.split(\"\")\n          \
    \  var temp = 0\n            for(strVal <- strList) {\n                if(strVal.toInt\
    \ % 2 == 1) temp += 1\n                else odd.put(temp, odd.get(temp) + 1\n\
    \                )\n            }\n        }\n        odd.foreach { case (key,\
    \ value) =>\n            if(value < oddCount) oddCount += value\n        }\n \
    \       (lst filter (_ => oddCount == 0).toList)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplkgby3bh.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m   \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E081] Type Error: /tmp/tmplkgby3bh.scala:27:21\
    \ -----------------------------\e[0m\e[0m\n\e[31m27 |\e[0m        (lst filter\
    \ (_ => oddCount == \e[31m0\e[0m).toList)\n\e[31m\e[31m   |\e[0m             \
    \        ^\e[0m\n\e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m   I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m   _$1 => oddCount == 0.\n2 errors found\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val result = mutable.ListBuffer.empty[String]\n        lst.foreach { e => \n\
    \            val odd = e.replaceAll(\"\\\\d\", \"\").length\n            result\
    \ :+= s\"the number of odd elements {odd} n the str${e.size} of ${e}\".trim\n\
    \        }\n        result.toList\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6ojbf7wz.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008728
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val oddNums = mutable.ListBuffer.empty[Int]\n\n        for(i <- 0 until lst.size)\
    \ {\n            val num = lst(i)\n            val str = Integer.parseInt(num,\
    \ 2) match {\n                case n if n < 10 => s\"0$n\"\n                case\
    \ n => n\n            }\n            val len = str.length()\n\n            for(j\
    \ <- 0 until len) {\n                val charcode = str.charAt(j)\n          \
    \      if(charcode >= 48 && charcode <= 57) {\n                    oddNums(j)\
    \ += 1\n                }\n            }\n        }\n\n        (oddNums.toList\
    \ map { elem => (elem.toString + elem.toString) }).reverse\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplp7erm_3.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddNums\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmplp7erm_3.scala:21:26 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mlen\e[0m = str.length()\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                    value length is not a member of Matchable\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmplp7erm_3.scala:24:35 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mval\e[0m \e[36mcharcode\e[0m =\
    \ str.charAt(j)\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               value charAt is not a member\
    \ of Matchable\n3 errors found\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val oddsDict = mutable.HashMap[(Int, Int), Int]()\n        lst.foreach{s =>\
    \ s.toCharArray.foreach(x => oddsDict += ((x, 1)))}\n        val ans = mutable.ListBuffer[String]()\n\
    \        oddsDict.foreach{case (k, v) => ans += s\"the number of odd elements\
    \ ${v}n the str${k}ng ${v}${k-1} of the ${v}nput.\"}\n        ans.toList\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpssi1dx3m.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddsDict\e[0m = mutable.HashMap[(\e\
    [35mInt\e[0m, \e[35mInt\e[0m), \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpssi1dx3m.scala:15:18\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e\
    [36mans\e[0m = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008731
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      lst.map(elem\
    \ => lst.count(_ == elem))\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoctfw2xd.scala:13:31\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m      lst.map(\e[36melem\e[0m\
    \ => lst.count(_ == elem))\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    Int\n\e[31m   |\e[0m     \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = new scala.collection.mutable.ListBuffer[String]()\n        for(i\
    \ <- 0 to lst.size){\n            val str = new String\n            for(x <- lst(i)){\n\
    \                str += x\n            }\n            val n = str.length\n   \
    \         for(x <- 0 to (n-1)){\n                if(str.charAt(x) == '1'){\n \
    \                   odd += str\n                }\n            }\n        }\n\
    \        odd.toList\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpwr6cw9in.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                str += x\n\e[31m\e[31m   |\e[0m     \
    \           ^^^^^^\e[0m\n\e[31m   |\e[0m               value += is not a member\
    \ of String - did you mean str.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660008740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \n\
    \      import scala.collection.mutable\n      val oddDigits = mutable.Set[Int]()\n\
    \      lst.foreach(s => {\n        val strArr = s.toIntArray\n        strArr.foreach(i\
    \ => {\n          if (i % 2 == 1) oddDigits.add(i)\n        })\n      })\n   \
    \   oddDigits.map(i => \"the number of odd elements \" + i + \" the \" + i + \"\
    th string of the input string.\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpevk5l5b2.scala:17:23 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36mstrArr\e[0m = s.toIntArray\n\
    \e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                    value toIntArray is not a member of String\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpevk5l5b2.scala:22:19 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m      oddDigits.map(\e[36mi\e[0m => \e[31m\"the number\
    \ of odd elements \"\e[0m + i + \e[31m\" the \"\e[0m + i + \e[31m\"th string of\
    \ the input string.\"\e[0m)\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Found:    scala.collection.mutable.Set[String]\n\e[31m\
    \   |\e[0m      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evenSums = lst.map{s => s.toInt}.filter(_ % 2 == 0)\n        val oddSums\
    \ = lst.map{s => s.toInt}.filter(_ % 2 != 0)\n        var result: List[String]\
    \ = List()\n        for (i <- 0 until lst.size) {\n            if (evenSums(i).isDefined\
    \ && oddSums(i).isDefined) {\n                result = result :+ evenSums(i).get.toString\
    \ + \" is even, and \" + oddSums(i).get.toString + \" is odd\"\n            }\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8ilb_r3v.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (evenSums(i).isDefined && oddSums(i).isDefined)\
    \ {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                value isDefined is not a member of Int\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp8ilb_r3v.scala:18:47 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                result = result :+ evenSums(i).get.toString\
    \ + \e[31m\" is even, and \"\e[0m + oddSums(i).get.toString + \e[31m\" is odd\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                                   ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                   value get is not a member\
    \ of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1660008741
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \ var result : mutable.List[String] = mutable.ListBuffer[String]()\n       for\
    \ ( line <- lst ) {\n          for ( ch <- line ) {\n               if ( ch !=\
    \ \"0\" ) {\n                    result.add(\"the number of odd elements \" +\
    \ ch + \" the str\" + ch + \" of the \" + line + \".\")\n               }\n  \
    \        }\n       }\n       return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohxj7nza.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m       \e[33mvar\e[0m \e[36mresult\e[0m : mutable.List[\e\
    [35mString\e[0m] = mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e\
    [0m                    ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpohxj7nza.scala:13:43\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m       \e[33mvar\e[0m \e\
    [36mresult\e[0m : mutable.List[\e[35mString\e[0m] = mutable.ListBuffer[\e[35mString\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                           ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                           Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpohxj7nza.scala:16:20 -----------------------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m               \e[33mif\e[0m ( ch != \e[31m\"0\"\e[0m\
    \ ) {\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008740
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evenDigits =  lst.filter { x => x.isDigit }\n        val oddDigits =  evenDigits.filter\
    \ { x => x.toInt % 2 == 1 }\n        evenDigits.map (x => s\"the number of odd\
    \ elements ${x.toInt} the str${x.toInt} of the ${x.toInt}nput.\")\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpife3emkh.scala:13:46 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenDigits\e[0m =  lst.filter\
    \ { \e[36mx\e[0m => x.isDigit }\n\e[31m\e[31m   |\e[0m                       \
    \                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \         value isDigit is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660008742
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  if (lst.isEmpty) Nil\n        else oddCount(lst.tail) ++ (lst.head -> evenCount(lst.head))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpukmw59hg.scala:14:48 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m oddCount(lst.tail) ++ (lst.head\
    \ -> evenCount(lst.head))\n\e[31m\e[31m   |\e[0m                             \
    \                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                          \
    \                      Not found: evenCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008737
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.Set[Int]()\n        lst.foreach{ elem =>\n            elem.toCharArray.map(i\
    \ => if (i % 2 == 0) 1 else 0).foreach { i =>\n                if (odd.contains(i))\
    \ odd(i) += 1\n                else {\n                    val exists = odd.contains(i)\n\
    \                    odd(i) += 1\n                    if (exists) odd(i) -= 1\n\
    \                }\n            }\n        }\n        lst.map(elem => s\"the number\
    \ of odd elements $odd(elem) the  $elemn of the $lst\").filter(_ != \"\")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgn5jd0pn.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpgn5jd0pn.scala:24:70 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        lst.map(\e[36melem\e[0m => \e[31ms\"the number\
    \ of odd elements \e[0m$odd\e[31m(elem) the  \e[0m$elemn\e[31m of the \e[0m$lst\e\
    [31m\"\e[0m).filter(_ != \e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \                                                         ^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                                        Not found: elemn\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008739
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // Return empty list if list is empty\n        if (lst.isEmpty) List()\n  \
    \      // Create empty array to store count of odd elements for each string\n\
    \        val odd_count : Array[Int] = Array()\n        // Iterate through all\
    \ the strings\n        lst.map(s => { // Map the string to a list of character\
    \ array (string as char array)\n            val chars = s.toCharArray\n      \
    \      val len = chars.length\n            // Iterate through all the characters\
    \ of the string\n            for ( i <- 0 until len ) {\n                if (chars(i)\
    \ % 2 != 0) {\n                    // If character is an odd number, increase\
    \ count of odd elements\n                    odd_count(i) = odd_count(i) + 1 \n\
    \                }\n            }\n        })\n        // Convert array to List\n\
    \        odd_count.map(x => x.toString).mkString(\"the number of odd elements\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpxxccx2s9.scala:30:47\
    \ --------------------\e[0m\e[0m\n\e[31m30 |\e[0m        odd_count.map(\e[36mx\e\
    [0m => x.toString).mkString(\e[31m\"the number of odd elements \"\e[0m)\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  if (lst.size < 2) return lst\n        val oddsCount : mutable.Map[String, Int]\
    \ = mutable.Map()\n        for (i <- 0 until lst.size) {\n            val oddElement\
    \ = oddCount(lst.slice(i + 1, lst.size))\n            if (oddElement == lst.slice(i\
    \ + 1)) oddsCount.getOrElse(lst.slice(i + 1, lst.size), 0) + 1\n            else\
    \ oddsCount += (lst.slice(i + 1, lst.size) -> oddElement)\n        }\n       \
    \ lst.map(i => (i, oddsCount.getOrElse(i, 0).toString))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxsx3hdrh.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moddsCount\e[0m : mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m] = mutable.Map()\n\e[31m\e[31m   |\e[0m      \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxsx3hdrh.scala:14:51\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36moddsCount\e[0m : mutable.Map[\e[35mString\e[0m, \e[35mInt\e[0m] = mutable.Map()\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpxsx3hdrh.scala:17:39\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m17 |\e[0m       \
    \     \e[33mif\e[0m (oddElement == lst.slice(i + \e[31m1\e[0m)) oddsCount.getOrElse(lst.slice(i\
    \ + \e[31m1\e[0m, lst.size), \e[31m0\e[0m) + \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                              ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mmissing\
    \ argument for parameter until of \e[33mmethod\e[0m \e[35mslice\e[0m in \e[33mclass\e\
    [0m \e[35mList\e[0m: (from: Int, until: Int): List[String]\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpxsx3hdrh.scala:20:21 --------------------\e[0m\e\
    [0m\n\e[31m20 |\e[0m        lst.map(\e[36mi\e[0m => (i, oddsCount.getOrElse(i,\
    \ \e[31m0\e[0m).toString))\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Found:    \e[1m\e[31m(\e[0mString\e[1m\e\
    [31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mNothing\e[0m\e[1m\e[31m)\e[0m\n\e[31m  \
    \ |\e[0m                     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660008743
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val result = new mutable.MutableList[String]()\n        lst.foreach(_.toCharArray.filter(x\
    \ => !x.isDigit).count(_ % 2 == 1) foreach {\n            result += \"the number\
    \ of odd elements \"+_+\"n the string \"+_+\" of the \"+_+\" input.\\n\"\n   \
    \     })\n        result.toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptcq4iv3n.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e\
    [0m mutable.MutableList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m          \
    \               ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptcq4iv3n.scala:14:76\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.foreach(_.toCharArray.filter(\e\
    [36mx\e[0m => !x.isDigit).count(_ % \e[31m2\e[0m == \e[31m1\e[0m) foreach {\n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value foreach is not a member of Int\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  if(lst.size < 1) Nil\n        else {\n            var odd = 0\n           \
    \ var lst2 = lst.reverse\n            var temp : List[String] = Nil\n        \
    \    for(i <- 0 until lst2.size){\n                val str = lst2(i)\n       \
    \         if(str.size == 0) temp += Nil\n                else odd += str.count(str\
    \ => str.toInt % 2 != 0)\n            }\n            lst.reverse.tail.map(s =>\
    \ s + \" \" + str(odd)).tail :: temp\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu7w1_kzm.scala:20:39 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m                \e[33mif\e[0m(str.size == \e[31m0\e[0m)\
    \ temp += Nil\n\e[31m\e[31m   |\e[0m                                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue += is not a member of List[String] - did you mean List[String].!=?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu7w1_kzm.scala:23:48 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            lst.reverse.tail.map(\e[36ms\e[0m => s +\
    \ \e[31m\" \"\e[0m + str(odd)).tail :: temp\n\e[31m\e[31m   |\e[0m           \
    \                                     ^^^\e[0m\n\e[31m   |\e[0m              \
    \                                  Not found: str\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008748
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val n = lst.size\n        val oddDigits = new mutable.HashSet[Int]()\n    \
    \    lst.map(_.toInt).filter(d => d%2 == 1).foreach(oddDigits.+=)\n        val\
    \ oddCount: List[String] = new ListBuffer[String]\n        for (i <- 0 until n)\
    \ {\n            val count = (oddDigits.size - lst.map(_(i)).toList)\n       \
    \     val str = new StringBuffer\n            if (count == 0) {\n            \
    \    str.append(\"the number of odd elements 0n the str0ng 0 of the 0nput.\")\n\
    \            } else {\n                str.append(\"the number of odd elements\
    \ \" + count + \"n the str\" + count + \"n of the \" + count + \"nput.\")\n  \
    \          }\n            oddCount += str\n        }\n        oddCount.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp9ffee9x0.scala:14:28 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moddDigits\e[0m = \e[33mnew\e\
    [0m mutable.HashSet[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                            Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9ffee9x0.scala:16:37\
    \ --------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33mval\e[0m \e[36moddCount\e\
    [0m: \e[35mList\e[0m[\e[35mString\e[0m] = \e[33mnew\e[0m \e[35mListBuffer\e[0m[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Found:    scala.collection.mutable.ListBuffer[String]\n\
    \e[31m   |\e[0m                   Required: List[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ffee9x0.scala:25:21 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            oddCount += str\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    value += is not a member of List[String]\
    \ - did you mean oddCount.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660008750
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.HashMap[Int, Int]()\n        lst.foreach{e => if(e.length()\
    \ > 0) for(i <- 0 until e.length) odds(e(i).toInt) += 1 }\n        val results\
    \ = mutable.ArrayBuffer.empty[String]\n        (0 until odds.size).foreach{ i\
    \ => results ++= List(\"the number of odd elements \" + odds(i).asInstanceOf[Int]\
    \ + \" of the \" + lst.filter(l => l(i).asInstanceOf[Int] != 0).filter(l => l(i).asInstanceOf[Int].isOdd).map(l\
    \ => l(i)).mkString(\"\") + \"input.\") }\n        results.toList\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqb7zydwl.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpqb7zydwl.scala:15:22 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mresults\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008744
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val (maxLength, maxLengthIndex) = lst.foldLeft((0, 0))((len, index, string)\
    \ => {\n            if (string.length > len._2) (len, index)\n            else\
    \ (string, index)\n        })\n        val newStrings = lst.map(string => {\n\
    \            val stringLength = string.length\n            val subStringLength\
    \ = stringLength - maxLengthIndex\n            var newString = \"\"\n        \
    \    for (i <- 0 to subStringLength) {\n                if (string.charAt(i).isDigit)\
    \ {\n                    if (string.charAt(i).toString.toInt % 2 == 1)\n     \
    \                   newString += string.charAt(i).toString.toInt\n           \
    \         else\n                        newString += \"0\"\n                }\
    \ else {\n                    newString += \"0\"\n                }\n        \
    \    }\n            newString += stringLength - subStringLength\n            newString\n\
    \        }).filter(string => {\n            string.length == maxLength\n     \
    \   })\n        newStrings.map((newString, i) => {\n            if (string.startsWith(maxLengthIndex.toString))\
    \ {\n                string += maxLengthIndex.toString\n            }\n      \
    \      string.substring(0, maxLengthIndex + 1) + newString + string.substring(maxLengthIndex\
    \ + newString.length)\n        }).toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpjrrn6zfr.scala:13:84 ---------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m (maxLength, maxLengthIndex) =\
    \ lst.foldLeft((\e[31m0\e[0m, \e[31m0\e[0m))((\e[36mlen\e[0m, \e[36mindex\e[0m,\
    \ \e[36mstring\e[0m) => {\n\e[31m\e[31m   |\e[0m                             \
    \                                  ^\e[0m\n\e[31m   |\e[0m                   \
    \              Wrong number of parameters, expected: 2\n\e[31m14 |\e[0m      \
    \      \e[33mif\e[0m (string.length > len._2) (len, index)\n\e[31m15 |\e[0m  \
    \          \e[33melse\e[0m (string, index)\n\e[31m16 |\e[0m        })\n\e[31m\e\
    [31m-- [E086] Syntax Error: /tmp/tmpjrrn6zfr.scala:36:38 ---------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        newStrings.map((\e[36mnewString\e[0m, \e[36mi\e\
    [0m) => {\n\e[31m\e[31m   |\e[0m                       ^\e[0m\n\e[31m   |\e[0m\
    \                       Wrong number of parameters, expected: 1\n\e[31m37 |\e\
    [0m            \e[33mif\e[0m (string.startsWith(maxLengthIndex.toString)) {\n\e\
    [31m38 |\e[0m                string += maxLengthIndex.toString\n\e[31m39 |\e[0m\
    \            }\n\e[31m40 |\e[0m            string.substring(\e[31m0\e[0m, maxLengthIndex\
    \ + \e[31m1\e[0m) + newString + string.substring(maxLengthIndex + newString.length)\n\
    \e[31m41 |\e[0m        }).toList\n2 errors found\n"
  stdout: ''
  timestamp: 1660008745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var l: mutable.Buffer = mutable.Buffer.empty\n        for(str <- lst if !str.isEmpty)\
    \ {\n            if (l.isEmpty) {\n                l += 1\n            } else\
    \ {\n                l += str.length - 1\n            }\n        }\n        l\
    \ match {\n            case 0 => List[String](\"the number of odd elements \"\
    \ + lst + \" of the 0nput.\")\n            case x => List[String](\"the number\
    \ of odd elements \" + lst + \" of the \" + lst + \" input.\")\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4v42c244.scala:13:15 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m: mutable.Buffer =\
    \ mutable.Buffer.empty\n\e[31m\e[31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp4v42c244.scala:13:32 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36ml\e[0m: mutable.Buffer =\
    \ mutable.Buffer.empty\n\e[31m\e[31m   |\e[0m                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008744
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var evenCount = 0\n        var oddCount = 0\n        for (s <- lst) {\n   \
    \         evenCount+=s.count(x => x % 2 == 0)\n            oddCount+=s.count(x\
    \ => x % 2 != 0)\n        }\n        evenCount match {\n            case 0 =>\
    \ List(\"The number of odd elements \" + evenCount + \" of the \" + lst.head +\
    \ \" string.\")\n            case _ => List(\"the number of odd elements \" +\
    \ oddCount + \" of the \" + lst.head + \" string.\", \"the number of odd elements\
    \ \" + evenCount + \" of the \" + lst.head + \" string.\")\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpylhvlmwy.scala:25)\n\tat Problem.main(tmpylhvlmwy.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008755
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ListBuffer.empty[Int]\n        for (s1 <- lst) {\n      \
    \      if (s1.isEmpty) odd += 0\n            else odd += lst.filter(x => !x.isEmpty).map(x\
    \ => x.toInt).count(_ % 2 != 0)\n        }\n        odd toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpqldghot0.scala:18:18 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        odd toList\n\e[31m\e[31m   |\e[0m           \
    \       ^\e[0m\n\e[31m   |\e[0m                  expression expected but \e[31m'}'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpqldghot0.scala:13:18\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modd\e[0m = mutable.ListBuffer.empty[\e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m\
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                  Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008745
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val l: mutable.LinkedHashSet[String] = new mutable.LinkedHashSet\n        val\
    \ odds = mutable.Set[String]()\n        for (i <- lst if i.forall(_.isDigit))\n\
    \            l.add(i)\n        for (i <- lst.indices)\n            for (j <- 0\
    \ to (lst(i).length - 1))\n                if (lst(i)(j) isDigit)\n          \
    \          if (l.contains(lst(i)(j + 1))) {\n                        odds += lst(i)(j\
    \ + 1)\n                        l.remove(lst(i)(j + 1))\n                    }\n\
    \        for (i <- l.indices)\n            if (odds contains lst(i))\n       \
    \         odds -= lst(i)\n        odds :: List(\n            if (odds.length >\
    \ 0)\n                s\"the number of odd elements ${odds.length}n the str${\
    \ odds.length }nput .\"\n            else\n                \"\"\n        )\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpvsu34p61.scala:19:37 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                \e[33mif\e[0m (lst(i)(j) isDigit)\n\e\
    [31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                     expression expected but \e[31m')'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvsu34p61.scala:13:15\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36ml\e[0m: mutable.LinkedHashSet[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.LinkedHashSet\n\
    \e[31m\e[31m   |\e[0m               ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvsu34p61.scala:13:51\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36ml\e[0m: mutable.LinkedHashSet[\e[35mString\e[0m] = \e[33mnew\e[0m mutable.LinkedHashSet\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvsu34p61.scala:14:19\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.Set[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660008747
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  def count(str :String, count : Int) : List[String] = {\n            if (str.isEmpty)\
    \ return List(str) // count for empty string\n            val head = str.head\n\
    \            val tail = str.tail\n            if (tail.forall(_.isDigit)) count(head\
    \ + tail, count) // count for digits in the first string\n            else count(head\
    \ + head.takeWhile(_ == '0').drop(1).reverse, count + 1) // count for other strings\n\
    \        }\n        count(\"\", 0) // count for empty input\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpx9r2z256.scala:17:40 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m (tail.forall(_.isDigit)) count(head\
    \ + tail, count) \e[34m// count for digits in the first string\e[0m\n\e[31m\e\
    [31m   |\e[0m                                        ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                \e[33mparameter\e[0m \e[35mcount\e[0m does\
    \ not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpx9r2z256.scala:18:17\
    \ -----------------------------\e[0m\e[0m\n\e[31m18 |\e[0m            \e[33melse\e\
    [0m count(head + head.takeWhile(_ == \e[31m'0'\e[0m).drop(\e[31m1\e[0m).reverse,\
    \ count + \e[31m1\e[0m) \e[34m// count for other strings\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                 ^^^^^\e[0m\n\e[31m   |\e[0m                 \e[33mparameter\e\
    [0m \e[35mcount\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpx9r2z256.scala:18:35 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33melse\e[0m count(head + head.takeWhile(_\
    \ == \e[31m'0'\e[0m).drop(\e[31m1\e[0m).reverse, count + \e[31m1\e[0m) \e[34m//\
    \ count for other strings\e[0m\n\e[31m\e[31m   |\e[0m                        \
    \      ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                              value\
    \ takeWhile is not a member of Char\n3 errors found\n"
  stdout: ''
  timestamp: 1660008751
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val result: List[String] = Nil\n        for (str <- lst) {\n            val\
    \ digits = str.filter(c => c >= '0' && c <= '9').toList\n            result:::\n\
    \                digits.size.toList.filter(x=> x % 2 == 1).sum\n        }\n  \
    \      result\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5kcc3r_c.scala:17:28 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                digits.size.toList.filter(\e[36mx\e[0m=>\
    \ x % \e[31m2\e[0m == \e[31m1\e[0m).sum\n\e[31m\e[31m   |\e[0m               \
    \ ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value toList is not a member\
    \ of Int - did you mean Int.toInt?\n1 error found\n"
  stdout: ''
  timestamp: 1660008752
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  lst.map(x => if (x.isEmpty) 0 else oddCount(x.tail).map(y => s\"$y elements\
    \ of the $x\").mkString(\" \"))\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt1169g1i.scala:13:36\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => \e[33mif\e[0m (x.isEmpty) \e[31m0\e[0m \e[33melse\e[0m oddCount(x.tail).map(\e\
    [36my\e[0m => \e[31ms\"\e[0m$y\e[31m elements of the \e[0m$x\e[31m\"\e[0m).mkString(\e\
    [31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m                                    ^\e\
    [0m\n\e[31m   |\e[0m                                    Found:    (\e[31m0\e[0m\
    \ : Int)\n\e[31m   |\e[0m                                    Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpt1169g1i.scala:13:54\
    \ --------------------\e[0m\e[0m\n\e[31m13 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => \e[33mif\e[0m (x.isEmpty) \e[31m0\e[0m \e[33melse\e[0m oddCount(x.tail).map(\e\
    [36my\e[0m => \e[31ms\"\e[0m$y\e[31m elements of the \e[0m$x\e[31m\"\e[0m).mkString(\e\
    [31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \              ^^^^^^\e[0m\n\e[31m   |\e[0m                                  \
    \                Found:    String\n\e[31m   |\e[0m                           \
    \                       Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e\
    [1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.ArrayBuffer[Int]()\n        for (i <- 0 until lst.length)\
    \ {\n            val str = (lst(i)).toInt\n            odd += str\n          \
    \  val cnt = (str.toInt.toString filter (_.isDigit).toList.filter (_.isDigit).length)\n\
    \            lst(i) replace (str.toInt.toString filter (_.isDigit).toList.filter\
    \ (_.isDigit), cnt.toString)\n        }\n        odd.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1ltd182l.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.ArrayBuffer[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmp1ltd182l.scala:17:50 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mcnt\e[0m = (str.toInt.toString\
    \ filter (_.isDigit).toList.filter (_.isDigit).length)\n\e[31m\e[31m   |\e[0m\
    \                                                  ^\e[0m\n\e[31m   |\e[0m   Missing\
    \ parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type\
    \ of the parameter _$1 of expanded function:\n\e[31m   |\e[0m   _$1 => _$1.isDigit.\n\
    \e[31m\e[31m-- [E081] Type Error: /tmp/tmp1ltd182l.scala:18:55 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            lst(i) replace (str.toInt.toString filter\
    \ (_.isDigit).toList.filter (_.isDigit), cnt.toString)\n\e[31m\e[31m   |\e[0m\
    \                                                       ^\e[0m\n\e[31m   |\e[0m\
    \   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer\
    \ the type of the parameter _$3 of expanded function:\n\e[31m   |\e[0m   _$3 =>\
    \ _$3.isDigit.\n3 errors found\n"
  stdout: ''
  timestamp: 1660008751
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var numOdd = 0\n        for (item <- lst) {\n            if (item.toInt%2 !=\
    \ 0) {\n                numOdd += 1\n            }\n        }\n        val oddString\
    \ = lst.map(x=>numOdd.toString).mkString(\", \") // \"the number of odd elements\
    \ are \" + numOdd\n        val evenString = lst.map(x=>x.toString.length).mkString(\"\
    , \") //\"the number of even elements are \" + lst.map(x=>x.toString.length).mkString(\"\
    , \") //\"the number of even elements are \" + lst.map(x=>x.toString.length).map(x=>(x.toString.length)).sum.toString\n\
    \        oddString.replaceAllIn(\",\", evenString)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_7djz1wg.scala:21:18 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        oddString.replaceAllIn(\e[31m\",\"\e[0m, evenString)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ replaceAllIn is not a member of String - did you mean oddString.replaceAll?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008756
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var odd: List[Int] = Nil\n        var result: List[String] = Nil\n        lst.foreach\
    \ { str =>\n            var n = 0.toInt - 9.toInt\n            str = str.dropRight(str.length/2).takeRight(str.length/2).mkString.reverse\n\
    \            val list = str.split\n            val odd_list = list.filter(x =>\
    \ x % 2 != 0)\n            odd_list.foreach { x =>\n                odd = List(n)\n\
    \            }\n            val odd_str = odd.mkString(\",\")\n            val\
    \ odd_count = str.replaceAll(\",\"+odd_str+\",\", \"\").split(\",\")(1).trim\n\
    \            result = result :+ odd_count\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpy5qh_qsb.scala:17:16 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            str = str.dropRight(str.length/\e[31m2\e\
    [0m).takeRight(str.length/\e[31m2\e[0m).mkString.reverse\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Reassignment to val str\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E051] Reference Error: /tmp/tmpy5qh_qsb.scala:18:27 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36mlist\e[0m = str.split\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0mAmbiguous\
    \ overload. The overloaded alternatives of \e[33mmethod\e[0m \e[35msplit\e[0m\
    \ in \e[33mclass\e[0m \e[35mString\e[0m with types\n\e[31m   |\e[0m (x$0: String):\
    \ Array[String]\n\e[31m   |\e[0m (x$0: String, x$1: Int): Array[String]\n\e[31m\
    \   |\e[0mboth match expected type <?>\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008753
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      val\
    \ evenCount = mutable.Map[String, Int]()\n      val oddCount = mutable.Map[String,\
    \ Int]()\n      lst.reverse.foreach(el => {\n        val v = el.trim\n       \
    \ if (v.length == 0)\n          return\n        if (v.head == '1')\n         \
    \ evenCount.put(v, 1)\n        else\n          oddCount.put(v, 1)\n      })\n\n\
    \      val listOfOdds = mutable.List[Int]()\n      lst.reverse.foreach(el => {\n\
    \        val v = el.trim\n        if (v.length == 0)\n          return\n     \
    \   if (v.head == '1')\n          listOfOdds += (oddCount(evenCount)(v) + 1)\n\
    \        else\n          listOfOdds += (evenCount(oddCount)(v) + 1)\n      })\n\
    \n      lst.reverse.map(el => el.replace(\"1n\", \"\" + listOfOdds.sum)).tail\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ndjv1p7.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mval\e[0m \e[36mevenCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ndjv1p7.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m      \e[33mval\e[0m \e[36moddCount\e[0m = mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                    \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4ndjv1p7.scala:18:10 --------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m          \e[33mreturn\e[0m\n\e[31m\e[31m   |\e[0m  \
    \        ^^^^^^\e[0m\n\e[31m   |\e[0m          Found:    Unit\n\e[31m   |\e[0m\
    \          Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp4ndjv1p7.scala:25:23 ------------------------\e[0m\e[0m\n\e[31m25 |\e\
    [0m      \e[33mval\e[0m \e[36mlistOfOdds\e[0m = mutable.List[\e[35mInt\e[0m]()\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmp4ndjv1p7.scala:29:10 --------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m          \e[33mreturn\e[0m\n\e[31m\e[31m   |\e[0m       \
    \   ^^^^^^\e[0m\n\e[31m   |\e[0m          Found:    Unit\n\e[31m   |\e[0m    \
    \      Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660008760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      val\
    \ counts = mutable.Map[String, Int]()\n      for (s <- lst) {\n        val digits\
    \ = (for (d <- s.toInt) yield d).toList\n        for (i <- digits)\n         \
    \ counts(i toString) += 1\n      }\n      val res: List[String] = for (i <- 0\
    \ until counts.size)\n        yield counts(i toString) + \" odd digits in \" +\
    \ lst(i)\n      res\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpaidokmys.scala:17:27 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m          counts(i toString) += \e[31m1\e[0m\n\e[31m\e\
    [31m   |\e[0m                           ^\e[0m\n\e[31m   |\e[0m              \
    \             expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmpaidokmys.scala:20:31 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33myield\e[0m counts(i toString) + \e[31m\"\
    \ odd digits in \"\e[0m + lst(i)\n\e[31m\e[31m   |\e[0m                      \
    \         ^\e[0m\n\e[31m   |\e[0m                               expression expected\
    \ but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpaidokmys.scala:13:19 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m      \e[33mval\e[0m \e[36mcounts\e[0m = mutable.Map[\e[35mString\e[0m, \e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpaidokmys.scala:15:32 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = (\e[33mfor\e\
    [0m (d <- s.toInt) \e[33myield\e[0m d).toList\n\e[31m\e[31m   |\e[0m         \
    \                       ^^^^^^^\e[0m\n\e[31m   |\e[0m                        \
    \        value map is not a member of Int\n4 errors found\n"
  stdout: ''
  timestamp: 1660008759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // Write your code here\n        val res = mutable.ArrayBuffer(\"\")\n    \
    \    for(item <- lst){\n            res += s\"the number of odd elements ${ item.count(_\
    \ % 2 ==1 )}n the str${item.count(_ % 2 ==1 )} of the ${item.count(_ % 2 ==1 )}\
    \ \"\n        }\n        //return res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmplu51ucng.scala:14:18 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ArrayBuffer(\e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmplu51ucng.scala:15:8 ---------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        \e[33mfor\e[0m(item <- lst){\n\e[31m\e[31m  \
    \ |\e[0m        ^\e[0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m\
    \        Required: List[String]\n\e[31m16 |\e[0m            res += \e[31ms\"the\
    \ number of odd elements \e[0m${ item.count(_ % \e[31m2\e[0m ==\e[31m1\e[0m )}\e\
    [31mn the str\e[0m${item.count(_ % \e[31m2\e[0m ==\e[31m1\e[0m )}\e[31m of the\
    \ \e[0m${item.count(_ % \e[31m2\e[0m ==\e[31m1\e[0m )}\e[31m \"\e[0m\n\e[31m17\
    \ |\e[0m        }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // write your logic here\n        lst.map{ str => {\n            val a = str.dropWhile(Character.isDigit)\n\
    \            val b = str.takeWhile(Character.isDigit)\n            val c = a.foldLeft(0.0){\
    \ (acc, elem) => acc+elem.toDouble() }\n            val d = b.foldLeft(0.0){ (acc,\
    \ elem) => acc+elem.toDouble() }\n            s\"the number of odd elements ${c.toInt}n\
    \ the str${c.toInt}ng ${d.toInt}n the str${d.toInt}ng\"\n        }}\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpid9opsm6.scala:17:61 -----------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mval\e[0m \e[36mc\e[0m = a.foldLeft(\e\
    [31m0.0\e[0m){ (\e[36macc\e[0m, \e[36melem\e[0m) => acc+elem.toDouble() }\n\e\
    [31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  \e[33mmethod\e[0m \e[35mtoDouble\e[0m in\
    \ \e[33mclass\e[0m \e[35mChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpid9opsm6.scala:18:61 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[36md\e[0m = b.foldLeft(\e\
    [31m0.0\e[0m){ (\e[36macc\e[0m, \e[36melem\e[0m) => acc+elem.toDouble() }\n\e\
    [31m\e[31m   |\e[0m                                                        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  \e[33mmethod\e[0m \e[35mtoDouble\e[0m in\
    \ \e[33mclass\e[0m \e[35mChar\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008757
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // 1. Count all the digits in all the strings.\n        // 2. Make a list of\
    \ all the digits in all the strings.\n        // 3. Count how many of the digits\
    \ are odd in all the strings.\n        // 4. Return the list\n        val numOfDigits\
    \ = lst.map(_.replaceAll(\"\\\\D\", \"\").toInt)\n\n        val numOfOddDigits\
    \ = lst.map(s => numOfDigits.map(d => if (d % 2 == 1) 1 else 0).sum)\n       \
    \ val list = numOfOddDigits.map(n => s\"the number of odd elements $n of the str$n\"\
    .toUpperCase)\n        list.filter(_.contains(\"STR\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmptnqhg7at.scala:24)\n\tat Problem.main(tmptnqhg7at.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = lst.map( x => x.count(x => x % 2 != 0))\n        odd.map( x => \"\
    the number of odd elements \" + x + \"n the str\" + x + \"n\" + \"of the \" +\
    \ x + \"nput.\" ).flatten\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpett72lzp.scala:14:115 ----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        odd.map( \e[36mx\e[0m => \e[31m\"the number of\
    \ odd elements \"\e[0m + x + \e[31m\"n the str\"\e[0m + x + \e[31m\"n\"\e[0m +\
    \ \e[31m\"of the \"\e[0m + x + \e[31m\"nput.\"\e[0m ).flatten\n\e[31m\e[31m  \
    \ |\e[0m                                                                     \
    \                                              ^\e[0m\n\e[31m   |\e[0mno given\
    \ instance of type String => IterableOnce[B] was found for parameter toIterableOnce\
    \ of \e[33mmethod\e[0m \e[35mflatten\e[0m in \e[33mtrait\e[0m \e[35mStrictOptimizedIterableOps\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mwhere:    B is a type variable with constraint\
    \ <: String\n1 error found\n"
  stdout: ''
  timestamp: 1660008761
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evenCount = mutable.HashMap[Int, Int]()\n        val oddCount = mutable.HashMap[Int,\
    \ Int]()\n\n        lst.foreach { x => x.toString.forall(_ == '1') match {\n \
    \           case true =>\n                val digits = x.toString.map(_.toInt)\n\
    \                if (digits.length % 2 == 0) {\n                    val totalOddCount\
    \ = digits.length / 2\n                    for (i <- 0 until digits.length / 2)\
    \ {\n                        val remainder: Int = digits(i)\n                \
    \        if (remainder % 2 == 0) {\n                            evenCount += (remainder,\
    \ totalOddCount)\n                            evenCount.filter(_._1 > 0).foreach(x\
    \ => oddCount += x)\n                        }\n                    }\n      \
    \          }\n            case false => }\n        }\n\n        oddCount.filter(_._1\
    \ == 0).map(x => s\"the number of odd elements ${x._2} of the str$x._1 of the\
    \ ${x._2}nput.\").mkString(\", \")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp225vgadp.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenCount\e[0m = mutable.HashMap[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                       \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp225vgadp.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36moddCount\e[0m = mutable.HashMap[\e[35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008758
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = lst.map(s => s.count(i => i%2 == 1)).toList\n        odds match\
    \ {\n            case Nil => Nil\n            case _ => lst.map(s => s\"the number\
    \ of odd elements ${s.count(i => i%2 == 1)}n the str${s.size}${s.count(i => i%2\
    \ == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 ==\
    \ 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i\
    \ => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i =>\
    \ i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2\
    \ == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 ==\
    \ 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i\
    \ => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i =>\
    \ i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2\
    \ == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 ==\
    \ 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i\
    \ => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i =>\
    \ i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2\
    \ == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 ==\
    \ 1)}${s.count(i => i%2 == 1)}${s.count(i => i%2 == 1)}${\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptnx79nci.scala:17:5 ------------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     unclosed string literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmptnx79nci.scala:25:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m25 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n2 errors found\n"
  stdout: ''
  timestamp: 1660008760
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evens = lst.map(s => if (s.contains(\"1\") || s.contains(\"8\") || s.contains(\"\
    9\")) 1 else 0)\n        val odds = lst.map(s => if (s.contains(\"1\") || s.contains(\"\
    8\") || s.contains(\"9\")) 0 else 1)\n        odds zip evens\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbapgy6ko.scala:15:8\
    \ ---------------------\e[0m\e[0m\n\e[31m15 |\e[0m        odds zip evens\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    List[(Int,\
    \ Int)]\n\e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008762
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val numList = lst.map(_.toInt)\n        val oddList = numList.filter(_ % 2\
    \ != 0)\n        val oddSums = oddList.map(_.toString.length)\n        val oddTotal\
    \ = oddSums.sum\n        oddList.map(i => s\"the number of odd elements ${i}n\
    \ the str$i$oddTotal of the $i$oddTotal inputs.\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcp87glbl.scala:20)\n\tat Problem.main(tmpcp87glbl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008768
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var odds = \"\"\n        var count = 0\n        for (str <- lst) {\n      \
    \      count = count + 1\n            odds = odds + str\n        }\n        odds\
    \ = odds + str\n        var out: List[String] = List[String]()\n        val oddsStringList\
    \ = odds.split('')\n        for (i <- 0 until oddsStringList.length-1) {\n   \
    \         out = out :+ oddsStringList(i).length\n        }\n        out\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpr1wtk2ri.scala:21:40 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36moddsStringList\e[0m = odds.split('')\n\
    \e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m  \
    \ |\e[0m                                        empty character literal\n\e[31m\e\
    [31m-- [E040] Syntax Error: /tmp/tmpr1wtk2ri.scala:22:15 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until oddsStringList.length-\e\
    [31m1\e[0m) {\n\e[31m\e[31m   |\e[0m               ^^\e[0m\n\e[31m   |\e[0m  \
    \             ')' expected, but '<-' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpr1wtk2ri.scala:19:22 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m        odds = odds + str\n\e[31m\e[31m   |\e[0m                      ^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: str\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1wtk2ri.scala:22:8 -------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i <- \e[31m0\e[0m until oddsStringList.length-\e\
    [31m1\e[0m) {\n\e[31m\e[31m   |\e[0m        ^^^\e[0m\n\e[31m   |\e[0m        Not\
    \ found: 'for\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1wtk2ri.scala:22:13\
    \ ------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (i\
    \ <- \e[31m0\e[0m until oddsStringList.length-\e[31m1\e[0m) {\n\e[31m\e[31m  \
    \ |\e[0m             ^\e[0m\n\e[31m   |\e[0m             Not found: i\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpr1wtk2ri.scala:23:40 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            out = out :+ oddsStringList(i).length\n\e\
    [31m\e[31m   |\e[0m                                        ^\e[0m\n\e[31m   |\e\
    [0m                                        Not found: i\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n6 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008759
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var odd = List(0,0)\n        var oddList = List(\"\",\"\")\n        lst.foreach(x\
    \ => \n            if(x.matches(\"\\\\d+\")) odd(0) += x.toInt\n            else\
    \ if(odd(1) > 0) {\n                oddList :+= x + \", the number of odd elements\
    \ \" + odd(1) + \" of the \" + x + \" input.\"\n                odd(0) = 0\n \
    \           }\n            else if(odd(1) < 0) {\n                oddList :+=\
    \ x + \", the number of odd elements \" + odd(1) + \" of the \" + x + \" input.\"\
    \n            }\n            else {\n                oddList :+= x + \", the number\
    \ of odd elements \" + odd(1) + \" of the \" + x + \" input.\"\n             \
    \   odd(1) = 0\n            }\n            )\n        if(odd(1) < 0) {\n     \
    \       oddList :+= x + \", the number of odd elements \" + odd(1) + \" of the\
    \ \" + x + \" input.\"\n        }\n        oddList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl45labzy.scala:16:41 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(x.matches(\e[31m\"\\\\d+\"\e\
    [0m)) odd(\e[31m0\e[0m) += x.toInt\n\e[31m\e[31m   |\e[0m                    \
    \              ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  value += is not\
    \ a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpl45labzy.scala:19:16 ------------------------\e[0m\e[0m\n\e[31m19 |\e\
    [0m                odd(\e[31m0\e[0m) = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m   \
    \             ^^^\e[0m\n\e[31m   |\e[0mvalue update is not a member of List[Int]\
    \ - did you mean List[Int].updated?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl45labzy.scala:26:16\
    \ ------------------------\e[0m\e[0m\n\e[31m26 |\e[0m                odd(\e[31m1\e\
    [0m) = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e\
    [0mvalue update is not a member of List[Int] - did you mean List[Int].updated?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl45labzy.scala:30:20 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            oddList :+= x + \e[31m\", the number of odd\
    \ elements \"\e[0m + odd(\e[31m1\e[0m) + \e[31m\" of the \"\e[0m + x + \e[31m\"\
    \ input.\"\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mvalue :+= is not a member of List[String] - did you mean List[String].:+?\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpl45labzy.scala:30:24 ------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            oddList :+= x + \e[31m\", the number of odd\
    \ elements \"\e[0m + odd(\e[31m1\e[0m) + \e[31m\" of the \"\e[0m + x + \e[31m\"\
    \ input.\"\e[0m\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m \
    \  |\e[0m                        Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660008767
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  if(lst.size < 1)\n            return List(\"\")\n        var odd = 0\n    \
    \    var counts = mutable.Map[String, Int]()\n        for(i <- 0 until lst.size)\
    \ {\n            val val = lst(i)\n            if(val.length < 1)\n          \
    \      continue\n            val odds = val.toInt\n            if(!counts.contains(s\"\
    $i\"))\n                counts.put(s\"$i\", 0)\n            counts.put(s\"$i\"\
    , counts.get(s\"$i\").toInt + odds)\n            odd += odds\n        }\n    \
    \    var output: List[String] = Nil\n        for(i <- 0 until lst.size) {\n  \
    \          val val = lst(i)\n            val count = counts.get(s\"$i\")\n   \
    \         if(count < 2)\n                continue\n            val odds = val.toInt\n\
    \            output :+= s\"the number of odd elements ${count - odds}n the str${count\
    \ - odds}g ${i}${count - odds} of the ${count}nput.\"\n        }\n        output\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpgw0p8q6v.scala:18:16 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mval\e[0m \e[33mval\e[0m = lst(i)\n\e\
    [31m\e[31m   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0m                pattern\
    \ expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgw0p8q6v.scala:19:15\
    \ ---------------------------\e[0m\e[0m\n\e[31m19 |\e[0m            \e[33mif\e\
    [0m(\e[33mval\e[0m.length < \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \  ^^^\e[0m\n\e[31m   |\e[0m               expression expected but \e[31mval\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgw0p8q6v.scala:21:23\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e\
    [0m \e[36modds\e[0m = \e[33mval\e[0m.toInt\n\e[31m\e[31m   |\e[0m            \
    \           ^^^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E032] Syntax Error:\
    \ /tmp/tmpgw0p8q6v.scala:29:16 ---------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m            \e[33mval\e[0m \e[33mval\e[0m = lst(i)\n\e[31m\e[31m   |\e\
    [0m                ^^^\e[0m\n\e[31m   |\e[0m                pattern expected\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpgw0p8q6v.scala:33:23\
    \ ---------------------------\e[0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e\
    [0m \e[36modds\e[0m = \e[33mval\e[0m.toInt\n\e[31m\e[31m   |\e[0m            \
    \           ^^^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31mval\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpgw0p8q6v.scala:16:21 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m        \e[33mvar\e[0m \e[36mcounts\e[0m = mutable.Map[\e[35mString\e[0m, \e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  "
  stdout: ''
  timestamp: 1660008765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount: List[String] = List()\n        for(string <- lst) oddCount +=\
    \ oddCount(string).map(x=>x.replaceAll(x match {\n            case x if x.isDigit\
    \ => s\"${Integer.parseInt(x).toString % 2}\"\n            case _ => x\n     \
    \       }))\n        oddCount\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpge6cqfiv.scala:14:36 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(string <- lst) oddCount += oddCount(string).map(\e\
    [36mx\e[0m=>x.replaceAll(x \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m         \
    \                  ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue += is not a member of\
    \ List[String] - did you mean List[String].!=?\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpge6cqfiv.scala:14:48 --------------------\e[0m\e[0m\n\e[31m14\
    \ |\e[0m        \e[33mfor\e[0m(string <- lst) oddCount += oddCount(string).map(\e\
    [36mx\e[0m=>x.replaceAll(x \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m         \
    \                                       ^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \                                    Found:    (string : String)\n\e[31m   |\e\
    [0m                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpge6cqfiv.scala:14:65 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mfor\e[0m(string <- lst) oddCount += oddCount(string).map(\e\
    [36mx\e[0m=>x.replaceAll(x \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m         \
    \                                                      ^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                value replaceAll is not a member of\
    \ Char\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpge6cqfiv.scala:15:56\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m x\
    \ \e[33mif\e[0m x.isDigit => \e[31ms\"\e[0m${Integer.parseInt(x).toString % \e\
    [31m2\e[0m}\e[31m\"\e[0m\n\e[31m\e[31m   |\e[0m                              \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \                         Found:    (x : Char)\n\e[31m   |\e[0m              \
    \                                      Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008769
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd_count = mutable.ListBuffer.empty[Int]\n        for( i <- lst ) yield\
    \ {\n            val l = i.toInt\n            odd_count += ( l.filter( x => x\
    \ % 2 ) == 0 ).length\n        }\n        odd_count.toList.reverse.mkString(\"\
    the number of odd elements \", \", \", \"n the str\", lst.size, \"of the \", lst.size,\
    \ \"nput.\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxlh1di_7.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ListBuffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008762
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.Set[String]()\n        for(i <- 0 to lst.size - 1) {\n \
    \           val x = lst(i)\n            for(j =  0 until x.length)\n         \
    \       if(x.charAt(j) isDigit && x ne \"\") {\n                    if(x.toInt\
    \ + j % 2 == j.toInt)\n                        odds.add(x.substring(0, j) + x.charAt(j))\n\
    \                }\n        }\n        if(odds.isEmpty)\n            (List(\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\"))\n        else\n \
    \           (odds.toList.map(xx => List(xx + \" the number of odd elements \"\
    \ + xx + \"n the str\" + xx + \"ng \" + xx + \" of the \" + xx + \"nput.\")).flatten)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwdjyx7bl.scala:16:18 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m(j =  \e[31m0\e[0m until x.length)\n\
    \e[31m\e[31m   |\e[0m                  ^\e[0m\n\e[31m   |\e[0m               \
    \   ')' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwdjyx7bl.scala:17:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e\
    [0m(x.charAt(j) isDigit && x ne \e[31m\"\"\e[0m) {\n\e[31m\e[31m   |\e[0m^^\e\
    [0m\n\e[31m   |\e[0m'<-' expected, but 'end of statement' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpwdjyx7bl.scala:17:47 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m(x.charAt(j) isDigit &&\
    \ x ne \e[31m\"\"\e[0m) {\n\e[31m\e[31m   |\e[0m                             \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  ')'\
    \ expected, but string literal found\n\e[31m\e[31m-- [E020] Syntax Error: /tmp/tmpwdjyx7bl.scala:21:8\
    \ ----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        }\n\e[31m\e[31m\
    \   |\e[0m        ^\e[0m\n\e[31m   |\e[0m        \e[33myield\e[0m or \e[33mdo\e\
    [0m expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwdjyx7bl.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.Set[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m      \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1660008765
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val oddList : List[String] = lst.toList.foldLeft(List[String]())((oddList,\
    \ i) => {\n            val odds = 0 until i.toString.length.toInt\n          \
    \      .reverse.foldLeft(0)((odds, digit) => {\n                    if(digit %\
    \ 2 == 0){\n                        odds += digit.toInt\n                    }\n\
    \                })\n            oddList :+ s\"the number of odd elements ${odds}\
    \ the str$digit of the $digit\"\n        })\n        oddList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp75obyiqs.scala:15:17 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36modds\e[0m = \e[31m0\e\
    [0m until i.toString.length.toInt\n\e[31m15 |\e[0m                .reverse.foldLeft(\e\
    [31m0\e[0m)((\e[36modds\e[0m, \e[36mdigit\e[0m) => {\n\e[31m\e[31m   |\e[0m  \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \       value reverse is not a member of Int\n\e[31m\e[31m-- [E006] Not Found\
    \ Error: /tmp/tmp75obyiqs.scala:20:68 ------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m            oddList :+ \e[31ms\"the number of odd elements \e[0m${odds}\e\
    [31m the str\e[0m$digit\e[31m of the \e[0m$digit\e[31m\"\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                                                                    ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                        Not\
    \ found: digit\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp75obyiqs.scala:20:82\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m            oddList :+ \e\
    [31ms\"the number of odd elements \e[0m${odds}\e[31m the str\e[0m$digit\e[31m\
    \ of the \e[0m$digit\e[31m\"\e[0m\n\e[31m\e[31m   |\e[0m                     \
    \                                                             ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                                        Not found: digit\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evenCount = lst.count { x => !x.contains(\"1\") }\n        val oddCount\
    \ = lst.count(x => x.contains(\"1\") && !x.contains(\"0\"))\n        (oddCount\
    \ :: evenCount).map(x => x + \"n\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg49v80_p.scala:15:18 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        (oddCount :: evenCount).map(\e[36mx\e[0m => x\
    \ + \e[31m\"n\"\e[0m)\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                  value :: is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660008770
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var sum = 0\n        for(i <- lst.indices) {\n            if(lst(i).length()\
    \ > 1) {\n                val oddNumber = 1\n                for(j <- 0 until\
    \ lst(i).length) {\n                    val numOfOddDigits = if (lst(i)(j) % 2\
    \ == 0) oddNumber else 1\n                    sum += numOfOddDigits\n        \
    \        }\n            }\n        }\n        return (lst zip sum) map (x => s\"\
    the number of odd elements ${x._1} of the str${x._2} of the ${x._1}nput.\")\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp9mdv5i7_.scala:23:24\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mreturn\e[0m (lst\
    \ zip sum) map (\e[36mx\e[0m => \e[31ms\"the number of odd elements \e[0m${x._1}\e\
    [31m of the str\e[0m${x._2}\e[31m of the \e[0m${x._1}\e[31mnput.\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                        ^^^\e[0m\n\e[31m   |\e[0m               \
    \         Found:    (sum : Int)\n\e[31m   |\e[0m                        Required:\
    \ IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008772
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val res = lst.length match {\n            case 0 => List[String]()\n      \
    \      case 1 => List(s\"the number of odd elements ${lst(0)}n the str${ lst(0).toChar}ng\
    \ ${ lst(0).toInt }of the ${ lst(0).toInt }nput.\")\n            case _ => for\
    \ (i <- 0 until lst.length) yield {\n                val x = lst(i).toInt\n  \
    \              val odd = x.toInt\n                val even = x - odd\n       \
    \         val odd_str = if (odd > 0) \"1n\" else \"8n\"\n                val even_str\
    \ = if (even > 0) \"8n\" else \"1n\"\n                val str = if (i < lst.length\
    \ - 1) List(odd_str, even_str) else List(odd_str, even_str, \"\")\n          \
    \      List(s\"the number of odd elements ${ str.mkString }n the str${ x.toString\
    \ }ng ${ x.toString }n the ${ i + 1 }nput.\",\n                        s\"the\
    \ number of odd elements ${ str.mkString }n the str${ x.toString }ng ${ x.toString\
    \ }n the ${ i + 2 }nput.\") }\n        }\n        res.flatten\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphlaoepjn.scala:15:84 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mcase\e[0m \e[31m1\e[0m => List(\e[31ms\"\
    the number of odd elements \e[0m${lst(\e[31m0\e[0m)}\e[31mn the str\e[0m${ lst(\e\
    [31m0\e[0m).toChar}\e[31mng \e[0m${ lst(\e[31m0\e[0m).toInt }\e[31mof the \e[0m${\
    \ lst(\e[31m0\e[0m).toInt }\e[31mnput.\"\e[0m)\n\e[31m\e[31m   |\e[0m        \
    \                                                                     ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                  value toChar is not a member\
    \ of String\n\e[31m\e[31m-- Error: /tmp/tmphlaoepjn.scala:26:19 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        res.flatten\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0mno given instance of type String | List[String]\
    \ => IterableOnce[B] was found for parameter asIterable of \e[33mmethod\e[0m \e\
    [35mflatten\e[0m in \e[33mtrait\e[0m \e[35mIterableOps\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mwhere:    B is a type variable\n2 errors found\n"
  stdout: ''
  timestamp: 1660008775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // Write your code here.\n        val map = mutable.Map(\"1\" : 1, \"3\" :\
    \ 1, \"5\" : 1, \"7\" : 1, \"9\" : 1, \"11\" : 1, \"13\" : 1, \"15\" : 1, \"17\"\
    \ : 1, \"19\" : 1, \"21\" : 1, \"23\" : 1, \"25\" : 1, \"27\" : 1, \"29\" : 1,\
    \ \"31\" : 1, \"33\" : 1, \"35\" : 1, \"37\" : 1, \"39\" : 1, \"41\" : 1, \"43\"\
    \ : 1, \"45\" : 1, \"47\" : 1, \"49\" : 1, \"51\" : 1, \"53\" : 1, \"55\" : 1,\
    \ \"57\" : 1, \"59\" : 1, \"61\" : 1, \"63\" : 1, \"65\" : 1, \"67\" : 1, \"69\"\
    \ : 1, \"71\" : 1, \"73\" : 1, \"75\" : 1, \"77\" : 1, \"79\" : 1, \"81\" : 1,\
    \ \"83\" : 1, \"85\" : 1, \"87\" : 1, \"89\" : 1, \"91\" : 1, \"93\" : 1, \"95\"\
    \ : 1, \"97\" : 1, \"99\" : 1, \"101\" : 1, \"103\" : 1, \"105\" : 1, \"107\"\
    \ : 1, \"109\" : 1, \"111\" : 1, \"113\" : 1, \"115\" : 1, \"117\" : 1, \"119\"\
    \ : 1, \"121\" : 1, \"123\" : 1, \"125\" : 1, \"127\" : 1, \"129\" : 1, \"131\"\
    \ : 1, \"133\" : 1, \"135\" : 1, \"137\" : 1, \"139\" : 1, \"141\" : 1, \"143\"\
    \ : 1, \"145\" : 1, \"147\" : 1, \"149\" : 1, \"151\" : 1, \"153\" : 1, \"155\"\
    \ : 1, \"157\" : 1, \"159\" : 1, \"161\" : 1, \"163\" : 1, \"165\" : 1, \"167\"\
    \ : 1, \"169\" : 1, \"171\" : 1, \"173\" : 1, \"175\" : 1, \"177\" : 1, \"179\"\
    \ : 1, \"181\" : 1, \"183\" : 1, \"185\" : 1, \"187\" : 1, \"189\" : 1, \"191\"\
    \ : 1, \"193\" : 1, \"195\" : 1, \"197\" : 1, \"199\" : 1, \"201\" : 1, \"203\"\
    \ : 1, \"205\" : 1, \"207\" : 1, \"209\" : 1, \"211\" : 1, \"213\" : 1, \"215\"\
    \ : 1, \"217\" : 1, \"219\" : 1, \"221\" : 1, \"223\" : 1, \"225\" : 1, \"227\"\
    \ : 1, \"229\" : 1, \"231\" : 1, \"233\" : 1, \"235\" : 1, \"237\" : 1, \"239\"\
    \ : 1, \"241\" : 1, \"243\" : 1, \"245\" : 1, \"247\" : 1, \"249\" : 1, \"251\"\
    \ : 1, \"253\" : 1, \"255\" : 1, \"257\" : 1, \"259\" : 1, \"261\" : 1, \"263\"\
    \ : 1, \"265\" : 1, \"267\" : 1, \"269\" : 1, \"271\" : 1, \"273\" : 1, \"275\"\
    \ : 1, \"277\" : 1, \"279\" : 1, \"281\" : 1, \"283\" : 1, \"285\" : 1, \"287\"\
    \ : 1, \"289\" : 1, \"291\" : 1, \"293\" : 1, \"295\" : 1, \"297\" : 1, \"299\"\
    \ : 1, \"301\" : 1, \"303\" : 1, \"305\" : 1, \"307\" : 1, \"309\" : 1, \"311\"\
    \ : 1, \"\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp47x0r7_l.scala:14:1691 ---------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = mutable.Map(\e\
    [31m\"1\"\e[0m : \e[31m1\e[0m, \e[31m\"3\"\e[0m : \e[31m1\e[0m, \e[31m\"5\"\e\
    [0m : \e[31m1\e[0m, \e[31m\"7\"\e[0m : \e[31m1\e[0m, \e[31m\"9\"\e[0m : \e[31m1\e\
    [0m, \e[31m\"11\"\e[0m : \e[31m1\e[0m, \e[31m\"13\"\e[0m : \e[31m1\e[0m, \e[31m\"\
    15\"\e[0m : \e[31m1\e[0m, \e[31m\"17\"\e[0m : \e[31m1\e[0m, \e[31m\"19\"\e[0m\
    \ : \e[31m1\e[0m, \e[31m\"21\"\e[0m : \e[31m1\e[0m, \e[31m\"23\"\e[0m : \e[31m1\e\
    [0m, \e[31m\"25\"\e[0m : \e[31m1\e[0m, \e[31m\"27\"\e[0m : \e[31m1\e[0m, \e[31m\"\
    29\"\e[0m : \e[31m1\e[0m, \e[31m\"31\"\e[0m : \e[31m1\e[0m, \e[31m\"33\"\e[0m\
    \ : \e[31m1\e[0m, \e[31m\"35\"\e[0m : \e[31m1\e[0m, \e[31m\"37\"\e[0m : \e[31m1\e\
    [0m, \e[31m\"39\"\e[0m : \e[31m1\e[0m, \e[31m\"41\"\e[0m : \e[31m1\e[0m, \e[31m\"\
    43\"\e[0m : \e[31m1\e[0m, \e[31m\"45\"\e[0m : \e[31m1\e[0m, \e[31m\"47\"\e[0m\
    \ : \e[31m1\e[0m, \e[31m\"49\"\e[0m : \e[31m1\e[0m, \e[31m\"51\"\e[0m : \e[31m1\e\
    [0m, \e[31m\"53\"\e[0m : \e[31m1\e[0m, \e[31m\"55\"\e[0m : \e[31m1\e[0m, \e[31m\"\
    57\"\e[0m : \e[31m1\e[0m, \e[31m\"59\"\e[0m : \e[31m1\e[0m, \e[31m\"61\"\e[0m\
    \ : \e[31m1\e[0m, \e[31m\"63\"\e[0m : \e[31m1\e[0m, \e[31m\"65\"\e[0m : \e[31m1\e\
    [0m, \e[31m\"67\"\e[0m : \e[31m1\e[0m, \e[31m\"69\"\e[0m : \e[31m1\e[0m, \e[31m\"\
    71\"\e[0m : \e[31m1\e[0m, \e[31m\"73\"\e[0m : \e[31m1\e[0m, \e[31m\"75\"\e[0m\
    \ : \e[31m1\e[0m, \e[31m\"77\"\e[0m : \e[31m1\e[0m, \e[31m\"79\"\e[0m : \e[31m1\e\
    [0m, \e[31m\"81\"\e[0m : \e[31m1\e[0m, \e[31m\"83\"\e[0m : \e[31m1\e[0m, \e[31m\"\
    85\"\e[0m : \e[31m1\e[0m, \e[31m\"87\"\e[0m : \e[31m1\e[0m, \e[31m\"89\"\e[0m\
    \ : \e[31m1\e[0m, \e[31m\"91\"\e[0m : \e[31m1\e[0m, \e[31m\"93\"\e[0m : \e[31m1\e\
    [0m, \e[31m\"95\"\e[0m : \e[31m1\e[0m, \e[31m\"97\"\e[0m : \e[31m1\e[0m, \e[31m\"\
    99\"\e[0m : \e[31m1\e[0m, \e[31m\"101\"\e[0m : \e[31m1\e[0m, \e[31m\"103\"\e[0m\
    \ : \e[31m1\e[0m, \e[31m\"105\"\e[0m : \e[31m1\e[0m, \e[31m\"107\"\e[0m : \e[31m1\e\
    [0m, \e[31m\"109\"\e[0m : \e[31m1\e[0m, \e[31m\"111\"\e[0m : \e[31m1\e[0m, \e\
    [31m\"113\"\e[0m : \e[31m1\e[0m, \e[31m\"115\"\e[0m : \e[31m1\e[0m, \e[31m\"117\"\
    \e[0m : \e[31m1\e[0m, \e[31m\"119\"\e[0m : \e[31m1\e[0m, \e[31m\"121\"\e[0m :\
    \ \e[31m1\e[0m, \e[31m\"123\"\e[0m : \e[31m1\e[0m, \e[31m\"125\"\e[0m : \e[31m1\e\
    [0m, \e[31m\"127\"\e[0m : \e[31m1\e[0m, \e[31m\"129\"\e[0m : \e[31m1\e[0m, \e\
    [31m\"131\"\e[0m : \e[31m1\e[0m, \e[31m\"133\"\e[0m : \e[31m1\e[0m, "
  stdout: ''
  timestamp: 1660008774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val map = lst.map(x => x split \"\\\\s+\").toMap\n        val odd = map.filter(x\
    \ => x._1.isEmpty).toList\n        odd.map(x => x -> lst.count(y => y.startsWith(x._1)))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpa6br_8rm.scala:13:52 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = lst.map(\e[36mx\e\
    [0m => x split \e[31m\"\\\\s+\"\e[0m).toMap\n\e[31m\e[31m   |\e[0m           \
    \                                         ^\e[0m\n\e[31m   |\e[0m            \
    \                  Cannot prove that Array[String] <:< (K, V)\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m                              where:    K is a type variable\n\e\
    [31m   |\e[0m                                        V is a type variable\n\e\
    [31m   |\e[0m                              .\n1 error found\n"
  stdout: ''
  timestamp: 1660008775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  def oddCount(i : List[String], odd: List[String]) = {\n            i match\
    \ {\n                case Nil => odd.mkString(\"\")\n                case (x:String)\
    \ => if(x.head.toInt == x.last.toInt) oddCount(x.tail, x :: odd) else oddCount(x.tail,\
    \ odd.mkString(\"\")) \n            }\n        }\n        oddCount(lst, Nil).mkString(\"\
    \ \")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmpgivpmabw.scala:16:68 ---------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e[0m (x:String) => \e[33mif\e\
    [0m(x.head.toInt == x.last.toInt) oddCount(x.tail, x :: odd) \e[33melse\e[0m oddCount(x.tail,\
    \ odd.mkString(\e[31m\"\"\e[0m)) \n\e[31m\e[31m   |\e[0m                     \
    \                                               ^\e[0m\n\e[31m   |\e[0m      \
    \         Overloaded or recursive \e[33mmethod\e[0m \e[35moddCount\e[0m needs\
    \ return type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E044] Cyclic Error: /tmp/tmpgivpmabw.scala:16:100\
    \ --------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                \e[33mcase\e\
    [0m (x:String) => \e[33mif\e[0m(x.head.toInt == x.last.toInt) oddCount(x.tail,\
    \ x :: odd) \e[33melse\e[0m oddCount(x.tail, odd.mkString(\e[31m\"\"\e[0m)) \n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \      Overloaded or recursive \e[33mmethod\e[0m \e[35moddCount\e[0m needs return\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgivpmabw.scala:19:35\
    \ --------------------\e[0m\e[0m\n\e[31m19 |\e[0m        oddCount(lst, Nil).mkString(\e\
    [31m\" \"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660008775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val result = new mutable.ListBuffer[String]()\n        val counts = new mutable.Map[String,Int]()\n\
    \        for(line <- lst) counts(line) = counts.get(line)+1\n\n        for(line\
    \ <- lst) if(counts(line)>0) result.append(s\"the number of odd elements $counts(line)n\
    \ the str$counts(line)$ of the $counts(line)\")\n\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpze9t7a5k.scala:17:122 ----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mfor\e[0m(line <- lst) \e[33mif\e[0m(counts(line)>\e\
    [31m0\e[0m) result.append(\e[31ms\"the number of odd elements \e[0m$counts\e[31m(line)n\
    \ the str\e[0m$counts\e[31m(line)$ of the \e[0m$counts\e[31m(line)\"\e[0m)\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \                                                                ^\e[0m\n\e[31m\
    \   |\e[0minvalid string interpolation: `$$`, `$\"`, `$`ident or `$`BlockExpr\
    \ expected\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpze9t7a5k.scala:13:25\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]()\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpze9t7a5k.scala:14:25 ------------------------\e[0m\e[0m\n\e[31m14 |\e\
    [0m        \e[33mval\e[0m \e[36mcounts\e[0m = \e[33mnew\e[0m mutable.Map[\e[35mString\e\
    [0m,\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660008771
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val s = lst.size\n        val odd = new mutable.HashSet[String]()\n       \
    \ for (i <- 0 to s-1) odd += lst(i)\n        odd.map((x) => \"the number of odd\
    \ elements \" + x + \" of the \" + x + \"nput.\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpgwnbh2qy.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.HashSet[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                \
    \      ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val r = new mutable.ArrayBuffer(0)\n        var sum = 0\n        lst.foreach(x\
    \ => {\n            if (x contains \"1\") {\n                r.toList += x\n \
    \               sum += 2\n            } else {\n                r.toList += x\n\
    \                sum += 1\n            }\n        })\n        r.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpquu6rzg8.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mr\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayBuffer(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008773
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val result = new mutable.ListBuffer[String]()\n        var count = 0\n    \
    \    for(s <- lst) {\n            for(i <- 0 until s.length) {\n             \
    \   val c = s(i)\n                count += (c == '1') ? 1 : (c == '0') ? -1 :\
    \ 0\n            }\n            result.append(s\"the number of odd elements $count\
    \ of the $s\")\n            count = 0\n        }\n        return result.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkmayay38.scala:18:58 -----------------------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                count += (c == \e[31m'1'\e[0m) ? \e[31m1\e\
    [0m : (\e[35mc\e[0m \e[35m==\e[0m \e[31m'0'\e[0m) \e[35m?\e[0m -\e[31m1\e[0m :\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                                        \
    \                  ^\e[0m\n\e[31m   |\e[0m                                 end\
    \ of statement expected but ':' found\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpkmayay38.scala:13:25 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpkmayay38.scala:18:53 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                count += (c == \e[31m'1'\e[0m) ? \e[31m1\e\
    [0m : (\e[35mc\e[0m \e[35m==\e[0m \e[31m'0'\e[0m) \e[35m?\e[0m -\e[31m1\e[0m :\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                                        \
    \             ^\e[0m\n\e[31m   |\e[0m                                        \
    \             Not found: type ?\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpkmayay38.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                count += (c == \e[31m'1'\e[0m) ? \e[31m1\e[0m : (\e[35mc\e\
    [0m \e[35m==\e[0m \e[31m'0'\e[0m) \e[35m?\e[0m -\e[31m1\e[0m : \e[31m0\e[0m\n\e\
    [31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \    value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpkmayay38.scala:18:36 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m                count += (c == \e[31m'1'\e[0m) ? \e[31m1\e\
    [0m : (\e[35mc\e[0m \e[35m==\e[0m \e[31m'0'\e[0m) \e[35m?\e[0m -\e[31m1\e[0m :\
    \ \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                         value ? is not a"
  stdout: ''
  timestamp: 1660008780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val num = new mutable.ArrayBuffer(lst.size)\n        lst.foreach{ elem =>\n\
    \            num += elem.filter(x => x =!= '0').length\n        }\n        num.toList\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpu62wwbbd.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnum\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayBuffer(lst.size)\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008774
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val res = mutable.ArrayBuffer[String]()\n        var oddCount = 0\n       \
    \ lst.foreach{e =>\n            if(e.length != 0 && e(\"0\")%2 == 1) {\n     \
    \           oddCount+=1\n            } else {\n                res += s\"the number\
    \ of odd elements ${oddCount}n the ${e}nput.\"\n                oddCount = 0\n\
    \            }\n        }\n        res += s\"the number of odd elements ${oddCount}n\
    \ the ${lst(0)}nput.\"\n        res\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkzvmrynl.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = mutable.ArrayBuffer[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpkzvmrynl.scala:16:34 --------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mif\e[0m(e.length != \e[31m0\e[0m &&\
    \ e(\e[31m\"0\"\e[0m)%\e[31m2\e[0m == \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m \
    \                                 ^^^\e[0m\n\e[31m   |\e[0m                  \
    \                Found:    (\e[32m\"0\"\e[0m : String)\n\e[31m   |\e[0m      \
    \                            Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008778
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evensCount = mutable.HashSet[Int]()\n        val oddsCount = mutable.HashSet[Int]()\n\
    \        lst.foreach(n => n.toString.forall(x => x.isDigit)).foreach(d => { val\
    \ i = d.toInt; if (i%2 == 0) evensCount.update(i) else oddsCount.update(i); })\n\
    \        evensCount.toList.flatMap(n => List(s\"the number of odd elements $n\
    \ the str$n of the $nput.\").map(_.toInt))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ke7_msz.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevensCount\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                         Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp_ke7_msz.scala:14:24 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moddsCount\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp_ke7_msz.scala:15:60 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        lst.foreach(\e[36mn\e[0m => n.toString.forall(\e\
    [36mx\e[0m => x.isDigit)).foreach(\e[36md\e[0m => { \e[33mval\e[0m \e[36mi\e[0m\
    \ = d.toInt; \e[33mif\e[0m (i%\e[31m2\e[0m == \e[31m0\e[0m) evensCount.update(i)\
    \ \e[33melse\e[0m oddsCount.update(i); })\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value foreach is not a member of Unit\n3 errors found\n"
  stdout: ''
  timestamp: 1660008780
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val counts = new mutable.HashMap[String, Int]()\n        for (i <- 0 until\
    \ lst.length) {\n            val odd_count = counts.getOrElse(lst(i), 0) + 1\n\
    \            counts.put(lst(i), odd_count)\n        }\n        val ret = new ListBuffer[String]()\n\
    \        for (i <- counts.keys) {\n            val odd_count = counts(i)\n   \
    \         if (odd_count % 2 == 0) ret += i + \" \" + odd_count.toString\n    \
    \    }\n        ret.toList\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzz9wy172.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = \e[33mnew\e\
    [0m mutable.HashMap[\e[35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m\
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008775
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val nOdds = lst.count{ x => x.charAt(0).asDigit._2 % 2 == 1 }\n        nOdds\
    \ match {\n            case 0 => lst\n            case _ => lst.map( i => i.length\
    \ + nOdds ).map(_.toString)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmplla_kk_m.scala:13:56 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mnOdds\e[0m = lst.count{\
    \ \e[36mx\e[0m => x.charAt(\e[31m0\e[0m).asDigit._2 % \e[31m2\e[0m == \e[31m1\e\
    [0m }\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                    value _2 is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660008782
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = new mutable.MutableList[Int]()\n        for (i <- 1 to lst.size)\
    \ {\n            val n = 0\n            while (i > 0) {\n                val d\
    \ = lst.head(i).asDigit\n                n += d\n                i -= 1\n    \
    \        }\n            odd(n) = odd(n) + 1\n        }\n        var str = \"\"\
    \n        for (i <- 0 to lst.size - 1) {\n            str += \"the number of odd\
    \ elements \" + odd(i) + \"n the str\" + i + \"of the \" + i + \"nput.\"\n   \
    \     }\n        List(str)\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvivt24ie.scala:13:22 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = \e[33mnew\e[0m\
    \ mutable.MutableList[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvivt24ie.scala:18:18\
    \ ------------------------\e[0m\e[0m\n\e[31m18 |\e[0m                n += d\n\e\
    [31m\e[31m   |\e[0m                ^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Int - did you mean n.!=?\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpvivt24ie.scala:19:18 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m                i -= \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^\e[0m\n\e[31m   |\e[0m                value -= is not a member of Int\
    \ - did you mean i.!=?\n3 errors found\n"
  stdout: ''
  timestamp: 1660008784
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val strs = mutable.Stack[String]()\n        var odds = mutable.ListBuffer.empty[String]\n\
    \        for (s <- lst) {\n            for (i <- s.iterator) {\n             \
    \   if (i.toString.isDigit) {\n                    if (strs.nonEmpty && strs.last\
    \ != s) {\n                        odds += s\"the number of odd elements ${strs.last.length}\
    \ of the ${strs.last}\"\n                        strs += s\n                 \
    \   } else {\n                        strs += s\n                    }\n     \
    \           } else {\n                    strs += s\n                }\n     \
    \       }\n        }\n        odds += s\"the number of odd elements ${strs.last.length}\
    \ of the ${strs.last}\"\n        strs.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmprfqk0nal.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mstrs\e[0m = mutable.Stack[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmprfqk0nal.scala:14:19 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36modds\e[0m = mutable.ListBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmprfqk0nal.scala:17:31 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                \e[33mif\e[0m (i.toString.isDigit) {\n\
    \e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                    value isDigit is not a member of String\n3 errors found\n"
  stdout: ''
  timestamp: 1660008785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val counts = new mutable.Map[Int, Int]\n        for (str <- lst) {\n      \
    \      val str = str.trim\n            val nums = str.split(\"\").toList\n   \
    \         for (n <- nums) {\n                counts(n) += 1\n            }\n \
    \       }\n        val result = new mutable.ListBuffer[String]\n        for (count\
    \ <- counts.values) {\n            result.append(\"the number of odd elements\
    \ \" + count + \" the str\" + count + \" of the \" + count + \"input.\")\n   \
    \     }\n        return result.toList\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tuesued.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mcounts\e[0m = \e[33mnew\e\
    [0m mutable.Map[\e[35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m       \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp0tuesued.scala:21:25\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e\
    [36mresult\e[0m = \e[33mnew\e[0m mutable.ListBuffer[\e[35mString\e[0m]\n\e[31m\e\
    [31m   |\e[0m                         ^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \               Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008779
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  lst.map(x => \n            x.filterNot(x => x.isEmpty).foldLeft(0L) {\n   \
    \             (n, _) => if (n.isOdd && n == x) (n.toLong + 1, 1) else (n, n.toLong\
    \ + 1)\n            }\n        )\n        .filter(_._2 % 2 == 1).map(_._1 + \"\
    \ \" + _)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4e7fs456.scala:14:31 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            x.filterNot(\e[36mx\e[0m => x.isEmpty).foldLeft(\e\
    [31m0L\e[0m) {\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             value isEmpty is not a member\
    \ of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4e7fs456.scala:15:32\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m                (\e[36mn\e\
    [0m, _) => \e[33mif\e[0m (n.isOdd && n == x) (n.toLong + \e[31m1\e[0m, \e[31m1\e\
    [0m) \e[33melse\e[0m (n, n.toLong + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                         ^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \        value isOdd is not a member of Long\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp4e7fs456.scala:15:49 --------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m                (\e[36mn\e[0m, _) => \e[33mif\e[0m (n.isOdd && n == x)\
    \ (n.toLong + \e[31m1\e[0m, \e[31m1\e[0m) \e[33melse\e[0m (n, n.toLong + \e[31m1\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                 ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                 Found:  \
    \  \e[1m\e[31m(\e[0mLong\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mInt\e[0m\e\
    [1m\e[31m)\e[0m\n\e[31m   |\e[0m                                             \
    \    Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4e7fs456.scala:15:72\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m                (\e[36mn\e[0m,\
    \ _) => \e[33mif\e[0m (n.isOdd && n == x) (n.toLong + \e[31m1\e[0m, \e[31m1\e\
    [0m) \e[33melse\e[0m (n, n.toLong + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                                                                   ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (Long, Long)\n\e[31m   |\e[0m                                            \
    \      Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4e7"
  stdout: ''
  timestamp: 1660008787
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val oddDig = lst.filter(x => x.toString.matches(\"\\\\d\")).map(x => x.toString.filter(x\
    \ => x.toString.charAt(0).toString.toInt % 2 != 0).length).toList\n        oddDig.map(x\
    \ => s\"the number of odd elements $x of the $lst ${lst.indexOf(lst.filter(x =>\
    \ x.toString.toString.indexOf(x) % 2 == 0).length + 1).toString}.\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcnq1ix4n.scala:17)\n\tat Problem.main(tmpcnq1ix4n.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = lst.map(i => i.filter(s => s.isDigit).map(_.toInt))\n        val\
    \ oddList = odd.flatten\n        odd.map(i => i + \" \" + odd.filter(i => i %\
    \ 2 == 0).size)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpih56ljvh.scala:15:23 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        odd.map(\e[36mi\e[0m => i + \e[31m\" \"\e[0m\
    \ + odd.filter(\e[36mi\e[0m => i % \e[31m2\e[0m == \e[31m0\e[0m).size)\n\e[31m\e\
    [31m   |\e[0m                     ^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of IndexedSeq[Int], but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evenCount =  lst\n        val oddCount = evenCount.map {x => if (x % 2\
    \ == 0) 0 else 1}\n        oddCount.foldLeft(List[String]()) { (list, x) => list\
    \ + s\"the number of odd elements $x the str${x.toString}${x.toString}\".concat\
    \ (\", \") }\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb8l1hq3e.scala:14:49 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36moddCount\e[0m = evenCount.map\
    \ {\e[36mx\e[0m => \e[33mif\e[0m (x % \e[31m2\e[0m == \e[31m0\e[0m) \e[31m0\e\
    [0m \e[33melse\e[0m \e[31m1\e[0m}\n\e[31m\e[31m   |\e[0m                     \
    \                          ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpb8l1hq3e.scala:15:62\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m        oddCount.foldLeft(List[\e\
    [35mString\e[0m]()) { (\e[36mlist\e[0m, \e[36mx\e[0m) => list + \e[31ms\"the number\
    \ of odd elements \e[0m$x\e[31m the str\e[0m${x.toString}${x.toString}\e[31m\"\
    \e[0m.concat (\e[31m\", \"\e[0m) }\n\e[31m\e[31m   |\e[0m                    \
    \                                     ^^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not\
    \ a member of List[String], but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress\
    \ towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  def odds(nums: List[Int]): Int = {\n            for(num <- nums)\n        \
    \    {\n                if(num%2 == 1)\n                    return num;\n    \
    \        }\n            return -1;\n        }\n        val ans = new mutable.MutableList[String]();\n\
    \        for(i <- 0 until lst.size)\n        {\n            val nums = lst(i).toList;\n\
    \            val length = nums.size;\n            val ansout = nums.toSeq.sortWith(_\
    \ < _).takeWhile(a => odds(a) != -1).size\n            ans.append(length.toString\
    \ + \"th string \"+ ansout.toString)\n        }\n        return ans;\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph4duixur.scala:21:22 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mans\e[0m = \e[33mnew\e[0m\
    \ mutable.MutableList[\e[35mString\e[0m]();\n\e[31m\e[31m   |\e[0m           \
    \           ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph4duixur.scala:26:72\
    \ --------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e\
    [36mansout\e[0m = nums.toSeq.sortWith(_ < _).takeWhile(\e[36ma\e[0m => odds(a)\
    \ != -\e[31m1\e[0m).size\n\e[31m\e[31m   |\e[0m                              \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                                         Found:    (a : Char)\n\e[31m   |\e[0m\
    \                                                    Required: List[Int]\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008791
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.MutableList[Int]()\n        var oddCount : Int = 1\n    \
    \    for (i <- 0 until lst.size) {\n            val str = lst(i)\n           \
    \ odd += str.length()\n        }\n        odd.toList.reverse.zipWithIndex.map\
    \ {\n            case (str, i) =>\n                str.split(\"(?=\\\\d)\")(i\
    \ / 2).mkString + \": the number of odd elements \" + odd(i) + \".\"\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkm7b_1t1.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.MutableList[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008785
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount : Int = 0\n        var oddDigits : List[Int] = null\n        for(i\
    \ <- 0 until lst.size) {\n            if(lst(i).asInstanceOf[String].length()\
    \ % 2 != 0) {\n                oddDigits :+= lst(i).asInstanceOf[String].length()\
    \ / 2\n            } else {\n                oddCount += 1\n                oddDigits\
    \ = null\n            }\n        }\n        oddCount += oddDigits.length\n   \
    \     var oddStr = \"\"\n        for(i <- 0 until oddCount) {\n            oddStr\
    \ += (oddDigits :+ \"\").length.toString\n            oddStr += \" \"\n      \
    \  }\n        oddStr\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkisd7ugu.scala:29:8\
    \ ---------------------\e[0m\e[0m\n\e[31m29 |\e[0m        oddStr\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    (oddStr : String)\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008793
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.ListBuffer[Int]()\n        lst.foreach{str =>\n        \
    \    for(i <- 0 until str.length)\n                if(str.charAt(i) == '0' ||\
    \ str.charAt(i) == '1')\n                    odds.add (str.charAt(i).toInt)\n\
    \        }\n        (odds filter odds.length isDefined).toList\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpco0rxmzc.scala:19:42 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        (odds filter odds.length isDefined).toList\n\e\
    [31m\e[31m   |\e[0m                                          ^\e[0m\n\e[31m  \
    \ |\e[0m                                       expression expected but \e[31m')'\e\
    [0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpco0rxmzc.scala:13:19\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e\
    [36modds\e[0m = mutable.ListBuffer[\e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m  \
    \                 ^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008788
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evens = lst.reduce((x: Int, y: String) => x + (y.toInt == 0))\n       \
    \ val odd = lst.reduce((x: Int, y: String) => x + (y.toInt % 2 == 0))\n      \
    \  odd.map(x => s\"the number of odd elements $x of the $x nput.\")\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmp5fnjsc0e.scala:13:56 -----------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevens\e[0m = lst.reduce((\e\
    [36mx\e[0m: \e[35mInt\e[0m, \e[36my\e[0m: \e[35mString\e[0m) => x + (y.toInt ==\
    \ \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                                      \
    \                ^^^\e[0m\n\e[31m   |\e[0m None of the overloaded alternatives\
    \ of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e[0m with types\n\
    \e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float): Float\n\e[31m\
    \   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e[31m   |\e[0m \
    \ (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e[0m  (x: Byte):\
    \ Int\n\e[31m   |\e[0m  (x: String): String\n\e[31m   |\e[0m match arguments (Boolean)\n\
    \e[31m\e[31m-- [E134] Type Error: /tmp/tmp5fnjsc0e.scala:14:54 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = lst.reduce((\e\
    [36mx\e[0m: \e[35mInt\e[0m, \e[36my\e[0m: \e[35mString\e[0m) => x + (y.toInt %\
    \ \e[31m2\e[0m == \e[31m0\e[0m))\n\e[31m\e[31m   |\e[0m                      \
    \                              ^^^\e[0m\n\e[31m   |\e[0m None of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m+\e[0m in \e[33mclass\e[0m \e[35mInt\e\
    [0m with types\n\e[31m   |\e[0m  (x: Double): Double\n\e[31m   |\e[0m  (x: Float):\
    \ Float\n\e[31m   |\e[0m  (x: Long): Long\n\e[31m   |\e[0m  (x: Int): Int\n\e\
    [31m   |\e[0m  (x: Char): Int\n\e[31m   |\e[0m  (x: Short): Int\n\e[31m   |\e\
    [0m  (x: Byte): Int\n\e[31m   |\e[0m  (x: String): String\n\e[31m   |\e[0m match\
    \ arguments (Boolean)\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5fnjsc0e.scala:15:15\
    \ --------------------\e[0m\e[0m\n\e[31m15 |\e[0m        odd.map(\e[36mx\e[0m\
    \ => \e[31ms\"the number of odd elements \e[0m$x\e[31m of the \e[0m$x\e[31m nput.\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mIndexedSeq\e[0m[String]\n\e[31m\
    \   |\e[0m        Required: \e[1m\e[32mList\e[0m[String]\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val oddArray = lst.map(x => (x filter (x => x % 2 != 0)).sum)\n        lst.map(x\
    \ => \"the number of odd elements \" + oddArray(x) + \" of the \" + x + \".\"\
    ).mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpwsebxq1z.scala:14:62\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m\
    \ => \e[31m\"the number of odd elements \"\e[0m + oddArray(x) + \e[31m\" of the\
    \ \"\e[0m + x + \e[31m\".\"\e[0m).mkString(\e[31m\"\\n\"\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                                                              ^\e[0m\n\
    \e[31m   |\e[0m                                                  Found:    (x\
    \ : String)\n\e[31m   |\e[0m                                                 \
    \ Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val oddDigits = mutable.Set[Int]()\n        for(x <- lst) {\n            for(y\
    \ <- x.toInt){\n                if(!oddDigits.contains(y)){\n                \
    \    oddDigits.+=y\n                }\n            }\n        }\n        oddDigits.toList.map(x\
    \ => s\"the number of odd elements $x of the $xth string.\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpbv1wm13t.scala:17:33 ---------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                    oddDigits.+=y\n\e[31m\e[31m   |\e\
    [0m                                 ^\e[0m\n\e[31m   |\e[0m                  \
    \               expression expected but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpbv1wm13t.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddDigits\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpbv1wm13t.scala:15:21 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mfor\e[0m(y <- x.toInt){\n\e[31m\e[31m\
    \   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \    value foreach is not a member of Int\n3 errors found\n"
  stdout: ''
  timestamp: 1660008795
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  def odd(s: String) : List[String] = {\n            var s = s + \" \"\n    \
    \        val l = new scala.collection.mutable.ListBuffer[String]()\n         \
    \   for(i <- 0 until s.length()) {\n                val v = if (s.charAt(i) >\
    \ '9') s.charAt(i) - '0' else s.charAt(i) - 'a'\n                if (v & 1 ==\
    \ 1) l.append(v)\n                else {\n                    l.clear()\n    \
    \                l.append(v)\n                    l.append(s.charAt(i))\n    \
    \            }\n            }\n            return l\n        }\n        val l\
    \ = lst.map (x => odd(x))\n        val l1 = l.foldLeft(List(\"\")){\n        \
    \    case (acc, x) => acc ++ x\n        }\n        l1.toList.reverse.foldLeft(List[String]())\
    \ {\n            case (acc, x) => (acc ++ x.split(\" \")).map(_ => \"the number\
    \ of odd elements \" + _).reverse\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp1a4f5tus.scala:14:20 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mvar\e[0m \e[36ms\e[0m = s + \e[31m\"\
    \ \"\e[0m\n\e[31m\e[31m   |\e[0m                    ^\e[0m\n\e[31m   |\e[0m  \
    \                  Recursive \e[33mvariable\e[0m \e[35ms\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1a4f5tus.scala:25:19 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mreturn\e[0m l\n\e[31m\e[31m   |\e[0m\
    \                   ^\e[0m\n\e[31m   |\e[0m             Found:    (l : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m             Required: List[String]\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmp1a4f5tus.scala:32:92 -----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mcase\e[0m (acc, x) => (acc ++ x.split(\e\
    [31m\" \"\e[0m)).map(_ => \e[31m\"the number of odd elements \"\e[0m + _).reverse\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                    ^\e[0m\n\e[31m   |\e[0m   Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I could not infer the type of the parameter\
    \ _$2 of expanded function:\n\e[31m   |\e[0m   _$2 => \e[32m\"the number of odd\
    \ elements \"\e[0m + _$2.\n3 errors found\n"
  stdout: ''
  timestamp: 1660008796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // Solution using recursion\n        // base case\n        if (lst.isEmpty)\
    \ lst\n        else oddCount(lst.takeWhile(_.isDigit)) ::: oddCount(lst.dropWhile(_.isDigit))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps4ionbjf.scala:16:77 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m oddCount(lst.takeWhile(_.isDigit))\
    \ ::: oddCount(lst.dropWhile(_.isDigit))\n\e[31m\e[31m   |\e[0m              \
    \                                                             ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 value isDigit is not a member\
    \ of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps4ionbjf.scala:16:38\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m        \e[33melse\e[0m oddCount(lst.takeWhile(_.isDigit))\
    \ ::: oddCount(lst.dropWhile(_.isDigit))\n\e[31m\e[31m   |\e[0m              \
    \                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \          value isDigit is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660008797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var oddCount = 0\n        var odd = 1\n        for (i <- 0 until lst.size)\
    \ {\n            var currentInt: Int = lst(i).toInt\n            while (currentInt\
    \ > 0) {\n                odd *= 10\n                odd += (currentInt % 10)\n\
    \                currentInt /= 10\n            }\n            oddCount += odd\n\
    \            odd = 0\n        }\n        lst.zip(oddCount).map(_._1).reverse.map(x\
    \ => \"the number of odd elements \" + x + \" of the \" + _ + \"input.\")\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7qtbspnk.scala:25:16\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        lst.zip(oddCount).map(_._1).reverse.map(\e\
    [36mx\e[0m => \e[31m\"the number of odd elements \"\e[0m + x + \e[31m\" of the\
    \ \"\e[0m + _ + \e[31m\"input.\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Found:    (oddCount : Int)\n\e[31m   |\e[0m\
    \                Required: IterableOnce[Any]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmp7qtbspnk.scala:25:102 ----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        lst.zip(oddCount).map(_._1).reverse.map(\e[36mx\e\
    [0m => \e[31m\"the number of odd elements \"\e[0m + x + \e[31m\" of the \"\e[0m\
    \ + _ + \e[31m\"input.\"\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \                                                                            \
    \  ^\e[0m\n\e[31m   |\e[0m Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m I could not infer the type of the parameter _$2 of expanded function:\n\e\
    [31m   |\e[0m _$2 => \e[32m\"the number of odd elements \"\e[0m + x + \e[32m\"\
    \ of the \"\e[0m + _$2 + \e[32m\"input.\"\e[0m.\n2 errors found\n"
  stdout: ''
  timestamp: 1660008797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evens = lst.filter(s => s.filter(c => c.isDigit).length == 0)\n       \
    \ val odds = lst.filter(s => s.filter(c => c.isDigit).length != 0)\n        odds\
    \ ::: evens.map( s => (0 +  (s.filter(c => c.isDigit).length)).filter( c => c\
    \ % 2 != 0).toList)\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpof55bc_v.scala:15:74 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        odds ::: evens.map( \e[36ms\e[0m => (\e[31m0\e\
    [0m +  (s.filter(\e[36mc\e[0m => c.isDigit).length)).filter( \e[36mc\e[0m => c\
    \ % \e[31m2\e[0m != \e[31m0\e[0m).toList)\n\e[31m\e[31m   |\e[0m             \
    \                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 value filter is not a member of\
    \ Int\n1 error found\n"
  stdout: ''
  timestamp: 1660008796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  def oddCounter(str : String, index : Int) : Int = {\n            if (str.length()\
    \ > 0 && str.length() <= index) oddCounter(str.substring(0,index) + str.substring(index),\
    \ index+1)\n            if (str.length() <= index) 1\n            else {\n   \
    \             val r = str.substring(1)\n                if (r.length() == 0) 0\n\
    \                else if (r.length() == 1) oddCounter(str.substring(0,index) +\
    \ r.charAt(0), index+1)\n                else {\n                    if (r.charAt(r.length()-1)\
    \ == '1') {\n                        oddCounter(str.substring(0,index) + r.charAt(r.length()-1),\
    \ index+1)\n                    } else {\n                        oddCounter(str.substring(0,index)\
    \ + r.charAt(r.length()-1), index+1)\n                        oddCounter(str.substring(0,index)\
    \ + r.charAt(r.length()-2), index+1)\n                    }\n                }\n\
    \            }\n        }\n        lst.map(_.toInt)\n            .foldLeft(List[String]())((res,\
    \ str) => res.map{x => oddCounter(x.toString, 0) +: x.toString})\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcvzpkifz.scala:31:75\
    \ --------------------\e[0m\e[0m\n\e[31m31 |\e[0m            .foldLeft(List[String]())((res,\
    \ str) => res.map{x => oddCounter(x.toString, \e[31m0\e[0m) +: x.toString})\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                                    Found:    Int\n\e[31m   |\e[0m          \
    \                                                Required: Char\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008797
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd_count = mutable.ArrayBuffer(0)\n        lst.foreach(str => { odd_count\
    \ += (str.length / 2).toInt})\n        odd_count.toList\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxca4lwel.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd_count\e[0m = mutable.ArrayBuffer(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        Not found: mutable\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008793
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val l2 = lst\n        l2 map {\n            case x if (x contains \"1\") =>\
    \ x.replace(\"1\", \"0\")\n            case x if (x contains \"0\") => x.replace(\"\
    0\", \"1\")\n            case x => x\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyuwv274m.scala:21)\n\tat Problem.main(tmpyuwv274m.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.HashMap[String, Int]()\n        for (i <- 0 until lst.size)\
    \ {\n            val string = lst(i)\n            val nOdds = string.filter(x\
    \ => x.toInt == 1).length\n            odds.put(string, nOdds)\n        }\n  \
    \      var ans = List[String]()\n        for (i <- odds.keys) {\n            ans\
    \ = ans :+ i.toString + odds.apply(i).toString() + \"n\"\n        }\n        ans\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpxlcn79tz.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.HashMap[\e\
    [35mString\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008796
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  lst.foldLeft((List[String](),List[String]())){\n            case ((xs,ys),(i))\
    \ => \n                (xs + \"the number of odd elements \" + i + \" of the \"\
    \ + i + \"nput.\",ys)\n            case ((xs,ys),s) => \n                (s\"\
    the number of odd elements \" + s.count(_%2 == 0) + xs , ys)\n        }._2\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpysebe9z_.scala:15:20 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                (xs + \e[31m\"the number of odd elements\
    \ \"\e[0m + i + \e[31m\" of the \"\e[0m + i + \e[31m\"nput.\"\e[0m,ys)\n\e[31m\e\
    [31m   |\e[0m                 ^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of List[String], but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpysebe9z_.scala:17:17 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                (\e[31ms\"the number of odd elements\
    \ \"\e[0m + s.count(_%\e[31m2\e[0m == \e[31m0\e[0m) + xs , ys)\n\e[31m\e[31m \
    \  |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 Found:    String\n\e[31m   |\e[0m       \
    \          Required: \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008803
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  def sumOdd(s : String) : Int = {\n            s.toInt filter { i => (i & 1)\
    \ == 1 }.length\n        }\n        val list = lst flatMap { i => i.split(\"\"\
    ) }\n        (0 until list.length).map { i => sumOdd(list(i)) }.toList\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3k4dwigl.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            s.toInt filter { \e[36mi\e[0m => (i & \e\
    [31m1\e[0m) == \e[31m1\e[0m }.length\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value filter is not a member of Int\n\e[31m\e\
    [31m-- [E081] Type Error: /tmp/tmp3k4dwigl.scala:14:29 -----------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            s.toInt filter { \e[36mi\e[0m => (i & \e\
    [31m1\e[0m) == \e[31m1\e[0m }.length\n\e[31m\e[31m   |\e[0m                  \
    \           ^\e[0m\n\e[31m   |\e[0m                          Missing parameter\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          I could not\
    \ infer the type of the parameter i.\n\e[31m\e[31m-- [E007] Type Mismatch Error:\
    \ /tmp/tmp3k4dwigl.scala:17:59 --------------------\e[0m\e[0m\n\e[31m17 |\e[0m\
    \        (\e[31m0\e[0m until list.length).map { \e[36mi\e[0m => sumOdd(list(i))\
    \ }.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    List[\e[1m\e[31mInt\e[0m]\n\e[31m   |\e\
    [0m        Required: List[\e[1m\e[32mString\e[0m]\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008805
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var counter = new scala.collection.mutable.HashMap[Int, Int]()\n        for\
    \ (s <- lst) {\n            val arr = s.toIntArray.filter(x => x%2==0)\n     \
    \       for (x <- arr) {\n                counter(x)+= 1\n            }\n    \
    \    }\n        lst.toList.map(x => x+\" \"+counter.getOrElse(x,0)+\".\").filter(x=>x!=\"\
    \").map(x => x.substring(0,x.length-1))\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0n7mjri1.scala:15:24 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36marr\e[0m = s.toIntArray.filter(\e\
    [36mx\e[0m => x%\e[31m2\e[0m==\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m           \
    \           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value toIntArray\
    \ is not a member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0n7mjri1.scala:20:52\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        lst.toList.map(\e[36mx\e\
    [0m => x+\e[31m\" \"\e[0m+counter.getOrElse(x,\e[31m0\e[0m)+\e[31m\".\"\e[0m).filter(\e\
    [36mx\e[0m=>x!=\e[31m\"\"\e[0m).map(\e[36mx\e[0m => x.substring(\e[31m0\e[0m,x.length-\e\
    [31m1\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \          ^\e[0m\n\e[31m   |\e[0m                                           \
    \       Found:    (x : String)\n\e[31m   |\e[0m                              \
    \                    Required: Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008807
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  def oddCount(lst : List[String]) : List[String] = {\n            if (lst.isEmpty)\
    \ List[String]()\n            else { \n                var oddDigits = 0\n   \
    \             lst.foreach(x => { \n                    val digits = x.toInt\n\
    \                    if (digits % 2 == 1)\n                        oddDigits +=\
    \ digits\n                    else\n                        oddDigits += digits*2\n\
    \                })\n                val str = lst.head\n                val oddDigitStr\
    \ = s\"the number of odd elements $oddDigits of the $str\"\n                oddCount(lst.tail)\n\
    \                List(oddDigitStr)\n            }\n        }\n        return oddCount(lst)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp936vk_4l.scala:33)\n\tat Problem.main(tmp936vk_4l.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evenCount = mutable.Map.empty[String, Int]\n        val oddCount = mutable.Map.empty[String,\
    \ Int]\n        lst.foreach{ x =>\n            if (x % 2 == 0) {\n           \
    \     evenCount += x -> 1\n            } else {\n                oddCount += x\
    \ -> 1\n            }\n        }\n        val even = evenCount.filter(_._2 > 0).map(_._1).sorted\n\
    \        val odd = oddCount.filter(_._2 > 0).map(_._1).sorted\n        even :::\
    \ odd\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3wsv740u.scala:13:24 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenCount\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3wsv740u.scala:14:23\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36moddCount\e[0m = mutable.Map.empty[\e[35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e\
    [31m   |\e[0m                       ^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp3wsv740u.scala:16:18 ------------------------\e[0m\e[0m\n\e[31m16 |\e\
    [0m            \e[33mif\e[0m (x % \e[31m2\e[0m == \e[31m0\e[0m) {\n\e[31m\e[31m\
    \   |\e[0m                ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of\
    \ String, but could be made available as an extension method.\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mThe following import might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n3 errors found\n"
  stdout: ''
  timestamp: 1660008807
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.Set[Int]()\n        for (i <- 0 until lst.size) {\n    \
    \        val n = lst.apply(i).filter(_ => Character.isDigit(_)).filterNot(Character.isDigit(_)).size\n\
    \            odds.add(n.toInt)\n        }\n        (0 until odds.size).map( i\
    \ => s\"the number of odd elements ${odds.toList(i).toList.length} the str${i\
    \ + 1}ng ${i + 1}.\" ).toList\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpllg1pkle.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E081] Type Error: /tmp/tmpllg1pkle.scala:15:63 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mn\e[0m = lst.apply(i).filter(_\
    \ => Character.isDigit(_)).filterNot(Character.isDigit(_)).size\n\e[31m\e[31m\
    \   |\e[0m                                                               ^\e[0m\n\
    \e[31m   |\e[0m   Missing parameter type\n\e[31m   |\e[0m\n\e[31m   |\e[0m   I\
    \ could not infer the type of the parameter _$2 of expanded function:\n\e[31m\
    \   |\e[0m   _$2 => Character.isDigit(_$2).\n2 errors found\n"
  stdout: ''
  timestamp: 1660008804
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // Sum all odd numbers and return them as a string\n        var sum = 0\n \
    \       for (i <- lst ) {\n            if (i.toInt%2 == 1)\n                sum\
    \ += i.toInt\n        }\n        return (lst :+ sum.toString)\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgpboop53.scala:22)\n\tat Problem.main(tmpgpboop53.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var result: List[String] = Nil\n        var counter: mutable.Map[String, Int]\
    \ = mutable.Map[String, Int]()\n        for (i <- lst.indices) {\n           \
    \ var evenDigits = 0\n            var totalDigits = 0\n            var digit:\
    \ String = \"\"\n            var stringToRemove: String = \"\"\n            var\
    \ even: String = \"\"\n            var odd: String = \"\"\n            var stringToRemoveLength\
    \ = lst(i).length\n            for (j <- 0 until stringToRemoveLength) {\n   \
    \             digit += lst(i, j)\n                totalDigits += 1\n         \
    \       if (digit.charAt(0) == '0') {\n                    evenDigits += 1\n \
    \               } else {\n                    oddDigits += 1\n               \
    \ }\n                if (j == 0) {\n                    even = digit\n       \
    \             stringToRemove = even\n                } else {\n              \
    \      odd += digit\n                }\n            }\n            if (evenDigits\
    \ == 0 && oddDigits == 0) {\n                if (totalDigits % 2 != 0) {\n   \
    \                 result += lst(i).replaceFirst(even, odd)\n                }\n\
    \            }\n            if (counter.get(even) == null) {\n               \
    \ counter += evenDigits -> 1\n            } else {\n                counter +=\
    \ even -> counter(even) + 1\n            }\n            if (counter.get(odd) ==\
    \ null) {\n                counter += oddDigits -> 1\n            } else {\n \
    \               counter += odd -> counter(odd) + 1\n            }\n        }\n\
    \        result.map(_.replaceFirst(\"\\\\D\", \"\"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkyu7x4gt.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcounter\e[0m: mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m] = mutable.Map[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpkyu7x4gt.scala:14:48 ------------------------\e[0m\e\
    [0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mcounter\e[0m: mutable.Map[\e\
    [35mString\e[0m, \e[35mInt\e[0m] = mutable.Map[\e[35mString\e[0m, \e[35mInt\e\
    [0m]()\n\e[31m\e[31m   |\e[0m                                                ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkyu7x4gt.scala:24:22\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                digit +=\
    \ lst(i, j)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m            value += is not a member of String - did you mean String.!=?\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpkyu7x4gt.scala:24:29 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                digit += lst(i, j)\n\e[31m\e[31m   |\e\
    [0m                             ^^^^\e[0m\n\e[31m   |\e[0m                   \
    \          Found:    (Int, Int)\n\e[31m   |\e[0m                             Required:\
    \ Int\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpkyu7x4gt.scala:29:20\
    \ ------------------------\e[0m\e[0m\n\e[31m29 |\e[0m                    oddDigits\
    \ += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: oddDigits\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpkyu7x4gt.scala:38:35 ----------------------"
  stdout: ''
  timestamp: 1660008815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  lst.foldLeft(List[String]())((acc, str) => {\n            val arr = str.split('')\n\
    \            val odd = arr.filter(_ % 2 != 0)\n            val odd_count = odd.size\n\
    \            odd_count match {\n                case 1 => acc :+ str\n       \
    \         case _ => acc :+ str + \" \" + odd_count.toString\n            }\n \
    \       })\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptjlwovfr.scala:14:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36marr\e[0m = str.split('')\n\
    \e[31m\e[31m   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m \
    \                               empty character literal\n\e[31m\e[31m-- [E018]\
    \ Syntax Error: /tmp/tmptjlwovfr.scala:15:20 ---------------------------\e[0m\e\
    [0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36modd\e[0m = arr.filter(_ %\
    \ \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                    ^\e\
    [0m\n\e[31m   |\e[0m                    expression expected but \e[31m=\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptjlwovfr.scala:15:12\
    \ ------------------------\e[0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m\
    \ \e[36modd\e[0m = arr.filter(_ % \e[31m2\e[0m != \e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m            ^^^\e[0m\n\e[31m   |\e[0m            Not found: 'val\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptjlwovfr.scala:16:28\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36modd_count\e[0m = odd.size\n\e[31m\e[31m   |\e[0m                     \
    \       ^^^\e[0m\n\e[31m   |\e[0m                            Not found: odd\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660008806
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var res: List[String] = Nil\n        for(i <- 0 until lst.length){\n      \
    \      val stringInNum = lst(i)\n            val numInString = stringInNum.split(\"\
    \").toList\n            val numInList: List[Int] = numInString.map(_.toInt)\n\
    \            val oddCount = numInList.count(_ % 2 != 0)\n            res = res\
    \ + List(s\"the number of odd elements $oddCount $stringInNum\")\n        }\n\
    \        res\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9uh9gk_c.scala:19:22 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m            res = res + List(\e[31ms\"the number of odd\
    \ elements \e[0m$oddCount\e[31m \e[0m$stringInNum\e[31m\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                  ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member\
    \ of List[String], but could be made available as an extension method.\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0mOne of the following imports might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660008815
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = mutable.Set[String]()\n        var output: List[String] = null\n\
    \n        for (i <- 0 until lst.size) {\n            val s = lst(i)\n        \
    \    if (s.toInt().toString % 2 == 0) {\n                odds += s\n         \
    \   }\n        }\n\n        for (i <- 0 until lst.size) {\n            val s =\
    \ lst(i)\n            if (odds.length == 0) output = i\n            else {\n \
    \               output = List(s, \"the number of odd elements \" + odds.length\
    \ + \" of the \" + s + \".\")\n                break\n            }\n        }\n\
    \        output\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps02bxlez.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m = mutable.Set[\e\
    [35mString\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmps02bxlez.scala:18:18 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mif\e[0m (s.toInt().toString % \e[31m2\e\
    [0m == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                \e[33mmethod\e[0m \e[35mtoInt\e[0m in \e[33mclass\e\
    [0m \e[35mStringOps\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmps02bxlez.scala:25:43 --------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (odds.length == \e[31m0\e[0m)\
    \ output = i\n\e[31m\e[31m   |\e[0m                                          \
    \ ^\e[0m\n\e[31m   |\e[0m                                           Found:   \
    \ (i : Int)\n\e[31m   |\e[0m                                           Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmps02bxlez.scala:28:16\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                break\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660008812
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // Create empty list\n        var lst2 = new ListBuffer[String]()\n\n     \
    \   // For every string in the list do the following\n        lst.foreach(x =>\
    \ {\n            // Do the odd and even count for each string\n            val\
    \ odds = x.count(c => c == '3' | c == '5' | c == '7' | c == '9')\n           \
    \ val evens = x.count(c => c == '3' | c == '5' | c == '7')\n            // Append\
    \ the results to their respective lists\n            lst2 += (\"the number of\
    \ odd elements \" + odds + \" of the \" + x + \".\")\n            lst2 += (\"\
    the number of even elements \" + evens + \" of the \" + x + \".\")\n        })\n\
    \        // Return the list\n        lst2\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy_mr39tj.scala:26:8\
    \ ---------------------\e[0m\e[0m\n\e[31m26 |\e[0m        lst2\n\e[31m\e[31m \
    \  |\e[0m        ^^^^\e[0m\n\e[31m   |\e[0m        Found:    (lst2 : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  for (i <- 0 to lst.size)\n            for (j <- 0 to i)\n                if\
    \ (lst(i).charAt(j).isDigit() && lst(i).charAt(j+1) == '1')\n                \
    \    return (lst(i) -> lst(i + 1).count(_ == '1'))\n        return lst\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpbjkqu0au.scala:15:37 -----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mif\e[0m (lst(i).charAt(j).isDigit()\
    \ && lst(i).charAt(j+\e[31m1\e[0m) == \e[31m'1'\e[0m)\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \    \e[33mmethod\e[0m \e[35misDigit\e[0m in \e[33mclass\e[0m \e[35mRichChar\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpbjkqu0au.scala:16:28 --------------------\e[0m\e[0m\n\e[31m16\
    \ |\e[0m                    \e[33mreturn\e[0m (lst(i) -> lst(i + \e[31m1\e[0m).count(_\
    \ == \e[31m'1'\e[0m))\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            Found:    (String, Int)\n\e[31m\
    \   |\e[0m                            Required: List[String]\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // Create a list of zeroes.\n        var l = new scala.collection.mutable.ListBuffer[String]()\n\
    \        l += \"The number of odd elements \"\n        l += strCount(lst(0) ,\
    \ lst)\n        l += \" of the string \"\n        l += lst(0)\n        l += \"\
    \ of the input.\"\n        l\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptn69khco.scala:16:13 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m        l += strCount(lst(\e[31m0\e[0m) , lst)\n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^\e[0m\n\e[31m   |\e[0m             Not found:\
    \ strCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptn69khco.scala:20:8\
    \ ---------------------\e[0m\e[0m\n\e[31m20 |\e[0m        l\n\e[31m\e[31m   |\e\
    [0m        ^\e[0m\n\e[31m   |\e[0m        Found:    (l : scala.collection.mutable.ListBuffer[String])\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      val\
    \ odds = mutable.HashSet[Int]()\n      for (s <- lst) {\n        for (a<-0 until\
    \ s.length)\n          odds += (s.charAt(a) match {\n            case '1' => 1\n\
    \            case '0' => 0\n            case _ => -1\n          })\n      }\n\
    \      odds.toList.map {\n        case x if x == 1 => \"the number of odd elements\
    \ 1n the str1ng 1 of the 1nput.\"\n        case x if x == 0 => \"the number of\
    \ odd elements 0n the str0ng 0 of the 0nput.\"\n        case x if x == -1 => \"\
    the number of odd elements -1n the str-1ng -1 of the -1nput.\"\n        case x\
    \ => s\"the number of odd elements ${x} the str${x} of the ${x}nput.\"\n     \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpnxjiwadu.scala:13:17 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m      \e[33mval\e[0m \e[36modds\e[0m = mutable.HashSet[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                 ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                 Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008809
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  if (lst.exists(_ == \"\")) lst\n        else {\n            // Create countMap\n\
    \            val countMap = mutable.HashMap.empty[String, Int]\n            //\
    \ Create a mutable list to store odd numbers\n            var oddNumbers = mutable.ArrayBuffer.empty[String]\n\
    \            // Loop the list\n            for(i <- 0 until lst.size) countMap(i)\
    \ = countMap(i) + lst.count(i => if(Character.isDigit(Character(i))) true else\
    \ false)\n            // Loop the map\n            for(i <- countMap.toSeq.sortBy(_._2)).reverse)\n\
    \            {\n                if (lst.count(_ == i.toString.charAt(0)) == 0)\
    \ {\n                    oddNumbers += \"the number of odd elements \" + i + \"\
    \ of the \" + i + \"nput.\"\n                }\n            }\n            //\
    \ Return odd numbers\n            oddNumbers\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp5kzbx3ao.scala:22:49 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mfor\e[0m(i <- countMap.toSeq.sortBy(_._2)).reverse)\n\
    \e[31m\e[31m   |\e[0m                                                 ^\e[0m\n\
    \e[31m   |\e[0m                                       expression expected but\
    \ \e[31m'.'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5kzbx3ao.scala:16:27\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m\
    \ \e[36mcountMap\e[0m = mutable.HashMap.empty[\e[35mString\e[0m, \e[35mInt\e[0m]\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp5kzbx3ao.scala:18:29 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            \e[33mvar\e[0m \e[36moddNumbers\e[0m = mutable.ArrayBuffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                             ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Not found: mutable\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5kzbx3ao.scala:24:35 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e[0m (lst.count(_ == i.toString.charAt(\e\
    [31m0\e[0m)) == \e[31m0\e[0m) {\n\e[31m\e[31m   |\e[0m                       \
    \            ^\e[0m\n\e[31m   |\e[0m                                   Not found:\
    \ i\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660008810
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  def oddChar(s:String) : Int = {\n            var oddChar = 0\n            for(ch\
    \ <- s){\n                if(ch != '0'){\n                    oddChar+=1\n   \
    \             }\n            }\n            oddChar\n        }\n        val s\
    \ = lst.size\n        val t = lst.tail.map(s => {\n            var count = 0\n\
    \            for(ch <- s){\n                if(ch != '0'){\n                 \
    \   count+=1\n                }\n            }\n            (count,s)\n      \
    \  })\n        t.groupBy(_._1)\n        .mapValues(_.map(_._2))\n        .mapValues(v\
    \ => {\n            val tt = v._2.size\n            val s = v._2.tail.map(s =>\
    \ {\n                var count = 0\n                for(ch <- s){\n          \
    \          if(ch != '0'){\n                        count+=1\n                \
    \    }\n                }\n                (count,s)\n            })\n       \
    \     val tt = v._2.size\n            (tt,s)\n        })\n        .map(x => x._1+\"\
    : \"+x._2.mkString(\" \"))\n        .filter(_ => x._1 != \"0\")\n        .filter(_\
    \ => x._1 != s)\n        .map(x => x.mkString(\" \"))\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpne3f02rz.scala:45:16 ---------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m            \e[33mval\e[0m \e[36mtt\e[0m = v._2.size\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mtt is\
    \ already defined as \e[33mvalue\e[0m \e[35mtt\e[0m\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpne3f02rz.scala:35:23\
    \ ------------------------\e[0m\e[0m\n\e[31m35 |\e[0m            \e[33mval\e[0m\
    \ \e[36mtt\e[0m = v._2.size\n\e[31m\e[31m   |\e[0m                     ^^^^\e\
    [0m\n\e[31m   |\e[0m                     value _2 is not a member of List[String]\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpne3f02rz.scala:36:22 ------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m            \e[33mval\e[0m \e[36ms\e[0m = v._2.tail.map(\e\
    [36ms\e[0m => {\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m  \
    \ |\e[0m                    value _2 is not a member of List[String]\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpne3f02rz.scala:48:33 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m        .map(x => x._1+\e[31m\": \"\e[0m+x._2.mkString(\e\
    [31m\" \"\e[0m))\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalue mkString is not a member of (Nothing, Nothing) - did\
    \ you mean _2.toString?\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpne3f02rz.scala:49:21\
    \ ------------------------\e[0m\e[0m\n\e[31m49 |\e[0m        .filter(_ => x._1\
    \ != \e[31m\"0\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: x\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpne3f02rz.scala:50:21 ------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m        .filter(_ => x._1 != s)\n\e[31m\e[31m   |\e[0m\
    \                     ^\e[0m\n\e[31m   |\e[0m                     Not found: x\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n6 errors found\n"
  stdout: ''
  timestamp: 1660008818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var counts = mutable.HashMap.empty[String, Int]\n        lst.foreach(str =>\
    \ {\n            val numOdds = count(str.toList, \"1\")\n            val numEvens\
    \ = count(str.toList, \"0\")\n            counts.put(str, numOdds + numEvens)\n\
    \        })\n        counts.toList.map { case (str, count) => \"the number of\
    \ odd elements \" + count + \" the \" + str + \" of the \" + lst.count(str) +\
    \ \" input.\" }.mkString(\",\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmtw379on.scala:13:21 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36mcounts\e[0m = mutable.HashMap.empty[\e\
    [35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmtw379on.scala:15:26 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnumOdds\e[0m = count(str.toList,\
    \ \e[31m\"1\"\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^\e[0m\n\
    \e[31m   |\e[0m                          Not found: count\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpmtw379on.scala:16:27 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mval\e[0m \e[36mnumEvens\e[0m = count(str.toList,\
    \ \e[31m\"0\"\e[0m)\n\e[31m\e[31m   |\e[0m                           ^^^^^\e[0m\n\
    \e[31m   |\e[0m                           Not found: count\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008811
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var odd = 0\n        var temp = \"\"\n        var output: List[String] = Nil\n\
    \        lst.foreach( x => {\n            if ( !x.isDigit ) {\n              \
    \  output::=List(x.toInt)\n            }\n            else {\n               \
    \ val str = x.toInt\n                if ( str == 0 || str == 2 ) {\n         \
    \           temp+=str\n                }\n                else {\n           \
    \         for ( i <- str to 0 by -1 ) {\n                        if ( temp.toString.toLong\
    \ % 2 == 1 ) {\n                            temp+=i\n                        }\n\
    \                    }\n                    if ( temp.toString.toLong % 2 == 1\
    \ ) {\n                        odd += temp.toString.toInt\n                  \
    \      temp = \"\"\n                    }\n                }\n            }\n\
    \        })\n        output::=List(odd.toString)\n        return output\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7io5r2o6.scala:17:20 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m ( !x.isDigit ) {\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^\e[0m\n\e[31m   |\e[0m               \
    \   value isDigit is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp7io5r2o6.scala:18:22 ------------------------\e[0m\e[0m\n\e[31m18 |\e\
    [0m                output::=List(x.toInt)\n\e[31m\e[31m   |\e[0m             \
    \   ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a member of List[String] -\
    \ did you mean List[String].::?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7io5r2o6.scala:38:14\
    \ ------------------------\e[0m\e[0m\n\e[31m38 |\e[0m        output::=List(odd.toString)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ::= is not a\
    \ member of List[String] - did you mean List[String].::?\n3 errors found\n"
  stdout: ''
  timestamp: 1660008818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evenLst = lst.filterNot(_.isEmpty).map( s => {\n            val num = s.toInt\n\
    \            num match {\n                case _ if num < 10 => num\n        \
    \        case _         => num + 10\n            }\n        })\n        val oddLst\
    \ = evenLst.map(nums => {\n            val count = nums.filter(_ % 2 == 1).size\n\
    \            s\"the number of odd elements ${count} the str${count}ng $nums\"\n\
    \        })\n        oddLst ++ evenLst\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpndvx_e1c.scala:21:29 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mcount\e[0m = nums.filter(_\
    \ % \e[31m2\e[0m == \e[31m1\e[0m).size\n\e[31m\e[31m   |\e[0m                \
    \        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                        value filter\
    \ is not a member of Int\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpndvx_e1c.scala:24:18\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        oddLst ++ evenLst\n\e\
    [31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       Found:    (evenLst : List[Int])\n\e[31m   |\e[0m                  Required:\
    \ IterableOnce[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008818
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.Set[Int]()\n        lst.map { s =>\n            (0 until\
    \ s.length).foreach { i =>\n                s match {\n                    case\
    \ \"0\" => ()\n                    case x if x.toInt == 0 => ()\n            \
    \        case \"1\" => odd += 0\n                    case \"2\" => odd += 1\n\
    \                    case \"3\" => odd += 2\n                    case \"4\" =>\
    \ odd += 3\n                    case \"5\" => odd += 4\n                    case\
    \ \"6\" => odd += 5\n                    case \"7\" => odd += 6\n            \
    \        case \"8\" => odd += 7\n                    case \"9\" => odd += 8\n\
    \                    case \"0\" =>\n                    case x if x.toInt % 2\
    \ == 1 => odd += 1\n                    case x if x.toInt % 2 == 0 => odd += 0\n\
    \                    case _ => odd = odd.diff(x % 10).toSet\n                }\n\
    \            }\n        }\n        lst.map { s =>\n            odd.toList.map(i\
    \ => s\"the number of odd elements $i n the str$s ${s take i }.\")\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_6g4iryo.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.Set[\e\
    [35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp_6g4iryo.scala:31:34 -----------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    \e[33mcase\e[0m _ => odd = odd.diff(x\
    \ % \e[31m10\e[0m).toSet\n\e[31m\e[31m   |\e[0m                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                              Reassignment to val odd\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008814
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val map = lst.groupBy(x => x).map(x => (x, x.length)).toMap\n        lst.map(x\
    \ => s\"the number of odd elements ${map.getOrElse(x, 0)} the ${x.length} ${x.substring(x.length\
    \ - 2, x.length)} of the ${x.substring(0, x.length - 2)}.\").filter(_ != \"\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpna6she76.scala:13:53 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mmap\e[0m = lst.groupBy(\e\
    [36mx\e[0m => x).map(\e[36mx\e[0m => (x, x.length)).toMap\n\e[31m\e[31m   |\e\
    [0m                                                   ^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                  value length is not a member of (String, List[String])\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpna6she76.scala:14:66 --------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36mx\e[0m => \e[31ms\"the number of\
    \ odd elements \e[0m${map.getOrElse(x, \e[31m0\e[0m)}\e[31m the \e[0m${x.length}\e\
    [31m \e[0m${x.substring(x.length - \e[31m2\e[0m, x.length)}\e[31m of the \e[0m${x.substring(\e\
    [31m0\e[0m, x.length - \e[31m2\e[0m)}\e[31m.\"\e[0m).filter(_ != \e[31m\"\"\e\
    [0m)\n\e[31m\e[31m   |\e[0m                                                  \
    \                ^\e[0m\n\e[31m   |\e[0m                                     \
    \   Found:    (\e[1m\e[31mx\e[0m \e[1m\e[31m:\e[0m\e[1m\e[31m \e[0mString)\n\e\
    [31m   |\e[0m                                        Required: (\e[1m\e[32mString\e\
    [0m\e[1m\e[32m,\e[0m \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e\
    [0m)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008819
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var result : List[String] = Nil\n        for(i <- 0 until lst.length ) {\n\
    \            val odd = (0 until lst(i).length) filter (x => x % 2 != 0)\n    \
    \        result = result :+ lst(i).size + \" number of odd element\" + odd.length\
    \ + \" in the\" + odd.mkString(\"\") +\" of the \" + i.toString + \" is \" + odd.sum\n\
    \        }\n        result\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu5hia2hs.scala:21)\n\tat Problem.main(tmpu5hia2hs.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var lst1 = lst\n        lst1.map(x => {\n            val y = x.filterNot(_.toInt%2==0)\n\
    \            y.length.toString\n        })\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpv_gpdlcb.scala:20)\n\tat Problem.main(tmpv_gpdlcb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008827
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  if (lst.forall(_.isDigit)) List(s\"the number of odd elements ${lst.map(_.toInt).filter(_%2==1).sum}.\"\
    );\n        else oddCount(lst.map(_.toInt).filter(_%2==1).filter(_%2!=0))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgf_dh274.scala:13:25 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mif\e[0m (lst.forall(_.isDigit)) List(\e\
    [31ms\"the number of odd elements \e[0m${lst.map(_.toInt).filter(_%\e[31m2\e[0m==\e\
    [31m1\e[0m).sum}\e[31m.\"\e[0m);\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value isDigit is not a\
    \ member of String\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgf_dh274.scala:14:60\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33melse\e[0m oddCount(lst.map(_.toInt).filter(_%\e\
    [31m2\e[0m==\e[31m1\e[0m).filter(_%\e[31m2\e[0m!=\e[31m0\e[0m))\n\e[31m\e[31m\
    \   |\e[0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Found:    List[\e[1m\e[31mInt\e[0m]\n\
    \e[31m   |\e[0m                      Required: List[\e[1m\e[32mString\e[0m]\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var odds = mutable.Buffer.empty[Int]\n        var result = mutable.Buffer.empty[String]\n\
    \        lst.foreach { s =>\n            val m = s.toInt\n            odds +=\
    \ m\n        }\n        if (odds.isEmpty) result :+= s\"there are no odd numbers\"\
    \n        else {\n            if (odds.size == 1) result :+= s\"the number of\
    \ odd numbers is ${odds.head}\"\n            else {\n                result :+=\
    \ s\"the number of odd numbers is ${odds.take(odds.size - 1)}\"\n            \
    \    for {\n                    n <- odds diff 1 diff lst.size\n             \
    \   } result :+= s\"the number of odd numbers is ${n}\"\n            }\n     \
    \   }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpfo1or1_v.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36modds\e[0m = mutable.Buffer.empty[\e\
    [35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpfo1or1_v.scala:14:21 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m = mutable.Buffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660008821
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var count = 1 // count's initial value\n        var odd = 0 // odd's initial\
    \ value\n        for(i <- lst) \n        {\n            if(i % 2 == 1) odd +=\
    \ 1 // if current element is an odd digit increase odd\n            count *= (odd\
    \ + 1) // multiply the count with the sum of all the odd digits\n        }\n \
    \       \n        var lst2 = lst.map(_.replaceAll(\"\\\\d\", \"0\")) // replace\
    \ all the digits with 0\n        \n        val evenCount: Map[Int, Int] = lst2.groupBy(_\
    \ % 2)\n        \n        var oddList = new List[String]()\n        \n       \
    \ for(i <- 0 until lst2.length)\n        {\n            val ev = evenCount(i)\n\
    \            if(ev(true) != 0)\n            {\n                oddList += s\"\
    the number of odd elements in ${lst2(i)}n the str${ev(true)} of the str${ev(false)}\
    \ of the input.\"\n            }\n        }\n        oddList ::: oddCount(lst2)\
    \ // add the odd count to the odd list\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx37y_9ml.scala:17:17 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            \e[33mif\e[0m(i % \e[31m2\e[0m == \e[31m1\e\
    [0m) odd += \e[31m1\e[0m \e[34m// if current element is an odd digit increase\
    \ odd\e[0m\n\e[31m\e[31m   |\e[0m               ^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ % is not a member of String, but could be made available as an extension method.\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx37y_9ml.scala:23:54\
    \ ------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e\
    [36mevenCount\e[0m: \e[35mMap\e[0m[\e[35mInt\e[0m, \e[35mInt\e[0m] = lst2.groupBy(_\
    \ % \e[31m2\e[0m)\n\e[31m\e[31m   |\e[0m                                     \
    \               ^^^\e[0m\n\e[31m   |\e[0mvalue % is not a member of String, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mThe following import might make progress towards fixing the problem:\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E050] Type Error: /tmp/tmpx37y_9ml.scala:30:15\
    \ -----------------------------\e[0m\e[0m\n\e[31m30 |\e[0m            \e[33mif\e\
    [0m(ev(\e[31mtrue\e[0m) != \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \ ^^\e[0m\n\e[31m   |\e[0m               \e[33mvalue\e[0m \e[35mev\e[0m does not\
    \ take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpx37y_9ml.scala:32:24\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m                oddList +=\
    \ \e[31ms\"the number of odd elements in \e[0m${lst2(i)}\e[31mn the str\e[0m${ev(\e\
    [31mtrue\e[0m)}\e[31m of the str\e[0m${ev(\e[31mfalse\e[0m)}\e[31m of the input.\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue\
    \ += is not a member of List[String] - did you mean List[String].!=?\n\e[31m\e\
    [31m-- [E050] Type Error: /tmp/tmpx37y_9ml.scala:32:80 -------------------"
  stdout: ''
  timestamp: 1660008829
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var result: List[String] = Nil\n        for (s <- lst) {\n            var count\
    \ = 0\n            for (i <- s.toInt) {\n                count += (i%2 != 0)\n\
    \            }\n            result = (if (count == 0) Nil else result :+ count\
    \ + \" \" + s)\n        }\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptcwqg11d.scala:16:22 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m            \e[33mfor\e[0m (i <- s.toInt) {\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var lst2 = lst\n        for (i<-lst) \n            lst2 = lst2.filter(_ match\
    \ {\n                case x : String => x.toString.toInt%2 != 0\n            \
    \    case _ => true\n            })\n        lst.zip(lst2).map {\n           \
    \ case (x, y) => x + (\" the number of odd elements \" + y.length + \"n the str\"\
    \ + y.length + \"ng \" + y + \".\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpq958y9si.scala:24)\n\tat Problem.main(tmpq958y9si.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008831
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val oddCount = mutable.Map.empty[String, Int]\n        for(s <- lst) {\n  \
    \          for(i <- s.reverse.iterator) {\n                if(i % 2 == 0) {\n\
    \                    oddCount(i) = oddCount(i) + 1\n                }\n      \
    \      }\n        }\n        oddCount.toList.map { case (k, v) => s\"the number\
    \ of odd elements $vn the str$v of the $knput.\"}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzyi3u7cm.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36moddCount\e[0m = mutable.Map.empty[\e\
    [35mString\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^\e[0m\n\e[31m   |\e[0m                       Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008826
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odd = mutable.Map.empty[Int, Int]\n        for(s <- lst) for(i <- 0 until\
    \ s.length) odd((s.charAt(i).toInt, i))\n        lst.map(s => s\"the number of\
    \ odd elements ${odd.get(s)} $s of the $s\") :+ oddCount.toString\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpps0mwzsb.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modd\e[0m = mutable.Map.empty[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660008825
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  // Count the number of odd digits in each string\n        // For each string,\
    \ we only need to worry about the odd digits in each of the string digits.\n \
    \       // >>> oddCount((List[String](\"1\", \"22222222\")))\n        // (List[String](\"\
    the number of odd digits in the 1st string 2 of the 2nd\", \"the number of odd\
    \ digits in the 2nd string 2 of the 2nd\"))\n        val oddsMap = mutable.Map[Int,\
    \ Int]()\n        for (s <- lst) oddsMap += {\n            if (s.forall(_.isDigit))\
    \ (s.map(_.toInt).sum % 2 == 1) else 0 // Map only even digits\n        }\n  \
    \      oddsMap.map(x => s\"the number of odd digits in the $x string $oddsMap(x)\"\
    )\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpluvkf5a0.scala:17:22 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        \e[33mval\e[0m \e[36moddsMap\e[0m = mutable.Map[\e\
    [35mInt\e[0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                      ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: mutable\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008824
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val m  = lst.foldLeft(Map[Int, Int]()) { (m, str) =>\n            val s = str.filter(x\
    \ => x match {\n                case xs if xs.isDigit   => true\n            \
    \    case xs if !xs.isDigit => false\n            }).size\n            (m.getOrElse(str,\
    \ 0), m + (str -> (s + 1)))\n        }\n        val odd = m.filter(_._2 % 2 ==\
    \ 1).map(_._1)\n        odd.map(s => s\"the number of odd elements ${s.toInt}n\
    \ the str${s.toInt}th string of the input.\").map(a => a.mkString(\" \"))\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp56jg6_de.scala:18:25\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            (m.getOrElse(str,\
    \ \e[31m0\e[0m), m + (str -> (s + \e[31m1\e[0m)))\n\e[31m\e[31m   |\e[0m     \
    \                    ^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (str : String)\n\e[31m   |\e[0m                         Required: Int\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp56jg6_de.scala:18:39\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m            (m.getOrElse(str,\
    \ \e[31m0\e[0m), m + (str -> (s + \e[31m1\e[0m)))\n\e[31m\e[31m   |\e[0m     \
    \                                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \                                Found:    (\e[1m\e[31mString\e[0m, Int)\n\e[31m\
    \   |\e[0m                                       Required: (\e[1m\e[32mInt\e[0m,\
    \ Int)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp56jg6_de.scala:21:108\
    \ -------------------\e[0m\e[0m\n\e[31m21 |\e[0m        odd.map(\e[36ms\e[0m =>\
    \ \e[31ms\"the number of odd elements \e[0m${s.toInt}\e[31mn the str\e[0m${s.toInt}\e\
    [31mth string of the input.\"\e[0m).map(\e[36ma\e[0m => a.mkString(\e[31m\" \"\
    \e[0m))\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    scala.collection.mutable.Iterable[String]\n\
    \e[31m   |\e[0m        Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var odds = mutable.Buffer.empty[String]\n        val numOfDigits = lst.map(_.length).sum\n\
    \        for(i <- 0 until numOfDigits){\n            if(lst.map(_(i)).filter(\
    \ s => s.isDigit).length==0)\n                break\n            val result =\
    \ lst.map( s => s.replace(i.toString(),\"\").length ).filter(x => x%2==1).length\n\
    \            odds +=  s\"the number of odd elements $result of the ${lst.map(_(i)).filter(\
    \ s => s.isDigit).head}th string.\"\n        }\n        odds.toList\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1z_mjk2x.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mvar\e[0m \e[36modds\e[0m = mutable.Buffer.empty[\e\
    [35mString\e[0m]\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp1z_mjk2x.scala:17:16 ------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008828
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  def oddDigits(number: Int, string: List[String]) : (Int, List[String]) = {\n\
    \            val numberString = number.toString\n            val numberString\
    \ = numberString.substring(0, numberString.length-1)\n            val numberString\
    \ = numberString.substring(1)\n            val stringList = string.toList\n  \
    \          val oddCount = (numberString.toCharArray.zip(stringList.toCharArray).filter{\
    \ case (digit, string) => (digit == '1') && (string == '1') }.map{ case (digit,\
    \ string) => (digit.toInt, string) }.toMap).filter{ case (digit, string) => number\
    \ % digit != 0 }.map{ case (digit, string) => ((number / digit).toInt, string)\
    \ }.toList\n            (oddCount, stringList.toList)\n        }\n\n        if\
    \ (lst.length == 0)\n            throw new IllegalArgumentException(\"Must have\
    \ at least one string.\")\n\n        val firstString = (lst take 1).head\n\n \
    \       if (firstString.length == 0)\n            throw new IllegalArgumentException(\"\
    String is empty.\")\n\n        val firstNumberString = firstString.substring(0,\
    \ firstString.length-1)\n\n        val firstNumberString = firstNumberString.substring(1)\n\
    \n        val firstNumberInt = firstNumberString.toInt\n        val firstStringList\
    \ = firstString.toList\n\n        val oddCountMap = (0 until firstNumberInt).foldLeft(Map[Int,\
    \ List[String]]()){\n            case (acc, i) => (i, firstStringList filter {\n\
    \                case string => (string.length != 0 && string.toCharArray.head.toInt\
    \ == (i * 2))\n            }.toList)\n        }\n\n        val finalResult = oddCountMap.filter(_._2\
    \ != firstStringList).map{\n            case (countString, string) => \"the number\
    \ of odd elements \" + countString + \" the str\" + string + \" of the \" + string\n\
    \        }\n\n        finalResult\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph6cf33m8.scala:32:12 ---------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mfirstNumberString\e[0m =\
    \ firstNumberString.substring(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfirstNumberString is already defined as \e[33mvalue\e[0m \e\
    [35mfirstNumberString\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmph6cf33m8.scala:15:16 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mnumberString\e[0m =\
    \ numberString.substring(\e[31m0\e[0m, numberString.length-\e[31m1\e[0m)\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumberString is already defined as \e[33mvalue\e[0m \e[35mnumberString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmph6cf33m8.scala:16:16 ---------------------------\e[0m\e[0m\n\e\
    [31m16 |\e[0m            \e[33mval\e[0m \e[36mnumberString\e[0m = numberString.substring(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mnumberString is already defined as \e[33mvalue\e[0m \e[35mnumberString\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmph6cf33m8.scala:18:68 ------------------------\e[0m\e[0m\n\
    \e[31m18 |\e[0m            \e[33mval\e[0m \e[36moddCount\e[0m = (numberString.toCharArray.zip(stringList.toCharArray).filter{\
    \ \e[33mcase\e[0m (digit, string) => (digit == \e[31m'1'\e[0m) && (string == \e\
    [31m'1'\e[0m) }.map{ \e[33mcase\e[0m (digit, string) => (digit.toInt, string)\
    \ }.toMap).filter{ \e[33mcase\e[0m (digit, string) => number % digit != \e[31m0\e\
    [0m }.map{ \e[33mcase\e[0m (digit, string) => ((number / digit).toInt, string)\
    \ }.toList\n\e[31m\e[31m"
  stdout: ''
  timestamp: 1660008834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      lst.foldLeft(List[String]())((list,\
    \ str) => {\n        val countOdds = str.count(n => n % 2 == 1)\n        list\
    \ :+ (\"the number of odd elements %dn the str%dng %d of the %dnput.\".format(countOdds,\
    \ list.size, str.size))\n      })\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: Exception
  stderr: "java.util.MissingFormatArgumentException: Format specifier '%d'\n\tat java.base/java.util.Formatter.format(Formatter.java:2688)\n\
    \tat java.base/java.util.Formatter.format(Formatter.java:2625)\n\tat java.base/java.lang.String.format(String.java:4143)\n\
    \tat scala.collection.StringOps$.format$extension(StringOps.scala:994)\n\tat Problem$.oddCount$$anonfun$1(tmpv0_a7qwu.scala:15)\n\
    \tat scala.collection.LinearSeqOps.foldLeft(LinearSeq.scala:169)\n\tat scala.collection.LinearSeqOps.foldLeft$(LinearSeq.scala:165)\n\
    \tat scala.collection.immutable.List.foldLeft(List.scala:79)\n\tat Problem$.oddCount(tmpv0_a7qwu.scala:16)\n\
    \tat Problem$.main(tmpv0_a7qwu.scala:19)\n\tat Problem.main(tmpv0_a7qwu.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008834
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val even = lst.reduceLeft((x,y) => x + y)\n        val odd = even.filter(_\
    \ % 2 == 1)\n        odd.toList.reverse.map(x => s\"the number of odd elements\
    \ $x $lst(x)\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpmpo4zf_1.scala:18)\n\tat Problem.main(tmpmpo4zf_1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660008835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  lst.map(str => {\n            val evenCount = str.count(_ == '0')\n       \
    \     val oddCount = str.count(_ == '1')\n            val total = evenCount *\
    \ oddCount\n            (evenCount, total)\n        }).reduce((a, b) => a ++ b).toList.map(x\
    \ => s\"the number of odd elements $x the str${x._1} of the $x._2\")\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmps4qplbs3.scala:18:28\
    \ --------------------\e[0m\e[0m\n\e[31m18 |\e[0m        }).reduce((a, b) => a\
    \ ++ b).toList.map(x => \e[31ms\"the number of odd elements \e[0m$x\e[31m the\
    \ str\e[0m${x._1}\e[31m of the \e[0m$x\e[31m._2\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                            ^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \        Found:    Int *: Int *: (b : (Int, Int))\n\e[31m   |\e[0m           \
    \                 Required: (Int, Int)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmps4qplbs3.scala:18:95 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m        }).reduce((a, b) => a ++ b).toList.map(x => \e[31ms\"\
    the number of odd elements \e[0m$x\e[31m the str\e[0m${x._1}\e[31m of the \e[0m$x\e\
    [31m._2\"\e[0m)\n\e[31m\e[31m   |\e[0m                                       \
    \                                                      ^^^^\e[0m\n\e[31m   |\e\
    [0m                       value _1 is not a member of Int | (Int | Nothing)\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660008835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val nums = new scala.collection.mutable.HashMap[String, Int]()\n        lst.foreach(s\
    \ => {\n            for(i <- 0 until s.length) {\n                nums(s.substring(i,i+1))\
    \ = nums.get(s.substring(i,i+1)) + 1\n            }\n        })\n        lst.map(s\
    \ => s\"the number of odd elements ${nums.get(s)} the str$s ${nums.get(s)} of\
    \ the ${nums.get(s)}nput.\")\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"the number\
    \ of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzflvu_at.scala:16:72 ------------------------\e\
    [0m\e[0m\n\e[31m16 |\e[0m                nums(s.substring(i,i+\e[31m1\e[0m)) =\
    \ nums.get(s.substring(i,i+\e[31m1\e[0m)) + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue + is not a member of Option[Int], but could be made available\
    \ as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following\
    \ imports might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e\
    [0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import\
    \ math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660008835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  var strs = lst.toArray\n        val evens = strs.filter(_.toInt % 2 == 0).toArray\n\
    \        val odds = strs.filter(_.toInt % 2 != 0).toArray\n        var newstrs\
    \ = (0 until odds.length).map(i => (s\"the number of odd elements $odds(${i}nthe\
    \ str$i).\"))\n        newstrs = newstrs.flatten.distinct\n        newstrs.map(i\
    \ => (s\"the number of odd elements ${evens(i}nthe str${i}\").trim))\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"\
    ))).equals((List[String](\"the number of odd elements 4n the str4ng 4 of the 4nput.\"\
    ))));\n    assert(oddCount((List[String](\"3\", \"11111111\"))).equals((List[String](\"\
    the number of odd elements 1n the str1ng 1 of the 1nput.\", \"the number of odd\
    \ elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa74ua1qy.scala:18:64 ---------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m        newstrs.map(\e[36mi\e[0m => (\e[31ms\"the number\
    \ of odd elements \e[0m${evens(i}\e[31mnthe str\e[0m${i}\e[31m\"\e[0m).trim))\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \        ^\e[0m\n\e[31m   |\e[0m                                             ')'\
    \ expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpa74ua1qy.scala:18:85\
    \ ---------------------------\e[0m\e[0m\n\e[31m18 |\e[0m        newstrs.map(\e\
    [36mi\e[0m => (\e[31ms\"the number of odd elements \e[0m${evens(i}\e[31mnthe str\e\
    [0m${i}\e[31m\"\e[0m).trim))\n\e[31m\e[31m   |\e[0m                          \
    \                                                           ^\e[0m\n\e[31m   |\e\
    [0m                                             '}' expected, but ')' found\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpa74ua1qy.scala:17:34 --------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m        newstrs = newstrs.flatten.distinct\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  Found:    IndexedSeq[\e[1m\e[31mChar\e[0m]\n\e[31m   |\e[0m\
    \                  Required: IndexedSeq[\e[1m\e[32mString\e[0m]\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660008834
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds: List[Int] = lst.map(_.length).filter(s => s % 2 != 0).toList\n  \
    \      lst.map(s => s\"the number of odd elements $odds(s) of the $s string.\"\
    \ ).mkString(\"\\n\")\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpvyu3brjc.scala:14:88\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        lst.map(\e[36ms\e[0m\
    \ => \e[31ms\"the number of odd elements \e[0m$odds\e[31m(s) of the \e[0m$s\e\
    [31m string.\"\e[0m ).mkString(\e[31m\"\\n\"\e[0m)\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    String\n\e[31m   |\e[0m        Required:\
    \ \e[1m\e[32mList\e[0m\e[1m\e[32m[\e[0mString\e[1m\e[32m]\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660008833
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val map1 = lst.map(x => x map (x => if (x == '1') 1 else 0)) reduceLeft(_+_)\n\
    \        val map2 = lst.map(x => x map (x => if (x == '2') 1 else 0)) reduceLeft(_+_)\n\
    \        val map3 = lst.map(x => x map (x => if (x == '3') 1 else 0)) reduceLeft(_+_)\n\
    \        val map4 = lst.map(x => x map (x => if (x == '4') 1 else 0)) reduceLeft(_+_)\n\
    \        val map5 = lst.map(x => x map (x => if (x == '5') 1 else 0)) reduceLeft(_+_)\n\
    \        val map6 = lst.map(x => x map (x => if (x == '6') 1 else 0)) reduceLeft(_+_)\n\
    \        val map7 = lst.map(x => x map (x => if (x == '7') 1 else 0)) reduceLeft(_+_)\n\
    \        val map8 = lst.map(x => x map (x => if (x == '8') 1 else 0)) reduceLeft(_+_)\n\
    \        val map9 = lst.map(x => x map (x => if (x == '9') 1 else 0)) reduceLeft(_+_)\n\
    \        val map10 = lst.map(x => x map (x => if (x == '0') 1 else 0)) reduceLeft(_+_)\n\
    \        val map11 = lst.map(x => x map (x => if (x == '1') 1 else 0)) reduceLeft(_+_)\n\
    \        val map12 = lst.map(x => x map (x => if (x == '2') 1 else 0)) reduceLeft(_+_)\n\
    \        val map13 = lst.map(x => x map (x => if (x == '3') 1 else 0)) reduceLeft(_+_)\n\
    \        val map14 = lst.map(x => x map (x => if (x == '4') 1 else 0)) reduceLeft(_+_)\n\
    \        val map15 = lst.map(x => x map (x => if (x == '5') 1 else 0)) reduceLeft(_+_)\n\
    \        val map16 = lst.map(x => x map (x => if (x == '6') 1 else 0)) reduceLeft(_+_)\n\
    \        val map17 = lst.map(x => x map (x => if (x == '7') 1 else 0)) reduceLeft(_+\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt48uar0n.scala:29:83 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mmap17\e[0m = lst.map(\e\
    [36mx\e[0m => x map (\e[36mx\e[0m => \e[33mif\e[0m (x == \e[31m'7'\e[0m) \e[31m1\e\
    [0m \e[33melse\e[0m \e[31m0\e[0m)) reduceLeft(_+\n\e[31m\e[31m   |\e[0m      \
    \                                                                            \
    \ ^\e[0m\n\e[31m   |\e[0m                                       expression expected\
    \ but \e[31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpt48uar0n.scala:13:81 ------------------------\e[0m\e[0m\n\e[31m13 |\e\
    [0m        \e[33mval\e[0m \e[36mmap1\e[0m = lst.map(\e[36mx\e[0m => x map (\e\
    [36mx\e[0m => \e[33mif\e[0m (x == \e[31m'1'\e[0m) \e[31m1\e[0m \e[33melse\e[0m\
    \ \e[31m0\e[0m)) reduceLeft(_+_)\n\e[31m\e[31m   |\e[0m                      \
    \                                                          ^^\e[0m\n\e[31m   |\e\
    [0mvalue + is not a member of IndexedSeq[Int], but could be made available as\
    \ an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports\
    \ might make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpt48uar0n.scala:14:81\
    \ ------------------------\e[0m\e[0m\n\e[31m14 |\e[0m        \e[33mval\e[0m \e\
    [36mmap2\e[0m = lst.map(\e[36mx\e[0m => x map (\e[36mx\e[0m => \e[33mif\e[0m (x\
    \ == \e[31m'2'\e[0m) \e[31m1\e[0m \e[33melse\e[0m \e[31m0\e[0m)) reduceLeft(_+_)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                        ^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of IndexedSeq[Int],\
    \ but could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mOne of the following imports might make progress towards fixing the\
    \ problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFra"
  stdout: ''
  timestamp: 1660008838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  lst.foldLeft(List[String]()){\n            case(listOfEvenElements, str) =>\
    \ {\n                val str = str.replaceAll(\"\"\"\\D\"\"\",\"\")\n        \
    \        val numbers = str.map(_.toInt)\n                val listOfOddElements\
    \ = numbers.map(x => if (x % 2 == 1) 1 else 0)\n                (listOfEvenElements\
    \ ++ listOfOddElements).map( x => x + \" \" +x).toList\n            }\n      \
    \  }\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmp24afjp.scala:15:26 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                \e[33mval\e[0m \e[36mstr\e[0m = str.replaceAll(\e\
    [31m\"\"\"\\D\"\"\"\e[0m,\e[31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m             \
    \             ^\e[0m\n\e[31m   |\e[0m                          Recursive \e[33mvalue\e\
    [0m \e[35mstr\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008832
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds = lst.filter(x => x contains \"1\").count(x => x contains \"1\")\n\
    \        val evens = lst.filter(x => x contains \"0\").count(x => x contains \"\
    0\")\n        List(s\"the number of odd elements $odds the $odds 1nd of the $odds\
    \ 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the\
    \ $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd\
    \ of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds\
    \ 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the\
    \ $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd\
    \ of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds\
    \ 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the\
    \ $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd\
    \ of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds\
    \ 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the\
    \ $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd\
    \ of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds\
    \ 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1nd of the\
    \ $odds 1nd of the $odds 1nd of the $odds 1nd of the $odds 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpj8fu2e90.scala:15:1162 ---------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m        List(\e[31ms\"the number of odd elements \e[0m$odds\e\
    [31m the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e\
    [31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\e[31m 1nd of the \e[0m$odds\
    \ 1\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                                            \
    \                       "
  stdout: ''
  timestamp: 1660008830
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val m = mutable.Map[Int, Int]()\n        var result = []\n        for (el <-\
    \ lst) {\n            val tmp = el.map { x => (x to 1) }\n            for (x <-\
    \ tmp) {\n                m.getOrElse(x, 0)\n            }\n            for ((x,\
    \ y) <- tmp) {\n                m.put(x, y + m.getOrElse(x, 0))\n            }\n\
    \            for ((x, y) <- tmp) {\n                if (m.getOrElse(x, 0) < 2)\
    \ {\n                    result.add(s\"the number of odd elements ${m.getOrElse(x,\
    \ 0)} of the ${x} of the $lst\")\n                }\n            }\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb1lg2kh4.scala:14:22 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m        \e[33mvar\e[0m \e[36mresult\e[0m = []\n\e[31m\e\
    [31m   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                   \
    \   an identifier expected, but ']' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpb1lg2kh4.scala:15:0 ----------------------------\e[0m\e[0m\n\e[31m15\
    \ |\e[0m        \e[33mfor\e[0m (el <- lst) {\n\e[31m\e[31m   |\e[0m^^^\e[0m\n\e\
    [31m   |\e[0m'=>' expected, but 'end of statement' found\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpb1lg2kh4.scala:13:16 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mm\e[0m = mutable.Map[\e[35mInt\e\
    [0m, \e[35mInt\e[0m]()\n\e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpb1lg2kh4.scala:25:27 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                    result.add(\e[31ms\"the number of\
    \ odd elements \e[0m${m.getOrElse(x, \e[31m0\e[0m)}\e[31m of the \e[0m${x}\e[31m\
    \ of the \e[0m$lst\e[31m\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value add is not a member of Null\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660008836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val odds: mutable.Set[String] = mutable.Set()\n        for (i<-lst){\n    \
    \        if (lst.count(_ == i) % 2 != 0){\n                odds.add(i)\n     \
    \       }\n        }\n        odds match{\n            case Nil => Nil\n     \
    \       case _ => lst map (_ replaceAll(\" \", \"\") replaceAll(\"1\", \"n\")\
    \ replaceAll(\"0\", \"o\") replaceAll(\"2\", \"d\") replaceAll(\"3\", \"r\") replaceAll(\"\
    4\", \"k\") replaceAll(\"5\", \"w\") replaceAll(\"6\", \"m\") replaceAll(\"7\"\
    , \"k\") replaceAll(\"8\", \"n\") replaceAll(\"9\", \"l\")) match {\n        \
    \        case Nil => Nil\n                case x => x map {i => oddCount(x.splitAt(lst.count(_\
    \ == i) / 2))}\n            }\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(oddCount((List[String](\"1234567\"))).equals((List[String](\"\
    the number of odd elements 4n the str4ng 4 of the 4nput.\"))));\n    assert(oddCount((List[String](\"\
    3\", \"11111111\"))).equals((List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))));\n    assert(oddCount((List[String](\"271\", \"137\", \"314\"))).equals((List[String](\"\
    the number of odd elements 2n the str2ng 2 of the 2nput.\", \"the number of odd\
    \ elements 3n the str3ng 3 of the 3nput.\", \"the number of odd elements 2n the\
    \ str2ng 2 of the 2nput.\"))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzpyl0moq.scala:13:18 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m: mutable.Set[\e\
    [35mString\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                  ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: mutable\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpzpyl0moq.scala:13:40 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36modds\e[0m: mutable.Set[\e\
    [35mString\e[0m] = mutable.Set()\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \           Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpzpyl0moq.scala:23:56 --------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m                \e[33mcase\e[0m x => x map {i => oddCount(x.splitAt(lst.count(_\
    \ == i) / \e[31m2\e[0m))}\n\e[31m\e[31m   |\e[0m                             \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                              Found:    \e[1m\e[31m(\e[0mList[String\e[1m\e[31m]\e\
    [0m\e[1m\e[31m,\e[0m\e[1m\e[31m \e[0m\e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0m\e[1m\e\
    [31mString\e[0m]\e[1m\e[31m)\e[0m\n\e[31m   |\e[0m                           \
    \       Required: List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660008836
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      \
    \  val evenNum  = evenCount(lst)\n        val oddNum   = oddCount(evenNum)\n \
    \       oddNum ++ evenNum\n    }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp4ixv0iss.scala:13:23 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mval\e[0m \e[36mevenNum\e[0m  = evenCount(lst)\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                     Not found: evenCount\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660008835
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Given a list of strings, where each string consists of only digits,\
    \ return a list.\n    // Each element i of the output should be \"the number of\
    \ odd elements in the\n    // string i of the input.\" where all the i's should\
    \ be replaced by the number\n    // of odd digits in the i'th string of the input.\n\
    \    // >>> oddCount((List[String](\"1234567\")))\n    // (List[String](\"the\
    \ number of odd elements 4n the str4ng 4 of the 4nput.\"))\n    // >>> oddCount((List[String](\"\
    3\", \"11111111\")))\n    // (List[String](\"the number of odd elements 1n the\
    \ str1ng 1 of the 1nput.\", \"the number of odd elements 8n the str8ng 8 of the\
    \ 8nput.\"))\n    def oddCount(lst : List[String]) : List[String] = {\n      var\
    \ count = 0\n      for(i <- lst){\n          if(i % 2 != 0)\n            count\
    \ += 1\n      }\n      lst.map(_.replaceAll(\"\\\\d\",\"\")).map(\"the number\
    \ of odd elements \" + count + \" \" + _ + \" \" + count + \"n\".concat)\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(oddCount((List[String](\"\
    1234567\"))).equals((List[String](\"the number of odd elements 4n the str4ng 4\
    \ of the 4nput.\"))));\n    assert(oddCount((List[String](\"3\", \"11111111\"\
    ))).equals((List[String](\"the number of odd elements 1n the str1ng 1 of the 1nput.\"\
    , \"the number of odd elements 8n the str8ng 8 of the 8nput.\"))));\n    assert(oddCount((List[String](\"\
    271\", \"137\", \"314\"))).equals((List[String](\"the number of odd elements 2n\
    \ the str2ng 2 of the 2nput.\", \"the number of odd elements 3n the str3ng 3 of\
    \ the 3nput.\", \"the number of odd elements 2n the str2ng 2 of the 2nput.\"))));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4ddnoox4.scala:15:15 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m          \e[33mif\e[0m(i % \e[31m2\e[0m != \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m             ^^^\e[0m\n\e[31m   |\e[0mvalue % is not\
    \ a member of String, but could be made available as an extension method.\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mThe following import might make progress towards\
    \ fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1660008837
