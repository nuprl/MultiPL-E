name: HumanEval_13_greatest_common_divisor
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Return a greatest common divisor of two integers a and b\n    // >>> greatestCommonDivisor((3l),\
  \ (5l))\n    // (1l)\n    // >>> greatestCommonDivisor((25l), (15l))\n    // (5l)\n\
  \    def greatestCommonDivisor(a : Long, b : Long) : Long = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(greatestCommonDivisor((3l),\
  \ (7l)) == (1l));\n    assert(greatestCommonDivisor((10l), (15l)) == (5l));\n  \
  \  assert(greatestCommonDivisor((49l), (14l)) == (7l));\n    assert(greatestCommonDivisor((144l),\
  \ (60l)) == (12l));\n    }\n\n}\n"
completions: ["        val n = a / b\n        val r = a % b\n        if (a > 0) greatestCommonDivisor(b,\
    \ r)\n        else n", "        if (b == 0)\n            a else greatestCommonDivisor(b,\
    \ a % b)", "        while (a > 0) {\n            val r = b % a\n            b\
    \ /= a\n            a = r\n        }\n        return b", "      val bigA = BigInt(a)\n\
    \      val bigB = BigInt(b)\n      val bigGCD = BigInt(0)\n      while(bigB !=\
    \ 0) {\n        val remain = bigA % bigB\n        bigGCD = (bigGCD * bigB) + remain\n\
    \        bigA = remain\n        bigB = BigInt(0)\n      }\n      bigGCD", "  \
    \      val div = b / a\n        val rem = (b - a * div) % div\n        div + rem",
  "        if (a == 0) a\n        else if (b == 0) b\n        else greatestCommonDivisor(b,\
    \ a % b)", "        if(b == 0) {\n            return a\n        }\n        else\
    \ {\n            // Find the least common multiple of a and b using Euclid's algorithm\n\
    \            // >>> greatestCommonDivisor((3l), (5l))\n            // 3\n    \
    \        // >>> greatestCommonDivisor((25l), (15l))\n            // 5\n      \
    \      // >>> greatestCommonDivisor((3l), (25l))\n            // 5\n         \
    \   // >>> greatestCommonDivisor((3l), (15l))\n            // 5\n            //\
    \ >>> greatestCommonDivisor((3l), (5l))\n            // 3\n            def gcd(a\
    \ : Long, b : Long) : Long = if (b == 0) a else gcd(b, a % b)\n            val\
    \ gcd = gcd(a, b)\n            gcd * (gcd / b + 1)\n        }", "        var commonDivisor\
    \ = 0\n        var remainderA = 0\n        var remainderB = 0\n        // a is\
    \ greater than b\n        if(b > 0) {\n            // We are dividing a by b.\
    \ \n            while(a > 0) {\n                // If remainder from dividing\
    \ a by b is not 0 we are done\n                if(remainderB != 0) {\n       \
    \             commonDivisor = commonDivisor * 10 + remainderB\n              \
    \      remainderA = 0\n                    remainderB = 0\n                }\n\
    \                a = a / b\n                remainderA = a % b\n             \
    \   remainderB = (remainderA * remainderB) % b\n            }\n        } else\
    \ {\n            // b is greater than a\n            while(a > 0) {\n        \
    \        if(b != 0) {\n                    commonDivisor = commonDivisor * 10\
    \ + remainderA\n                    remainderA = 0\n                    remainderB\
    \ = 0\n                }\n                b = b / a\n                remainderA\
    \ = a % a\n                remainderB = (remainderA * remainderB) % a\n      \
    \      }\n        }\n        commonDivisor", "        val lcm = math.lcm (a, b)\n\
    \        if (lcm == 0)\n            a\n        else\n            lcm", "     \
    \   val a1 = a.abs % b\n        val a2 = a1.abs % b\n        val a3 = a2.abs %\
    \ b\n        val a4 = a3.abs % b\n        val a5 = a4.abs % b\n        val a6\
    \ = a5.abs % b\n        val a7 = a6.abs % b\n        val a8 = a7.abs % b\n   \
    \     val a9 = a8.abs % b\n        val a10 = a9.abs % b\n        val a11 = a10.abs\
    \ % b\n        val a12 = a11.abs % b\n        val a13 = a12.abs % b\n        val\
    \ a14 = a13.abs % b\n        val a15 = a14.abs % b\n        val a16 = a15.abs\
    \ % b\n        val a17 = a16.abs % b\n        val a18 = a17.abs % b\n        val\
    \ a19 = a18.abs % b\n        val a20 = a19.abs % b\n        val a21 = a20.abs\
    \ % b\n        val a22 = a21.abs % b\n        val a23 = a22.abs % b\n        val\
    \ a24 = a23.abs % b\n        val a25 = a24.abs % b\n        val a26 = a25.abs\
    \ % b\n        val a27 = a26.abs % b\n        val a28 = a27.abs % b\n        val\
    \ a29 = a28.abs % b\n        val a30 = a29.abs % b\n        val a31 = a30.abs\
    \ % b\n        val a32 = a31.abs % b\n        val a33 = a32.abs % b\n        val\
    \ a34 = a33.abs % b\n        val a35 = a34.abs % b\n        val a36 = a35.abs\
    \ % b\n        val a37 = a36.abs % b\n        val a38 = a37.abs % b\n        val\
    \ a39 = a38.abs % b\n        val a40 = a39.abs % b\n        val a41 = a40.abs\
    \ % b\n        val a42 = a41.abs % b\n        val a43 = a42.abs % b\n        val\
    \ a44 = a43.abs % b\n        val a45 = a44.abs % b\n        val a46 = a45.abs\
    \ % b\n        val a47 = a46.abs ", "        if (a == 0 || b == 0) a\n       \
    \ else greatestCommonDivisor(a / 2, b / 2) * (a % 2 + b % 2)", "        var i\
    \ = a\n        var j = b\n        var gcd = 1\n        while (i > 0 && j > 0)\
    \ {\n            if (i % j == 0) {\n                gcd = j\n            }\n \
    \           i /= j\n            j /= gcd\n        }\n        gcd", "        val\
    \ gcd = math.gcd(a, b)\n        (a / gcd) % b", "        if (a == 0 || b == 0)\n\
    \            0\n        else\n            greatestCommonDivisor(b, a % b)", '        //
    write your solution here', "        if (a < 0 || b < 0) {\n            throw new\
    \ ArithmeticException(\"Negative inputs not allowed\")\n        }\n        var\
    \ gcd = a\n        for (c <- b until 0) {\n            if ((c % gcd) == 0) {\n\
    \                gcd = c\n            }\n        }\n        gcd", "        //\
    \ Only compare with divisors that are not equal to zero\n        if (a != 0 &&\
    \ b != 0) {\n            val m = math.max(a, b)\n            val n = math.min(a,\
    \ b)\n            greatestCommonDivisor(m - n, n)\n        } else {\n        \
    \    0\n        }", "        val l = a.toLong\n        val r = b.toLong\n    \
    \    while (r > 0) {\n            val t = r\n            r = l % r\n         \
    \   l = t\n        }\n        l", "        if (a % b == 0)\n            return\
    \ b\n        else\n            return greatestCommonDivisor(b, a % b)", "    \
    \    val d = math.min(a, b)\n        val gcd = math.gcd(d, math.abs(a-b))\n  \
    \      gcd match {\n            case 0 => d\n            case _ => gcd\n     \
    \   }", "        if(a == 0 || b == 0) 0\n        else if (a > b) greatestCommonDivisor(b,\
    \ a - b) \n        else greatestCommonDivisor(a % b, b)", "      val a = a % b\n\
    \      val r = new Array[Long](b)\n      r.init\n      var i = 0\n      while\
    \ (a != 0) {\n        r(i) = a\n        a = b\n        a := (a % b)\n        i\
    \ += 1\n      }\n      r.last", "        var d = 0l\n        for( i <- 1 to a.toInt)\
    \ {\n            for( j <- 1 to b.toInt) {\n                if( (i % a.toInt ==\
    \ 0) && (j % b.toInt == 0)) {\n                    d += 1\n                }\n\
    \            }\n        }\n        d / a.toInt", "        def gcd(a : Long, b\
    \ : Long) : Long = {\n            def lcm(a: Long, b: Long): Long = { \n     \
    \           if(b == 0) a else lcm(b, a % b)\n            }\n            if(b ==\
    \ 0) a else gcd(b, a % b)\n        }\n        gcd(a, b) ", "        var c : Long\
    \ = 1l\n        var d : Long = b\n        while (a != 0l && b != 0l) {\n     \
    \       if (a > b) c <- c * (a % b)\n            else d <- d * (b % a)\n     \
    \       a <- a / b\n            b <- b / a\n        }\n        if (c > d) c\n\
    \        else d", "        val r = a.toLong / b.toLong\n        return if (r ==\
    \ 0) a else r", "        val an = a.toInt;\n        val bn = b.toInt;\n      \
    \  while (an != 0) {\n            if (bn % an == 0) return an\n            an\
    \ -= 1\n        }\n        return bn", "        if(a%b==0) a\n        else if(a/b==0)\
    \ b\n        else greatestCommonDivisor(b,a/b)", "        if (a < 0 || b < 0)\
    \ {\n            throw new Exception(\"At least one argument must be positive.\"\
    )\n        }\n        if ((a == 0) && (b == 0)) {\n            return 1l\n   \
    \     } else {\n            val r = if (b > 0) {\n                val remainder\
    \ = a % b\n                if (remainder < b / 2) b else b - remainder\n     \
    \       } else a\n            if (r > 0) r else 1l\n        }", "        val rem\
    \ = a % b\n        val quot = b\n        while (rem != 0) {\n            quot\
    \ = quot % rem\n            rem = rem / quot // remember to revert this operation\n\
    \        }\n        quot", "        if(a==0||b==0) 1\n        else greatestCommonDivisor(b,\
    \ a mod b)", "        if (b == 0)\n            return a\n        else\n      \
    \      return greatestCommonDivisor(b, (a%b))", "        val m = (b % a).toLong\n\
    \        if (m == 0) {\n            return a\n        }\n        return greatestCommonDivisor(a,\
    \ b - 1)", "        val c = a / b\n        val d = a % b\n        if (d == 0)\
    \ c else greatestCommonDivisor(b,d)", "        if (b == 0) a\n        else {\n\
    \            val rem = a % b\n            greatestCommonDivisor(b, rem)\n    \
    \    }", "        val a = a / 2\n        val b = b / 2\n        val div: Long\
    \ = a * b\n\n        if (div == 0)\n            1\n        else {\n          \
    \  if (a > b)\n                greatestCommonDivisor(b, a)\n            else greatestCommonDivisor(a,\
    \ a)\n        }", "        val r = math.min(math.max(a, b), Long.MaxValue)\n \
    \       for (i<- r until 1l by -1) yield (i % b).abs", "        if (b == 0) a\n\
    \        else greatestCommonDivisor(b, a % b)", "        val q = a/b\n       \
    \ val r = a % b\n        while (r > 0) {\n            a -= 1\n            b +=\
    \ 1\n            val q = a/b\n            val r = a % b\n        }\n        q",
  "        if((b == 0l) && (a == 0l)) 1l\n        else if(b == 0l) a\n        else\
    \ greatestCommonDivisor(b, a % b)", "        val c = math.gcd(a, b).toLong\n \
    \       if (c < 1L) 1 else c", "        // Create a mutable set \n        var\
    \ setA = scala.collection.mutable.Set.empty[Long]\n        var setB = scala.collection.mutable.Set.empty[Long]\n\
    \n        // Add the elements of the input to the set\n        // >>> setA = (3l,\
    \ 3l)\n        // >>> setB = (5l, 5l)\n        setA += a\n        setB += b\n\n\
    \        // Set a while b is not empty\n        // >>> setA = (3l, 3l)\n     \
    \   // >>> setB = (5l, 5l)\n        while(b ne 0) {\n            // Set b a while\
    \ a is non-zero\n            // >>> setA = ()\n            // >>> setB = (5l,\
    \ 5l)\n            while( a ne 0 ) {\n                // Return the first element\
    \ that is in both sets\n                // >>> setA = (3l)\n                //\
    \ >>> setB = (5l)\n                if(setA.contains(b) && setB.contains(a)) {\n\
    \                    return b\n                }\n                // Set a to\
    \ the next value\n                // >>> setA = (4l, 4l)\n                // >>>\
    \ setB = (5l, 5l)\n                a -= 1\n            }\n            // Set b\
    \ to the previous value\n            // >>> setA = (5l, 5l)\n            // >>>\
    \ setB = (4l, 4l)\n            b += 1\n        }\n        // Return zero if the\
    \ inputs are equal\n        // >>> setA = (3l, 3l)\n        // >>> setB = (5l,\
    \ 5l)\n        return 0l", "        val r = a % b\n        \n        if(r == 0)\
    \ a else greatestCommonDivisor(b, r)", "        var remainder : Long = 1\n   \
    \     var a : Long = a\n        var b : Long = b\n        // Check if b is even\n\
    \        if (b % 2 == 1) {\n            b += 1\n        }\n        while (b >\
    \ 0) {\n            remainder = b % a\n            if (remainder == 0) {\n   \
    \             return a\n            } else {\n                a = a\n        \
    \        b = remainder\n            }\n        }\n        return a", "       \
    \ if (a == 0 || b == 0) 1\n        else if (b == 0) a\n        else {\n      \
    \      val q = a / b\n            if (q == 0) a\n            else greatestCommonDivisor(b,\
    \ q) * q\n        }", "        def gcd(a : Long, b : Long) : Long = if (b == 0)\
    \ a else gcd(b, a % b)\n        gcd(a, b) / a", "        if (b == 0)\n       \
    \     return a\n        else\n            return greatestCommonDivisor(b, a %\
    \ b)", "      if (b == 0) a\n      else greatestCommonDivisor(b, a % b)", "  \
    \      if (a < b) {\n            val tmp = a % b\n            greatestCommonDivisor(b,\
    \ tmp)\n        } else {\n            val tmp = b % a\n            greatestCommonDivisor(tmp,\
    \ a)\n        }", "        var gcd = 1\n        while (b > 0) {\n            if\
    \ (b % a == 0) {\n                gcd = a\n            }\n            a = a *\
    \ b\n            b = b // b\n        }\n        gcd", "        val aMod = a %\
    \ b\n        if (0 == aMod) a\n        else if (b == a) 1\n        else (a + b)\
    \ % b", "        // Implement this function.\n        // Don't forget to check\
    \ edge cases.\n        if(b == 0) a\n        else greatestCommonDivisor(b, a %\
    \ b)", "        assert(b > 0)\n        assert(a > 0)\n        val x = a.toLong\n\
    \        val y = b.toLong\n        while (b > 0) {\n            val temp = x %\
    \ b\n            x = b\n            b = temp\n        }\n        return x", " \
    \       val max = a.max(b)\n        val min = a.min(b)\n        val maxDiv = max.quot(min)\n\
    \        return max.quot(maxDiv)", "        val gcd = (a, b) match {\n       \
    \     case (x @ Nil , y @ Nil) => throw new ArithmeticException\n            case\
    \ (xs , Nil) => y match {\n                case (x @ Nil , y @ Nil) => x\n   \
    \             case (xs , Nil) => throw new ArithmeticException\n             \
    \   case (xs , ys ) => greatestCommonDivisor(xs , y )\n            }\n       \
    \     case (x :: xs , y :: ys ) => greatestCommonDivisor(xs , ys)\n        }\n\
    \        gcd.abs", "        if (a == 0) b\n        else if (b == 0) a\n      \
    \  else {\n            val gcd = math.gcd(a, b)\n            greatestCommonDivisor(a/gcd,\
    \ b/gcd) \n        }", "        val remainder = a % b\n        if (remainder ==\
    \ 0) {\n            a\n        } else {\n            greatestCommonDivisor(b,\
    \ remainder)\n        }", "        if (a == 0) b\n        else if (b == 0) a\n\
    \        else if (a == b) a\n        else if (a%b == 0) greatestCommonDivisor(b,a%b)\n\
    \        else {\n            var c : Long = a;\n            while(c != 0) {\n\
    \                if (c%b != 0) c = b\n                else {\n               \
    \     c = b\n                    b = a%b\n                }\n            }\n \
    \           c\n        }", "        if (a == 0 || b == 0) {\n            0\n \
    \       } else {\n            val gcd: Int = greatestCommonDivisor(b, a % b)\n\
    \            a / gcd + (if (a % gcd == 0) 0 else 1)\n        }", "        // The\
    \ algorithm implemented here is described in:\n        // http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \        val l = (a >>> 0).toLong\n        val r = (b >>> 0).toLong\n        val\
    \ m = (r >>> 0).toLong\n        var remainder = a % m\n        // The value returned\
    \ here is a least common multiple of the divisors,\n        // which is equal\
    \ to (a / gcd(a, b))\n        if (remainder == 0) {\n            remainder = b\
    \ % m\n        }\n        while (remainder != 0) {\n            if (l > r) {\n\
    \                l %= r\n            } else {\n                r %= l\n      \
    \      }\n            remainder = r % m\n        }\n        l", "        def gcd(a\
    \ : Long, b : Long) : Long = {\n            val minA = a\n            val minB\
    \ = b\n            var ans = 1l\n            while (minA != 0 && minB != 0) {\n\
    \                val t = minA\n                minA = minB\n                minB\
    \ = t\n                ans = ans % minA\n            }\n            ans % minB\n\
    \        }\n        if (b == 0) a\n        else if (a == 0) b\n        else gcd(a,\
    \ b) ", "        // Use a Set to keep track of which numbers we've already checked\n\
    \        val commonDivisors = Set(a.toInt)\n        def loop(i: Int, j: Int, r:\
    \ Long): Int = {\n            if (i > j)\n                r\n            else\
    \ if (i >= j)\n                loop(i + 1, j, r)\n            else {\n       \
    \         if (commonDivisors.contains(i.toInt)) {\n                    loop(i\
    \ + 1, j, r)\n                } else {\n                    commonDivisors +=\
    \ i.toInt\n                    loop(i + 1, j, r)\n                }\n        \
    \    }\n        }\n        loop(0, 0, a.toInt)", "        if(b < a) greatestCommonDivisor(b,\
    \ a)\n        else {\n            val gcd: Long = greatestCommonDivisor(b, a -\
    \ 1)\n            if(b % gcd == 0) gcd else a\n        }", "        if (b == 0)\n\
    \            return a\n        greatestCommonDivisor(b, a % b)", "        val\
    \ gcd = (b % a).min(a % b)\n        if (gcd == 0) gcd else greatestCommonDivisor(a,\
    \ b % gcd)", "        var gcd = 1\n        var i = 1;\n        while (a!=0 &&\
    \ b!=0) {\n            if (a > b) {\n                a = a / b\n             \
    \   gcd = gcd * i\n            }\n            i = i + 1\n        }\n        return\
    \ gcd", "        val m = math.min(a / b, b / a)\n        if (m == 0l) a else b",
  "        var c = a\n        while (b != 0) {\n            if (b % a == 0) {\n  \
    \              c = b\n            }\n            b /= a\n        }\n        c",
  "        if (a == 0) b\n        else {\n            val x = a / b\n            greatestCommonDivisor(b,\
    \ x)\n        }", '        if(a%b==0) a else greatestCommonDivisor(b,a%b)', " \
    \       var gcd : Long = 1\n        while (b > 0) {\n            val t = b\n \
    \           b = a % b\n            a = t\n        }\n        return gcd", "  \
    \      // Return gcd(a, b)\n        // >>> greatestCommonDivisor((3l), (5l))\n\
    \        // 3\n        // >>> greatestCommonDivisor((25l), (15l))\n        //\
    \ 5\n        def gcd(a : Long, b : Long) : Long = {\n            while (a != 0){\n\
    \                val t = b % a\n                b <- a\n                a <- t\n\
    \            }\n            b\n        }\n        // Return the greatest common\
    \ divisor of a and b\n        // >>> gcd(3l, 5l)\n        // 3\n        // >>>\
    \ gcd(25l, 15l)\n        // 5\n        gcd(a, b).abs", "        val q = a / b\n\
    \        if(a % b == 0) q\n        else greatestCommonDivisor(b, q)", "      \
    \  val r : Long = a % b\n        r > 0 ? a : b", "        // Set up the set for\
    \ iteration\n        val setA : mutable.Set[Long] = new mutable.HashSet(a)\n \
    \       val setB : mutable.Set[Long] = new mutable.HashSet(b)\n        // Do the\
    \ work\n        while(setA.isEmpty || setB.isEmpty) {\n            val max = (setA\
    \ contains maxB) ? maxB : (setB contains maxA) ? maxA : (setA.size + setB.size)\n\
    \            setA -= max\n            setB -= max\n        }\n        // Return\
    \ the greatest common divisor\n        (setA.size + setB.size)", "        val\
    \ aBig = a.toBigInt\n        val bBig = b.toBigInt\n        if (a == 0 || b ==\
    \ 0) {\n            return 0\n        }\n        var i = a.toBigInt / bBig.toBigInt\n\
    \        var j = b.toBigInt / aBig.toBigInt\n        val tmp = aBig / bBig\n \
    \       while (i != 0) {\n            if (i == j) { \n                return a.toBigInt\
    \ % bBig.toBigInt\n            }\n            i = i / 2\n            j = j / 2\n\
    \        }\n        return a.toBigInt % bBig.toBigInt", "        val gcdResult\
    \ = (2l) match {\n            case 0 => a\n            case x if x < a => x\n\
    \            case x if x == a => a\n            case x if x < b => x\n       \
    \     case x if x == b => b\n            case x => gcd(b, x % b)\n        }\n\
    \        gcdResult", "        val aMod = b%a\n        val aDivs = (b-a)/aMod\n\
    \        if(aDivs > 0) aDivs else 1l", "        val gcd1 = {\n            def\
    \ gcd1(a: Long, b: Long): Long = {\n                if (b == 0)\n            \
    \        a\n                else\n                    gcd1(b, a mod b)\n     \
    \       }\n            gcd1(a, b)\n        }\n        val gcd2 = {\n         \
    \   def gcd2(a: Long, b: Long): Long = {\n                if (b == 0)\n      \
    \              a\n                else if (a == 0)\n                    b\n  \
    \              else\n                    gcd2(b, a mod b)\n            }\n   \
    \         gcd2(a, b)\n        }\n        gcd1 min gcd2", "        val num = new\
    \ mutable.HashMap[Long, Long]()\n        var gcd : Long = 1\n        var i = 1\n\
    \        while (i <= b) {\n            val num = (a / gcd)\n            gcd =\
    \ (b % gcd)\n            i = i + 1\n        }\n        return gcd", "        if\
    \ (a == 0 || b == 0)\n            return a\n        if (a > b)\n            return\
    \ greatestCommonDivisor(b, a)\n        var d = 1\n        while (b > 0) {\n  \
    \          d = (b & a) != 0 ? d : a\n            a = b // Reminder from division\
    \ step\n            b = a >>> 1\n        }\n        return d", "        val div\
    \ = a / b\n        while(a % div == 0) {\n            a /= div\n        }\n  \
    \      a // return the greatest common divisor", "        val max = (math.abs(a)\
    \ > math.abs(b)) match {\n            case true => math.abs(a)\n            case\
    \ false => math.abs(b)\n        }\n        if (a == 0 || b == 0 || max == 0) max\n\
    \        else if (a < 0) max\n        else if (b < 0) max\n        else max /\
    \ greatestCommonDivisor(b, a % max)", "        val div = a.toDivMod(b)\n     \
    \   if (div._2 == 0)\n            div._1\n        else\n            greatestCommonDivisor(div._1,\
    \ div._2)", "        val aDiv = a.toInt / b\n        val bDiv = a.toInt % b\n\
    \        if (aDiv * bDiv == 0) bDiv else (aDiv * greatestCommonDivisor(bDiv, b))",
  "        assert(a >= 0 && b > 0, \"greatestCommonDivisor(a,b)\")\n        var gcd\
    \ = 1\n        while (a != 0) {\n            if (a > b) {\n                a -=\
    \ b\n                gcd = b\n            }\n            else {\n            \
    \    b %= a\n                gcd = a\n            }\n        }\n        gcd(0)",
  "        if (a>b)\n            greatestCommonDivisor(b, a)\n        else\n     \
    \       a", "        // Get GCD\n        // If b is 0, return a\n        if (b\
    \ == 0) a\n        else {\n            // Loop until a * b <= 0\n            while\
    \ (a % b != 0) {\n                a += 1\n            }\n            // Return\
    \ a\n            a\n        }", "        if (a < 0 || b < 0)\n            throw\
    \ new IllegalArgumentException\n        val s = Set(a, b).toSet\n        val d\
    \ = 0\n        for (x <- s)\n            d += x % b\n        d % b", "       \
    \ if (a == 0 || b == 0)\n            return 0\n        else\n            math.gcd(a,\
    \ b);", "      val i = a / b\n      val j = b / a\n      (a / j) * j", "     \
    \   // Use a mutable set to prevent duplicate computations\n        val set =\
    \ new mutable.HashSet[Long]\n        for (i <- a to b)\n            if (set.contains(i))\n\
    \                i = b\n            else { set.add(i) ; i }", "        while (a\
    \ != 0l && b != 0l) {\n            if (a % b == 0)\n                a = a / b\n\
    \            else\n                b = b / a\n        }\n        if (a != 0l)\n\
    \            a\n        else\n            b", "        val lcm = a.multiply(b).lcm(a.add(b).minus(a))\n\
    \        lcm.divide(a)", "        if(a==0 && b==0)\n            return 0\n   \
    \     if(a==0)\n            return b\n        if(b==0)\n            return a\n\
    \        if(a>b && a%b==0)\n            return a\n        if(a>b && b%a==0)\n\
    \            return b\n        if(a%b==0)\n            return greatestCommonDivisor(b,a%b)",
  '        if ((a == 0) && (b == 0)) 1 else a / greatestCommonDivisor(b, a % b)',
  "        var res = a / b\n        while(a % b != 0) a /= b\n        a", "      if(a.equals(b))\
    \ {\n          1\n      }\n      else {\n          val x = a.toInt\n         \
    \ val y = b.toInt\n          val max = math.max(x, y)\n          val min = math.min(x,\
    \ y)\n          val gcd = max / (min - max)\n          gcd\n      }\n  }\n}\n\
    </code>\n<|/ a |>\n<| a dscore=1 tags=scala-collections,scala,arrays |>\nThe following\
    \ works when applied to large arrays of integers. It uses binary search to find\
    \ the greatest common divisor of integers a and b and then checks which of these\
    \ two numbers is the greatest common divisor of all the numbers in the array.\
    \ The binary search method was adapted from here and here\n<code>\ndef greatestCommonDivisor(a:Array[Int],\
    \ b:Array[Int]): Long = {\n  val max = a.maxBy(_).orElse(b.maxBy(_))\n  val min\
    \ = a.minBy(_).orElse(b.minBy(_))\n  val gcd = max / min\n  val arr: Array[Int]\
    \ = a.toArray ++ b.toArray\n  arr.sortWith((a,b) => (a-b).abs<=0 ? true : false)\n\
    \  val n = arr.length\n  val lo = Array.fill(n-1){0l}\n  val hi = Array.fill(n-1){0l}\n\
    \  lo(0) = 1l\n  hi(n-1) = 1l\n  lo(0) = 1l\n  var i = 1\n  while(i <= n) {\n\
    \    val mid = i/2\n    if(arr[mid].mod(gcd) == 0) {\n      lo(mid) = 1l\n   \
    \ } else {\n      hi(mid) = 1l", "        if (a==0 || b==0) \n            0\n\
    \        else if (a < b)\n            greatestCommonDivisor(b, a)\n        else\n\
    \            greatestCommonDivisor(a, (b-1))", "        if (a < 0 || b < 0) {\n\
    \            throw new IllegalArgumentException(\"Negative numbers are not allowed\"\
    )\n        } else if (b == 0) {\n            return a\n        } else if (a >\
    \ b) {\n            greatestCommonDivisor(b, a)\n        } else {\n          \
    \  val q = a / b\n            greatestCommonDivisor(a, q)\n        }", "     \
    \   val maxDivisor = a / b\n        val minDivisor = a % b\n        if (minDivisor\
    \ == 0) maxDivisor else greatestCommonDivisor(maxDivisor, b)", "        val tempA\
    \ = a\n        var tempB = b\n        while (tempB > 0) {\n            val remainder\
    \ = tempB mod tempA\n            tempA -= remainder\n            tempB -= remainder\n\
    \        }\n        tempA", "        var r = a\n        var x = 1\n        while\
    \ (a >= 0 || b >= 0) {\n            r = (r * b) / x\n            x = (x + 1) %\
    \ 1000000000\n        }\n        if (r > 0) r - 1\n        else 0", "        val\
    \ minDivisor = math.min(math.max(a, b), a * b) /\n                           \
    \ (math.max(a, b) * math.min(a, b))\n        val newA = a / minDivisor\n     \
    \   val newB = b / minDivisor\n        minDivisor / math.gcd(newA, newB)", " \
    \       val lcm = Math.lcm(a, b);\n        if (lcm == 0 || lcm == a) {\n     \
    \       lcm\n        } else {\n            lcm/a\n        }", '        // Write
    your code here', "        var max = 0\n        var gcd = 1\n        while (b !=\
    \ 0) {\n            if (a % b == 0) {\n                gcd = b\n             \
    \   max = a\n            }\n            a = (a/b).floor.toLong\n            b\
    \ = (b/gcd).floor.toLong\n        }\n        gcd", "        if( b == 0 )\n   \
    \         a\n        else\n            greatestCommonDivisor(b, a div b)", " \
    \       val maxValue = math.max(math.abs(a), math.abs(b))\n        if (maxValue\
    \ == 0) {\n            return a\n        }\n        val gcd = if (a > 0 && b <\
    \ 0) b else a\n        val x = math.max(math.abs(a), math.abs(b))\n        while\
    \ (x != maxValue) {\n            if (x % gcd == 0) {\n                return x\n\
    \            }\n            gcd -= 1\n        }\n        return a", "      if\
    \ (b == 0) 1\n      else if (b == 1) a\n      else if (a < 0 && b < 0) 1\n   \
    \   else if (a < 0 && b > 0) a\n      else if (a > 0 && b > 0) greatestCommonDivisor(b,\
    \ a%b)\n      else greatestCommonDivisor(b, a%(b+1))", "        val bigA = BigInt(a)\n\
    \        val bigB = BigInt(b)\n        var gcd = 1l\n        var m = bigA\n  \
    \      while(m != 0) {\n            m = bigA % bigB\n            gcd = if (m >\
    \ 0) gcd + 1l else gcd\n            bigA = (bigA - m) / bigB\n        }\n    \
    \    gcd", "        if ((a < 0) && (b < 0)) -1\n        else if ((a < 0) && (b\
    \ > 0)) 0\n        else if ((a > 0) && (b < 0)) 1\n        else { val div = (a\
    \ % b); return div * greatestCommonDivisor(b, a - div) }", "        if (a == 0\
    \ || b == 0)\n            return 0\n        var c = a\n        var d = b\n   \
    \     var x = 1l\n        do {\n            if (c%d == 0)\n                break\n\
    \            x += 1\n            c /= d\n            d *= x\n        } while (true)\n\
    \        return x", "      if (b == 0)\n          return a\n      else if (a ==\
    \ 0)\n          return b\n      else {\n          val gcd = greatestCommonDivisor(b,\
    \ a % b)\n          greatestCommonDivisor(a/gcd, a)\n      }", "        val x\
    \ = a.toLong / b\n        val y = b.toLong / a\n        while(y > 0) {\n     \
    \       val tmp = x\n            x = y\n            y = tmp\n        }\n     \
    \   x", "        val l = a.toLong;\n        val r = b.toLong;\n\n        val a\
    \ = a.toInt;\n        val b = b.toInt;\n\n        var remainder = b\n        var\
    \ gcd : Long = 1\n\n        while (a > 0) {\n            var remainder = a % b\n\
    \            if (remainder != 0) {\n                remainder = a\n          \
    \      gcd = b\n            }\n            a = remainder\n        }\n\n      \
    \  gcd.toLong", "        var n = a / b\n        while(a % b != 0) {\n        \
    \    a /= b\n            n += 1\n        }\n        n", "        if (a == 0) 1\n\
    \        else if (b == 0) 1\n        else greatestCommonDivisor(a / b, b)", " \
    \       var max = 0\n        var maxdiv = a\n        var min = a\n        var\
    \ mindiv = a\n        while (mindiv > 0) {\n            var tmp = maxdiv\n   \
    \         maxdiv = max\n            max = min\n            min = tmp\n       \
    \     mindiv = mindiv div b\n        }\n        return max", "        // Find\
    \ largest common divisor\n        // Find GCD of a and b\n        // Divide b\
    \ by GCD\n        // Return GCD\n        val gcd = if (b > 0) \n            gcd\
    \ else a % b\n        val rem = a / b\n        if (gcd == 0) {\n            gcd\
    \ -> rem\n        }\n        else {\n            gcd -> gcd % rem -> greatestCommonDivisor(rem,\
    \ gcd)\n        }", "        var result = 1\n        var gcd = 1\n        while\
    \ (gcd <= a && gcd <= b) {\n            if (a % gcd == 0 && b % gcd == 0) {\n\
    \                result = gcd\n            }\n            gcd = gcd+1\n      \
    \  }\n        return result", "        if (b == 0) 1\n        else {\n       \
    \     val gcd = greatestCommonDivisor(b, (a/b).floor)\n            if (a % gcd\
    \ == 0) {\n                gcd\n            } else {\n                gcd(a)\n\
    \            }\n        }", "        if (a < 0 || b < 0) {\n            throw\
    \ new IllegalArgumentException(\"Both numbers must be positive\")\n        }\n\
    \        val gcd = if (b == 0) a else greatestCommonDivisor(b, a % b)\n      \
    \  if (gcd == 0) gcd else a + gcd", "        val q = a / b\n        a -= q * b\n\
    \        if (a<0) a else b", "        if(a == 0 || b == 0) \n            1l\n\
    \        else\n            (a / greatestCommonDivisor(b % a, b))", "        val\
    \ r1 = a / b\n        val r2 = b / r1\n        if (r2 == 0) r1 else r2", "   \
    \     // If both a & b are 0, return 0\n        if(a==0 && b==0) return 0\n  \
    \      // If both a & b are 1, return 1\n        if(a==1 && b==1) return 1\n \
    \       val min = a\n        val max = b\n        var minDivisor = 1\n       \
    \ var maxDivisor = 1\n        while(minDivisor <= maxDivisor) {\n            val\
    \ nextMax = max / minDivisor\n            if(min % minDivisor == 0) {\n      \
    \          max = nextMax\n            }\n            else {\n                min\
    \ = nextMax\n            }\n            maxDivisor += 1\n        }\n        return\
    \ max", "        val a = a.toInt;\n        val b = b.toInt;\n        if ((a >\
    \ 0) ^ (b > 0)) 0l\n        else (b div a) l", "        var gcd : Long = 1\n \
    \       var a : Long = a\n        var b : Long = b\n\n        while (a != 0) {\n\
    \            val q = a / b\n            a = a % b\n            b = q\n       \
    \     gcd = q + gcd\n        }\n        gcd", "        while (!a.isDivModN(b)(a))\
    \ {\n            a -= 1\n        }\n        while (!b.isDivModN(a)(b)) {\n   \
    \         b -= 1\n        }\n        a.quotDiv(b)", "        while(a != 0) {\n\
    \            val remainder = a % b\n            a = b\n            b = remainder\n\
    \        }\n        b", "        if ((a < 0) && (b < 0)) \n            return\
    \ -1\n        if ((b < 0) && (a < 0)) \n            return -1\n        if ((b\
    \ == 0) && (a == 0)) \n            return 0\n        if ((a == 0) && (b == 0))\
    \ \n            return 1\n        \n        val div = a / b\n        var i = 1\n\
    \        while (i <= div) {\n            val temp = i\n            i = i + b\n\
    \            a = temp\n        }\n        \n        i", '        if(a%b==0) a
    else greatestCommonDivisor(b,a%b)', "        val x = a.toInt\n        val y =\
    \ b.toInt\n        if (x == 0) y\n        else greatestCommonDivisor(x - 1, y)\
    \ % (x + y)", "        // Iterate over all the factors of a\n        for(x <-\
    \ 1 to a) {\n            // If the divisor of both numbers is greater than b\n\
    \            if(a % x == 0 && a/x != b)\n                // Break the loop since\
    \ a divides both of them \n                break\n        }\n        // The GCD\
    \ of both the numbers is that factor\n        a/x", "        val n = a / b\n \
    \       if (n < 1) {\n            return b\n        } else {\n            greatestCommonDivisor(b,\
    \ a%b)\n        }", "        var result = 1L\n        while(b > 0) {\n       \
    \     val t = a\n            a = b % a\n            b = t\n        }\n       \
    \ result", "        if( a == 0 || b == 0 ) 1\n        else greatestCommonDivisor(\
    \ b%a, a%b)", "        if ((b / a) != 0) {\n            greatestCommonDivisor(b,\
    \ a % b)\n        } else {\n            a\n        }", "        var d : Long =\
    \ 1\n        // loop while divisor is less than or equal to b\n        while (d\
    \ < b)\n        {\n            // if the divisor is less than or equal to a\n\
    \            if (a % d == 0)\n            {\n                // increment divisor\
    \ by the remainder of dividing a by d\n                d += b % d\n          \
    \  }\n            else\n            {\n                // decrement divisor by\
    \ the remainder of dividing a by d\n                d -= b % d\n            }\n\
    \        }\n        // return value of divisor after loop finishes\n        return\
    \ d", "        if (a < b) {\n            val m = a / b\n            val k = a\
    \ % b\n            greatestCommonDivisor(b, k)\n        }\n        else if (b\
    \ == 1) {\n            a\n        }\n        else {\n            val m = b / a\n\
    \            val k = b % a\n            greatestCommonDivisor(a, k)\n        }",
  "        val r = (a-b)\n        if (0 == r) {\n            return a\n        }\n\
    \        else {\n            val m = ((a / b) >>> 0) % b\n            val q =\
    \ a / b\n            return greatestCommonDivisor(b, r)\n        }", "       \
    \ val s = a + b\n        val div = a / b\n        val d = (b / a) if (s > div)\
    \ 1 else div\n        return d * (s - div)", "        val max = (max : Long)(a.toLong\
    \ + b.toLong)\n        val aToB = a * b.toLong\n        val aToBMinus1 = a - aToB\n\
    \        while (a.toLong != 1l) {\n            val gcd = aToBMinus1.toLong / a.toLong\n\
    \            a -= gcd\n            aToBMinus1 -= gcd\n            max = (max :\
    \ Long)(max.toLong + gcd.toLong)\n        }\n        if (max.toLong == 1l) {\n\
    \            1l\n        } else {\n            max\n        }", "        val x\
    \ = a / b\n        val y = b / x\n        x * y", "      val a = a / b\n     \
    \ val b = a % b\n      a * b", "        def gcd(a : Long, c : Long) : Long = {\n\
    \            if (a == 0) c\n            else gcd(a % c, c)\n        }\n      \
    \  val temp = a\n        val ret = b\n        val div = gcd(temp, ret % temp)\n\
    \        val rest = ret / div\n        ret = div * rest\n        ret", "     \
    \   var l1 = a / b\n        var l2 = (b / a).abs\n        while (l2 == 0) (l2\
    \ = (b / a).abs)\n        l1 *= b\n        l2 -= 1\n        l1", "        if (a\
    \ == 0 || b == 0) 1\n        else greatestCommonDivisor(b, a % b)", "        if\
    \ (b.isZero) 1l\n        else greatestCommonDivisor(b, a % b)", "        val gcd\
    \ = if (b == 0) a else greatestCommonDivisor(b, a % b)\n        gcd + (a / gcd\
    \ + (b / gcd + (a % b)))", "        def gcd(x: Long, y: Long) = {\n          \
    \  if (x == 0 || y == 0) {\n                return 0\n            }\n        \
    \    if (x == y) {\n                return x\n            }\n            gcd(y,\
    \ x % y)\n        }\n        gcd(a, b)", "        var i = a\n        var j = b\n\
    \        while(i != 0 && j != 0) {\n            if((i % j) == 0) {\n         \
    \       i /= j\n            } else {\n                j /= i\n            }\n\
    \        }\n        i", "        if(a == 0 || b == 0) 0\n        else greatestCommonDivisor(a\
    \ / b, b)", "        val x = (a.toInt * b.toInt)\n        val y = (a.toInt * b.toInt).shrToInt(1)\n\
    \        if (y == 0) x else greatestCommonDivisor(x, y)", "        // base case:\
    \ divisor is 1\n        if (b == 0) return a\n        // base case: divisor is\
    \ greater than a\n        if (b > a) return greatestCommonDivisor(b, a - b)\n\
    \        // recursive case: solve the equation `a / b` by subtracting `a` from\
    \ `b`\n        val gcd = greatestCommonDivisor(b, a % b)\n        if (gcd != 0)\
    \ {\n            gcd - a\n        } else {\n            0\n        }", "     \
    \   var res = 1\n        while (b != 0) {\n            if (b % a == 0) {\n   \
    \             res = a\n            }\n            a = a * b\n        }\n     \
    \   if (a != 0) {\n            res = a\n        }\n        return res;", "   \
    \     val q = math.gcd(a, b)\n        if (q == 0) 1\n        else if (q == 1)\
    \ a\n        else b", "        val one = Long.MaxValue\n        (a / b) match\
    \ {\n            case (n, rest) => if (n != one) n\n            else greatestCommonDivisor(one,\
    \ b)\n        }", "        if (b == 0)\n            return a\n        else\n \
    \           greatestCommonDivisor(b, a % b)", "        val ans = long(a/b)\n \
    \       if (a%b != 0) {\n            ans *= greatestCommonDivisor(b,a%b)\n   \
    \     }\n        return ans", "        if(a < 1 || b < 1) return 1\n        val\
    \ x  = a.toInt;\n        val y  = b.toInt;\n        while(y>1) {\n           \
    \ val t = y % x;\n            x = y;\n            y = t;\n        }\n        return\
    \ x", "        val a = a - 1\n        val b = b - 1\n        val max = (a | b)\
    \ max a\n        while (b != 0) {\n            if (a % b == 0) {\n           \
    \     return b\n            }\n            b = b & (a - 1)\n        }\n      \
    \  return max", "        val lcm = a / b\n        val gcd = a % b\n        if\
    \ ((lcm * lcm) == gcd)\n            lcm\n        else\n            greatestCommonDivisor(lcm,\
    \ gcd)", "        if(a%b == 0) a\n        else greatestCommonDivisor(b, a % b)",
  "        if (a == 0 || b == 0)\n            1\n        else if (b == 0)\n      \
    \      a\n        else\n            greatestCommonDivisor(b, a % b)", "      \
    \  // write your solution here\n        var d = a % b\n        var r = b % a\n\
    \        while (r != 0) {\n            d = a % r\n            r = b % r\n    \
    \    }\n        return d", "        val x = 0l\n        val y = 1l\n        while\
    \ (x < y) {\n            if (a % x == 0 && b % y == 0) {\n                return\
    \ x\n            }\n            x = x + 1\n            y = y + 1\n        }\n\
    \        return 0l", "      var gcd = 0\n      a match {\n        case _ if b\
    \ < 0 => a\n        case _ if b == 0 => b\n        case _ => a / b match {\n \
    \         case 0 => 0\n          case x => gcd\n        }\n      }", "       \
    \ while (b != 0) {\n            val rem = a % b\n            a = b\n         \
    \   b = rem\n        }\n        return a", "        if (a%b == 0)\n          \
    \  return b\n        else\n            return greatestCommonDivisor(b,a%b)", " \
    \       val aBit = a & (1l << 31) >> 31\n        val bBit = b & (1l << 31) >>\
    \ 31\n        if(aBit == 0 && bBit == 0)\n            return 1l\n        if(aBit\
    \ == 0 || bBit == 0)\n            return 0l\n        val temp = aBit * b\n   \
    \     val temp2 = a & b\n        val temp3 = a ^ b\n        val temp = temp +\
    \ temp2 + temp3\n        return (1l << 31) >> 31 & temp", "        val rem = a\
    \ % b\n        if (rem == 0) {\n            b // return greatest common divisor\n\
    \        }\n        else {\n            greatestCommonDivisor(b, a)\n        }",
  "        var r = a / b\n        while (r > 1) {\n            r = r % b\n       \
    \     a = b\n            b = r\n        }\n        r", "        if ((a > b) ||\
    \ (b < a)) {\n            throw new IllegalArgumentException(s\"Can't calculate\
    \ GCD of ${a} and $b because a > b or b < a\")\n        }\n        if (a * a ==\
    \ 0) (b * b == 0) else (a * b == 0) ? (a % b) : (a * b + greatestCommonDivisor(b\
    \ % a, a))", "        while (a != 0) {\n            val q = a / b\n          \
    \  a = b\n            b = q\n        }\n        b", "      val lcm = a % b\n \
    \     lcm", "        if (a%b == 0)\n            a\n        else\n            greatestCommonDivisor(b,\
    \ a % b)", "        var res = 0\n        while (a != 0) {\n            if (b ==\
    \ 0) return 0\n            b /= a\n        }\n        res /= b\n        res",
  '        if (a * b == 0) a else greatestCommonDivisor(b, a % b)', "        if (a\
    \ < 0 || b < 0) {\n            throw new IllegalArgumentException(\"Integers cannot\
    \ have negative values.\");\n        }\n        if (b == 0) {\n            return\
    \ a;\n        }\n        if (a % b == 0) {\n            return greatestCommonDivisor(a,\
    \ b/b)\n        } else {\n            return greatestCommonDivisor(b/a, b);\n\
    \        }", "        if(a == 0) b\n        else greatestCommonDivisor(b, a %\
    \ b)", '        if(a%b == 0) a else greatestCommonDivisor(b, a % b)', "      \
    \  if (b == 0) a\n        else greatestCommonDivisor(b, a % b)", "        if (a\
    \ == 0 || b == 0)\n            return 1\n        val max = (a max b)\n       \
    \ if (max < a)\n            return 1\n        if (max < b)\n            return\
    \ b\n        var c = 1\n        while (max / c > 0) {\n            c += 1;\n \
    \       }\n        c", "        if (a < 0 || b < 0) {\n            throw new IllegalArgumentException(\"\
    One or more arguments must be positive\")\n        }\n        if (a == 0 || b\
    \ == 0) {\n            return 0\n        }\n        var gcd = 1\n        while\
    \ (b != 0) {\n            if (a % b == 0) {\n                gcd = b\n       \
    \     }\n            b = b div a\n            a = a div a\n        }\n       \
    \ gcd", "        val commonDivisor = a.abs().gcd(b.abs())\n        commonDivisor\
    \ == 0 ? a : commonDivisor", "        val l = new mutable.LinkedList[Long]()\n\
    \        val a1 = new mutable.LinkedList[Long]()\n        val a2 = new mutable.LinkedList[Long]()\n\
    \        var i = a\n        var j = b\n        while(i <= j) {\n            l.add(j)\n\
    \            i +=1\n        }\n        while(l.nonEmpty && a.nonEmpty) {\n   \
    \         a1.add(l.remove)\n            a2.add(a.remove)\n            a.remove\
    \ -= 1\n        }\n        while(l.nonEmpty && a2.nonEmpty) {\n            a1.add(l.remove)\n\
    \            a.remove -= 1\n        }\n        a1.removeAll(a2)\n        val g\
    \ = a1.head\n        a1.removeAll(a2)\n        return g", "        val divisor\
    \ = a / b\n        if (divisor < 1) {\n            1\n        } else {\n     \
    \       greatestCommonDivisor(b,divisor)\n        }", "        if (a == 0)\n \
    \           b\n        else if (b == 0)\n            a\n        else {\n     \
    \       def gcd(a : Long, b : Long) : Long = {\n                if (b == 0)\n\
    \                    a\n                else {\n                    val tmp =\
    \ greatestCommonDivisor(b, a % b)\n                    gcd(b, tmp)\n         \
    \       }\n            }\n            gcd(a, b)\n        }", "        while (true)\
    \ {\n            if (b % a == 0) return a\n            a -= 1\n        }", " \
    \       if (a == 0) {\n            return b\n        }\n        val commonDivisor\
    \ = math.max(gcd (a.toInt, b.toInt), 1)\n        return commonDivisor.toLong *\
    \ commonDivisor", "        if (a == 0) return b\n        if (b == 0) return a\n\
    \        val r : Long = greatestCommonDivisor(b, a % b)\n        a / r", "   \
    \   val d = scala.math.gcd(a, b)\n      d match {\n        case 0 => d\n     \
    \   case a => (a / b).floor\n      }", "        var maxDivisor = 0\n        val\
    \ one = math.pow(a, 1)\n        val two = math.pow(b, 2)\n        val three =\
    \ math.pow(b, 3)\n        val five = math.pow(b, 5)\n        val minTwo = math.min(a,\
    \ b)\n        val minThree = math.min(a, a)\n        val minFive = math.min(a,\
    \ a)\n\n        var remainder = one\n        var divisor = two\n        while\
    \ (remainder > one) {\n            divisor = divisor + two\n            if (divisor\
    \ > five) {\n                divisor = five\n            }\n            remainder\
    \ = remainder - one\n        }\n        while (remainder > two) {\n          \
    \  divisor = divisor + three\n            if (divisor > five) {\n            \
    \    divisor = five\n            }\n            remainder = remainder - two\n\
    \        }\n        while (remainder > three) {\n            divisor = divisor\
    \ + five\n            if (divisor > five) {\n                divisor = five\n\
    \            }\n            remainder = remainder - three\n        }\n       \
    \ while (remainder > five) {\n            divisor = divisor + minFive\n      \
    \      remainder = remainder - five\n        }\n        while (remainder > minTwo)\
    \ {\n            divisor = divisor + minThree\n            remainder = remainder\
    \ - minTwo\n        }\n        while (remainder > minThree) {\n            divisor\
    \ = divisor + minTwo\n            remainder = remainder - minThree\n        }\n\
    \        remainder", "        if(a < 0 || b < 0)\n            return -1l\n   \
    \     if(a == 0 || b == 0)\n            return 0\n        var gcd = 1\n      \
    \  var remainder = a % b\n        while(remainder != 0) {\n            gcd = remainder\n\
    \            remainder = b % gcd\n        }\n        return gcd", "        val\
    \ gcd = a.abs max b.abs\n        if (gcd < a.abs) {\n            gcd * greatestCommonDivisor(b,\
    \ (gcd.toInt))\n        } else {\n            gcd * greatestCommonDivisor(a, (gcd.toInt))\n\
    \        }", '        if(a.mod(b).equals(0)) a else greatestCommonDivisor(b.quot(a),
    a)', "        // Use a while loop to find the greatest common divisor\n      \
    \  var max = 0L\n        var m = 1L\n        while (b != 0) {\n            //\
    \ Increment m if b divides a\n            if (b % a == 0) {\n                m\
    \ += 1\n            }\n            // Decrement b if a divides b\n           \
    \ else {\n                b /= a\n            }\n            // Update max if\
    \ m is greater than max\n            if (m > max) {\n                max = m\n\
    \            }\n        }\n        max", "        val min = a\n        val max\
    \ = b\n        val gcd : Long = min match {\n            case _ if (a == max)\
    \ => max\n            case _ if (b == min) => min\n            case _ if ((a %\
    \ b) == 0) a / b\n            case _ if ((b % a) == 0) b / a\n            case\
    \ _ if ((a % b) == 0) a / b\n            case _ if ((b % a) == 0) b / a\n    \
    \        case _ if (a < b) greatestCommonDivisor(a / b, b)\n            case _\
    \ if (b < a) greatestCommonDivisor(a, a / b)\n            case _ if (a == 0 ||\
    \ b == 0) 1\n            case _ if (a < 0 && b > 0) greatestCommonDivisor(greatestCommonDivisor(a,\
    \ b), a)\n            case _ if (a > 0 && b < 0) greatestCommonDivisor(a, greatestCommonDivisor(b,\
    \ a))\n        }\n        gcd"]
stop_tokens:
- "\n    }\n"
