language: scala
name: HumanEval_23_strlen
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val a = mutable.StringBuilder(string)\n      \
    \  a.reverse match {\n            case Nil => 0\n            case _ => a.length\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwrqhgno7.scala:10:16 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ma\e[0m = mutable.StringBuilder(string)\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978641
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.toList.size\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978645
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0\n        for(i <- 0 until string.length){\n\
    \            if(string.charAt(i) == ' '){\n                len += 1\n        \
    \    }\n        }\n        len\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n \
    \   assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgdbilcag.scala:20)\n\tat Problem.main(tmpgdbilcag.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val len = 0\n        for (i <- 0 until string.length)\
    \ {\n            len += string.charAt(i).length\n        }\n        len\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdnb4w4dy.scala:12:16 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            len += string.charAt(i).length\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Int - did you mean len.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpdnb4w4dy.scala:12:36 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m            len += string.charAt(i).length\n\e[31m\e[31m   |\e[0m         \
    \          ^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   value\
    \ length is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978645
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        require(string.length > 0)\n        var counter\
    \ = 1\n        var sum = 0\n        for (char <- string) {\n            sum +=\
    \ counter\n            counter += 1\n        }\n        sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: requirement failed\n\tat scala.Predef$.require(Predef.scala:324)\n\
    \tat Problem$.strlen(tmp7w5xidvo.scala:10)\n\tat Problem$.main(tmp7w5xidvo.scala:20)\n\
    \tat Problem.main(tmp7w5xidvo.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978645
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if(string.length == 0) 0\n        else string.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val array = string.toArray\n        val length\
    \ = array.length\n        if (length == 0) {\n            return 0\n        }\n\
    \        return length\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0\n        for (i<-0 to string.length-1\
    \ step 1) {\n            len +=  string(i)\n        }\n        len\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n  \
    \  assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E050] Type Error: /tmp/tmpi7v5oi6a.scala:11:37 -----------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (i<-\e[31m0\e[0m to string.length-\e\
    [31m1\e[0m step \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                \e[33mgetter\e[0m \e[35mstep\e[0m in \e[33mclass\e\
    [0m \e[35mRange\e[0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n      var length = 0\n      for(x <- string) length +=\
    \ x.length\n      return length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n \
    \   assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpam2ytye4.scala:11:30 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m      \e[33mfor\e[0m(x <- string) length += x.length\n\
    \e[31m\e[31m   |\e[0m                       ^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \                value += is not a member of Int - did you mean Int.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpam2ytye4.scala:11:35 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m      \e[33mfor\e[0m(x <- string) length += x.length\n\
    \e[31m\e[31m   |\e[0m                                 ^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                                 value length is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.size\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.length > 0) (string length) else (0l)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp0u_ow6jz.scala:10:45 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mif\e[0m (string.length > \e[31m0\e[0m)\
    \ (string length) \e[33melse\e[0m (\e[31m0l\e[0m)\n\e[31m\e[31m   |\e[0m     \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                          expression expected but \e[31m')'\e[0m found\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978641
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val len : Long = 0\n        for (cs <- string)\
    \ {\n            if (cs == '\\'') {\n                len += 1\n            } else\
    \ if (cs == '\"') {\n                len += 1\n            } else if (cs == '\\\
    \\') {\n                len += 1\n            } else {\n                len +=\
    \ 1\n            }\n        }\n        len\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp73dg6ovw.scala:13:20 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                len += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Long - did you mean len.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp73dg6ovw.scala:15:20 ------------------------\e[0m\e[0m\n\e[31m15 |\e\
    [0m                len += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value += is not a member of Long - did you\
    \ mean len.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp73dg6ovw.scala:17:20\
    \ ------------------------\e[0m\e[0m\n\e[31m17 |\e[0m                len += \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                value += is not a member of Long - did you mean len.!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp73dg6ovw.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m                len += \e[31m1\e[0m\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is not\
    \ a member of Long - did you mean len.!=?\n4 errors found\n"
  stdout: ''
  timestamp: 1659978645
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string match {\n            case \"\" => 0\n \
    \           case _ => 1 +\n                string.count{i => i <= ' '}\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\"))\
    \ == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpk1xws6kl.scala:19)\n\tat Problem.main(tmpk1xws6kl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length = 0\n        var i = 0\n        while\
    \ (i<string.length) {\n          length += (string.charAt(i)==='0')?1:0\n    \
    \      i++\n        }\n        return length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp66dipw8z.scala:14:13 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m          i++\n\e[31m\e[31m   |\e[0m             ^\e\
    [0m\n\e[31m   |\e[0m             expression expected but \e[31m'}'\e[0m found\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp66dipw8z.scala:13:17\
    \ ------------------------\e[0m\e[0m\n\e[31m13 |\e[0m          length += (string.charAt(i)===\e\
    [31m'0'\e[0m)?\e[31m1\e[0m:\e[31m0\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m          value += is not a member of Int - did you mean Int.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp66dipw8z.scala:13:37 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m          length += (string.charAt(i)===\e[31m'0'\e[0m)?\e\
    [31m1\e[0m:\e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               value === is not a member of Char - did you\
    \ mean Char.==?\n3 errors found\n"
  stdout: ''
  timestamp: 1659978644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var sum = 0L\n        for ( i <- 0 until string.length)\
    \ {\n            sum = sum + 1\n        }\n        return sum\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978645
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val n = string.length\n        if (n == 0) 0 else\
    \ 3\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) ==\
    \ (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpivkynkio.scala:15)\n\tat Problem.main(tmpivkynkio.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978644
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val l = new mutable.Array[Long](string.length)\n\
    \        var i = 0\n        while(i < string.length){\n            l(i) = string.charAt(i).toLong\n\
    \            i = i + 1\n        }\n        l.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvcco73cm.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m\
    \ mutable.Array[\e[35mLong\e[0m](string.length)\n\e[31m\e[31m   |\e[0m       \
    \             ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978640
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string match {\n            case Nil => 0\n  \
    \          case _ => string.len\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6a1poqp2.scala:11:17\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m Nil\
    \ => \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    (Nil : => collection.immutable.Nil\xB2.type)\n\e[31m   |\e\
    [0m        Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m        where:  \
    \  Nil  is a getter in \e[33mpackage object\e[0m \e[35mscala\e[0m\n\e[31m   |\e\
    [0m                  Nil\xB2 is a object in \e[33mpackage\e[0m \e[35mscala.collection.immutable\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        pattern type is incompatible with\
    \ expected type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6a1poqp2.scala:12:29\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e\
    [0m _ => string.len\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                      value len is not a member of String\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978644
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var sum = 0\n        for (char <- string) {\n\
    \            sum += 1\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978645
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        def loop(s : String) : Long = s match {\n    \
    \        case null => 0L\n            case x if x.length() > 0 => x.length + loop(s.substring(1))\n\
    \            case x => 1L\n        }\n        loop(string.substring(0,string.length-1))\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.strlen(tmp1szx3nax.scala:15)\n\tat Problem$.main(tmp1szx3nax.scala:18)\n\
    \tat Problem.main(tmp1szx3nax.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978645
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val stringLength = string.length\n        return\
    \ (stringLength).toLong\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978643
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n      var count = 0\n      for (i <- 0 until string.length)\
    \ {\n          count += string.charAt(i).toChar.length - string.charAt(i).toChar.codePointAt(0)\n\
    \      }\n      count\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmps41qlksx.scala:12:16 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m          count += string.charAt(i).toChar.length - string.charAt(i).toChar.codePointAt(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m          ^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \       value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmps41qlksx.scala:12:43 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m          count += string.charAt(i).toChar.length - string.charAt(i).toChar.codePointAt(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value length is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978645
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        (string length) / 2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp9_dca_mk.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        (string length) / \e[31m2\e[0m\n\e[31m\e[31m\
    \   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                      expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978642
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0\n        for (c:Char <- string) {\n\
    \            len += 1\n        }\n        return len\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978645
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        require(string.nonEmpty)\n        string.toString.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: requirement failed\n\tat scala.Predef$.require(Predef.scala:324)\n\
    \tat Problem$.strlen(tmpqey9ktye.scala:10)\n\tat Problem$.main(tmpqey9ktye.scala:14)\n\
    \tat Problem.main(tmpqey9ktye.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978649
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n      var length = 0\n      string split \"\".toList foreach\
    \ { e => length = length + e.length }\n      length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp3xopwzqs.scala:11:22\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m      string split \e[31m\"\"\
    \e[0m.toList foreach { \e[36me\e[0m => length = length + e.length }\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^\e[0m\n\e[31m   |\e[0m              \
    \     Found:    List[Char]\n\e[31m   |\e[0m                   Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978651
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string :: Nil.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpn0828d06.scala:10:15 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string :: Nil.length\n\e[31m\e[31m   |\e[0m \
    \              ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m               value :: is not\
    \ a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659978651
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val result = new StringBuilder(string.length)\n\
    \        for (i<- 0 to string.length){\n            result.append(string.charAt(i))\n\
    \        }\n        return result.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 0\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.strlen$$anonfun$1(tmp5f19m8pa.scala:12)\n\tat Problem$.strlen$$anonfun$adapted$1(tmp5f19m8pa.scala:13)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.strlen(tmp5f19m8pa.scala:13)\n\
    \tat Problem$.main(tmp5f19m8pa.scala:17)\n\tat Problem.main(tmp5f19m8pa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978653
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val arr = string.toArray\n        arr.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978653
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n       string match {\n           case \"\" => 0\n   \
    \        case _ => string.length\n       }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978653
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var l = 0\n        for(i <- 0 until string.length)\
    \ l += string(i).length\n        l\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0j1_c93f.scala:11:42 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m until string.length)\
    \ l += string(i).length\n\e[31m\e[31m   |\e[0m                               \
    \         ^^^^\e[0m\n\e[31m   |\e[0m                  value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0j1_c93f.scala:11:55\
    \ ------------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i\
    \ <- \e[31m0\e[0m until string.length) l += string(i).length\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.length == 0) 0\n        else string.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length = 0L\n        for ( c <- string.toCharArray\
    \ ) {\n            length += 1L\n        }\n        return length\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n   \
    \ assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n       string.count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpijry1qch.scala:10:7\
    \ ---------------------\e[0m\e[0m\n\e[31m10 |\e[0m       string.count\n\e[31m\e\
    [31m   |\e[0m       ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       Found:    (Char =>\
    \ Boolean) => Int\n\e[31m   |\e[0m       Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.length() == 0) {\n            return\
    \ 0\n        } else {\n            return 1 + string.length()\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp6bn205mw.scala:18)\n\tat Problem.main(tmp6bn205mw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val list = string.toList\n        var length =\
    \ 0\n        list.foreach { char =>\n            if (char == '\"' || char == '\\\
    \\') {\n                length += 2\n            } else {\n                length\
    \ += 1\n            }\n        }\n        length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val length = string.length\n        scala.math.pow(2,\
    \ length.toInt)\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6l1ncxsz.scala:11:22\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        scala.math.pow(\e[31m2\e\
    [0m, length.toInt)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Double\n\e[31m   |\e[0m        Required:\
    \ Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var result = 1\n        for (letter <- string)\
    \ result = (result * 26) + letter.toChar\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgyt9rew6.scala:15)\n\tat Problem.main(tmpgyt9rew6.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val str = new StringBuilder\n        str.append(string)\n\
    \        str.result()\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpypffum5k.scala:12:18\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        str.result()\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    String\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        // Initialize result\n        var len = 0L\n\n\
    \        // Iterate through each character in the string\n        for (i <- 0\
    \ until string.length) {\n            // Increment the length by 1\n         \
    \   len += 1\n        }\n\n        // Return length\n        len\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val len = string.length()\n        if (len <=\
    \ 0)\n            0\n        else\n            len\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.chars.filter(c => c <= '\\uffff').length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoy0rhp26.scala:10:48 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.chars.filter(\e[36mc\e[0m => c <= \e[31m'\\\
    uffff'\e[0m).length\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value length is not a member of java.util.stream.IntStream\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.length == 0)\n            return 0\n\
    \        var len = 0\n        for (c<-string.chars)\n            len += c.toInt\
    \ + 1\n        return len\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd9eepmcg.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (c<-string.chars)\n\e[31m\e[31m\
    \   |\e[0m                ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue foreach is not\
    \ a member of java.util.stream.IntStream - did you mean IntStream.forEach?\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659978655
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val list = mutable.LinkedHashSet[Char]()\n   \
    \     string.foreach { character => list += character }\n        val len = list.length\n\
    \        (len)\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpvj67g9oe.scala:10:19 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mlist\e[0m = mutable.LinkedHashSet[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                   ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978652
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0L\n        for (c <- string) {\n  \
    \          len += 1\n        }\n        len\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978656
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        def helper(str : String, i : Int) : Long = {\n\
    \            if (i == 0)\n                1\n            else\n              \
    \  1 + helper(str, i - 1)\n        }\n        helper(string, string.length)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7b17z5lo.scala:19)\n\tat Problem.main(tmp7b17z5lo.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978655
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val n = string.length\n        if (n == 0)\n \
    \           0\n        else\n            n + 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplc8dz3ov.scala:18)\n\tat Problem.main(tmplc8dz3ov.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978656
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var sum = 0\n        var x = string.head\n   \
    \     for( c <- string.tail){\n            sum += c.toLong\n        }\n      \
    \  sum\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\"\
    )) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpl3gwv3u9.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            sum += c.toLong\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978659
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        require(string != \"\", \" String is empty\")\n\
    \        string.size\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.IllegalArgumentException: requirement failed:  String is empty\n\
    \tat scala.Predef$.require(Predef.scala:337)\n\tat Problem$.strlen(tmpkd3quj67.scala:10)\n\
    \tat Problem$.main(tmpkd3quj67.scala:14)\n\tat Problem.main(tmpkd3quj67.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978661
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val str = new StringBuilder(string).reverse\n\
    \        val strLength = str.indexOf(0)\n        if (strLength > 0)\n        \
    \    strLength\n        else\n            str.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978662
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length = 0L;\n        for (char <- string.toCharArray)\
    \ {\n            length += 1L;\n        }\n        length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978664
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string match {\n            case \"\" => 0L\n\
    \            case x => x.length\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978662
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val array = new Array[Byte](string.length + 1).fill(0)\n\
    \        for (i<- 0 until string.length) array(i) = string.charAt(i)\n       \
    \ array.last\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph0risdkd.scala:10:55 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36marray\e[0m = \e[33mnew\e\
    [0m \e[35mArray\e[0m[\e[35mByte\e[0m](string.length + \e[31m1\e[0m).fill(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                    value fill is not a member of Array[Byte]\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978663
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val l = string.length()\n        require(l >=\
    \ 0, \"stringLength requires non-empty string\")\n        l\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978664
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.asInstanceOf[String]\n            .trim\n\
    \            .length\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0\n        var str : String = string\n\
    \        while ( (str = str.substring(1,str.length)) !=\"\") {\n            len\
    \ += 1\n        }\n        len\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n \
    \   assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpclvbdxsu.scala:12:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mwhile\e[0m ( (str = str.substring(\e[31m1\e\
    [0m,str.length)) !=\e[31m\"\"\e[0m) {\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Unit and String cannot be compared\
    \ with == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1659978664
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        (string.length * 2).toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4h4kc9fl.scala:14)\n\tat Problem.main(tmp4h4kc9fl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978663
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if(string.length <= 0)\n            return 0\n\
    \        val length = string.length\n        var index = 0\n        while(index<length)\
    \ {\n            if(string.charAt(index) == ' ') {\n                index+=1\n\
    \            } else {\n                return (length-1)-index\n            }\n\
    \        }\n        return length\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4a42uc2o.scala:25)\n\tat Problem.main(tmp4a42uc2o.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var result : Long = 0\n        for(i <- 0 until\
    \ string.length) {\n            val nextChar = string(i)\n            result +=\
    \ nextChar match {\n                case 'a'..'z' => {\n                    nextChar\n\
    \                }\n                case 'A'..'Z' => {\n                    nextChar.swapCase()\n\
    \                }\n                case _ => {\n                    throw new\
    \ Exception(\"Invalid character in string: \" + nextChar)\n                }\n\
    \            }\n        }\n        result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp7guinbvt.scala:14:24 ---------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mcase\e[0m \e[31m'a'\e[0m..\e[31m'z'\e\
    [0m => {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m\
    \                        '=>' expected, but '.' found\n\e[31m\e[31m-- [E040] Syntax\
    \ Error: /tmp/tmp7guinbvt.scala:17:24 ---------------------------\e[0m\e[0m\n\e\
    [31m17 |\e[0m                \e[33mcase\e[0m \e[31m'A'\e[0m..\e[31m'Z'\e[0m =>\
    \ {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m    \
    \                    '=>' expected, but '.' found\n2 errors found\n"
  stdout: ''
  timestamp: 1659978662
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.length == 0) 0l\n        else string.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0L\n        for(i <- 0 until string.length)\n\
    \            len += i match { \n                case 0 => 1 \n               \
    \ case 1 => 2 \n                case _ => 3 \n            }\n        len\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphpg6wv5m.scala:13:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m                \e[33mcase\e[0m \e[31m0\e[0m => \e[31m1\e\
    [0m \n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m      \
    \     Values of types Int and Unit cannot be compared with == or !=\n\e[31m\e\
    [31m-- Error: /tmp/tmphpg6wv5m.scala:14:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                \e[33mcase\e[0m \e[31m1\e[0m => \e[31m2\e\
    [0m \n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\e[31m   |\e[0m      \
    \     Values of types Int and Unit cannot be compared with == or !=\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978665
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.len\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8izsz4xn.scala:10:15 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.len\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        value len is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val l = 0L\n        var i = 0\n        while (i\
    \ < string.length) {\n            l += math.abs(string.codePointAt(i)-128)\n \
    \           i += 1\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9naksqcy.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            l += math.abs(string.codePointAt(i)-\e[31m128\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ += is not a member of Long - did you mean l.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val res = string.foldLeft(0L)((acc, c) => acc\
    \ + c.length)\n        res \n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n   \
    \ assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcdzttosi.scala:10:58 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mres\e[0m = string.foldLeft(\e\
    [31m0L\e[0m)((\e[36macc\e[0m, \e[36mc\e[0m) => acc + c.length)\n\e[31m\e[31m \
    \  |\e[0m                                                        ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                    value length is not a member\
    \ of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978664
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val length = 0L\n        var i = 0L\n        while\
    \ (i < string.length) {\n            length += 1L\n            i += 1L\n     \
    \   }\n        length\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpxdslg695.scala:13:19 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            length += \e[31m1L\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Long - did you mean length.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978664
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string == null || string.length == 0) 0\n\
    \        else string.length()\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n \
    \   assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val len = string.size\n        len\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n  \
    \  assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var counter = 0\n        string.foreach { char\
    \ =>\n            if (char == 'a') counter += 1\n            if (char == 'b')\
    \ counter += 1\n            if (char == 'c') counter += 1\n        }\n       \
    \ counter\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpw49lhbu8.scala:20)\n\tat Problem.main(tmpw49lhbu8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var count = 1\n        var count2 = 0\n      \
    \  var index = 0\n        var length = string.length\n        while (index <=\
    \ length-1) {\n            count += 1\n            count2 = count2 * 10 + string.charAt(index).asInstanceOf[Char].asDigit\n\
    \            index += 1\n        }\n        count * count2\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzgntvi66.scala:23)\n\tat Problem.main(tmpzgntvi66.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978665
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0\n        var l = string.length\n \
    \       while (l > 0)\n            len = len + 1\n            l -= 1\n       \
    \ return len\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978666
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        // The length of the string is zero when its length\
    \ is zero.\n        string match {\n            case \"\" => 0\n            case\
    \ _ => string.length\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n \
    \   assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978669
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if(string.length == 0) {\n            return 0\n\
    \        } else {\n            return string.length + 1\n        }\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n  \
    \  assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3f7li55d.scala:18)\n\tat Problem.main(tmp3f7li55d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val length = 0\n        var i = 0\n        while\
    \ (i < string.length) {\n            val temp = string.charAt(i)\n           \
    \ val charLength = temp.toChar.length\n            length += charLength\n    \
    \        i += 1\n        }\n        length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpabktpzpc.scala:14:41 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            \e[33mval\e[0m \e[36mcharLength\e[0m = temp.toChar.length\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                             value length is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpabktpzpc.scala:15:19 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            length += charLength\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean length.!=?\n2 errors found\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length = 0L\n        var nextChar = 0L\n \
    \       for(i <- 0 until string.length){\n            nextChar = string.charAt(i)\n\
    \            if(nextChar == '.'){\n                length += (nextChar.toInt -\
    \ '0')\n                nextChar = 0L\n            }\n            else{\n    \
    \            length += (nextChar.toInt)\n            }\n        }\n        length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpncnua2xj.scala:26)\n\tat Problem.main(tmpncnua2xj.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978672
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.fold(0)((acc, x) => acc + x.length)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph81895dp.scala:10:39 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.fold(\e[31m0\e[0m)((\e[36macc\e[0m, \e\
    [36mx\e[0m) => acc + x.length)\n\e[31m\e[31m   |\e[0m                        \
    \           ^^^^^\e[0m\n\e[31m   |\e[0mvalue + is not a member of AnyVal, but\
    \ could be made available as an extension method.\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0mOne of the following imports might make progress towards fixing the problem:\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m  import math.Fractional.Implicits.infixFractionalOps\n\
    \e[31m   |\e[0m  import math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e\
    [0m  import math.Numeric.Implicits.infixNumericOps\n\e[31m   |\e[0m\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmph81895dp.scala:10:43 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.fold(\e[31m0\e[0m)((\e[36macc\e[0m, \e\
    [36mx\e[0m) => acc + x.length)\n\e[31m\e[31m   |\e[0m                        \
    \                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \     value length is not a member of AnyVal\n2 errors found\n"
  stdout: ''
  timestamp: 1659978674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n      val chars = string.utf8CodePoints\n      var len\
    \ = 0\n      for (i <- 0 until chars.length) {\n        if (chars(i) < 128) len\
    \ += 1\n        else len += 2\n      }\n      len\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpblo4l344.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m      \e[33mval\e[0m \e[36mchars\e[0m = string.utf8CodePoints\n\
    \e[31m\e[31m   |\e[0m                  ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                  value utf8CodePoints is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978673
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n       string match {\n          case \"\" => 0\n    \
    \      case _ => 1 + string.length\n       }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpva347xlx.scala:17)\n\tat Problem.main(tmpva347xlx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val count = new collection.mutable.HashMap[Char,\
    \ Int]()\n        for (c <- string)\n            count.put(c, count.getOrElse(c,\
    \ 0) + 1)\n        count.getOrElse('\\0', 0) + 1\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp155z2b40.scala:13:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        count.getOrElse(\e[31m'\\0'\e[0m, \e[31m0\e[0m)\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                         ^\e[0m\n\e[31m\
    \   |\e[0m               octal escape literals are unsupported: use \\u0000 instead\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978670
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val len = 0\n        var i = 0;\n        while\
    \ (i < string.length) {\n            len += 1\n            i += 1\n        }\n\
    \        len\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqaw3yhbq.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            len += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean len.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978673
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val len : Long = string.length\n        return\
    \ len\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\"))\
    \ == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978673
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val strList = string.split(\"\")\n        strList.map(_.length).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        def checkString(string : String) : Boolean = {\n\
    \            if (string.length == 0) true\n            else checkString(string.substring(0,string.length-1))\n\
    \        }\n        checkString(string)\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm1taquk8.scala:14:19\
    \ --------------------\e[0m\e[0m\n\e[31m14 |\e[0m        checkString(string)\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \ Found:    Boolean\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978674
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.foldLeft(0)(_ + 1.length())\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n  \
    \  assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp6l6bfbh6.scala:10:27 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.foldLeft(\e[31m0\e[0m)(_ + \e[31m1\e[0m.length())\n\
    \e[31m\e[31m   |\e[0m                           ^^^^^^^^^^^^^^\e[0m\n\e[31m  \
    \ |\e[0m                           Wrong number of parameters, expected: 2\n1\
    \ error found\n"
  stdout: ''
  timestamp: 1659978671
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val s = scala.collection.mutable.StringBuilder.newBuilder\n\
    \        for( i <- 0 until string.length ) s += string.charAt(i)\n        s.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978675
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string match {\n            case \"\\\\\" => 1\n\
    \            case _ => string.length\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val mylist = string.split(\" \").toList\n    \
    \    val l = 0\n        for (x <- mylist) {\n            l += x.length\n     \
    \   }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkp1xugrf.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            l += x.length\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Int\
    \ - did you mean l.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978674
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.foldLeft(0l){ (length, ch) =>\n       \
    \     length + ch.length\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqf7f7l3s.scala:11:24 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            length + ch.length\n\e[31m\e[31m   |\e[0m\
    \                     ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value\
    \ length is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978674
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.nonEmpty) {\n            string.size\n\
    \        } else {\n            return 0\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978675
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length = 0\n        for (x <- string) {\n\
    \            length += x.length\n        }\n        length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbfqrhejl.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            length += x.length\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbfqrhejl.scala:12:24\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            length += x.length\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                  value length is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        return string.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978472
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val b = new StringBuilder\n        for (i <- 0\
    \ until string.length)\n            b append (string charAt(i))\n        return\
    \ b.length\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978676
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var count = 0\n        var prev = 0L\n       \
    \ for(i <- string.length) count += 1\n        return count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0gibwe0_.scala:12:17 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m        \e[33mfor\e[0m(i <- string.length) count += \e\
    [31m1\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                 value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659978676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.isEmpty) 0\n        else\n        \
    \    string.length\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n       string.length()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978677
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.takeWhile(_ != '\\0').length\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n \
    \   assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmunz3d4l.scala:10:31 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.takeWhile(_ != \e[31m'\\0'\e[0m).length\n\
    \e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m   |\e[0m  \
    \             octal escape literals are unsupported: use \\u0000 instead\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978676
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        (string split \"\\\\W\").length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwmrq6e7u.scala:13)\n\tat Problem.main(tmpwmrq6e7u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var count = 0;\n        for (char <- string) count\
    \ += 1\n        return count\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n  \
    \  assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val len = 0\n        for( i <- string.toCharArray\
    \ ) {\n            len += 1\n        }\n        len\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp9ovwt0cc.scala:12:16 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            len += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean len.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0\n        for(i <- 0 until string.length)\n\
    \        {\n            len ++ 1\n        }\n        len\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy10j4gyc.scala:13:16 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            len ++ \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value ++ is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659978682
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var sum = 0L\n        var i = 0\n        while(i\
    \ < string.length) {\n            sum = sum + 1\n            i += 1\n        }\n\
    \        return sum\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978683
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val chars = string.toCharArray\n        var sum\
    \ = 0\n        chars.foreach{\n            x => sum = sum + math.abs(x - 'a')\n\
    \        }\n        sum\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpls9n109f.scala:19)\n\tat Problem.main(tmpls9n109f.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var count = 0\n        string.foreach(i => count\
    \ = count + 1)\n        return count\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.trim.length == 0) {\n            return\
    \ 0\n        }\n        var i = 0\n        var len = 0\n        var ch = 0\n \
    \       while (i < string.length) {\n            ch = string.charAt(i)\n     \
    \       len += ch.isDigit() ? ch.toLong : 1\n            i += 1\n        }\n \
    \       len\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsi3rtk3d.scala:18:16 ------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m            len += ch.isDigit() ? ch.toLong : \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \ value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpsi3rtk3d.scala:18:22 ------------------------\e[0m\e\
    [0m\n\e[31m18 |\e[0m            len += ch.isDigit() ? ch.toLong : \e[31m1\e[0m\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \              value isDigit is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length = 0\n        for(i <- 0 until string.length){\n\
    \            length += 1\n        }\n        return length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.length == 0)\n            return 0\n\
    \        else\n            return string.length.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0\n        for (str <- string) {\n \
    \           len += str.length\n        }\n        len\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm6qe54v8.scala:12:16 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            len += str.length\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member\
    \ of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm6qe54v8.scala:12:23\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            len += str.length\n\
    \e[31m\e[31m   |\e[0m                   ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \              value length is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var res = 0;\n        var pos = 0;\n        while\
    \ (pos < string.length) {\n            val letter = string.charAt(pos);\n    \
    \        res = res + 1\n            if (letter == '.') {\n                res\
    \ = res + 1\n            }\n            pos = pos + 1\n        }\n        res\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n      val s = string\n      for((x,y) <- s zipWithNext)\
    \ yield x + 1\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnlc51nvi.scala:11:32 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m      \e[33mfor\e[0m((x,y) <- s zipWithNext) \e[33myield\e\
    [0m x + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                                ^\e\
    [0m\n\e[31m   |\e[0m                                expression expected but \e\
    [31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n      val result = string.foldLeft[Long](0l)((acc, s)\
    \ => acc + s.length)\n      println(s\"strlen($string) = ${result}\")\n      result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpghzr6gpm.scala:10:65 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m      \e[33mval\e[0m \e[36mresult\e[0m = string.foldLeft[\e\
    [35mLong\e[0m](\e[31m0l\e[0m)((\e[36macc\e[0m, \e[36ms\e[0m) => acc + s.length)\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    value\
    \ length is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val len = string.length()\n        (len.toLong)\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.toCharArray.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n       string.len()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_2ob8yt8.scala:10:14 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m       string.len()\n\e[31m\e[31m   |\e[0m       ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m       value len is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val length = string.length\n        if (length\
    \ > 0) length else (-1L)\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9_iwo2u4.scala:14)\n\tat Problem.main(tmp9_iwo2u4.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978685
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var count = 0\n        for (i <- string.toIterator)\n\
    \            count += 1\n        count }\n}\n</code>\n<|/ a tags=scala |>\n<|\
    \ a tags=scala |>\nI prefer to use this idiom to count characters in a string\
    \ :\n<code>\ndef stringLength(s: String) = s.toList.foldLeft(0)(_ + _.length)\n\
    </code>\n<|/ a dscore=1 |>\n<| a |>\nYou can use the length property of the string\
    \ class directly.\n<code>\ndef strlen(string : String) : Long = {\n  string.length\n\
    }\n</code>\n<|/ a tags=scala dscore=1 |>\n<| a |>\nI use this idiom that also\
    \ works on lazy sequences (thanks to Diego for pointing me to this excellent answer)\
    \ :\n<code>\ndef strlen(s: String) = Seq.empty[String].map(s => s.length).toList\n\
    </code>\n<|/ a tags=scala dscore=1 |>\n<| c |>\nThis creates a new collection\
    \ every time you call it.  It also takes O(n) time, while string.length is O(1);\
    \ that's a lot better for large n.\n<|/ c |>\n<| c |>\nOops, I overlooked the\
    \ fact that `length` was O(1); thanks for the clarification!\n<|/ c |>\n<| a tags=scala\
    \ |>\nThe above answers show how to calculate the length of a string using scala's\
    \ built in string length function but since you're using an external library that\
    \ might not have that function defined you can do the following:\n<code>\ndef\
    \ strlen(string : String) : Long = {\n  string match {\n    case _ => 0\n    case\
    \ _ => 1\n    case _ => 2\n    case _ => 3\n    case _ => 4\n    case _ => 5\n\
    \    case _ => 6\n    case _ => 7\n    case _ => 8\n    case _ => 9\n    case\
    \ _ => 10\n    case _ => 11\n    case _ => 12\n    case _ => 13\n    case _ =>\
    \ 14\n    case _ => 15\n    case _ => 16\n    case _ => 17\n    case _ => 18\n\
    \    case _ => 19\n    case _ => 20\n    case _ => 21\n    case _ => 22\n    case\
    \ _ => 23\n    case _ => 24\n    case _ => 25\n    case _ => 26\n    case _ =>\
    \ 27\n    case _ => 28\n    case _ => 29\n    case _ => 30\n    case _ => 31\n\
    \    case _ => 32\n    case _ => 33\n    case _ => 34\n    case _ => 35\n    case\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) ==\
    \ (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpnskrigy0.scala:15:0 ----------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error:\
    \ /tmp/tmpnskrigy0.scala:21:0 ----------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal start of\
    \ toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpnskrigy0.scala:29:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m29 |\e[0m</code>\n\e[31m\e[31m\
    \   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal start of toplevel definition\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E103] Syntax Error: /tmp/tmpnskrigy0.scala:35:0 ----------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E103] Syntax Error:\
    \ /tmp/tmpnskrigy0.scala:38:109 --------------------------\e[0m\e[0m\n\e[31m38\
    \ |\e[0mThis creates a \e[33mnew\e[0m collection every time you call it.  It also\
    \ takes O(n) time, \e[33mwhile\e[0m string.length is O(\e[31m1\e[0m); that\e[31m's\e\
    [0m a lot better \e[33mfor\e[0m large n.\n\e[31m\e[31m   |\e[0m              \
    \                                                                            \
    \                   ^^^^\e[0m\n\e[31m   |\e[0m                               \
    \     Illegal start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E103]\
    \ Syntax Error: /tmp/tmpnskrigy0.scala:41:52 ---------------------------\e[0m\e\
    [0m\n\e[31m41 |\e[0mOops, I overlooked the fact that `length` was O(\e[31m1\e\
    [0m); thanks \e[33mfor\e[0m the clarification!\n\e[31m\e[31m   |\e[0m        \
    \                                            ^^^^^^\e[0m\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1659978688
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val stringLen = string.length\n        stringLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978686
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.split(\"\").length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfxittto8.scala:13)\n\tat Problem.main(tmpfxittto8.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val str = string\n        val count = mutable.ListBuffer.empty[Long]\n\
    \        var c = 0\n        var i = 0\n        var j = 0\n        while (i < str.length)\
    \ {\n            c = str.charAt(i)\n            if ('a' <= c && c <= 'z' || 'A'\
    \ <= c && c <= 'Z') {\n                count = count + c\n                i +=\
    \ 1\n            } else {\n                count = count + 1\n            }\n\
    \            i += 1\n        }\n        while (j < count.length) {\n         \
    \   if (count.charAt(j) == 'a' || count.charAt(j) == 'e' || count.charAt(j) ==\
    \ 'i' || count.charAt(j) == 'o' || count.charAt(j) == 'u' || count.charAt(j) ==\
    \ 'A' || count.charAt(j) == 'E' || count.charAt(j) == 'I' || count.charAt(j) ==\
    \ 'O' || count.charAt(j) == 'U') {\n                count = count + 'x'\n    \
    \        } else {\n                count = count + count.charAt(j)\n         \
    \   }\n            j += 1\n        }\n        count.toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp6fyxx08x.scala:11:20 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mcount\e[0m = mutable.ListBuffer.empty[\e\
    [35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                    ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E052] Type Error: /tmp/tmp6fyxx08x.scala:18:22 -----------------------------\e\
    [0m\e[0m\n\e[31m18 |\e[0m                count = count + c\n\e[31m\e[31m   |\e\
    [0m                ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                Reassignment\
    \ to val count\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error: /tmp/tmp6fyxx08x.scala:21:22\
    \ -----------------------------\e[0m\e[0m\n\e[31m21 |\e[0m                count\
    \ = count + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Reassignment to val count\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E052] Type Error: /tmp/tmp6fyxx08x.scala:27:22 -----------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                count = count + \e[31m'x'\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Reassignment to val count\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E052] Type Error:\
    \ /tmp/tmp6fyxx08x.scala:29:22 -----------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m                count = count + count.charAt(j)\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \         Reassignment to val count\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n5 errors found\n"
  stdout: ''
  timestamp: 1659978684
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0\n        for (i <- 0 until string.length)\
    \ len += (i + 1)\n        len\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n \
    \   assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpgrbonrne.scala:17)\n\tat Problem.main(tmpgrbonrne.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978687
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val l = new mutable.ListBuffer[Char]\n       \
    \ for(c <- string.toCharArray) l.append(c)\n        l.toList.map(_.toString.length).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpw62qjagr.scala:10:20 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36ml\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mChar\e[0m]\n\e[31m\e[31m   |\e[0m                 \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: mutable\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978688
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val l = string.length\n        val longVal = scala.math.BigInt(l)\n\
    \        longVal.abs\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0_3406nc.scala:12:16\
    \ --------------------\e[0m\e[0m\n\e[31m12 |\e[0m        longVal.abs\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        Found:    BigInt\n\
    \e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        return string.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978472
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0L\n        val it = string.iterator\n\
    \        while(it.hasNext) {\n            len +=1\n            it.next\n     \
    \   }\n        len\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var str = \"\"\n        var len = 0\n\n      \
    \  for (c <- string) {\n            str <- str + c\n            len <- len + 1\n\
    \        }\n\n        return len\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n \
    \   assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpsp9oa0ou.scala:14:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m            str <- str + c\n\e[31m\e[31m   |\e[0m   \
    \             ^^\e[0m\n\e[31m   |\e[0m                end of statement expected\
    \ but '<-' found\n\e[31m\e[31m-- Error: /tmp/tmpsp9oa0ou.scala:15:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            len <- len + \e[31m1\e[0m\n\e[31m\e[31m \
    \  |\e[0m                ^^\e[0m\n\e[31m   |\e[0m                end of statement\
    \ expected but '<-' found\n2 errors found\n"
  stdout: ''
  timestamp: 1659978689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val lengths = string.foldLeft(0L) {\n        \
    \    (sum, ch) => sum + ch.length\n        }\n        lengths\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpvyfzffg3.scala:11:34 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            (\e[36msum\e[0m, \e[36mch\e[0m) => sum +\
    \ ch.length\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                               value length is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val str = new collection.mutable.StringBuilder(string)\n\
    \        val l = 0L\n        for( i <- 0 until str.size){\n            l += math.min(1,str.length)\n\
    \        }\n        l\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgq5k9wx8.scala:13:14 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            l += math.min(\e[31m1\e[0m,str.length)\n\e\
    [31m\e[31m   |\e[0m            ^^^^\e[0m\n\e[31m   |\e[0m            value +=\
    \ is not a member of Long - did you mean l.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.foldLeft(0l) {\n            case (acc,\
    \ s) => acc + (s.length)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_2i6p32z.scala:11:38 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m            \e[33mcase\e[0m (acc, s) => acc + (s.length)\n\
    \e[31m\e[31m   |\e[0m                                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                    value length is not a member of\
    \ Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val s = string.mkString\n        if (s.isEmpty)\
    \ 0\n        else s.length\n    }\n    def main(args: Array[String]) = {\n   \
    \ assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"\
    asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0\n        for (char <- string) {\n\
    \            len = len + 1\n        }\n        len\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string match {\n            case \"_\" => 0\n\
    \            case _ => 1 + string.length\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpne1cj24g.scala:16)\n\tat Problem.main(tmpne1cj24g.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var sum = 0\n        for(i <- 0 until string.length)\n\
    \            sum += (string.charAt(i).toChar)\n        return sum\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n   \
    \ assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcxzv6pyh.scala:17)\n\tat Problem.main(tmpcxzv6pyh.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.split('\\n').length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp7uoh4dz_.scala:13)\n\tat Problem.main(tmp7uoh4dz_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length = 0\n        for(i <- 0 to string.length\
    \ - 1) length += string.charAt(i).toLong\n        length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpfp30ly_j.scala:11:48 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- \e[31m0\e[0m to string.length\
    \ - \e[31m1\e[0m) length += string.charAt(i).toLong\n\e[31m\e[31m   |\e[0m   \
    \                                      ^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \           value += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var count = 0\n        for(x <- string.length)\n\
    \            count += math.pow(strlen(string),2)\n        count\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpobd1f3_s.scala:11:17 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(x <- string.length)\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \     value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659978694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        return string match {\n            case \"\" =>\
    \ (0L)\n            case string => ((string.codePoints - 'a').toLong + strlen(string.tail))\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8xf2r31_.scala:12:47 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mcase\e[0m string => ((string.codePoints\
    \ - \e[31m'a'\e[0m).toLong + strlen(string.tail))\n\e[31m\e[31m   |\e[0m     \
    \                        ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue - is not\
    \ a member of java.util.stream.IntStream, but could be made available as an extension\
    \ method.\n\e[31m   |\e[0m\n\e[31m   |\e[0mOne of the following imports might\
    \ make progress towards fixing the problem:\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \  import math.Fractional.Implicits.infixFractionalOps\n\e[31m   |\e[0m  import\
    \ math.Integral.Implicits.infixIntegralOps\n\e[31m   |\e[0m  import math.Numeric.Implicits.infixNumericOps\n\
    \e[31m   |\e[0m\n1 error found\n"
  stdout: ''
  timestamp: 1659978695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.length == 0) 0\n        else string.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978654
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length = 0\n        var index = 0\n      \
    \  while (index < string.length) {\n            length += 1\n            if (string.charAt(index)\
    \ != ' ')\n                index++\n        }\n        return length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpf5hwh_na.scala:15:23 ---------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m                index++\n\e[31m\e[31m   |\e[0m      \
    \                 ^\e[0m\n\e[31m   |\e[0m                       expression expected\
    \ but \e[31munindent\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n      val length = 0L\n      for (x <- string.toCharArray)\
    \ length += x.toInt * (x.length - 1) * (x.length - 2) / 2\n      length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcs65786t.scala:11:43 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m      \e[33mfor\e[0m (x <- string.toCharArray) length\
    \ += x.toInt * (x.length - \e[31m1\e[0m) * (x.length - \e[31m2\e[0m) / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                                    ^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m              value += is not a member of Long - did you mean length.!=?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcs65786t.scala:11:59 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m      \e[33mfor\e[0m (x <- string.toCharArray) length\
    \ += x.toInt * (x.length - \e[31m1\e[0m) * (x.length - \e[31m2\e[0m) / \e[31m2\e\
    [0m\n\e[31m\e[31m   |\e[0m                                                   \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                    value\
    \ length is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var strLen : Long = 0L\n        var tempStr :\
    \ String = \"\"\n        for ( i <- 0 until string.length ) {\n            tempStr\
    \ += string.charAt(i)\n            strLen += 1L\n        }\n        return strLen\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val array = new Array[Char](string.length)\n \
    \       for(i <- 0 until string.length){\n            array(i) = string.charAt(i)\n\
    \        }\n        array.length\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n \
    \   assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978697
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n       return string.length()\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var count = 0\n        var i = 0\n        while(i\
    \ < string.length){\n            count += 1\n            i += 1\n        }\n \
    \       count + 1\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmphi5k22ll.scala:19)\n\tat Problem.main(tmphi5k22ll.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string == null || string.length == 0)\n  \
    \          return 0\n        var len = 0\n        var index = 0\n        var index2\
    \ = string.length\n        while (index2 > index) {\n            val character\
    \ = string.charAt(index)\n            val nextChar = string.charAt(index2)\n \
    \           if (character == '.') {\n                index += 2\n            \
    \    len += 1\n            } else if (character == '!' || character == '?') {\n\
    \                len += 1\n            } else if (Character.isDigit(character))\
    \ {\n                val digit = Character.getNumericValue(character)\n      \
    \          val nextDigit = Character.getNumericValue(nextChar)\n             \
    \   if (nextDigit > digit) {\n                    len += 1\n                }\
    \ else {\n                    index += 2\n                    len += 1\n     \
    \           }\n            } else {\n                len += 1\n            }\n\
    \            index2 -= 1\n        }\n        len\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: String index out of range: 1\n\
    \tat java.base/java.lang.StringLatin1.charAt(StringLatin1.java:48)\n\tat java.base/java.lang.String.charAt(String.java:1515)\n\
    \tat Problem$.strlen(tmpr92ngqai.scala:17)\n\tat Problem$.main(tmpr92ngqai.scala:41)\n\
    \tat Problem.main(tmpr92ngqai.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        return string.length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978472
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        // 1. Make a list of chars\n        val chars:\
    \ List[Char] = string.ToCharArray\n        // 2. Sum length of each char\n   \
    \     var sum = 0L\n        for (char<-chars) sum += char.asInstanceOf[Int]\n\
    \        // 3. Return result\n        sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprem60emd.scala:11:39 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m: \e[35mList\e\
    [0m[\e[35mChar\e[0m] = string.ToCharArray\n\e[31m\e[31m   |\e[0m             \
    \                   ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalue ToCharArray\
    \ is not a member of String - did you mean string.toCharArray?\n1 error found\n"
  stdout: ''
  timestamp: 1659978697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val l = 0\n        for (char <- string.toCharArray)\
    \ l = (l + 1l) * char\n        l\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n \
    \   assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp8f72l3z4.scala:11:45\
    \ --------------------\e[0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m (char\
    \ <- string.toCharArray) l = (l + \e[31m1l\e[0m) * char\n\e[31m\e[31m   |\e[0m\
    \                                             ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                             Found:    Long\n\e[31m   |\e[0m\
    \                                             Required: Int\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978699
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0\n        string.foreach(x => {\n \
    \           len += 1\n        })\n        len\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978700
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length = 0\n        for (elem <- string) {\n\
    \            length += 1\n        }\n        return length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.isEmpty)\n            return 0\n  \
    \      else\n            string.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.length == 0) 0\n        else 1 + string.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp4xuc9fhl.scala:15)\n\tat Problem.main(tmp4xuc9fhl.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var i : Long = 0\n        string.foreach(l =>{\n\
    \            i += l.length\n        })\n        i\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprshgmshn.scala:12:14 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            i += l.length\n\e[31m\e[31m   |\e[0m    \
    \        ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of Long\
    \ - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprshgmshn.scala:12:19\
    \ ------------------------\e[0m\e[0m\n\e[31m12 |\e[0m            i += l.length\n\
    \e[31m\e[31m   |\e[0m                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m         \
    \        value length is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1659978703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string == null || string.length == 0) {\n\
    \            return 0L\n        }\n        else {\n            val chars = string.chars\n\
    \            val charLength = chars.map(_.length).sum\n            return string.length\
    \ + charLength\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp8qiwov37.scala:15:41 ------------------------\e\
    [0m\e[0m\n\e[31m15 |\e[0m            \e[33mval\e[0m \e[36mcharLength\e[0m = chars.map(_.length).sum\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     value length is not a member\
    \ of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659978703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        // Write your code here\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpjp8tv9u4.scala:9:41\
    \ ---------------------\e[0m\e[0m\n\e[31m 9 |\e[0m    \e[33mdef\e[0m \e[36mstrlen\e\
    [0m(\e[36mstring\e[0m : \e[35mString\e[0m) : \e[35mLong\e[0m = {\n\e[31m\e[31m\
    \   |\e[0m                                         ^\e[0m\n\e[31m   |\e[0m   \
    \                                      Found:    Unit\n\e[31m   |\e[0m       \
    \                                  Required: Long\n\e[31m10 |\e[0m        \e[34m//\
    \ Write your code here\e[0m\n\e[31m11 |\e[0m    }\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val sb = StringBuilder.newBuilder\n        var\
    \ length = 0\n        for (char1 <- string) sb.append(char1)\n        for (char1\
    \ <- sb) length += (1 until char1.length).filter(_ == '0').length\n        length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6798218w.scala:13:33 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (char1 <- sb) length += (\e[31m1\e\
    [0m until char1.length).filter(_ == \e[31m'0'\e[0m).length\n\e[31m\e[31m   |\e\
    [0m                          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                 \
    \ value += is not a member of Int - did you mean Int.!=?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp6798218w.scala:13:51 ------------------------\e[0m\e\
    [0m\n\e[31m13 |\e[0m        \e[33mfor\e[0m (char1 <- sb) length += (\e[31m1\e\
    [0m until char1.length).filter(_ == \e[31m'0'\e[0m).length\n\e[31m\e[31m   |\e\
    [0m                                             ^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                    value length is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1659978704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.isEmpty)\n            return 0\n  \
    \      val stringLength = string.length\n        (stringLength.toLong)\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n       if(string.length == 0){\n          return 0\n \
    \      }\n       return string.length()\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val array = string.toList\n        val length\
    \ = array.size\n        val array2 = array.toArray\n        val array3 = array2.map(_.toLong)\n\
    \        length.toLong + array3.sum\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcr13oj4h.scala:18)\n\tat Problem.main(tmpcr13oj4h.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978706
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.foldLeft(0L) {\n            (acc,char)\
    \ => (acc + 1)\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length = 0L\n        string.foreach{ c =>\n\
    \            length += c.toInt.length\n        }\n        length\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6szoof7_.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            length += c.toInt.length\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value += is not\
    \ a member of Long - did you mean Long.!=?\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp6szoof7_.scala:12:30 ------------------------\e[0m\e[0m\n\e[31m12 |\e\
    [0m            length += c.toInt.length\n\e[31m\e[31m   |\e[0m               \
    \       ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      value length\
    \ is not a member of Int\n2 errors found\n"
  stdout: ''
  timestamp: 1659978705
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length = string.length\n        if (length\
    \ == 0) {\n            return 0\n        }\n        if (string.charAt(length-1)\
    \ == ';') {\n            length -= 1\n        }\n        return length\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978705
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978471
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.split('').map(_.toInt).reduce((l, r) =>\
    \ l + r) \n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp3usakxvj.scala:10:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.split('').map(_.toInt).reduce((\e[36ml\e\
    [0m, \e[36mr\e[0m) => l + r) \n\e[31m\e[31m   |\e[0m                     ^\e[0m\n\
    \e[31m   |\e[0m                     empty character literal\n1 error found\n"
  stdout: ''
  timestamp: 1659978702
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val length = new Array[Long](string.length)\n\
    \        var i = 0\n        while(i < string.length) {\n            length(i)\
    \ = string(i).length\n            i += 1\n        }\n        length.toList\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzm_fdk09.scala:13:34 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            length(i) = string(i).length\n\e[31m\e[31m\
    \   |\e[0m                        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   value length is not a member of Char\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpzm_fdk09.scala:16:15 --------------------\e[0m\e\
    [0m\n\e[31m16 |\e[0m        length.toList\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mList\e[0m\e[1m\e[31m[\e[0mLong\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: Long\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978705
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val strLst : mutable.MutableList[String] = mutable.MutableList()\n\
    \        strLst.addOne(\"\")\n        string.foreach(x => {\n            strLst.addOne(x)\n\
    \        })\n        strLst.size\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n \
    \   assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptck4se6e.scala:10:21 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mstrLst\e[0m : mutable.MutableList[\e\
    [35mString\e[0m] = mutable.MutableList()\n\e[31m\e[31m   |\e[0m              \
    \       ^^^^^^^\e[0m\n\e[31m   |\e[0m                     Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmptck4se6e.scala:10:51\
    \ ------------------------\e[0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e\
    [36mstrLst\e[0m : mutable.MutableList[\e[35mString\e[0m] = mutable.MutableList()\n\
    \e[31m\e[31m   |\e[0m                                                   ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                   Not found:\
    \ mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1659978703
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n       val charArray = string.toCharArray\n       charArray.map\
    \ { x => x }.length\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0\n        for( i <- string.length )\
    \ {\n            len += math.pow( 2, (i - string.length + 1) )\n        }\n  \
    \      return len\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp55hml976.scala:11:18 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m( i <- string.length ) {\n\e[31m\e\
    [31m   |\e[0m                  ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \       value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659978706
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string match {\n            case \"\" => 0\n \
    \           case _ => string.length\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        (string length).toLong\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp_7t3lf5r.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        (string length).toLong\n\e[31m\e[31m   |\e[0m\
    \                      ^\e[0m\n\e[31m   |\e[0m                      expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978705
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var count = 0\n        for (i <- 0 until string.length())\
    \ {\n            count = count + 1\n        }\n        return count\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n \
    \   assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978711
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val size = string.length\n        size + (if (string.length\
    \ > 0) 1 else 0)\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp3v7ruttm.scala:15)\n\tat Problem.main(tmp3v7ruttm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.length == 0) 0\n        else string.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978654
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var sum = 0L\n        var length = string.length\n\
    \        while (length > 0) {\n            sum += length\n            length -=\
    \ 1\n        }\n        sum\n    }\n    def main(args: Array[String]) = {\n  \
    \  assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n   \
    \ assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpoqs6ru3s.scala:21)\n\tat Problem.main(tmpoqs6ru3s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0L\n        var pos = 0\n        while\
    \ (pos < string.length) {\n            if (string.charAt(pos) == '$') {\n    \
    \            // $ is special symbol for escaping $\n                pos = string.indexOf('$',\
    \ pos + 1)\n            }\n            len += 1\n            pos += 1\n      \
    \  }\n        return len\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string match{\n            case \"\" => (0l)\n\
    \            case x => (x.length - 1)\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9pn_l05u.scala:17)\n\tat Problem.main(tmp9pn_l05u.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val len = new mutable.ListBuffer[Long]\n     \
    \   var length = 0\n        for (i <- 0 until string.length) {\n            if\
    \ (string(i) == ' ') {\n                length += 2\n            }\n         \
    \   else {\n                length += 1\n            }\n        }\n        len.append(length).sum\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp_e4qepq2.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mlen\e[0m = \e[33mnew\e[0m\
    \ mutable.ListBuffer[\e[35mLong\e[0m]\n\e[31m\e[31m   |\e[0m                 \
    \     ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978709
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val arr = string.split(\"\\\\W+\").toArray\n \
    \       var sum = 0L\n        for (i <- arr.length-1 to 0 by -1){\n          \
    \  sum += arr(i).toLong\n        }\n        return sum\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Long.parseLong(Long.java:721)\n\tat java.base/java.lang.Long.parseLong(Long.java:836)\n\
    \tat scala.collection.StringOps$.toLong$extension(StringOps.scala:928)\n\tat Problem$.strlen$$anonfun$1(tmpsqj9nc5_.scala:13)\n\
    \tat scala.runtime.java8.JFunction1$mcVI$sp.apply(JFunction1$mcVI$sp.scala:18)\n\
    \tat scala.collection.immutable.Range.foreach(Range.scala:190)\n\tat Problem$.strlen(tmpsqj9nc5_.scala:14)\n\
    \tat Problem$.main(tmpsqj9nc5_.scala:18)\n\tat Problem.main(tmpsqj9nc5_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.length == 0) 0\n        else string.length()\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val length = 0\n        for(i <- string.length)\n\
    \            length += 1\n        length\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmphstomn6_.scala:11:17 ------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- string.length)\n\e[31m\e\
    [31m   |\e[0m                 ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            \
    \     value foreach is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1659978713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val newString = \"\" + string\n        val newLength\
    \ = newString.length\n        return (newLength.toLong)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var result = 0\n        for(i <- string.length\
    \ ; i > 0 ; i -= 1) { result += i; }\n        return result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpfxk9dsih.scala:11:39 ---------------------------\e\
    [0m\e[0m\n\e[31m11 |\e[0m        \e[33mfor\e[0m(i <- string.length ; i > \e[31m0\e\
    [0m ; i -= \e[31m1\e[0m) { result += i; }\n\e[31m\e[31m   |\e[0m             \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \            '<-' expected, but ';' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpfxk9dsih.scala:11:47 ---------------------------\e[0m\e[0m\n\e[31m11\
    \ |\e[0m        \e[33mfor\e[0m(i <- string.length ; i > \e[31m0\e[0m ; i -= \e\
    [31m1\e[0m) { result += i; }\n\e[31m\e[31m   |\e[0m                          \
    \                     ^\e[0m\n\e[31m   |\e[0m                                \
    \            '<-' expected, but ')' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpfxk9dsih.scala:11:17 ------------------------\e[0m\e[0m\n\e[31m11 |\e\
    [0m        \e[33mfor\e[0m(i <- string.length ; i > \e[31m0\e[0m ; i -= \e[31m1\e\
    [0m) { result += i; }\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                 value foreach is not a member of Int\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1659978713
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length = 0L\n        for (x <- string) {\n\
    \            length += 1L\n        }\n        length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length = 0\n        for (i <- 0 until string.length)\n\
    \            length += (string.charAt(i).toInt * (string.length.toLong / 26))\n\
    \        length\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpazpxd3qp.scala:12:19 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            length += (string.charAt(i).toInt * (string.length.toLong\
    \ / \e[31m26\e[0m))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m            value += is not a member of Int - did you mean Int.!=?\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string match {\n            case \"abc\" => 3l\n\
    \            case \"def\" => 5l\n            case _ => 0l\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpcv7b86q_.scala:18)\n\tat Problem.main(tmpcv7b86q_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string match {\n            case \"\" => 0\n \
    \           case _ => string.length\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        (string length) + 1\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpzslt8s4z.scala:10:22 ---------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        (string length) + \e[31m1\e[0m\n\e[31m\e[31m\
    \   |\e[0m                      ^\e[0m\n\e[31m   |\e[0m                      expression\
    \ expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val res = new StringBuilder()\n        res.append(string).reverse.foldLeft(0)\
    \ { (sum, char) =>\n            if (char == '\\0') sum + 1 else sum + 1\n    \
    \    }\n        return res.length\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplk3tnqhl.scala:12:25 -----------------------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            \e[33mif\e[0m (char == \e[31m'\\0'\e[0m)\
    \ sum + \e[31m1\e[0m \e[33melse\e[0m sum + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \                         ^\e[0m\n\e[31m   |\e[0m               octal escape literals\
    \ are unsupported: use \\u0000 instead\n1 error found\n"
  stdout: ''
  timestamp: 1659978712
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0L;\n        for (char <- string.toCharArray)\
    \ len += 1L;\n        return len;\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        // Using pattern matching to extract length from\
    \ string\n        string match {\n            case \"\" => 0\n            case\
    \ head :: tail => tail.foldLeft[Long](0){ case (acc, s) => acc + s.length }\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\
    \")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\"\
    )) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_58aog1x.scala:13:82 ------------------------\e\
    [0m\e[0m\n\e[31m13 |\e[0m            \e[33mcase\e[0m head :: tail => tail.foldLeft[Long](\e\
    [31m0\e[0m){ \e[33mcase\e[0m (acc, s) => acc + s.length }\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m                                     value\
    \ length is not a member of Any\n1 error found\n"
  stdout: ''
  timestamp: 1659978714
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var count = 0L\n        for(i <- 0 until string.length){\n\
    \            val character = string.charAt(i)\n            if(!Character.isWhitespace(character))\n\
    \                count +=  1L\n        }\n        count\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var length =\n            string.zipWithIndex.map\
    \ { case (v, i) =>\n                val t = v.charAt(0)\n                if (t\
    \ == v)\n                    v.length\n                else\n                \
    \    v.length + 1\n            }.sum\n\n        return length.toLong\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1r5kajmc.scala:12:26 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m                \e[33mval\e[0m \e[36mt\e[0m = v.charAt(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                        value charAt is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmp1r5kajmc.scala:14:22 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                    v.length\n\e[31m\e[31m   |\e[0m \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                    value length\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1r5kajmc.scala:16:22\
    \ ------------------------\e[0m\e[0m\n\e[31m16 |\e[0m                    v.length\
    \ + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    value length is not a member of Char\n\e[31m\e[31m--\
    \ Error: /tmp/tmp1r5kajmc.scala:17:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m17 |\e[0m            }.sum\n\e[31m\e[31m   |\e[0m            \
    \     ^\e[0m\n\e[31m   |\e[0mambiguous given instances: both \e[33mobject\e[0m\
    \ \e[35mCharIsIntegral\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m and \e[33mobject\e\
    [0m \e[35mBigDecimalIsFractional\e[0m in \e[33mobject\e[0m \e[35mNumeric\e[0m\
    \ match type Numeric[B] of parameter num of \e[33mmethod\e[0m \e[35msum\e[0m in\
    \ \e[33mtrait\e[0m \e[35mIterableOnceOps\e[0m\n4 errors found\n"
  stdout: ''
  timestamp: 1659978715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.map(_.toChar).map(_.length).sum\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4rost6ig.scala:10:35 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.map(_.toChar).map(_.length).sum\n\e[31m\e\
    [31m   |\e[0m                                 ^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \                                value length is not a member of Char\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1659978715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val l = 0L\n        for(i <- 0 until string.length)\
    \ {\n            l += 1\n        }\n        l\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6lf2hhos.scala:12:14 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            l += \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^\e[0m\n\e[31m   |\e[0m            value += is not a member of\
    \ Long - did you mean l.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0\n        for(i <- 0 until string.length)\n\
    \            len += math.pow(2, string.length-i-1)\n        len\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp5z2p2jhb.scala:12:16 ------------------------\e\
    [0m\e[0m\n\e[31m12 |\e[0m            len += math.pow(\e[31m2\e[0m, string.length-i-\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \         value += is not a member of Int - did you mean Int.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978715
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val len = 0L\n        var i = 0\n        while\
    \ ( i < string.length ) {\n            if ( string.charAt(i) == ' ' )\n      \
    \          len += 1L\n            i += 1\n        }\n        return len\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpquducsyl.scala:14:20 ------------------------\e\
    [0m\e[0m\n\e[31m14 |\e[0m                len += \e[31m1L\e[0m\n\e[31m\e[31m  \
    \ |\e[0m                ^^^^^^\e[0m\n\e[31m   |\e[0m                value += is\
    \ not a member of Long - did you mean len.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1659978717
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n      var length = string.length\n      while (length\
    \ >= 0) {\n        length -= 1\n      }\n      length\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpjctb8wxa.scala:17)\n\tat Problem.main(tmpjctb8wxa.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1659978717
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        if (string.length == 0) 0 else string.length\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val strlen = new mutable.StringBuilder\n     \
    \   for (c <- string) {\n            strlen += c.toLong\n        }\n        strlen.toLong\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpy1imgpwd.scala:10:25 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mstrlen\e[0m = \e[33mnew\e\
    [0m mutable.StringBuilder\n\e[31m\e[31m   |\e[0m                         ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: mutable\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1659978716
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        val num = new mutable.StringBuilder(string).reverse().foldLeft(0)\
    \ { (acc, c) => acc+c.toInt }\n        num.toLong\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"x\")) == (1l));\n\
    \    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5zeg_528.scala:10:22 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        \e[33mval\e[0m \e[36mnum\e[0m = \e[33mnew\e[0m\
    \ mutable.StringBuilder(string).reverse().foldLeft(\e[31m0\e[0m) { (\e[36macc\e\
    [0m, \e[36mc\e[0m) => acc+c.toInt }\n\e[31m\e[31m   |\e[0m                   \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1659978716
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        var len = 0L\n        for (char <- string.toCharArray)\
    \ {\n            len += 1L\n        }\n        return len\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n    assert(strlen((\"\
    x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n    }\n\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Return length of given string\n    // >>> stringLength((\"\"))\n \
    \   // (0l)\n    // >>> stringLength((\"abc\"))\n    // (3l)\n    def strlen(string\
    \ : String) : Long = {\n        string.foldLeft(0L)((n,s) => n + s.length)\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(strlen((\"\")) == (0l));\n\
    \    assert(strlen((\"x\")) == (1l));\n    assert(strlen((\"asdasnakj\")) == (9l));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjv4vq7a8.scala:10:43 ------------------------\e\
    [0m\e[0m\n\e[31m10 |\e[0m        string.foldLeft(\e[31m0L\e[0m)((\e[36mn\e[0m,\e\
    [36ms\e[0m) => n + s.length)\n\e[31m\e[31m   |\e[0m                          \
    \               ^^^^^^^^\e[0m\n\e[31m   |\e[0m                               \
    \     value length is not a member of Char\n1 error found\n"
  stdout: ''
  timestamp: 1659978717
