language: scala
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      // Define a pattern to extract the valid file's\
    \ name\n      val pattern = Pattern.compile(\"^[^.]+[.](txt|exe|dll)$\")\n   \
    \   // Define a pattern to extract the substring before the dot\n      val pattern1\
    \ = Pattern.compile(\"^[^.]+\")\n      // Define a pattern to extract the substring\
    \ after the dot\n      val pattern2 = Pattern.compile(\"[.]([^.]+)\")\n      //\
    \ Extract the substring before the dot from the given file name\n      val substr_before_dot\
    \ = pattern1.findFirstIn(file_name)\n      // Extract the substring after the\
    \ dot from the given file name\n      val substr_after_dot = pattern2.findFirstIn(substr_before_dot)\n\
    \      // Extract the valid file's name\n      val file_name = substr_after_dot.group(0)\n\
    \      // Return the result\n      if(file_name.length > 3 && file_name.contains('.')){\n\
    \        if(substr_after_dot.group(0).equals(\".\")){\n          if(file_name.startsWith(\"\
    a\") || file_name.startsWith(\"A\")){\n            if(file_name.endsWith(\".txt\"\
    ) || file_name.endsWith(\".exe\") || file_name.endsWith(\".dll\")){\n        \
    \      return \"Yes\"\n            }\n          }\n          if(file_name.startsWith(\"\
    0\") || file_name.startsWith(\"9\")){\n            if(file_name.endsWith(\".txt\"\
    ) || file_name.endsWith(\".exe\") || file_name.endsWith(\".dll\")){\n        \
    \      return \"Yes\"\n            }\n          }\n        }\n      }\n      \"\
    No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmf3ap8xh.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mpattern\e[0m = Pattern.compile(\e\
    [31m\"^[^.]+[.](txt|exe|dll)$\"\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Pattern\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmf3ap8xh.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m      \e[33mval\e[0m \e[36mpattern1\e[0m = Pattern.compile(\e\
    [31m\"^[^.]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Not found: Pattern\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmf3ap8xh.scala:24:21 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m      \e[33mval\e[0m \e[36mpattern2\e[0m = Pattern.compile(\e\
    [31m\"[.]([^.]+)\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: Pattern\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result : String = \"No\"\n        if (file_name.count(_.isDigits)\
    \ < 3){\n            result = \"No\"\n        }else if (file_name.contains(\"\
    .\")){\n            val file_name = file_name.split(\".\").head\n            if\
    \ (file_name.forall(_.matches(\"[a-zA-Z]+\"))) {\n                val file_name\
    \ = file_name.split(\".\").last\n                if (file_name.contains(\"txt\"\
    ) || file_name.contains(\"exe\") || file_name.contains(\"dll\")){\n          \
    \          result = \"Yes\"\n                }else{\n                    result\
    \ = \"No\"\n                }\n            }else{\n                result = \"\
    No\"\n            }\n        }else{\n            result = \"No\"\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkzdv_kw0.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (file_name.count(_.isDigits) <\
    \ \e[31m3\e[0m){\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value isDigits is not a member\
    \ of Char\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkzdv_kw0.scala:23:28 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.split(\e\
    [31m\".\"\e[0m).head\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\
    \e[31m   |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkzdv_kw0.scala:25:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e\
    [0m \e[36mfile_name\e[0m = file_name.split(\e[31m\".\"\e[0m).last\n\e[31m\e[31m\
    \   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m            \
    \                    Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var status = \"No\";\n        if (file_name.length\
    \ > 3 || file_name.indexOf('.') == -1 || file_name.charAt(0) == '0' || file_name.charAt(0)\
    \ == '9') {\n            status = \"Yes\";\n        }\n        if (file_name.indexOf('.')\
    \ != -1 && file_name.charAt(file_name.indexOf('.') + 1) != '.') {\n          \
    \  status = \"No\";\n        }\n        if (file_name.substring(0, 1) == ('A'\
    \ || 'a' || 'B' || 'b' || 'C' || 'c' || 'D' || 'd' || 'E' || 'e' || 'F' || 'f'\
    \ || 'G' || 'g' || 'H' || 'h' || 'I' || 'i' || 'J' || 'j' || 'K' || 'k' || 'L'\
    \ || 'l' || 'M' || 'm' || 'N' || 'n' || 'O' || 'o' || 'P' || 'p' || 'Q' || 'q'\
    \ || 'R' || 'r' || 'S' || 's' || 'T' || 't' || 'U' || 'u' || 'V' || 'v' || 'W'\
    \ || 'w' || 'X' || 'x' || 'Y' || 'y' || 'Z' || 'z') {\n            status = \"\
    No\";\n        }\n        if (file_name.substring(file_name.indexOf('.') + 1)\
    \ != ('txt' || 'exe' || 'dll')) {\n            status = \"No\";\n        }\n \
    \       return status;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4n3l58r4.scala:29:8 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m (file_name.substring(file_name.indexOf(\e\
    [31m'.'\e[0m) + \e[31m1\e[0m) != (\e[31m'txt\e[0m' || \e[31m'exe\e[0m' || \e[31m'dll\e\
    [0m')) {\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        ')' expected,\
    \ but 'if' found\n\e[31m\e[31m-- Error: /tmp/tmp4n3l58r4.scala:29:86 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m (file_name.substring(file_name.indexOf(\e\
    [31m'.'\e[0m) + \e[31m1\e[0m) != (\e[31m'txt\e[0m' || \e[31m'exe\e[0m' || \e[31m'dll\e\
    [0m')) {\n\e[31m\e[31m   |\e[0m                                              \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                                 unclosed character literal\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4n3l58r4.scala:26:46 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (file_name.substring(\e[31m0\e[0m, \e\
    [31m1\e[0m) == (\e[31m'A'\e[0m || \e[31m'a'\e[0m || \e[31m'B'\e[0m || \e[31m'b'\e\
    [0m || \e[31m'C'\e[0m || \e[31m'c'\e[0m || \e[31m'D'\e[0m || \e[31m'd'\e[0m ||\
    \ \e[31m'E'\e[0m || \e[31m'e'\e[0m || \e[31m'F'\e[0m || \e[31m'f'\e[0m || \e[31m'G'\e\
    [0m || \e[31m'g'\e[0m || \e[31m'H'\e[0m || \e[31m'h'\e[0m || \e[31m'I'\e[0m ||\
    \ \e[31m'i'\e[0m || \e[31m'J'\e[0m || \e[31m'j'\e[0m || \e[31m'K'\e[0m || \e[31m'k'\e\
    [0m || \e[31m'L'\e[0m || \e[31m'l'\e[0m || \e[31m'M'\e[0m || \e[31m'm'\e[0m ||\
    \ \e[31m'N'\e[0m || \e[31m'n'\e[0m || \e[31m'O'\e[0m || \e[31m'o'\e[0m || \e[31m'P'\e\
    [0m || \e[31m'p'\e[0m || \e[31m'Q'\e[0m || \e[31m'q'\e[0m || \e[31m'R'\e[0m ||\
    \ \e[31m'r'\e[0m || \e[31m'S'\e[0m || \e[31m's'\e[0m || \e[31m'T'\e[0m || \e[31m't'\e\
    [0m || \e[31m'U'\e[0m || \e[31m'u'\e[0m || \e[31m'V'\e[0m || \e[31m'v'\e[0m ||\
    \ \e[31m'W'\e[0m || \e[31m'w'\e[0m || \e[31m'X'\e[0m || \e[31m'x'\e[0m || \e[31m'Y'\e\
    [0m || \e[31m'y'\e[0m || \e[31m'Z'\e[0m || \e[31m'z'\e[0m) {\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                    value || is not a member of Char\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmp4n3l58r4.scala:64:0 ----------"
  stdout: ''
  timestamp: 1660010681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name : String = \"No\"\n        var\
    \ first_letter : String = null\n        var dot_counter : Int = 0\n        var\
    \ dot_counter : Int = 0\n        var dot_counter : Int = 0\n        var dot_counter\
    \ : Int = 0\n        var dot_counter : Int = 0\n        var dot_counter : Int\
    \ = 0\n        \n        if(file_name.length() > 3) {\n            file_name =\
    \ null\n        }\n        else {\n            \n            first_letter = file_name.charAt(0)\n\
    \            \n            dot_counter = file_name.lastIndexOf('.')\n        \
    \    \n            if(dot_counter < 0) {\n                file_name = null\n \
    \           }\n            \n            else {\n                dot_counter =\
    \ file_name.lastIndexOf('.', dot_counter + 1)\n                \n            \
    \    if(dot_counter < 0) {\n                    file_name = null\n           \
    \     }\n                \n                else {\n                    dot_counter\
    \ = file_name.indexOf('.')\n                    \n                    if(dot_counter\
    \ < 0) {\n                        file_name = null\n                    }\n  \
    \                  \n                    else {\n                        dot_counter\
    \ = file_name.indexOf('.', dot_counter + 1)\n                        \n      \
    \                  if(dot_counter < 0) {\n                            file_name\
    \ = null\n                        }\n                        \n              \
    \          else {\n                            dot_counter = file_name.indexOf('.',\
    \ dot_counter + 1)\n                            \n                           \
    \ if(dot_counter < 0) {\n                                file_name = null\n  \
    \                          }\n                            \n                 \
    \           else {\n                                dot_counter = file_name.indexOf('.',\
    \ dot_counter + 1)\n                                \n                       \
    \         if(dot_counter < 0) {\n                                    file_name\
    \ = null\n                                }\n                                \n\
    \                                else {\n                                    dot_counter\
    \ = file_name.indexOf('.', dot_counter + 1)\n                                \
    \    \n                                    if(dot_counter < 0) {\n           \
    \                             file_name = null\n                             \
    \       }\n                                    \n                            \
    \        else {\n                                        dot_counter = file_name.indexOf('.',\
    \ dot_counter + 1)\n                                        \n               \
    \                         if(dot_counter < 0) {\n                            \
    \                file_name = null\n                                        }\n\
    \                                        \n                                  \
    \      else {\n                                            dot_counter = file_name.indexOf('.',\
    \ dot_counter + 1)\n                                            \n           \
    \                                 if(dot_counter < 0) {\n                    \
    \                            file_name = null\n                              \
    \              }\n                                            \n             \
    \                               else {\n                                     \
    \           dot_counter = file_name.indexOf('.', dot_counter + 1)\n          \
    \                                      \n                                    \
    \            if(dot_counter < 0) {\n                                         \
    \           file_name = null\n                                               \
    \ }\n                                                \n                      \
    \                          else {\n                                          \
    \          dot_counter = file_name.indexOf('.', dot_counter + 1)\n           \
    \                                         \n                                 \
    \                   if(dot_counter < 0) {\n                                  \
    \                      file_name = null\n                                    \
    \                }\n                                                    \n   \
    \                                                 else {\n                   \
    \                                     dot_counter = file_name.indexOf('.', dot_counter\
    \ + 1)\n                                                        \n           \
    \                                             if(dot_counter < 0) {\n        \
    \                                                    file_name = null\n      \
    \                                                  }\n                       \
    \                                 \n                                         \
    \               else {\n                                                     \
    \       dot_counter = file_name.indexOf('.', dot_counter + 1)\n              \
    \                                              \n                            \
    \                                if(dot_counter < 0) {\n                     \
    \                                           file_name = null\n               \
    \                                             }\n                            \
    \                                \n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe7eh9d1c.scala:157:0 ---------------------------\e\
    [0m\e[0m\n\e[31m157 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe7eh9d1c.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdot_counter\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdot_counter is already\
    \ defined as \e[33mvariable\e[0m \e[35mdot_counter\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe7eh9d1c.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdot_counter\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdot_counter is already\
    \ defined as \e[33mvariable\e[0m \e[35mdot_counter\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe7eh9d1c.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdot_counter\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdot_counter is already\
    \ defined as \e[33mvariable\e[0m \e[35mdot_counter\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe7eh9d1c.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdot_counter\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdot_counter is already\
    \ defined as \e[33mvariable\e[0m \e[35mdot_counter\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe7eh9d1c.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1660010684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result : String = \"No\"\n        var index\
    \ : Int = 0\n        var dot_count : Int = 0\n        val file_name = file_name.trim\n\
    \        if (file_name =~ \"^([A-Za-z])+([0-9]+)(\\\\.txt|\\\\.exe|\\\\.dll)$\"\
    ) {\n            index = file_name.indexOf(\".\")\n            if (index >= 0)\
    \ {\n                val dot_index = file_name.indexOf(\".\", index + 1)\n   \
    \             if (dot_index >= 0) {\n                    dot_count = dot_index\
    \ - index\n                    if (dot_count > 3) {\n                        result\
    \ = \"No\"\n                    }\n                    else {\n              \
    \          result = \"Yes\"\n                    }\n                }\n      \
    \      }\n            else {\n                result = \"No\"\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcqzuzljr.scala:22:24 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n         if (!file_name contains '.') \n           \
    \   file_name \n         else if (file_name length <= 3) \n              \"No\"\
    \ \n         else if (!file_name startsWith ('a')) \n              \"No\" \n \
    \        else if (!(file_name contains ('d')) \n              \"No\" \n      \
    \   else if (!(file_name contains ('e')) \n              \"No\" \n         else\
    \ if (!(file_name contains ('x')) \n              \"No\" \n         else if (!(file_name\
    \ contains ('t')) \n              \"No\" \n         else if (!(file_name contains\
    \ ('t')) \n              \"No\"\n         else if (!(file_name contains ('f'))\
    \ \n              \"No\" \n         else if (!(file_name contains ('s')) \n  \
    \            \"No\" \n         else if (!(file_name contains ('r')) \n       \
    \       \"No\" \n         else if (!(file_name contains ('t')) \n            \
    \  \"No\"\n         else \"Yes\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5gtacshx.scala:21:38 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m         \e[33melse\e[0m \e[33mif\e[0m (file_name length\
    \ <= \e[31m3\e[0m) \n\e[31m\e[31m   |\e[0m                                   \
    \   ^\e[0m\n\e[31m   |\e[0m                                 ')' expected, but\
    \ integer literal found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5gtacshx.scala:26:14\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m              \e[31m\"\
    No\"\e[0m \n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m       \
    \       ')' expected, but string literal found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp5gtacshx.scala:19:13 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m         \e[33mif\e[0m (!file_name contains \e[31m'.'\e[0m) \n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value unary_!\
    \ is not a member of String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5gtacshx.scala:21:35\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m         \e[33melse\e[0m\
    \ \e[33mif\e[0m (file_name length <= \e[31m3\e[0m) \n\e[31m\e[31m   |\e[0m   \
    \                                ^^\e[0m\n\e[31m   |\e[0m                    \
    \               Not found: <=\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp5gtacshx.scala:23:18 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m         \e[33melse\e[0m \e[33mif\e[0m (!file_name startsWith (\e[31m'a'\e\
    [0m)) \n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value unary_! is not a member of String\n\e[33m\e[33m-- [E129]\
    \ Potential Issue Warning: /tmp/tmp5gtacshx.scala:75:0 -----------------\e[0m\e\
    [0m\n\e[33m75 |\e[0m}\n\e[33m\e[33m   |\e[0m ^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n5 errors found\n"
  stdout: ''
  timestamp: 1660010681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code goes here\n        val s = file_name.split(\"\
    \\\\.\").length\n        if(s <= 3) \"No\" else \"Yes\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb4cq9m1v.scala:24)\n\tat Problem.main(tmpb4cq9m1v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name match {\n            case file_name\
    \ : String if (file_name matches \".*[0-9][0-9]*\" &&\n                      \
    \               file_name matches \".*[A-Za-z].*\" &&\n                      \
    \               file_name contains \".\" && \n                               \
    \      file_name startsWith \"[0-9]\" && \n                                  \
    \   file_name endsWith \"[A-Za-z]\") => \"Yes\"\n            case file_name :\
    \ String if (file_name contains \".\") => \"Yes\"\n            case file_name\
    \ : String if (file_name startsWith \"[0-9]\") => \"Yes\"\n            case file_name\
    \ : String if (file_name endsWith \"[A-Za-z]\") => \"Yes\"\n            case file_name\
    \ : String if (file_name startsWith \"a\" && file_name contains \"b\") => \"Yes\"\
    \n            case file_name : String if (file_name startsWith \"A\" && file_name\
    \ contains \"B\") => \"Yes\"\n            case _ => \"No\"\n        }) \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1410zez6.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1410zez6.scala:20:74 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            \e[33mcase\e[0m file_name : String \e[33mif\e[0m (file_name matches\
    \ \e[31m\".*[0-9][0-9]*\"\e[0m &&\n\e[31m\e[31m   |\e[0m                     \
    \                                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                      value && is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1410zez6.scala:21:70 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                                     file_name matches\
    \ \e[31m\".*[A-Za-z].*\"\e[0m &&\n\e[31m\e[31m   |\e[0m                      \
    \                                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                  value && is not a member of String\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1410zez6.scala:24:71 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                                     file_name endsWith\
    \ \e[31m\"[A-Za-z]\"\e[0m) => \e[31m\"Yes\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                                                 ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                              Found:    (\e[32m\"\
    Yes\"\e[0m : String)\n\e[31m   |\e[0m                                        \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1410zez6.scala:25:67 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            \e[33mcase\e[0m file_name : String \e[33mif\e[0m (file_name\
    \ contains \e[31m\".\"\e[0m) => \e[31m\"Yes\"\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                                                               ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (\e[32m\"\
    Yes\"\e[0m : String)\n\e[31m   |\e[0m                                        \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660010684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        if(file_name.length()==0)\
    \ {\n            \"No\"\n        }\n        else if(file_name.indexOf(\".\") <\
    \ 0 ) {\n            \"No\"\n        }\n        else if(file_name.substring(0,1)\
    \ < \"a\" || file_name.substring(0,1) > \"z\" ){\n            \"No\"\n       \
    \ }\n        else if(file_name.substring(file_name.length-1)!= \".\" && file_name.substring(0,1).equals(\"\
    .\")){\n            \"No\"\n        }\n        else if(file_name.substring(file_name.length-2)!=\"\
    .\" && file_name.substring(0,1).equals(\".\") && file_name.substring(1,2).equals(\"\
    .\")){\n            \"No\"\n        }\n        else if(file_name.substring(file_name.length-3)!=\"\
    .\" && file_name.substring(0,1).equals(\".\") && file_name.substring(1,2).equals(\"\
    .\") && file_name.substring(2,3).equals(\".\")){\n            \"No\"\n       \
    \ }\n        else if(file_name.substring(file_name.length-4)!=\".\" && file_name.substring(0,1).equals(\"\
    .\") && file_name.substring(1,2).equals(\".\") && file_name.substring(2,3).equals(\"\
    .\") && file_name.substring(3,4).equals(\".\")){\n            \"No\"\n       \
    \ }\n        else if(file_name.substring(file_name.length-5)!=\".\" && file_name.substring(0,1).equals(\"\
    .\") && file_name.substring(1,2).equals(\".\") && file_name.substring(2,3).equals(\"\
    .\") && file_name.substring(3,4).equals(\".\") && file_name.substring(4,5).equals(\"\
    .\")){\n            \"No\"\n        }\n        else if(file_name.substring(file_name.length-6)!=\"\
    .\" && file_name.substring(0,1).equals(\".\") && file_name.substring(1,2).equals(\"\
    .\") && file_name.substring(2,3).equals(\".\") && file_name.substring(3,4).equals(\"\
    .\") && file_name.substring(4,5).equals(\".\") && file_name.substring(5,6).equals(\"\
    .\")){\n            \"No\"\n        }\n        else if(file_name.substring(file_name.length-7)!=\"\
    .\" && file_name.substring(0,1).equals(\".\") && file_name.substring(1,2).equals(\"\
    .\") && file_name.substring(2,3).equals(\".\") && file_name.substring(3,4).equals(\"\
    .\") && file_name.substring(4,5).equals(\".\") && file_name.substring(5,6).equals(\"\
    .\") && file_name.substring(6,7).equals(\".\")){\n            \"No\"\n       \
    \ }\n        else if(file_name.substring(file_name.length-8)!=\".\" && file_name.substring(0,1).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi4mdf6po.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpi4mdf6po.scala:19:24 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regex = \"\"\"^[0-9]{1,3}\\.[a-z][^\\.]+\\\
    .(txt|exe|dll)$\"\"\".r\n        if(file_name !~ regex) {\n            return\
    \ \"No\"\n        }\n        return \"Yes\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_d74kl8x.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(file_name !~ regex) {\n\e[31m\e\
    [31m   |\e[0m           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value !~ is\
    \ not a member of String - did you mean file_name.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"\"\"(\\d{1,3})\\.(txt|exe|dll)\"\
    \"\".r\n        val matched = file_name.matches(pattern)\n        if(matched)\
    \ (\"Yes\") else (\"No\")\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ai1etux.scala:20:40\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmatched\e\
    [0m = file_name.matches(pattern)\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (pattern : scala.util.matching.Regex)\n\e[31m   |\e[0m                  \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val names = file_name.split(\"\\\\.\") \n  \
    \      val firstName = names(0).split(\"\")\n        if (firstName.length == 0)\n\
    \          return \"No\"\n        if (firstName.length > 3)\n          return\
    \ \"No\"\n        if (!(firstName.head >= 'a' && firstName.head <= 'z') && !(firstName.head\
    \ >= 'A' && firstName.head <= 'Z'))\n          return \"No\"\n        if (!names(1).contains('.')\
    \ || names(1).split('.').head == \"\") \n          return \"No\"\n        if (names(1).split('.').head\
    \ != \"txt\" && names(1).split('.').head != \"exe\" && names(1).split('.').head\
    \ != \"dll\")\n            return \"No\"\n        return \"Yes\"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf2s_ljy_.scala:25:32\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (!(firstName.head\
    \ >= \e[31m'a'\e[0m && firstName.head <= \e[31m'z'\e[0m) && !(firstName.head >=\
    \ \e[31m'A'\e[0m && firstName.head <= \e[31m'Z'\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                ^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (\e[31m'a'\e[0m : Char)\n\e[31m   |\e[0m             \
    \                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpf2s_ljy_.scala:25:57 --------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (!(firstName.head >= \e[31m'a'\e[0m\
    \ && firstName.head <= \e[31m'z'\e[0m) && !(firstName.head >= \e[31m'A'\e[0m &&\
    \ firstName.head <= \e[31m'Z'\e[0m))\n\e[31m\e[31m   |\e[0m                  \
    \                                       ^^^\e[0m\n\e[31m   |\e[0m            \
    \                                      Found:    (\e[31m'z'\e[0m : Char)\n\e[31m\
    \   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf2s_ljy_.scala:25:85\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (!(firstName.head\
    \ >= \e[31m'a'\e[0m && firstName.head <= \e[31m'z'\e[0m) && !(firstName.head >=\
    \ \e[31m'A'\e[0m && firstName.head <= \e[31m'Z'\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                          \
    \        Found:    (\e[31m'A'\e[0m : Char)\n\e[31m   |\e[0m                  \
    \                                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpf2s_ljy_.scala:25:110 -------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (!(firstName.head >= \e[31m'a'\e\
    [0m && firstName.head <= \e[31m'z'\e[0m) && !(firstName.head >= "
  stdout: ''
  timestamp: 1660010684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n    \timport scala.collection.mutable.ListBuffer\n \
    \       val fileName = file_name // make a local variable that is only used in\
    \ this method\n        val nameChars = fileName.split(\"\").toList\n        //\
    \ Checks to see if there are more than three digits in the file\n        if (nameChars.length\
    \ > 3) {\n            val noDigits = fileName.substring(0, fileName.length-1)\n\
    \            if (nameChars.count(_ > 0) > 2) {\n                return \"No\"\n\
    \            }\n        }\n        // Checks if the name only contains one dot\n\
    \        if (fileName.indexOf('.') == -1) {\n            return \"No\"\n     \
    \   }\n        // Checks to see if the name starts with a letter\n        if (nameChars.count(_\
    \ > 0) < nameChars.length + 1) {\n            return \"No\"\n        }\n     \
    \   // Checks to see if the name contains one of the 3 extensions\n        val\
    \ ext = fileName.substring(fileName.length-3, fileName.length)\n        if (ext\
    \ == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n            return \"Yes\"\
    \n        }\n        return \"No\"\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp90ugblx8.scala:20:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = file_name\
    \ \e[34m// make a local variable that is only used in this method\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations of tabs\
    \ and spaces in indentation prefixes.\n\e[31m   |\e[0m   Previous indent : 4 spaces,\
    \ 1 tab\n\e[31m   |\e[0m   Latest indent   : 8 spaces\n\e[31m\e[31m-- Error: /tmp/tmp90ugblx8.scala:21:8\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m      \
    \  \e[33mval\e[0m \e[36mnameChars\e[0m = fileName.split(\e[31m\"\"\e[0m).toList\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations\
    \ of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m   Previous indent\
    \ : 4 spaces, 1 tab\n\e[31m   |\e[0m   Latest indent   : 8 spaces\n\e[31m\e[31m--\
    \ Error: /tmp/tmp90ugblx8.scala:23:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (nameChars.length > \e[31m3\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations\
    \ of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m   Previous indent\
    \ : 4 spaces, 1 tab\n\e[31m   |\e[0m   Latest indent   : 8 spaces\n\e[31m\e[31m--\
    \ Error: /tmp/tmp90ugblx8.scala:30:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mif\e[0m (fileName.indexOf(\e[31m'.'\e[0m)\
    \ == -\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m  \
    \ Incompatible combinations of tabs and spaces in indentation prefixes.\n\e[31m\
    \   |\e[0m   Previous indent : 4 spaces, 1 tab\n\e[31m   |\e[0m   Latest indent\
    \   : 8 spaces\n\e[31m\e[31m-- Error: /tmp/tmp90ugblx8.scala:34:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mif\e[0m (nameChars.count(_ > \e[31m0\e\
    [0m) < nameChars.length + \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\
    \e[31m   |\e[0m   Incompatible combinations of tabs and spaces in indentation\
    \ prefixes.\n\e[31m   |\e[0m   Previous indent : 4 spaces, 1 tab\n\e[31m   |\e\
    [0m   Latest indent   : 8 spaces\n\e[31m\e[31m-- Error: /tmp/t"
  stdout: ''
  timestamp: 1660010683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_list = file_name.split(\"\")\n    \
    \    if(file_list.length <> 3) {\n            return \"No\"\n        }\n     \
    \   if(file_list.tail.count(x => x == \".\") != 1) {\n            return \"No\"\
    \n        }\n        if(file_list.head == \"\" || file_list.head < 'a' || file_list.head\
    \ > 'z') {\n            return \"No\"\n        }\n        if(file_list.tail.filter(x\
    \ => x !=\".\").filter(x => x != \"txt\" && x != \"exe\" && x != \"dll\").count(x\
    \ => x == \"\") != 1) {\n            return \"No\"\n        }\n        \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd1tk5sz3.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(file_list.length <> \e[31m3\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \           value <> is not a member of Int - did you mean Int.<<?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpd1tk5sz3.scala:26:52 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m(file_list.head == \e[31m\"\"\e\
    [0m || file_list.head < \e[31m'a'\e[0m || file_list.head > \e[31m'z'\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (\e[31m'a'\e[0m : Char)\n\e[31m   |\e[0m                                 \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpd1tk5sz3.scala:26:76 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mif\e[0m(file_list.head == \e[31m\"\"\e[0m || file_list.head\
    \ < \e[31m'a'\e[0m || file_list.head > \e[31m'z'\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                                                                            ^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (\e[31m'z'\e[0m : Char)\n\e[31m   |\e[0m                                 \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name = null || file_name.length < 3\
    \ || file_name.indexOf('.') != -1 || file_name.substring(0, 1) == '0' || file_name.substring(file_name.lastIndexOf('.')\
    \ + 1).toLowerCase().indexOf(\"a\") == -1){\n             return \"No\"\n    \
    \    }\n        else{\n            val s = file_name.substring(file_name.lastIndexOf('.')\
    \ + 1)\n            val subs = s.split(\",\")\n            if(subs.contains(\"\
    txt\") || subs.contains(\"exe\") || subs.contains(\"dll\")){\n               \
    \ return \"Yes\"\n            }\n            else{\n                return \"\
    No\"\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_isqvplg.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(file_name = \e[31mnull\e[0m ||\
    \ file_name.length < \e[31m3\e[0m || file_name.indexOf(\e[31m'.'\e[0m) != -\e\
    [31m1\e[0m || file_name.substring(\e[31m0\e[0m, \e[31m1\e[0m) == \e[31m'0'\e[0m\
    \ || file_name.substring(file_name.lastIndexOf(\e[31m'.'\e[0m) + \e[31m1\e[0m).toLowerCase().indexOf(\e\
    [31m\"a\"\e[0m) == -\e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       value || is not a member\
    \ of Null\n1 error found\n"
  stdout: ''
  timestamp: 1660010682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = True\n        if(file_name != ''){\n\
    \            if(!file_name.matches(\"[0-9]\")){\n                valid = False\n\
    \            }\n            if(!file_name.contains('.')){\n                valid\
    \ = False\n            }\n            if(!file_name.substring(0, 1).matches(\"\
    [a-zA-Z]\")){\n                valid = False\n            }\n            if(!file_name.substring(1,\
    \ file_name.length).matches(\"(txt|exe|dll)\")){\n                valid = False\n\
    \            }\n        }\n        if(!valid){\n            return \"No\"\n  \
    \      }else{\n            return \"Yes\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphep_9b3y.scala:20:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(file_name != ''){\n\e[31m\e[31m\
    \   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                    \
    \    empty character literal\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphep_9b3y.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e\
    [36mvalid\e[0m = True\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphep_9b3y.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(!file_name.matches(\e[31m\"\
    [0-9]\"\e[0m)){\n\e[31m\e[31m   |\e[0m            ^^\e[0m\n\e[31m   |\e[0m   \
    \         Not found: 'if\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphep_9b3y.scala:22:24 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                valid = False\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: False\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphep_9b3y.scala:25:24 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                valid = False\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphep_9b3y.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                valid = False\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphep_9b3y.scala:31:24 ------------------------\e[0m\e\
    [0m\n\e[3"
  stdout: ''
  timestamp: 1660010680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.txt$|^[0-9]{1,3}\\\
    .exe$|^[0-9]{1,3}\\.dll$\"\n        val matcher = pattern.r findFirstIn file_name\n\
    \        matcher.map(fileName => if (fileName != \"\" && fileName.charAt(0) >\
    \ 'a' && fileName.charAt(0) > 'z') \"Yes\" else \"No\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5l44tntm.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.txt$|^[0-9]{1,3}\\.exe$|^[0-9]{1,3}\\.dll$\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m         \
    \                          invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp5l44tntm.scala:19:53\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"^[0-9]{1,3}\\.txt$|^[0-9]{1,3}\\\
    .exe$|^[0-9]{1,3}\\.dll$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                         invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp5l44tntm.scala:19:71\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"^[0-9]{1,3}\\.txt$|^[0-9]{1,3}\\\
    .exe$|^[0-9]{1,3}\\.dll$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                           invalid escape character\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5l44tntm.scala:21:19 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        matcher.map(\e[36mfileName\e[0m => \e[33mif\e\
    [0m (fileName != \e[31m\"\"\e[0m && fileName.charAt(\e[31m0\e[0m) > \e[31m'a'\e\
    [0m && fileName.charAt(\e[31m0\e[0m) > \e[31m'z'\e[0m) \e[31m\"Yes\"\e[0m \e[33melse\e\
    [0m \e[31m\"No\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regex = \"\"\"^((?!\\d{3})(?!\\.)[a-zA-Z].*\\\
    .[a-zA-Z]{2,3})$\"\"\".r\n        val isFileValid = regex.findFirstIn(file_name).isDefined\n\
    \        val isDotFound = file_name.indexOf('.') != -1\n        val isNotEmpty\
    \ = file_name.nonEmpty\n        val isSingleLetter = file_name.startsWith('a')\n\
    \        val isNotLetter = file_name.startsWith('A')\n        val isValid = \n\
    \            isFileValid &&\n            isDotFound &&\n            isNotEmpty\
    \ &&\n            isSingleLetter &&\n            isNotLetter \n        regex.findFirstIn(file_name).map(str\
    \ => s\"Yes\").getOrElse(s\"No\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50u4icqk.scala:23:50\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misSingleLetter\e\
    [0m = file_name.startsWith(\e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                      ^^^\e[0m\n\e[31m   |\e[0m             \
    \                                     Found:    (\e[31m'a'\e[0m : Char)\n\e[31m\
    \   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50u4icqk.scala:24:47\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misNotLetter\e\
    [0m = file_name.startsWith(\e[31m'A'\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                   ^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Found:    (\e[31m'A'\e[0m : Char)\n\e[31m   |\e\
    [0m                                               Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        def isValid(name : String) : Boolean = \n  \
    \          name.size <= 3 || name.contains(\".\") && name.substring(0, 1).matches(\"\
    [a-zA-Z]\") &&\n            (name.substring(0,name.lastIndexOf('.')).toSet ==\
    \ Set(\"txt\", \"exe\", \"dll\") || \n            name.substring(0,name.lastIndexOf('.')).toSet\
    \ == Set(\"txt\", \"exe\", \"dll\"))\n        isValid(file_name) ? \"Yes\" : \"\
    No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpljlnkysw.scala:21:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            (name.substring(\e[31m0\e[0m,name.lastIndexOf(\e\
    [31m'.'\e[0m)).toSet == Set(\e[31m\"txt\"\e[0m, \e[31m\"exe\"\e[0m, \e[31m\"dll\"\
    \e[0m) || \n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Set[Char] and scala.collection.mutable.Set[String]\
    \ cannot be compared with == or !=.\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m    CanEqual.canEqualSet[\e[35mT\e[0m, \e[35mU\e[0m](/* missing\
    \ */summon[CanEqual[T, U]])\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values\
    \ were found that match type CanEqual[T, U].\n\e[31m\e[31m-- Error: /tmp/tmpljlnkysw.scala:22:12\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     name.substring(\e[31m0\e[0m,name.lastIndexOf(\e[31m'.'\e[0m)).toSet == Set(\e\
    [31m\"txt\"\e[0m, \e[31m\"exe\"\e[0m, \e[31m\"dll\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Set[Char] and scala.collection.mutable.Set[String]\
    \ cannot be compared with == or !=.\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m    CanEqual.canEqualSet[\e[35mT\e[0m, \e[35mU\e[0m](/* missing\
    \ */summon[CanEqual[T, U]])\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values\
    \ were found that match type CanEqual[T, U].\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpljlnkysw.scala:23:27 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        isValid(file_name) ? \e[31m\"Yes\"\e[0m : \e[31m\"No\"\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ ? is not a member of Boolean\n3 errors found\n"
  stdout: ''
  timestamp: 1660010684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n    \tif (file_name.length() > 3 || file_name.lastIndexOf('.')\
    \ < 0 || file_name.substring(0, 1).isEmpty) {\n    \t\treturn \"No\"\n    \t}\n\
    \    \tvar dot : String = _\n    \tvar file_name : String = _\n    \tvar dot_pos\
    \ : int = -1\n    \tfor (i <- 1 to file_name.length-1) {\n    \t\tif (file_name(i)\
    \ != '.') return \"No\"\n    \t}\n    \tfor (i <- 1 to file_name.length-1) {\n\
    \    \t\tif (file_name(i) != '.') {\n    \t\t\tdot_pos = i\n    \t\t\tbreak\n\
    \    \t\t}\n    \t}\n    \tif (dot_pos == -1) dot = \".\"\n    \telse {\n    \t\
    \tfor (i <- 1 to dot_pos) {\n    \t\t\tif (file_name(i) < 'a' || file_name(i)\
    \ > 'z') return \"No\"\n    \t\t}\n    \t}\n    \tif (file_name.substring(dot_pos+1).matches(\"\
    txt|exe|dll\")) return \"Yes\"\n    \telse return \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp87f6g0ys.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    \t\e[33mvar\e[0m \e[36mdot_pos\e[0m : \e[35mint\e\
    [0m = -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \t              ^^^\e[0m\n\e[31m\
    \   |\e[0m    \t              Not found: type int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp87f6g0ys.scala:31:8 -------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    \t\t\tbreak\n\e[31m\e[31m   |\e[0m    \t\t\t^^^^^\e\
    [0m\n\e[31m   |\e[0m    \t\t\tNot found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val index = fileName.lastIndexOf('.')\n    \
    \    if (index == -1) {\n            \"No\"\n        } else {\n            if\
    \ (index == 0 || fileName.substring(0,1) == \"\") {\n                \"No\"\n\
    \            } else if(fileName.substring(0,1) < 'a' || fileName.substring(0,1)\
    \ > 'z') {\n                \"No\"\n            } else if(fileName.substring(0,1)\
    \ > 'a' && fileName.substring(0,1) < 'z') {\n                \"No\"\n        \
    \    } else if(fileName.substring(0,2) == \"..\") {\n                \"No\"\n\
    \            } else if(fileName.substring(index) <> \"txt\" && fileName.substring(index)\
    \ <> \"exe\" && fileName.substring(index) <> \"dll\") {\n                \"No\"\
    \n            } else if(fileName.substring(index,2) == \"..\") {\n           \
    \     \"No\"\n            } else {\n                \"Yes\"\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_3sfxqz.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mindex\e[0m = fileName.lastIndexOf(\e\
    [31m'.'\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: fileName\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk_3sfxqz.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(fileName.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) < \e[31m'a'\e[0m || fileName.substring(\e[31m0\e[0m,\e\
    [31m1\e[0m) > \e[31m'z'\e[0m) {\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: fileName\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_3sfxqz.scala:27:22 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(fileName.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) > \e[31m'a'\e[0m && fileName.substring(\e[31m0\e[0m,\e\
    [31m1\e[0m) < \e[31m'z'\e[0m) {\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: fileName\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_3sfxqz.scala:29:22 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(fileName.substring(\e\
    [31m0\e[0m,\e[31m2\e[0m) == \e[31m\"..\"\e[0m) {\n\e[31m\e[31m   |\e[0m      \
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ fileName\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_3sfxqz.scala:31:22\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m(fileName.substring(index) <> \e[31m\"txt\"\e[0m && fileName.substring(index)\
    \ <> \e[31m\"exe\"\e[0m && fileName.substring(index) <> \e[31m\"dll\"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.substring(0,file_name.lastIndexOf('.')-1)\n\
    \        if (file_name.length==3 && file_name.substring(0,1).equals('0') && file_name.substring(0,1)\
    \ !='9' ) \n            return (\"No\")\n        else if (file_name.contains('.')==false\
    \ && file_name.substring(0,1).equals('a') && file_name.substring(0,1) !='z' &&\
    \ file_name.substring(0,1) !='A') \n            return (\"No\")\n        else\
    \ if (file_name.contains('.')==true && file_name.substring(0,1).equals('0') &&\
    \ file_name.substring(0,1) !='9' ) \n            return (\"No\")\n        else\
    \ \n            return (\"Yes\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0dnpodxw.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.lastIndexOf(\e[31m'.'\e[0m)-\e[31m1\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                     \
    \   Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name == \"\" || file_name.length() !=\
    \ 6){\n          return \"No\"\n        }\n        \n        var file_extension\
    \ = file_name.substring(file_name.lastIndexOf('.') + 1)\n        \n        if(file_extension.equals(\"\
    exe\") || file_extension.equals(\"dll\") || file_extension.equals(\"txt\")){\n\
    \          return \"Yes\"\n        } else {\n          return \"No\"\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprgs9q7gb.scala:32)\n\tat Problem.main(tmprgs9q7gb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name.matches(\"[0-9]{3}\")){\n     \
    \       if(file_name.contains(\".\")){\n                if(file_name.indexOf(\"\
    .\") > 1)\n                    return \"No\"\n                else if(file_name.charAt(0).toUpperCase\
    \ == (file_name.charAt(0).toLowerCase))\n                    return \"No\"\n \
    \               else\n                    return \"Yes\"\n            }\n    \
    \    }\n        else\n            return \"No\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsqr1aikw.scala:23:44 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m(file_name.charAt(\e\
    [31m0\e[0m).toUpperCase == (file_name.charAt(\e[31m0\e[0m).toLowerCase))\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        value toUpperCase is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // write your code here\n        val file_list\
    \ = file_name.split(\"\\\\.\").map(_.head.toInt)\n        val file_name = file_name.split(\"\
    \\\\.\").last\n        val result = if (file_name.length() > 3) \"Yes\" else \"\
    No\"\n        val dot_name = file_list.last.substring(0,1)\n        val file_name\
    \ = file_list.last.substring(1,file_list.length-1)\n        val ext = file_list.last.substring(file_list.length-1,file_list.length)\n\
    \        if (dot_name == \".\" && file_name != \"exe\" && file_name != \"dll\"\
    ) \"Yes\" else \"No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd1f6siy2.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_list.last.substring(\e\
    [31m1\e[0m,file_list.length-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpd1f6siy2.scala:21:24 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.split(\e\
    [31m\"\\\\.\"\e[0m).last\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\
    \e[31m   |\e[0m                        Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var flag = false\n        var file_name = file_name.trim()\n\
    \        var temp_name = \"\"\n        var extension = \"\"\n        var dot_count\
    \ = 0\n        val file_name = file_name.trim()\n        // if file name is more\
    \ than 3 characters long, return \"No\"\n        if (file_name.length() <= 3)\
    \ {\n            flag = false\n        }\n        // if the file name is only\
    \ contains one dot ('.'), return \"No\"\n        else if (file_name.indexOf(\"\
    .\") == -1) {\n            flag = false\n        }\n        // if the file name\
    \ contains only empty substring, return \"No\"\n        else if (file_name.trim.isEmpty)\
    \ {\n            flag = false\n        }\n        // if the file name doesn't\
    \ start with a letter from the latin alphabet or \n        // doesn't end with\
    \ one of these strings(['txt', 'exe', 'dll']), return \"No\"\n        else if\
    \ (file_name.trim.length > 3 || file_name.trim.startsWith(\"a\") || file_name.trim.startsWith(\"\
    b\") || file_name.trim.startsWith(\"c\") || file_name.trim.startsWith(\"d\") ||\
    \ file_name.trim.startsWith(\"e\") || file_name.trim.startsWith(\"f\") || file_name.trim.startsWith(\"\
    g\") || file_name.trim.startsWith(\"h\") || file_name.trim.startsWith(\"i\") ||\
    \ file_name.trim.startsWith(\"j\") || file_name.trim.startsWith(\"k\") || file_name.trim.startsWith(\"\
    l\") || file_name.trim.startsWith(\"m\") || file_name.trim.startsWith(\"n\") ||\
    \ file_name.trim.startsWith(\"o\") || file_name.trim.startsWith(\"p\") || file_name.trim.startsWith(\"\
    q\") || file_name.trim.startsWith(\"r\") || file_name.trim.startsWith(\"s\") ||\
    \ file_name.trim.startsWith(\"t\") || file_name.trim.startsWith(\"u\") || file_name.trim.startsWith(\"\
    v\") || file_name.trim.startsWith(\"w\") || file_name.trim.startsWith(\"x\") ||\
    \ file_name.trim.startsWith(\"y\") || file_name.trim.startsWith(\"z\")) {\n  \
    \          flag = false\n        }\n        // if the file name doesn't contain\
    \ '.', return \"No\"\n        else if (file_name.indexOf('.') > -1) {\n      \
    \      flag = false\n        }\n        else {\n            temp_name = file_name.substring(0)\n\
    \            // count the number of dots in the file name\n            dot_count\
    \ = temp_name.lastIndexOf(\".\")\n            // if dot_count is equal to 0\n\
    \            if (dot_count == -1) {\n                temp_name = temp_name.substring(1)\n\
    \                // if file name contains any extension, get the extension name\n\
    \                if (temp\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplbmio30r.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplbmio30r.scala:86:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m86 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplbmio30r.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmplbmio30r.scala:20:24 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name.trim()\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       Recursive \e[33mvariable\e[0m \e[35mfile_name\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplbmio30r.scala:27:17 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            flag = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Unit\n\e\
    [31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplbmio30r.scala:31:17 --------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m            flag = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Unit\n\e\
    [31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplbmio30r.scala:35:17 --------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m     "
  stdout: ''
  timestamp: 1660010691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      val splitName = file_name.split(\"\\\\.\")\n \
    \     if (splitName.length > 2) {\n        if (splitName(0) matches \"^[a-z]+$\"\
    \ && splitName(1) != \"\") {\n          if (splitName(2) matches \"^(exe|dll)$\"\
    ) {\n            return \"Yes\"\n          } else {\n            return \"No\"\
    \n          }\n        } else {\n          return \"No\"\n        }\n      } else\
    \ {\n        return \"No\"\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm3zznbwk.scala:21:44 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (splitName(\e[31m0\e[0m) matches\
    \ \e[31m\"^[a-z]+$\"\e[0m && splitName(\e[31m1\e[0m) != \e[31m\"\"\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value && is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010689
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Only change code below this line\n      \
    \  if( file_name.contains(\".\")){\n            if( !file_name.substring(0,1).matches(\"\
    [a-z]\") ||\n               file_name.substring(0,1).matches(\"[A-Z]\")){\n  \
    \              return \"No\"\n            } else{\n                return \"Yes\"\
    \n            }\n        } else{\n            return \"No\"\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w383ihq.scala:34)\n\tat Problem.main(tmp9w383ihq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var flag = file_name match {\n            case\
    \ \"\" => \"No Name\"\n            case _ => true\n        }\n        var name\
    \ = file_name\n        var counter = 0;\n        var letter_index = 0;\n     \
    \   while (name.length > 0) {\n            letter_index = 0\n            while\
    \ (name.charAt(0) < '0' || name.charAt(0) > '9') {\n                letter_index\
    \ += 1\n                name =  name.substring(letter_index)\n            }\n\
    \            name =  name.substring(0,letter_index)\n            if (flag == true)\
    \ {\n                if (name.contains(\".\") == true) {\n                   \
    \ name =  name.substring(0,name.lastIndexOf(\".\"))\n                }\n     \
    \           if (name.length != 3) {\n                    name = \"No Name\"\n\
    \                }\n                if (name != \"No Name\" && name.charAt(0)\
    \ < 'a' || name.charAt(0) > 'z') {\n                    name = \"No Name\"\n \
    \               }\n                if (name != \"No Name\" && name.charAt(name.length-1)\
    \ < 'a' || name.charAt(name.length-1) > 'z') {\n                    name = \"\
    No Name\"\n                }\n                counter = counter + 1;\n       \
    \         if (counter > 3) {\n                    flag = \"No\"\n            \
    \    }\n            }\n        }\n        return flag\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppijpeb3q.scala:52:15\
    \ --------------------\e[0m\e[0m\n\e[31m52 |\e[0m        \e[33mreturn\e[0m flag\n\
    \e[31m\e[31m   |\e[0m               ^^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (flag : Matchable)\n\e[31m   |\e[0m               Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val len = file_name.length\n        if (len\
    \ >= 3 && file_name.contains(\".\") && file_name.substring(0,1).matches(\"[a-zA-Z]\"\
    ) && file_name.substring(len-2,len).contains(\"txt|exe|dll\"))\n            \"\
    Yes\"\n        else\n            \"No\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp0w0sxuc.scala:26)\n\tat Problem.main(tmpp0w0sxuc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.trim()\n        var\
    \ check = False\n        if (fileName.length() > 3 && !fileName.contains(\".\"\
    )){\n            check = True\n        }\n        if (fileName.contains(\".\"\
    )){\n            check = True\n        }\n        if (check){\n            for\
    \ (i <- 0 to fileName.length() - 1) {\n                val letter = fileName.charAt(i)\n\
    \                val alphaNum = letter.toInt\n                if (letter.isLetter\
    \ && alphaNum >= 'a' && alphaNum <= 'z' || letter.isLetter && alphaNum >= 'A'\
    \ && alphaNum <= 'Z'){\n                }\n                else{\n           \
    \         check = False\n                }\n            }\n        }\n       \
    \ if (check){\n            check = True\n        }\n        if (check){\n    \
    \        for (i <- 0 to fileName.length() - 1) {\n                val letter =\
    \ fileName.charAt(i)\n                val alphaNum = letter.toInt\n          \
    \      if (letter.isLetter && alphaNum >= 'a' && alphaNum <= 'z' || letter.isLetter\
    \ && alphaNum >= 'A' && alphaNum <= 'Z'){\n                }\n               \
    \ else{\n                    check = False\n                }\n            }\n\
    \        }\n        if (check){\n            check = True\n        }\n       \
    \ if (check){\n            for (i <- 0 to fileName.length() - 1) {\n         \
    \       val letter = fileName.charAt(i)\n                val alphaNum = letter.toInt\n\
    \                if (letter.isLetter && alphaNum >= 'a' && alphaNum <= 'z' ||\
    \ letter.isLetter && alphaNum >= 'A' && alphaNum <= 'Z'){\n                }\n\
    \                else{\n                    check = False\n                }\n\
    \            }\n        }\n        if (check){\n            check = True\n   \
    \     }\n        if (check){\n            for (i <- 0 to fileName.length() - 1)\
    \ {\n                val letter = fileName.charAt(i)\n                val alphaNum\
    \ = letter.toInt\n                if (letter.isLetter && alphaNum >= 'a' && alphaNum\
    \ <= 'z' || letter.isLetter && alphaNum >= 'A' && alphaNum <= 'Z'){\n        \
    \        }\n                else{\n                    check = False\n       \
    \         }\n            }\n        }\n        if (check){\n            check\
    \ = True\n        }\n        if (check){\n            for (i <- 0 to fileName.length()\
    \ - 1) {\n                val letter = fileName.charAt(i)\n                val\
    \ alphaNum = letter.toInt\n                if (letter.isLetter && alphaNum >=\
    \ 'a' && alphaNum <= 'z' || letter.isLetter && alphaNum >= 'A' && alphaNum <=\
    \ 'Z'){\n                }\n                else{\n                    check =\
    \ False\n                }\n            }\n        }\n        if (check){\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3sw_ib3e.scala:127:0 ---------------------------\e\
    [0m\e[0m\n\e[31m127 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3sw_ib3e.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e\
    [36mcheck\e[0m = False\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3sw_ib3e.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            check = True\n\e[31m\e[31m   |\e[0m     \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                    Not found: True\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3sw_ib3e.scala:25:20\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            check = True\n\
    \e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3sw_ib3e.scala:34:28 ------------------------\e[0m\e[0m\n\e[31m34 |\e\
    [0m                    check = False\n\e[31m\e[31m   |\e[0m                  \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: False\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3sw_ib3e.scala:39:20\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            check = True\n\
    \e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3sw_ib3e.scala:48:28 ------------------------\e[0m\e[0m\n\e[31m48 |\e\
    [0m                    check = False\n\e[31m\e[31m   |\e[0m                  \
    \          ^^^^^\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660010694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val split_name = file_name.split(\"\\\\.\")\n\
    \        if (split_name.length != 3 || split_name(0).isEmpty) {\n            return\
    \ \"No\"\n        }\n        if (split_name(1).isEmpty) {\n            return\
    \ \"No\"\n        }\n        if (!(split_name(1) match {\n            case s if\
    \ s.head < 'a' || s.head > 'z' =>\n                \"No\"\n            case s\
    \ if s.head < 'A' || s.head > 'Z' =>\n                \"No\"\n            case\
    \ s =>\n                \"Yes\"\n            })) {\n            return \"No\"\n\
    \        }\n        if (split_name(2) != \"exe\" && split_name(2) != \"dll\")\
    \ {\n            return \"No\"\n        }\n        return \"Yes\"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzrqv6n64.scala:26:12 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (!(split_name(\e[31m1\e[0m) \e\
    [33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m   \
    \  value unary_! is not a member of (\e[32m\"No\"\e[0m : String) | (\e[32m\"Yes\"\
    \e[0m : String)\n\e[31m27 |\e[0m            \e[33mcase\e[0m s \e[33mif\e[0m s.head\
    \ < \e[31m'a'\e[0m || s.head > \e[31m'z'\e[0m =>\n\e[31m28 |\e[0m            \
    \    \e[31m\"No\"\e[0m\n\e[31m29 |\e[0m            \e[33mcase\e[0m s \e[33mif\e\
    [0m s.head < \e[31m'A'\e[0m || s.head > \e[31m'Z'\e[0m =>\n\e[31m30 |\e[0m   \
    \             \e[31m\"No\"\e[0m\n\e[31m31 |\e[0m            \e[33mcase\e[0m s\
    \ =>\n\e[31m32 |\e[0m                \e[31m\"Yes\"\e[0m\n\e[31m33 |\e[0m     \
    \       })) {\n1 error found\n"
  stdout: ''
  timestamp: 1660010693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.toLowerCase\n    \
    \    val length = file_name.length\n        val hasNumber = (length < 40 || length.startsWith(\"\
    0\") || length.startsWith(\".\"))\n        val hasDot = file_name contains '.'\n\
    \        val dotIndex = file_name lastIndexOf '.'\n        val isLetter = file_name\
    \ contains 'a' || 'b' || 'c' || 'd' || 'e' || 'f' || 'g' || 'h' || 'i' || 'j'\
    \ || 'k' || 'l' || 'm' || 'n' || 'o' || 'p' || 'q' || 'r' || 's' || 't' || 'u'\
    \ || 'v' || 'w' || 'x' || 'y' || 'z'\n        val isTxt = file_name contains \"\
    txt\" || \"txt\" || \"txt\"\n        val isExe = file_name contains \"exe\" ||\
    \ \"exe\" || \"exe\" || \"exe\"\n        val isDll = file_name contains \"dll\"\
    \ || \"dll\" || \"dll\"\n        if (hasNumber || hasDot || dotIndex == -1 ||\
    \ !isLetter || !isTxt || !isExe || !isDll) {\n            return \"No\"\n    \
    \    }\n        return \"Yes\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwy8i7yul.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length > 3) {\n            //\
    \ if file_name.length > 3, then \n            //    1) check that file_name.split('.').length\
    \ == 1\n            //    2) check that file_name.split('.')(0) !=\"\" and file_name.split('.')(0).matches('^[a-zA-z]$')\n\
    \            //    3) check that file_name.split('.')(1) !=\"exe\" and file_name.split('.')(1)\
    \ != \"dll\"\n            \"No\" \n        } else {\n            // if file_name.length\
    \ < 3, then \n            //    1) check that file_name.split('.').length == 2\n\
    \            //    2) check that file_name.split('.')(0) !=\"\" and file_name.split('.')(0).matches('^[a-zA-z]$')\n\
    \            //    3) check that file_name.split('.')(1) !=\"exe\" and file_name.split('.')(1)\
    \ != \"dll\"\n            \"Yes\" \n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdx1cn49c.scala:34)\n\tat Problem.main(tmpdx1cn49c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^\\\\d{0,3}\\\\.[a-zA-Z]{1}$\"\
    \n        val pattern2 = \"^[a-zA-Z]{1}$\"\n        val pattern3 = \"^[a-z]{1}$\"\
    \n        if(file_name.matches(pattern)){\n            return \"Yes\"\n      \
    \  }\n        else if(file_name.matches(pattern2)){\n            return \"No\"\
    \n        }\n        else if(file_name.matches(pattern3)){\n            return\
    \ \"No\"\n        }\n        else return \"No\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwog_mm1d.scala:34)\n\tat Problem.main(tmpwog_mm1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length > 3) {\n            val\
    \ file_name = file_name.dropRight(3).dropLeft(1)\n            file_name match\
    \ {\n                case \"\" => return \"No\"\n                case _ => return\
    \ \"Yes\"\n            }\n        }\n        file_name match {\n            case\
    \ \".\" => return \"No\"\n            case _ => return \"Yes\"\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj_4j7m3x.scala:20:28 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropRight(\e\
    [31m3\e[0m).dropLeft(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \        ^\e[0m\n\e[31m   |\e[0m                            Recursive \e[33mvalue\e\
    [0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val dotpos = file_name.indexOf(\".\")\n    \
    \    if(dotpos == -1) \n            No\n        else if(file_name.substring(0,dotpos)\
    \ == \"\") \n            No\n        else if(file_name.substring(0,dotpos) not\
    \ in  ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\
    \ && \n                file_name.substring(dotpos,dotpos + 2) in List(\"txt\"\
    ,\"exe\",\"dll\") \n             ) \n            No\n        else\n          \
    \  Yes\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp87p2c6ud.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            No\n\e[31m\e[31m   |\e[0m            ^^\e\
    [0m\n\e[31m   |\e[0m            Not found: No\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp87p2c6ud.scala:23:12 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            No\n\e[31m\e[31m   |\e[0m            ^^\e\
    [0m\n\e[31m   |\e[0m            Not found: No\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp87p2c6ud.scala:24:46 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(file_name.substring(\e\
    [31m0\e[0m,dotpos) not in  (\e[31m'a'\e[0m,\e[31m'b'\e[0m,\e[31m'c'\e[0m,\e[31m'd'\e\
    [0m,\e[31m'e'\e[0m,\e[31m'f'\e[0m,\e[31m'g'\e[0m,\e[31m'h'\e[0m,\e[31m'i'\e[0m,\e\
    [31m'j'\e[0m,\e[31m'k'\e[0m,\e[31m'l'\e[0m,\e[31m'm'\e[0m,\e[31m'n'\e[0m,\e[31m'o'\e\
    [0m,\e[31m'p'\e[0m,\e[31m'q'\e[0m,\e[31m'r'\e[0m,\e[31m's'\e[0m,\e[31m't'\e[0m,\e\
    [31m'u'\e[0m,\e[31m'v'\e[0m,\e[31m'w'\e[0m,\e[31m'x'\e[0m,\e[31m'y'\e[0m,\e[31m'z'\e\
    [0m) && \n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value not is not a member of String\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp87p2c6ud.scala:24:50 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(file_name.substring(\e\
    [31m0\e[0m,dotpos) not in  (\e[31m'a'\e[0m,\e[31m'b'\e[0m,\e[31m'c'\e[0m,\e[31m'd'\e\
    [0m,\e[31m'e'\e[0m,\e[31m'f'\e[0m,\e[31m'g'\e[0m,\e[31m'h'\e[0m,\e[31m'i'\e[0m,\e\
    [31m'j'\e[0m,\e[31m'k'\e[0m,\e[31m'l'\e[0m,\e[31m'm'\e[0m,\e[31m'n'\e[0m,\e[31m'o'\e\
    [0m,\e[31m'p'\e[0m,\e[31m'q'\e[0m,\e[31m'r'\e[0m,\e[31m's'\e[0m,\e[31m't'\e[0m,\e\
    [31m'u'\e[0m,\e[31m'v'\e[0m,\e[31m'w'\e[0m,\e[31m'x'\e[0m,\e[31m'y'\e[0m,\e[31m'z'\e\
    [0m) && \n\e[31m\e[31m   |\e[0m                                              \
    \    ^^\e[0m\n\e[31m   |\e[0m                                                \
    \  Not found: in\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1660010694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name == null) {\n          \"No\"\n\
    \        }\n        else {\n          val pattern = \"[0-9]{1,3}\\\\.[a-zA-Z]+\"\
    \n          val pattern1 = \"^[a-zA-Z]+\"\n          val pattern2 = \"^[a-zA-Z]+$\"\
    \n          val pattern3 = \"^[a-zA-Z]+.[a-zA-Z]+$\"\n          val pattern4 =\
    \ \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+\"\n          val pattern5 = \"^[a-zA-Z0-9]+\\\\\
    .[a-zA-Z]+$\"\n          val pattern6 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n   \
    \       val pattern7 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern8\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern9 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern10 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern11 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern12\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern13 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern14 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern15 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern16\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern17 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern18 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern19 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern20\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern21 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern22 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern23 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern24\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern25 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern26 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern27 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern28\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern29 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern30 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern31 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern32\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern33 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern34 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern35 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern36\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4vof7rlu.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4vof7rlu.scala:91:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m91 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp4vof7rlu.scala:90:1 ---------------------\e[0m\e[0m\n\
    \e[31m90 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp4vof7rlu.scala:61:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m61 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660010694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code here\n        var validFileName\
    \ = false\n        if(file_name.contains(\".\")){\n            if(file_name.length>3){\n\
    \                for(c <- file_name.toCharArray){\n                    if(c<='9'\
    \ && c>='0')\n                        return validFileName \n                \
    \    if(c != '.')\n                        return validFileName\n            \
    \    }\n            }\n        }\n        if(file_name.contains(\".txt\") || file_name.contains(\"\
    .exe\") || file_name.contains(\".dll\")){\n            validFileName=true\n  \
    \      }\n        if(!validFileName)\n            return \"No\"\n        return\
    \ \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn5lebfq0.scala:25:31\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                        \e[33mreturn\e\
    [0m validFileName \n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (validFileName :\
    \ Boolean)\n\e[31m   |\e[0m                               Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn5lebfq0.scala:27:31\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                        \e[33mreturn\e\
    [0m validFileName\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (validFileName :\
    \ Boolean)\n\e[31m   |\e[0m                               Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regexp = \"\"\"^[a-z0-9]+\\.[a-z0-9]+$\"\
    \"\".r\n        val pattern = regexp.findFirstIn(file_name).get\n        if (file_name\
    \ != pattern) {\n            return \"No\"\n        } else {\n            return\
    \ \"Yes\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8sr6ks_0.scala:29)\n\tat Problem.main(tmp8sr6ks_0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      val re = scala.util.matching.Regex(\"\"\"^(?!.*\\\
    .)[a-zA-z][a-zA-z.]*\\.(txt|exe|dll)$\"\"\")\n      if(re.findFirstIn(file_name).isDefined){\n\
    \        \"Yes\"\n      }\n      else {\n        \"No\"\n      }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8x46nmlx.scala:28)\n\tat Problem.main(tmp8x46nmlx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val name_list = file_name.split(\"\\\\.\").toList\n\
    \        if (name_list.length < 3 || name_list.last == \"\" || name_list.last.charAt(0)\
    \ < 'a' || name_list.last.charAt(0) > 'z' || name_list.last.substring(0,1) < 'a'\
    \ || name_list.last.substring(0,1) > 'z' || name_list.last.substring(1, name_list.last.length).split(\"\
    [a-zA-Z]\").length != name_list.last.length || name_list.last.substring(1, name_list.last.length)\
    \ != \"txt\" || name_list.last.substring(1, name_list.last.length) != \"exe\"\
    \ || name_list.last.substring(1, name_list.last.length) != \"dll\") {\n      \
    \      return \"No\"\n        }\n        else {\n            return \"Yes\"\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpofclswfd.scala:20:160\
    \ -------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (name_list.length\
    \ < \e[31m3\e[0m || name_list.last == \e[31m\"\"\e[0m || name_list.last.charAt(\e\
    [31m0\e[0m) < \e[31m'a'\e[0m || name_list.last.charAt(\e[31m0\e[0m) > \e[31m'z'\e\
    [0m || name_list.last.substring(\e[31m0\e[0m,\e[31m1\e[0m) < \e[31m'a'\e[0m ||\
    \ name_list.last.substring(\e[31m0\e[0m,\e[31m1\e[0m) > \e[31m'z'\e[0m || name_list.last.substring(\e\
    [31m1\e[0m, name_list.last.length).split(\e[31m\"[a-zA-Z]\"\e[0m).length != name_list.last.length\
    \ || name_list.last.substring(\e[31m1\e[0m, name_list.last.length) != \e[31m\"\
    txt\"\e[0m || name_list.last.substring(\e[31m1\e[0m, name_list.last.length) !=\
    \ \e[31m\"exe\"\e[0m || name_list.last.substring(\e[31m1\e[0m, name_list.last.length)\
    \ != \e[31m\"dll\"\e[0m) {\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                                                        ^^^\e[0m\n\e[31m   |\e\
    [0m                                                  Found:    (\e[31m'a'\e[0m\
    \ : Char)\n\e[31m   |\e[0m                                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpofclswfd.scala:20:199\
    \ -------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (name_list.length\
    \ < \e[31m3\e[0m || name_list.last == \e[31m\"\"\e[0m || name_list.last.charAt(\e\
    [31m0\e[0m) < \e[31m'a'\e[0m || name_list.last.charAt(\e[31m0\e[0m) > \e[31m'z'\e\
    [0m || name_list.last.substring(\e[31m0\e[0m,\e[31m1\e[0m) < \e[31m'a'\e[0m ||\
    \ name_list.last.substring(\e[31m0\e[0m,\e[31m1\e[0m) > \e[31m'z'\e[0m || name_list.last.substring(\e\
    [31m1\e[0m, name_list.last.length).split(\e[31m\"[a-zA-Z]\"\e[0m).length != name_list.last.length\
    \ || name_list.last.substring(\e[31m1\e[0m, name_list.last.length) != \e[31m\"\
    txt\"\e[0m || name_list.last.substring(\e[31m1\e[0m, name_list.last.length) !=\
    \ \e[31m\"exe\"\e[0m || name_list.last.substring(\e[31m1\e[0m, name_list.last.length)\
    \ != \e[31m\"dll\"\e[0m) {"
  stdout: ''
  timestamp: 1660010696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"[0-9]{3}\\.[a-zA-Z].*\" // 3\
    \ digits followed by . followed by 1 letter from latin alphabet\n        val pattern2\
    \ = \"\"\"^[a-zA-Z].+[.]txt|dll|exe\"\"\"\n        val pattern3 = \"^[a-zA-Z].+[.]txt|dll|exe\"\
    \n        file_name match {\n            case pattern() => \"Yes\"\n         \
    \   case pattern2() => \"No\"\n            case pattern3() => \"No\"\n       \
    \     case _ => \"No\"\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpm0smspiy.scala:19:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    [0-9]{3}\\.[a-zA-Z].*\"\e[0m \e[34m// 3 digits followed by . followed by 1 letter\
    \ from latin alphabet\e[0m\n\e[31m\e[31m   |\e[0m                            \
    \    ^\e[0m\n\e[31m   |\e[0m                                invalid escape character\n\
    \e[31m\e[31m-- [E107] Syntax Error: /tmp/tmpm0smspiy.scala:23:24 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m pattern() => \e[31m\"Yes\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \        Wrong number of argument patterns for pattern; expected: (Char)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E107] Syntax Error: /tmp/tmpm0smspiy.scala:24:25 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m pattern2() => \e[31m\"No\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Wrong number of argument patterns for pattern2; expected: (Char)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E107] Syntax Error: /tmp/tmpm0smspiy.scala:25:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mcase\e\
    [0m pattern3() => \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Wrong number of argument patterns for pattern3; expected:\
    \ (Char)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var flag = false;\n        var count = file_name.length()\n\
    \        for (i<- 0 to count-2){\n            if(!((file_name(i) == '0') || (file_name(i)\
    \ == '1') || (file_name(i) == '2') || (file_name(i) == '3') || (file_name(i) ==\
    \ '4') || (file_name(i) == '5') || (file_name(i) == '6') || (file_name(i) == '7')\
    \ || (file_name(i) == '8') || (file_name(i) == '9'))){\n                flag =\
    \ true;\n            }\n        }\n        if(!flag){\n            flag = false;\n\
    \            for (i<- 0 to count-1){\n                if(!((file_name(i) == '.')\
    \ || (file_name(i) == '\\''))){\n                    flag = true;\n          \
    \      }\n            }\n        }\n        if(!flag){\n            flag = false;\n\
    \            for (i<- 0 to count-1){\n                if(file_name(i).charAt(0)\
    \ > 'z' ||\n                        file_name(i).charAt(0) > 'Z' ||\n        \
    \                file_name(i).charAt(0) > 'a' ||\n                        file_name(i).charAt(0)\
    \ > 'A'){\n                    flag = true;\n                }\n            }\n\
    \        }\n        if(!flag){\n            flag = false;\n            for (i<-\
    \ 0 to count-1){\n                if(file_name(i).length() > 3 || \n         \
    \               file_name(i).charAt(0) > '9'){\n                    flag = true;\n\
    \                }\n            }\n        }\n        if(flag){\n            return\
    \ \"No\";\n        }\n        return \"Yes\";\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1xzjg4vw.scala:37:32 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mif\e[0m(file_name(i).charAt(\e\
    [31m0\e[0m) > \e[31m'z'\e[0m ||\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value charAt is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1xzjg4vw.scala:48:32 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                \e[33mif\e[0m(file_name(i).length() >\
    \ \e[31m3\e[0m || \n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value length is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"\"\"[0-9]{1,3}\\.[a-z][a-z]+\"\
    \"\"\n        if (file_name == \"\" || file_name == \".\" || file_name.dropWhile(x\
    \ => x == \".\").isEmpty) {\n            \"No\"\n        } else if (file_name.dropWhile(x\
    \ => x == \".\").takeWhile(x => x >= 'a' && x <= 'z').nonEmpty &&\n          \
    \         file_name.takeWhile(x => x >= 'a' && x <= 'z').dropWhile(x => x == \"\
    .\").forall(x => pattern.findFirstMatchIn(x) != None))\n            \"Yes\"\n\
    \        else\n            \"No\"\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbk7duo0p.scala:20:76 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (file_name == \e[31m\"\"\e[0m ||\
    \ file_name == \e[31m\".\"\e[0m || file_name.dropWhile(\e[36mx\e[0m => x == \e\
    [31m\".\"\e[0m).isEmpty) {\n\e[31m\e[31m   |\e[0m                            \
    \                                                ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpbk7duo0p.scala:22:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (file_name.dropWhile(x\
    \ => x == \e[31m\".\"\e[0m).takeWhile(x => x >= \e[31m'a'\e[0m && x <= \e[31m'z'\e\
    [0m).nonEmpty &&\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbk7duo0p.scala:23:81\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \            file_name.takeWhile(\e[36mx\e[0m => x >= \e[31m'a'\e[0m && x <= \e\
    [31m'z'\e[0m).dropWhile(\e[36mx\e[0m => x == \e[31m\".\"\e[0m).forall(\e[36mx\e\
    [0m => pattern.findFirstMatchIn(x) != None))\n\e[31m\e[31m   |\e[0m          \
    \                                                                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbk7duo0p.scala:23:111\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m                   file_name.takeWhile(\e\
    [36mx\e[0m => x >= \e[31m'a'\e[0m && x <= \e[31m'z'\e[0m).dropWhile(\e[36mx\e\
    [0m => x == \e[31m\".\"\e[0m).forall(\e[36mx\e[0m => pattern.findFirstMatchIn(x)\
    \ != None))\n\e[31m\e[31m   |\e[0m                                           \
    \                                                            ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value findFirstMatchIn is not a member\
    \ of String\n4 errors found\n"
  stdout: ''
  timestamp: 1660010696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var correct = false\n        var file_name =\
    \ file_name.trim\n        // Check all conditions\n        val letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        val num = \"0123456789\"\n        for (i <- 0 until file_name.length\
    \ - 1) {\n            if(file_name(i) != \".\" && file_name(i).length() > 1 &&\
    \ \n              file_name(i).charAt(0) > '9' || \n              file_name(i).charAt(0)\
    \ > 'Z' || \n              file_name(i).charAt(0) > 'A' || \n              file_name(i).charAt(0)\
    \ > 'Z') {\n                println(\"Invalid file name $file_name\")\n      \
    \          correct = false\n            }\n            if(file_name(i) == \".\"\
    ) {\n                println(\"Invalid file name $file_name\")\n             \
    \   correct = false\n            }\n            if(file_name(i).isEmpty) {\n \
    \               println(\"Invalid file name $file_name\")\n                correct\
    \ = false\n            }\n            if(!letters.contains(file_name(i).charAt(0)))\
    \ {\n                println(\"Invalid file name $file_name\")\n             \
    \   correct = false\n            }\n            if(file_name(i).indexOf('.') <\
    \ 0) {\n                println(\"Invalid file name $file_name\")\n          \
    \      correct = false\n            }\n            if(!(num.contains(file_name(i).substring(1)))\
    \ ) {\n                println(\"Invalid file name $file_name\")\n           \
    \     correct = false\n            }\n        }\n        if(correct) {\n     \
    \       println(\"Valid file $file_name\")\n        } else {\n            println(\"\
    Invalid file $file_name\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6cnsy18n.scala:20:24 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvariable\e[0m \e[35mfile_name\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6cnsy18n.scala:55:19\
    \ --------------------\e[0m\e[0m\n\e[31m55 |\e[0m            println(\e[31m\"\
    Valid file $file_name\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6cnsy18n.scala:57:19\
    \ --------------------\e[0m\e[0m\n\e[31m57 |\e[0m            println(\e[31m\"\
    Invalid file $file_name\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length > 3 || file_name.substring(0,1).isEmpty)\
    \ {\n            return \"No\"\n        }\n        if (file_name.substring(0,1)\
    \ != \"a\" && file_name.substring(0,1) != \"A\" || \n            file_name.substring(0,2)\
    \ == \"9\" && file_name.substring(0,2) != \"0\" || \n            file_name.substring(0,2)\
    \ != \"1\" || file_name.substring(0,3) != \".\") {\n            return \"No\"\n\
    \        }\n        if (file_name.substring(0,file_name.length-1).toLowerCase()\
    \ != \"exe\" &&\n            file_name.substring(0,file_name.length-1).toLowerCase()\
    \ != \"dll\" || \n            file_name.substring(0,file_name.length-1).toLowerCase()\
    \ != \"txt\") {\n            return \"No\"\n        }\n        return \"Yes\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8xmf4oo1.scala:35)\n\tat Problem.main(tmp8xmf4oo1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileNameStr = file_name\n        val fileName\
    \ = fileNameStr.substring(0, fileNameStr.lastIndexOf(\".\"))\n        val substr\
    \ = fileNameStr.substring(fileNameStr.lastIndexOf(\".\") + 1)\n        val fileExt\
    \ = fileNameStr.substring(fileNameStr.lastIndexOf(\".\") + 1, fileNameStr.length)\n\
    \n        // If the file's name contains less than three digits, return \"No\"\
    \n        if (fileNameStr.length < 3) {\n            return \"No\"\n        }\n\
    \n        // If the file's name contains more than three digits, return \"No\"\
    \n        if (fileNameStr.length > 3) {\n            return \"No\"\n        }\n\
    \n        // If the file does not contain dot ('.'), return \"No\"\n        if\
    \ (fileName.indexOf('.') == -1) {\n            return \"No\"\n        }\n\n  \
    \      // If the file's extension does not meet the requirements, return \"No\"\
    \n        if (fileExt.length != 3 && fileExt.length != 4) {\n            return\
    \ \"No\"\n        }\n\n        // If the file's name starts with letters from\
    \ the latin alphabet ('a'-'z' and\n        // 'A'-'Z'), return \"No\"\n      \
    \  if (fileName.charAt(0) < 'a' || fileName.charAt(0) > 'z' && fileName.charAt(0)\
    \ < 'A' || fileName.charAt(0) > 'Z') {\n            return \"No\"\n        }\n\
    \n        // If the file's name contains the substring 'txt' or 'exe' or 'dll',\
    \ return\n        // \"Yes\"\n        val fileExtArray = Array(fileExt.toLowerCase(),\
    \ fileExt.toLowerCase(), fileExt.toLowerCase())\n        var isCorrect = false\n\
    \        for (ext <- fileExtArray) {\n            if (fileName.contains(ext))\
    \ {\n                isCorrect = true\n                break\n            }\n\
    \        }\n        if (isCorrect) {\n            return \"Yes\"\n        } else\
    \ {\n            return \"No\"\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq42t5440.scala:57:16 ------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length == 0)\n            throw\
    \ new IllegalArgumentException(\"file_name should not be empty\")\n        else\
    \ if (file_name.split(\".\").length < 2)\n            throw new IllegalArgumentException(\"\
    file_name should have one dot '.'\")\n        else if (file_name.split(\".\").head.nonEmpty\
    \ && \n                !file_name.split(\".\").head.head.matches(\"^[A-Za-z]\"\
    ))\n            throw new IllegalArgumentException(\"file's name should start\
    \ with a letter from the latin alphabet\")\n        else if (file_name.split(\"\
    .\").last.nonEmpty && \n                (file_name.split(\".\").last.head != \"\
    txt\" && \n                file_name.split(\".\").last.head != \"exe\" && \n \
    \               file_name.split(\".\").last.head != \"dll\"))\n            throw\
    \ new IllegalArgumentException(\"file's name should end with 'txt', 'exe' or 'dll'\"\
    )\n        else{\n            val valid = file_name.split(\".\").last.head ==\
    \ \"txt\" || file_name.split(\".\").last.head == \"exe\" || file_name.split(\"\
    .\").last.head == \"dll\"\n            if (valid)\n                return \"Yes\"\
    \n            else\n                return \"No\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg8q6g86t.scala:24:48 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                !file_name.split(\e[31m\".\"\e[0m).head.head.matches(\e\
    [31m\"^[A-Za-z]\"\e[0m))\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value matches is not a member of Char\n\e\
    [31m\e[31m-- Error: /tmp/tmpg8q6g86t.scala:27:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                (file_name.split(\e[31m\".\"\e[0m).last.head\
    \ != \e[31m\"txt\"\e[0m && \n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpg8q6g86t.scala:28:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                file_name.split(\e[31m\".\"\e[0m).last.head\
    \ != \e[31m\"exe\"\e[0m && \n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpg8q6g86t.scala:29:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                file_name.split(\e[31m\".\"\e[0m).last.head\
    \ != \e[31m\"dll\"\e[0m))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpg8q6g86t.scala:32:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e[36mvalid\e[0m = file_name.split(\e\
    [31m\".\"\e[0m).last.head == \e[31m\"txt\"\e[0m || file_name.split(\e[31m\".\"\
    \e[0m).last.head == \e[31m\"exe\"\e[0m || file_name.split(\e[31m\".\"\e[0m).last.head\
    \ == \e[31m\"dll\"\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpg8q6g86t.scala:32:67 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e["
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n         //TODO: Implement me!\n         return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8wb098ry.scala:24)\n\tat Problem.main(tmp8wb098ry.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Create a mutable variable to hold the valid\
    \ string and initialize it \n        // to 'No'.\n        var valid : String =\
    \ \"No\"\n        // Create a mutable variable to hold the valid string and initialize\
    \ it to 'Yes'.\n        var valid : String = \"Yes\"\n        // Create a mutable\
    \ variable to hold the file's name and initialize it \n        // to an empty\
    \ string.\n        var file_name : String = \"\"\n        // Create a mutable\
    \ variable to hold the file's name and initialize it \n        // to the file's\
    \ name.\n        var file_name : String = \"\"\n        // Create a mutable variable\
    \ to hold the characters of the file name and initialize it \n        // to an\
    \ empty mutable collection.\n        var file_name_chars : mutable.MutableList[Char]\
    \ = mutable.MutableList[Char]()\n        // Create a mutable variable to hold\
    \ the characters of the file name and initialize it \n        // to the file's\
    \ name.\n        var file_name_chars : mutable.MutableList[Char] = mutable.MutableList[Char](file_name)\n\
    \        // Create a mutable variable to hold the characters of the valid string\
    \ and initialize it \n        // to an empty mutable collection.\n        var\
    \ valid_chars : mutable.MutableList[Char] = mutable.MutableList[Char]()\n    \
    \    // Create a mutable variable to hold the characters of the valid string and\
    \ initialize it \n        // to the valid string.\n        var valid_chars : mutable.MutableList[Char]\
    \ = mutable.MutableList[Char](valid)\n        // Create a mutable variable to\
    \ hold the characters of the file name and initialize it \n        // to the file's\
    \ name.\n        var file_name_chars : mutable.MutableList[Char] = mutable.MutableList[Char](file_name)\n\
    \        // Create a mutable variable to hold the characters of the valid string\
    \ and initialize it \n        // to the valid string.\n        var valid_chars\
    \ : mutable.MutableList[Char] = mutable.MutableList[Char](valid)\n        // Iterate\
    \ through the characters of the valid string.\n        for (i_valid_char <- 0\
    \ until valid_chars.length) {\n            // Create a temporary variable to hold\
    \ the character of the valid string.\n            var tmp_valid_char = valid_chars(i_valid_char)\n\
    \            // Iterate through the characters of the file name.\n           \
    \ for (i_file_name_char <- 0 until file_name_chars.length) {\n               \
    \ // Create a temporary variable to hold the character of the file name.\n   \
    \             var tmp_file_name_char = file_name_chars(i_file_name_char)\n   \
    \             // Check if the current character of the file name is \n       \
    \         // equal to the current character of the valid string.\n           \
    \     if (tmp_file_name_char == tmp_valid_char) {\n                    // If the\
    \ current character of the valid string is \n                    // equal to 'x',\
    \ and the current character of the file name is \n                    // equal\
    \ to 'x', then the current character of the valid string is \n               \
    \     // equal to 'y'.\n                    if (tmp_valid_char == \"x\") {\n \
    \                       valid == \"Yes\"\n                        // If the current\
    \ character of the valid string is \n                        // equal to 'x',\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3gbz3z8r.scala:98:0 ----------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3gbz3z8r.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mvalid\e[0m : \e[35mString\e[0m = \e[31m\"Yes\"\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalid is already defined\
    \ as \e[33mvariable\e[0m \e[35mvalid\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3gbz3z8r.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m : \e[35mString\e\
    [0m = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3gbz3z8r.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mvar\e[0m \e[36mfile_name_chars\e[0m : mutable.MutableList[\e\
    [35mChar\e[0m] = mutable.MutableList[\e[35mChar\e[0m](file_name)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name_chars is already defined as \e[33mvariable\e[0m\
    \ \e[35mfile_name_chars\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3gbz3z8r.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mvar\e[0m \e[36mvalid_chars\e[0m : mutable.MutableList[\e\
    [35mChar\e[0m] = mutable.MutableList[\e[35mChar\e[0m](valid)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalid_chars is already defined as \e[33mvariable\e[0m \e[35mvalid_char"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        def isValid(name : String): Boolean = {\n  \
    \          val parts = name.split(\"\\\\.\");\n            parts.length == 1 &&\
    \ parts.head.isEmpty || parts.length == 2 &&\n                parts.head.nonEmpty\
    \ && parts(0) match {\n                    case Character('a') | Character('z')\
    \ | Character('A') | Character('Z') => true;\n                    case _ => false;\n\
    \                }\n        }\n        val parts = file_name.split(\"\\\\.\");\n\
    \        if (parts.length == 1 && parts.head.isEmpty) {\n            return \"\
    No\"\n        } else if (parts.length == 2 && !parts.head.isEmpty) {\n       \
    \     val part0 = parts.head\n            if (!isValid(part0)) return \"No\"\n\
    \            val part1 = parts.last\n            if (part1 match {\n         \
    \       case Character('.') => isValid(part0) && (part1 match {\n            \
    \        case Character('t') | Character('x') | Character('t') => true;\n    \
    \                case Character('e') | Character('x') | Character('e') => true;\n\
    \                    case Character('.') => true;\n                    case _\
    \ => false;\n                }) \n                case _ => isValid(part0)\n \
    \           })\n        }\n        return \"Yes\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1slxdhgb.scala:43:8 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1slxdhgb.scala:22:44 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                parts.head.nonEmpty && parts(\e[31m0\e[0m) \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    String\n\e\
    [31m   |\e[0m                                       Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E127] Syntax Error: /tmp/tmp1slxdhgb.scala:23:25 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mcase\e[0m Character(\e[31m'a'\e\
    [0m) | Character(\e[31m'z'\e[0m) | Character(\e[31m'A'\e[0m) | Character(\e[31m'Z'\e\
    [0m) => \e[31mtrue\e[0m;\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mCharacter cannot be used as an extractor in a pattern because\
    \ it lacks an unapply or unapplySeq method\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E127]\
    \ Syntax Error: /tmp/tmp1slxdhgb.scala:23:42 ---------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                    \e[33mcase\e[0m Character(\e[31m'a'\e\
    [0m) | Character(\e[31m'z'\e[0m) | Character(\e[31m'A'\e[0m) | Character(\e[31m'Z'\e\
    [0m) => \e[31mtrue\e[0m;\n\e[31m\e[31m   |\e[0m                              \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0mCharacter cannot be used as an extractor\
    \ in a pattern because it lacks an unapply or unapplySeq method\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E127] Syntax Error: /tmp/tmp1slxdhgb.scala:23:59 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mcase\e[0m Character(\e[31m'a'\e\
    [0m) | Character(\e[31m'z'\e[0m) | Character(\e[31m'A'\e[0m) | Character(\e[31m'Z'\e\
    [0m) => \e[31mtrue\e[0m;\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1660010703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n       val invalid = mutable.Set[Char]()\n       val\
    \ parts = file_name.split(\"\\\\.\") // split the file name into parts delimited\
    \ by a '.'\n       val numOfNumbers = parts.count(_.matches(\"[0-9]+\"))\n   \
    \    val emptyStrings = parts.count(_.isEmpty())\n       val startWithLetter =\
    \ parts.count(x => x.startsWith(\"a\") || x.startsWith(\"A\"))\n       val endingWithExtension\
    \ = parts.count(x => x.endsWith(\"txt\") || x.endsWith(\"exe\") || x.endsWith(\"\
    dll\"))\n       val numOfDots = parts.count(_.contains(\".\"))\n       val hasLetter\
    \ = parts.count(_.matches(\"[a-zA-Z]+\"))\n       val hasDot = parts.count(_.contains(\"\
    .\"))\n       val length = parts.length\n       if(length>3) return \"No\"\n \
    \      if(numOfDots > 1) return \"No\"\n       if(!emptyStrings) return \"No\"\
    \n       if(!startWithLetter) return \"No\"\n       if(!endingWithExtension) return\
    \ \"No\"\n       if(hasLetter) return \"No\"\n       if(hasDot) return \"No\"\n\
    \       if(!numOfNumbers) return \"No\"\n       if(invalid.contains(Char('.')))\
    \ return \"No\"\n       if(invalid.contains(Char('_'))) return \"No\"\n      \
    \ if(invalid.contains(Char('0'))) return \"No\"\n       if(invalid.contains(Char('1')))\
    \ return \"No\"\n       if(invalid.contains(Char('a'))) return \"No\"\n      \
    \ if(invalid.contains(Char('A'))) return \"No\"\n       \"Yes\"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbll20gwo.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m       \e[33mval\e[0m \e[36minvalid\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbll20gwo.scala:31:10 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m       \e[33mif\e[0m(!emptyStrings) \e[33mreturn\e[0m\
    \ \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue unary_! is not a member of Int - did you mean emptyStrings.unary_+?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbll20gwo.scala:32:10 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m       \e[33mif\e[0m(!startWithLetter) \e[33mreturn\e\
    [0m \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue unary_! is not a member of Int - did you mean startWithLetter.unary_+?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbll20gwo.scala:33:10 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m       \e[33mif\e[0m(!endingWithExtension) \e[33mreturn\e\
    [0m \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue unary_! is not a member of Int - did you mean endingWithExtension.unary_+?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbll20gwo.scala:34:10 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m       \e[33mif\e[0m(hasLetter) \e[33mreturn\e[0m \e\
    [31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \          Found:    (hasLetter : Int)\n\e[31m   |\e[0m          Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbll20gwo.scala:35:10\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m       \e[33mif\e[0m(hasDot)\
    \ \e[33mreturn\e[0m \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Found:    (hasDot : Int)\n\e[31m   |\e[0m      \
    \    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n    \tval length = file_name.length\n    \tif (length\
    \ > 3) return \"No\"\n    \tif (file_name == \".\") return \"No\"\n    \tif (file_name.substring(0,\
    \ 1) == \".\" || file_name.substring(length-1, length) != \".\") return \"No\"\
    \n    \tif (file_name.substring(0,1).isEmpty || file_name.substring(0,1) >= 'a'\
    \ || file_name.substring(0,1) <= 'z' || file_name.substring(0,1) >= 'A' || file_name.substring(0,1)\
    \ <= 'Z') return \"No\"\n    \tif (file_name.substring(length-1,length) != \"\
    txt\" || file_name.substring(length-1,length) != \"exe\" || file_name.substring(length-1,length)\
    \ != \"dll\") return \"No\"\n    \t\"Yes\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcvxbolew.scala:23:76\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m    \t\e[33mif\e[0m (file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m).isEmpty || file_name.substring(\e[31m0\e[0m,\e[31m1\e\
    [0m) >= \e[31m'a'\e[0m || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) <= \e\
    [31m'z'\e[0m || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) >= \e[31m'A'\e\
    [0m || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) <= \e[31m'Z'\e[0m) \e[33mreturn\e\
    [0m \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m    \t                           \
    \                                         ^^^\e[0m\n\e[31m   |\e[0m          \
    \                                        Found:    (\e[31m'a'\e[0m : Char)\n\e\
    [31m   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcvxbolew.scala:23:111\
    \ -------------------\e[0m\e[0m\n\e[31m23 |\e[0m    \t\e[33mif\e[0m (file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m).isEmpty || file_name.substring(\e[31m0\e[0m,\e[31m1\e\
    [0m) >= \e[31m'a'\e[0m || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) <= \e\
    [31m'z'\e[0m || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) >= \e[31m'A'\e\
    [0m || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) <= \e[31m'Z'\e[0m) \e[33mreturn\e\
    [0m \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m    \t                           \
    \                                                                            ^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (\e[31m'z'\e[0m : Char)\n\e[31m   |\e[0m                                 \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcvxbolew.scala:23:146 -------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m    \t\e[33mif\e[0m (file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m).isEmpty\
    \ || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) >= \e[31m'a'\e[0m || file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) <= \e[31m'z'\e[0m || file_name.substring(\e[31m0\e[0m,\e\
    [31m1\e[0m) >= \e[31m'A'\e[0m ||"
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var check = \"\"\n        for (x <- 0 until\
    \ file_name.length) {\n            val c = file_name.charAt(x)\n            if\
    \ (c == '.') {\n                val sub = file_name.substring(x, x + 1)\n    \
    \            check += sub\n            }\n            else if (c >= 'a' && c <=\
    \ 'z' || c >= 'A' && c <= 'Z') {\n                check += c\n            }\n\
    \            else {\n                check += \".\"\n            }\n        }\n\
    \        \n        if (check.length >= 3 && check.length > 0 && !check.startsWith(\"\
    .\") && check.length != 0) {\n            for (x <- 0 until check.length) {\n\
    \                val c = check.charAt(x)\n                if (c == '.') {\n  \
    \                  val sub = check.substring(x, x + 1)\n                    check\
    \ += sub\n                }\n                else if (c >= 'a' && c <= 'z' ||\
    \ c >= 'A' && c <= 'Z') {\n                    check += c\n                }\n\
    \                else {\n                    check += \".\"\n                }\n\
    \            }\n        }\n        check\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpavytan6_.scala:52)\n\tat Problem.main(tmpavytan6_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result : String = \"\"\n        var valid\
    \ = file_name match {\n            case x if x.length < 3 => \"No\"\n        \
    \    case x if x.indexOf('.') < 1 => \"No\"\n            case x if !x.startsWith('a')\
    \ && !x.startsWith('A') => \"No\"\n            case x if x.substring(0,1) != x.substring(0,1).toLower\
    \ => \"No\"\n            case x if x.substring(x.indexOf('.') + 1).contains(\"\
    exe\") => result = x.substring(x.indexOf('.') + 1).contains(\"exe\")\n       \
    \     case x if x.substring(x.indexOf('.') + 1).contains(\"dll\") => result =\
    \ x.substring(x.indexOf('.') + 1).contains(\"dll\")\n            case x if x.substring(x.indexOf('.')\
    \ + 1).contains(\"txt\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    txt\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"log\"\
    ) => result = x.substring(x.indexOf('.') + 1).contains(\"log\")\n            case\
    \ x if x.substring(x.indexOf('.') + 1).contains(\"config\") => result = x.substring(x.indexOf('.')\
    \ + 1).contains(\"config\")\n            case x if x.substring(x.indexOf('.')\
    \ + 1).contains(\"zip\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    zip\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"jar\"\
    ) => result = x.substring(x.indexOf('.') + 1).contains(\"jar\")\n            case\
    \ x if x.substring(x.indexOf('.') + 1).contains(\"conf\") => result = x.substring(x.indexOf('.')\
    \ + 1).contains(\"conf\")\n            case x if x.substring(x.indexOf('.') +\
    \ 1).contains(\"xml\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    xml\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"properties\"\
    ) => result = x.substring(x.indexOf('.') + 1).contains(\"properties\")\n     \
    \       case x if x.substring(x.indexOf('.') + 1).contains(\"xml\") => result\
    \ = x.substring(x.indexOf('.') + 1).contains(\"xml\")\n            case x if x.substring(x.indexOf('.')\
    \ + 1).contains(\"log4j\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    log4j\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"properties\"\
    ) => result = x.substring(x.indexOf('.') + 1).contains(\"properties\")\n     \
    \       case x if x.substring(x.indexOf('.') + 1).contains(\"xml\") => result\
    \ = x.substring(x.indexOf('.') + 1).contains(\"xml\")\n            case x if x.substring(x.indexOf('.')\
    \ + 1).contains(\"log4j\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    log4j\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"properties\"\
    ) => \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuue2us2e.scala:72:0 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuue2us2e.scala:23:36\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m x\
    \ \e[33mif\e[0m !x.startsWith(\e[31m'a'\e[0m) && !x.startsWith(\e[31m'A'\e[0m)\
    \ => \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \    ^^^\e[0m\n\e[31m   |\e[0m                                    Found:    (\e\
    [31m'a'\e[0m : Char)\n\e[31m   |\e[0m                                    Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuue2us2e.scala:23:58\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m x\
    \ \e[33mif\e[0m !x.startsWith(\e[31m'a'\e[0m) && !x.startsWith(\e[31m'A'\e[0m)\
    \ => \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                         Found:    (\e[31m'A'\e[0m : Char)\n\e[31m   |\e[0m \
    \                                                 Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuue2us2e.scala:24:59 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) != x.substring(\e[31m0\e[0m,\e[31m1\e[0m).toLower =>\
    \ \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m                                   \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \          value toLower is not a member of String\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpuue2us2e.scala:25:122 -------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.substring(x.indexOf(\e\
    [31m'.'\e[0m) + \e[31m1\e[0m).contains(\e[31m\"exe\"\e[0m) => result = x.substring(x.indexOf(\e\
    [31m'.'\e[0m) + \e[31m1\e[0m).contains(\e[31m\"exe\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m             "
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileNameLength = file_name.length\n    \
    \    var isValid = true\n        for (i <- 0 until fileNameLength) {\n       \
    \     if (file_name(i).isDigit) {\n                if (i > 0) {\n            \
    \        isValid = false\n                    return\"No\"\n                }\n\
    \            }\n            else if (file_name(i) != \".\") {\n              \
    \  isValid = false\n                return\"No\"\n            }\n            else\
    \ if (file_name(i).isEmpty) {\n                isValid = false\n             \
    \   return\"No\"\n            }\n            else if (file_name(i).toLowerCase\
    \ != \"a\" && file_name(i).toLowerCase != \"b\" &&\n                     file_name(i).toLowerCase\
    \ != \"c\" && file_name(i).toLowerCase != \"d\" &&\n                     file_name(i).toLowerCase\
    \ != \"e\" && file_name(i).toLowerCase != \"f\" &&\n                     file_name(i).toLowerCase\
    \ != \"g\" && file_name(i).toLowerCase != \"h\" &&\n                     file_name(i).toLowerCase\
    \ != \"i\" && file_name(i).toLowerCase != \"j\" &&\n                     file_name(i).toLowerCase\
    \ != \"k\" && file_name(i).toLowerCase != \"l\" &&\n                     file_name(i).toLowerCase\
    \ != \"m\" && file_name(i).toLowerCase != \"n\" &&\n                     file_name(i).toLowerCase\
    \ != \"o\" && file_name(i).toLowerCase != \"p\" &&\n                     file_name(i).toLowerCase\
    \ != \"q\" && file_name(i).toLowerCase != \"r\" &&\n                     file_name(i).toLowerCase\
    \ != \"s\" && file_name(i).toLowerCase != \"t\" &&\n                     file_name(i).toLowerCase\
    \ != \"u\" && file_name(i).toLowerCase != \"v\" &&\n                     file_name(i).toLowerCase\
    \ != \"w\" && file_name(i).toLowerCase != \"x\" &&\n                     file_name(i).toLowerCase\
    \ != \"y\" && file_name(i).toLowerCase != \"z\") {\n                isValid =\
    \ false\n                return\"No\"\n            }\n        }\n        return\"\
    Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp6eql8ia.scala:28:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (file_name(i)\
    \ != \e[31m\".\"\e[0m) {\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp6eql8ia.scala:32:34\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (file_name(i).isEmpty) {\n\e[31m\e[31m   |\e[0m            \
    \         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value\
    \ isEmpty is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp6eql8ia.scala:36:34\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (file_name(i).toLowerCase != \e[31m\"a\"\e[0m && file_name(i).toLowerCase\
    \ != \e[31m\"b\"\e[0m &&\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value toLowerCase is not a member of\
    \ Char\n3 errors found\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name =\n            if (file_name.isEmpty)\
    \ return(\"No\")\n            else { file_name match {\n                case s\
    \ if s.contains(\".\") && (s.charAt(0) != 'a' && s.charAt(0) != 'z' && s.charAt(0)\
    \ != 'A' && s.charAt(0) != 'Z') =>\n                    return(\"No\")\n     \
    \           case _ =>\n                    if (file_name.toString.replaceFirst(\"\
    ^[0-9]\", \"\")\n                                .head\n                     \
    \           .matches(\"^[a-zA-Z]+\")) return(\"Yes\")\n                    else\
    \ return(\"No\")\n            }}\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj23k1wx_.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (file_name.isEmpty) \e[33mreturn\e\
    [0m(\e[31m\"No\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m  \
    \ |\e[0m                Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj23k1wx_.scala:21:19\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e\
    [0m { file_name \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                   ^\e\
    [0m\n\e[31m   |\e[0m                   Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj23k1wx_.scala:25:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    \e\
    [33mif\e[0m (file_name.toString.replaceFirst(\e[31m\"^[0-9]\"\e[0m, \e[31m\"\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m \
    \                       Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj23k1wx_.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your solution here\n        val nameArray\
    \ = file_name.split(\"\\\\.\")\n        if(nameArray.length != 3 || nameArray(0).isEmpty()\
    \ || nameArray(0).first < 'a' || nameArray(0).first > 'z' || nameArray(1).isEmpty()\
    \ || nameArray(1).first < 'a' || nameArray(1).first > 'z' || nameArray(2).isEmpty()\
    \ || nameArray(2).first != 'txt' || nameArray(2).first != 'exe' || nameArray(2).first\
    \ != 'dll'){\n            return \"No\"\n        }\n        else{\n          \
    \  return \"Yes\"\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmie3fcv4.scala:21:248 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(nameArray.length != \e[31m3\e[0m\
    \ || nameArray(\e[31m0\e[0m).isEmpty() || nameArray(\e[31m0\e[0m).first < \e[31m'a'\e\
    [0m || nameArray(\e[31m0\e[0m).first > \e[31m'z'\e[0m || nameArray(\e[31m1\e[0m).isEmpty()\
    \ || nameArray(\e[31m1\e[0m).first < \e[31m'a'\e[0m || nameArray(\e[31m1\e[0m).first\
    \ > \e[31m'z'\e[0m || nameArray(\e[31m2\e[0m).isEmpty() || nameArray(\e[31m2\e\
    [0m).first != \e[31m'txt\e[0m' || nameArray(\e[31m2\e[0m).first != \e[31m'exe\e\
    [0m' || nameArray(\e[31m2\e[0m).first != \e[31m'dll\e[0m'){\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \                                                                            \
    \                      ^\e[0m\n\e[31m   |\e[0msymbol literal 'txt is no longer\
    \ supported,\n\e[31m   |\e[0muse a string literal \"txt\" or an application Symbol(\"\
    txt\") instead,\n\e[31m   |\e[0mor enclose in braces '{txt} if you want a quoted\
    \ expression.\n\e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmie3fcv4.scala:21:252\
    \ --------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(nameArray.length\
    \ != \e[31m3\e[0m || nameArray(\e[31m0\e[0m).isEmpty() || nameArray(\e[31m0\e\
    [0m).first < \e[31m'a'\e[0m || nameArray(\e[31m0\e[0m).first > \e[31m'z'\e[0m\
    \ || nameArray(\e[31m1\e[0m).isEmpty() || nameArray(\e[31m1\e[0m).first < \e[31m'a'\e\
    [0m || nameArray(\e[31m1\e[0m).first > \e[31m'z'\e[0m || nameArray(\e[31m2\e[0m).isEmpty()\
    \ || nameArray(\e[31m2\e[0m).first != \e[31m'txt\e[0m' || nameArray(\e[31m2\e\
    [0m).first != \e[31m'exe\e[0m' || nameArray(\e[31m2\e[0m).first != \e[31m'dll\e\
    [0m'){\n\e[31m\e[31m   |\e[0m                                                \
    \                                                                            \
    \                                          "
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n       val nums = fileName.split('.').map(_.toInt).toSet\n\
    \       if(nums.size==0 || nums.toList.isEmpty || nums.toList.head.head < 'a'\
    \ || nums.toList.head.head > 'z'){\n       \treturn \"No\"\n       }\n       val\
    \ last = nums.toList.last\n       if(last.last!='e' && last.last!='E' && last.last!='x'\
    \ && last.last!='X' && last.last!='m' && last.last!='M'){\n       \treturn \"\
    No\"\n       }\n       val first = fileName.substring(0,fileName.indexOf('.')+1)\n\
    \       val validFirst = ('A'..'Z').filter(x => x!=first.head).exists(x => x!=first.last)\n\
    \       val validLast = ('a'..'z').filter(x => x!=last.last).exists(x => x!=last.head)\n\
    \       if(!validFirst || !validLast){\n       \treturn \"No\"\n       }\n   \
    \    \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp59ehhvzt.scala:28:29 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m       \e[33mval\e[0m \e[36mvalidFirst\e[0m = (\e[31m'A'\e\
    [0m..\e[31m'Z'\e[0m).filter(\e[36mx\e[0m => x!=first.head).exists(\e[36mx\e[0m\
    \ => x!=first.last)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\
    \e[31m   |\e[0m                             an identifier expected, but '.' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp59ehhvzt.scala:29:28 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m       \e[33mval\e[0m \e[36mvalidLast\e[0m = (\e[31m'a'\e\
    [0m..\e[31m'z'\e[0m).filter(\e[36mx\e[0m => x!=last.last).exists(\e[36mx\e[0m\
    \ => x!=last.head)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0m                            an identifier expected, but '.' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp59ehhvzt.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m       \e[33mval\e[0m \e[36mnums\e[0m = fileName.split(\e\
    [31m'.'\e[0m).map(_.toInt).toSet\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: fileName\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp59ehhvzt.scala:27:19 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m       \e[33mval\e[0m \e[36mfirst\e[0m = fileName.substring(\e\
    [31m0\e[0m,fileName.indexOf(\e[31m'.'\e[0m)+\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ fileName\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = Pattern.compile(\n           \
    \ \"[0-9]{1,3}[.][^\\.]{0,1}|\" +\n            \"^[a-zA-z].{0,1}\"\n        )\n\
    \        if (!pattern.matcher(file_name).matches()) {\n            return \"No\"\
    \n        }\n        if (!file_name.contains('.')) {\n            return \"No\"\
    \n        }\n        if (!file_name.substringBefore('.').isEmpty) {\n        \
    \    return \"No\"\n        }\n        val file = file_name.substringBefore('.')\n\
    \        if (!file.matches(\"^[a-zA-Z]+\")) {\n            return \"No\"\n   \
    \     }\n        val file_extension = file_name.substringAfter('.')\n        if\
    \ (!file_extension.contains('.') || file_extension.contains(' ')) {\n        \
    \    return \"No\"\n        }\n        if (file_extension.contains(\"txt\") ||\
    \ file_extension.contains(\"exe\") || file_extension.contains(\"dll\")) {\n  \
    \          return \"Yes\"\n        } else {\n            return \"No\"\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpafnegbrc.scala:20:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[31m\"[0-9]{1,3}[.][^\\.]{0,1}|\"\e[0m\
    \ +\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m\
    \                             invalid escape character\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpafnegbrc.scala:19:22 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = Pattern.compile(\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: Pattern\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpafnegbrc.scala:29:23 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33mif\e[0m (!file_name.substringBefore(\e[31m'.'\e\
    [0m).isEmpty) {\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value substringBefore is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpafnegbrc.scala:32:29 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mfile\e[0m = file_name.substringBefore(\e\
    [31m'.'\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value substringBefore is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpafnegbrc.scala:36:39\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mfile_extension\e[0m = file_name.substringAfter(\e[31m'.'\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value substringAfter is not a member of String\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result : String = \"No\"\n        // Get\
    \ rid of the file extension.\n        file_name split ('.') foreach { x => x take\
    \ 1 foreach { y => if (y == '.') file_name replace (y, '') } }\n        // Get\
    \ rid of any leading '.'\n        file_name split ('.') foreach { x => x take\
    \ 1 foreach { y => if (y == '.') file_name replace (y, '') } }\n        // Get\
    \ rid of any trailing '.'\n        file_name split ('.') foreach { x => x take\
    \ 1 foreach { y => if (y == '.') file_name replace (y, '') } }\n        // Make\
    \ sure the file name is made up of only one '.'\n        if(file_name split ('\\\
    .').length < 1) file_name = file_name + \".\"\n        // Make sure the substring\
    \ before the dot is made up of only letters (a-z and A-Z)\n        if (file_name\
    \ split ('\\.')(0).filter(x => x >= 'a' && x <= 'z') != file_name split ('\\.')(0).filter(x\
    \ => x >= 'A' && x <= 'Z')) \"No\"\n        else result = \"Yes\"\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplu15pc_u.scala:21:105 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        file_name split (\e[31m'.'\e[0m) foreach { \e\
    [36mx\e[0m => x take \e[31m1\e[0m foreach { \e[36my\e[0m => \e[33mif\e[0m (y ==\
    \ \e[31m'.'\e[0m) file_name replace (y, '') } }\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                  empty character literal\n\e[31m\e[31m-- Error: /tmp/tmplu15pc_u.scala:23:105\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        file_name\
    \ split (\e[31m'.'\e[0m) foreach { \e[36mx\e[0m => x take \e[31m1\e[0m foreach\
    \ { \e[36my\e[0m => \e[33mif\e[0m (y == \e[31m'.'\e[0m) file_name replace (y,\
    \ '') } }\n\e[31m\e[31m   |\e[0m                                             \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                 empty character literal\n\
    \e[31m\e[31m-- Error: /tmp/tmplu15pc_u.scala:25:105 ----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        file_name split (\e[31m'.'\e[0m) foreach { \e\
    [36mx\e[0m => x take \e[31m1\e[0m foreach { \e[36my\e[0m => \e[33mif\e[0m (y ==\
    \ \e[31m'.'\e[0m) file_name replace (y, '') } }\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                  empty character literal\n\e[31m\e[31m-- Error: /tmp/tmplu15pc_u.scala:27:30\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mif\e[0m(file_name split (\e[31m'\\.'\e[0m).length < \e[31m1\e[0m) file_name\
    \ = file_name + \e[31m\".\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \        ^\e[0m\n\e[31m   |\e[0m                              invalid escape character\n\
    \e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplu15pc_u.scala:27:56 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m(file_name split (\e[31m'\\.'\e\
    [0m).length < \e[31m1\e[0m) file_name = file_name + \e[31m\".\"\e[0m\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        def digit(c : Char) : Boolean = c >= '0' &&\
    \ c <= '9'\n        def dot(c : Char) : Boolean = c >= '.'\n        def startsWithLetter(c:\
    \ Char) : Boolean = c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z'\n        def\
    \ endsWithFileType(c: Char) : Boolean = c >= 't' && c <= 'z' || c >= 'T' && c\
    \ <= 'Z' || c >= 'e' && c <= 'z' || c >= 'E' && c <= 'Z' || c == '.' || c == ','\n\
    \n        val fileNameWithoutDot = file_name filterNot (c => dot(c)) filterNot\
    \ (c => digit(c))\n        val fileNameWithDot = file_name.drop(1) filterNot (c\
    \ => digit(c)) filterNot (c => dot(c))\n        val fileNameWithoutDotParts =\
    \ fileNameWithoutDot.map(c => c match {\n            case c if !startsWithLetter(c)\
    \ => c\n            case c if !endsWithFileType(c) => c\n            case c if\
    \ c == ',' => \"0\"\n            case c if c == '.' => \"0\"\n            case\
    \ c => \"1\"\n        })\n        val fileNameWithDotParts = fileNameWithDot.map(c\
    \ => c match {\n            case c if !startsWithLetter(c) => c\n            case\
    \ c if !endsWithFileType(c) => c\n            case c if c == ',' => \"0\"\n  \
    \          case c if c == '.' => \"0\"\n            case c => \"1\"\n        })\n\
    \n        (fileNameWithoutDotParts ++ fileNameWithDotParts).size <= 3\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy4kkbb_j.scala:41:8\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m        (fileNameWithoutDotParts\
    \ ++ fileNameWithDotParts).size <= \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    Boolean\n\e[31m   |\e[0m        Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.split(\"[.]\").length != 2) return\
    \ \"No\"\n        if (file_name.split(\"[.]\")(0) == \"\") return \"No\"\n   \
    \     if (file_name.split(\"[.]\")(0).startsWith(\"a\") || file_name.split(\"\
    [.]\")(0).startsWith(\"A\")) return \"No\"\n        if (file_name.split(\"[.]\"\
    )(0).startsWith(\"0\") || file_name.split(\"[.]\")(0).startsWith(\"9\")) return\
    \ \"No\"\n        if (file_name.split(\"[.]\")(1).contains(\"exe\") || file_name.split(\"\
    [.]\")(1).contains(\"dll\")) return \"Yes\"\n        return \"No\"\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqjk5mkr5.scala:27)\n\tat Problem.main(tmpqjk5mkr5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      var correct = false // true if string is valid\n\
    \      val str = \"\" + file_name // convert the file_name from String to String\n\
    \      var i = -1\n      val maxFileName = 100\n      while(!correct && i < maxFileName)\
    \ {\n        i += 1\n        str = str.replaceAll(\"\\\\D\", \"\")\n        str\
    \ = str.replaceAll(\"\\\\.\", \"\")\n        val dotIndex = str.indexOf(\".\"\
    )\n        if (dotIndex != -1) {\n          val beforeDot = str.substring(0, dotIndex)\n\
    \          val afterDot = str.substring(dotIndex + 1)\n          val isLetter\
    \ = beforeDot.matches(\"[a-zA-z]\")\n          val isDigit = beforeDot.matches(\"\
    [0-9]\")\n          val isSingleDot = afterDot.matches(\"[.]\")\n          if\
    \ (isLetter && isDigit && isSingleDot) {\n            val fileExtension = afterDot\n\
    \            if (fileExtension == \"txt\" || fileExtension == \"exe\" || fileExtension\
    \ == \"dll\") {\n              correct = true\n            }\n          } else\
    \ {\n            val fileExtension = str\n            if (fileExtension == \"\
    txt\" || fileExtension == \"exe\" || fileExtension == \"dll\") {\n           \
    \   correct = true\n            }\n          }\n        }\n      }\n      if (correct)\
    \ {\n        \"Yes\"\n      } else {\n        \"No\"\n      }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpfqhzy4h9.scala:25:12 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        str = str.replaceAll(\e[31m\"\\\\D\"\e[0m, \e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val str\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpfqhzy4h9.scala:26:12 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        str = str.replaceAll(\e[31m\"\\\\.\"\e[0m, \e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val str\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val numDot = file_name.count { c => c == '.'\
    \ }\n        if (numDot > 3) \"No\"\n        else if (numDot == 0) \"No\"\n  \
    \      else {\n            val firstLetter = file_name.charAt(0)\n           \
    \ val firstLetterCap = firstLetter.toLower\n            if (firstLetter != 'a'\
    \ && firstLetter != 'b' && firstLetter != 'c' &&\n                firstLetter\
    \ != 'd' && firstLetter != 'e' && firstLetter != 'f' &&\n                firstLetter\
    \ != 'g' && firstLetter != 'h' && firstLetter != 'i' &&\n                firstLetter\
    \ != 'j' && firstLetter != 'k' && firstLetter != 'l' &&\n                firstLetter\
    \ != 'm' && firstLetter != 'n' && firstLetter != 'o' &&\n                firstLetter\
    \ != 'p' && firstLetter != 'q' && firstLetter != 'r' &&\n                firstLetter\
    \ != 's' && firstLetter != 't' && firstLetter != 'u' &&\n                firstLetter\
    \ != 'v' && firstLetter != 'w' && firstLetter != 'x' &&\n                firstLetter\
    \ != 'y' && firstLetter != 'z') {\n                return \"No\"\n           \
    \ }\n            var isValid = true\n            var subString = \"\"\n      \
    \      var checker = true\n            var firstLetterCap = file_name.charAt(0)\n\
    \            var lastLetterCap = file_name.charAt(file_name.length-1)\n      \
    \      var checker = true\n            val stringToCheck = file_name\n       \
    \     var i = 2\n            while (i <= stringToCheck.length) {\n           \
    \     val letter = stringToCheck.charAt(i)\n                val letterCap = letter.toLower\n\
    \                if (letter == '.') {\n                    if (checker == false)\
    \ {\n                        isValid = false\n                        break\n\
    \                    }\n                    checker = false\n                }\n\
    \                if (letter == '.') {\n                    checker = true\n  \
    \              }\n                if (letterCap >= 'a' && letterCap <= 'z') {\n\
    \                    if (firstLetterCap == letterCap) {\n                    \
    \    firstLetterCap = letterCap\n                    } else {\n              \
    \          isValid = false\n                        break\n                  \
    \  }\n                } else if (letterCap >= 'A' && letterCap <= 'Z') {\n   \
    \                 if (firstLetterCap == letterCap) {\n                       \
    \ firstLetterCap = letterCap\n                    } else {\n                 \
    \       isValid = false\n                        break\n                    }\n\
    \                } else {\n                    isValid = false\n             \
    \       break\n                }\n                subString += letter\n      \
    \          i += 1\n            }\n            if (isValid && firstLetterCap ==\
    \ 'a') {\n                if (subString.toLowerCase == \"txt\") {\n          \
    \          return \"Yes\"\n                } else if (subString.toLowerCase ==\
    \ \"exe\") {\n                    return \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpagts2fnq.scala:114:0 ---------------------------\e\
    [0m\e[0m\n\e[31m114 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpagts2fnq.scala:39:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            \e[33mvar\e\
    [0m \e[36mfirstLetterCap\e[0m = file_name.charAt(\e[31m0\e[0m)\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfirstLetterCap is already defined as \e[33mvalue\e[0m \e[35mfirstLetterCap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpagts2fnq.scala:41:16 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m            \e[33mvar\e[0m \e[36mchecker\e[0m = \e[31mtrue\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mchecker\
    \ is already defined as \e[33mvariable\e[0m \e[35mchecker\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpagts2fnq.scala:50:24\
    \ ------------------------\e[0m\e[0m\n\e[31m50 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpagts2fnq.scala:59:39 -----------------------------\e[0m\e\
    [0m\n\e[31m59 |\e[0m                        firstLetterCap = letterCap\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        Reassignment to val firstLetterCap\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpagts2fnq.scala:62:24 ------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: "
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val count = file_name.toCharArray.drop(3).sum\n\
    \        var isFileNameValid = false\n        if(count == 0){\n            isFileNameValid\
    \ = true\n        }\n        else if(count >= 3 && file_name.indexOf('.')>=1){\n\
    \            isFileNameValid = true\n        }\n        else if(!file_name.drop(1).isEmpty){\n\
    \            val beforeDot = file_name.drop(1).dropWhile(_.isLetter).mkString\n\
    \            val afterDot = file_name.drop(2).dropWhile(_.isDigit).mkString\n\
    \            isFileNameValid = beforeDot != \"\" && afterDot != \"\" && beforeDot.charAt(0)\
    \ < 'z' && beforeDot.charAt(0) > 'a' && afterDot.charAt(0) < 'z' && afterDot.charAt(0)\
    \ > 'a'\n        }\n        if(isFileNameValid){\n            if(file_name.drop(1).isEmpty){\n\
    \                return \"Yes\"\n            }\n            else{\n          \
    \      val beforeDot = file_name.drop(1).dropWhile(_.isLetter).mkString\n    \
    \            val afterDot = file_name.drop(2).dropWhile(_.isDigit).mkString\n\
    \                if(!beforeDot.isEmpty){\n                    if(beforeDot.charAt(0)\
    \ < 'z' && beforeDot.charAt(0) > 'a'){\n                        return \"No\"\n\
    \                    }\n                }\n                if(!afterDot.isEmpty){\n\
    \                    if(beforeDot.charAt(0) < 'z' && beforeDot.charAt(0) > 'a'){\n\
    \                        return \"No\"\n                    }\n              \
    \  }\n                if(afterDot != \"exe\" && afterDot != \"dll\" && afterDot\
    \ != \"txt\"){\n                    return \"No\"\n                }\n       \
    \         else{\n                    return \"Yes\"\n                }\n     \
    \       }\n        }\n        else{\n            return \"No\"\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzo0rrkj5.scala:62)\n\tat Problem.main(tmpzo0rrkj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length > 3) {\n             return\
    \ \"No\"\n        }\n        val dotIndex = file_name.indexOf(\".\");\n      \
    \  if (dotIndex == 0) {\n             return \"No\"\n        }\n        val dotString:\
    \ String = file_name.substring(0, dotIndex);\n        val firstChar: Char = dotString.charAt(0);\n\
    \        if (firstChar < 'a' || firstChar > 'z') {\n             return \"No\"\
    \n        }\n        val lastChar: Char = dotString.charAt(dotString.length-1);\n\
    \        if (lastChar < 'a' || lastChar > 'z') {\n             return \"No\"\n\
    \        }\n        val fileNameNoExtension: String= dotString.substring(1);\n\
    \        var isValid = false;\n        if (fileNameNoExtension.contains(\"txt\"\
    ) || fileNameNoExtension.contains(\"exe\") || fileNameNoExtension.contains(\"\
    dll\") ) {\n             isValid = true;\n        }\n        if (fileNameNoExtension.length\
    \ > 3 ) {\n             isValid = false;\n        }\n        return if (isValid)\
    \ \n             \"Yes\" \n        else\n             \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47tw325j.scala:49)\n\tat Problem.main(tmp47tw325j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val name = file_name.substring(0, file_name.length\
    \ - 1)\n        val index = name.lastIndexOf('.')\n        if (index > 0) {\n\
    \            val length = name.length - index\n            val letters = name.substring(0,\
    \ index).toCharArray\n            if (letters.length == 1 && letters(0) == 'a'\
    \ && letters(1) == 'z') \n                if (length == 2) \n                \
    \    val dotIndex = name.indexOf('.')\n                    val lastIndex = dotIndex\
    \ + 1\n                    if (lastIndex <= name.length && name.substring(lastIndex\
    \ - 1, lastIndex).toString == \"txt\" || name.substring(lastIndex - 1, lastIndex).toString\
    \ == \"exe\" || name.substring(lastIndex - 1, lastIndex).toString == \"dll\")\
    \ {\n                        return \"Yes\"\n                    } else { \n \
    \                       return \"No\"\n                    }\n            } else\
    \ \n                if (length == 0) \n                    return \"No\"\n   \
    \     }\n        \"No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpahro_a6l.scala:68:0 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpahro_a6l.scala:24:12\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (letters.length\
    \ == \e[31m1\e[0m && letters(\e[31m0\e[0m) == \e[31m'a'\e[0m && letters(\e[31m1\e\
    [0m) == \e[31m'z'\e[0m) \n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e\
    [0m            Found:    Unit\n\e[31m   |\e[0m            Required: String\n\e\
    [31m   |\e[0m            Maybe you are missing an else part for the conditional?\n\
    \e[31m25 |\e[0m                \e[33mif\e[0m (length == \e[31m2\e[0m) \n\e[31m26\
    \ |\e[0m                    \e[33mval\e[0m \e[36mdotIndex\e[0m = name.indexOf(\e\
    [31m'.'\e[0m)\n\e[31m27 |\e[0m                    \e[33mval\e[0m \e[36mlastIndex\e\
    [0m = dotIndex + \e[31m1\e[0m\n\e[31m28 |\e[0m                    \e[33mif\e[0m\
    \ (lastIndex <= name.length && name.substring(lastIndex - \e[31m1\e[0m, lastIndex).toString\
    \ == \e[31m\"txt\"\e[0m || name.substring(lastIndex - \e[31m1\e[0m, lastIndex).toString\
    \ == \e[31m\"exe\"\e[0m || name.substring(lastIndex - \e[31m1\e[0m, lastIndex).toString\
    \ == \e[31m\"dll\"\e[0m) {\n\e[31m29 |\e[0m                        \e[33mreturn\e\
    [0m \e[31m\"Yes\"\e[0m\n\e[31m30 |\e[0m                    } \e[33melse\e[0m {\
    \ \n\e[31m31 |\e[0m                        \e[33mreturn\e[0m \e[31m\"No\"\e[0m\n\
    \e[31m32 |\e[0m                    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpahro_a6l.scala:34:20 ------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m                \e[33mif\e[0m (length == \e[31m0\e[0m) \n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Not found: length\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpahro_a6l.scala:40:11 ------------------------\e[0m\e[0m\n\e[31m40 |\e\
    [0m    assert(fileNameCheck((\e[31m\"example.txt\"\e[0m)).equals((\e[31m\"Yes\"\
    \e[0m)));\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val numOfDigits = file_name.count { x => x <='9'\
    \ }\n        if(numOfDigits <= 3)\n            \"No\"\n        else if(file_name.contains(\"\
    .\"))\n            \"No\"\n        else if(file_name.substringBefore(\".\").isEmpty)\n\
    \            \"No\"\n        else if(!((file_name.substringBefore(file_name.indexOf(\"\
    .\")).matches(\"^[a-zA-Z]\"))))\n            \"No\"\n        else if(!file_name.substringAfter(\"\
    .\") in List(\"txt\", \"exe\", \"dll\"))\n            \"No\"\n        else\n \
    \           \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsgkqfdlj.scala:24:26 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(file_name.substringBefore(\e\
    [31m\".\"\e[0m).isEmpty)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value substringBefore is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsgkqfdlj.scala:26:29 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(!((file_name.substringBefore(file_name.indexOf(\e\
    [31m\".\"\e[0m)).matches(\e[31m\"^[a-zA-Z]\"\e[0m))))\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \        value substringBefore is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpsgkqfdlj.scala:28:27 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(!file_name.substringAfter(\e\
    [31m\".\"\e[0m) in List(\e[31m\"txt\"\e[0m, \e[31m\"exe\"\e[0m, \e[31m\"dll\"\e\
    [0m))\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                 value substringAfter is not a member of String\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (fileName.split(\".\").length <= 1 || \"\
    ..\".equals(file_name.split(\".\").head) || !file_name.split(\".\").head.head.equals(\"\
    a\") || !file_name.split(\".\").last.contains(\"txt\") || !file_name.split(\"\
    .\").last.contains(\"exe\") || !file_name.split(\".\").last.contains(\"dll\"))\
    \ {\n            return \"No\"\n        }\n        return \"Yes\"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1m7da7k1.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (fileName.split(\e[31m\".\"\e[0m).length\
    \ <= \e[31m1\e[0m || \e[31m\"..\"\e[0m.equals(file_name.split(\e[31m\".\"\e[0m).head)\
    \ || !file_name.split(\e[31m\".\"\e[0m).head.head.equals(\e[31m\"a\"\e[0m) ||\
    \ !file_name.split(\e[31m\".\"\e[0m).last.contains(\e[31m\"txt\"\e[0m) || !file_name.split(\e\
    [31m\".\"\e[0m).last.contains(\e[31m\"exe\"\e[0m) || !file_name.split(\e[31m\"\
    .\"\e[0m).last.contains(\e[31m\"dll\"\e[0m)) {\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: fileName\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name\n        val file_name\
    \ = file_name.toDouble\n        val file_name = file_name.toInt\n        val file_name\
    \ = file_name.toDouble.toChar\n        val file_name = file_name.toDouble.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar\n        val file_name\
    \ = file_name.toDouble.toChar.toChar.toChar\n        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph82aa81e.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toDouble\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmph82aa81e.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name\
    \ is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph82aa81e.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.toDouble.toChar\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name\
    \ is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph82aa81e.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.toDouble.toChar\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name\
    \ is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph82aa81e.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.toDouble.toChar.toChar\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfile_na"
  stdout: ''
  timestamp: 1660010712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var fileName : String = \"No\"\n        var\
    \ dotIndex = 0\n        val dotIndex = file_name.indexOf('.');\n        if (dotIndex\
    \ != -1) {\n            var firstLetter = file_name.substring(0, dotIndex);\n\
    \            val firstLetterCode = firstLetter.toCharArray().map(_.toInt)\n  \
    \          if (firstLetterCode == 0)\n                return \"No\";\n       \
    \     var lastLetter = file_name.substring(dotIndex + 1);\n            val lastLetterCode\
    \ = lastLetter.toCharArray().map(_.toInt)\n            if (lastLetterCode != 0\
    \ && !(lastLetterCode == 1 && (firstLetterCode == 65 || firstLetterCode == 66\
    \ || firstLetterCode == 67 || firstLetterCode == 68 || firstLetterCode == 69 ||\
    \ firstLetterCode == 70)))\n                return \"No\";\n            var fileNameLength\
    \ = file_name.length - dotIndex - 1\n            var hasOnlyOneDot = false\n \
    \           val hasOnlyOneDot = file_name.substring(0, dotIndex) == \".\"\n  \
    \          if (hasOnlyOneDot)\n                fileNameLength = file_name.length\n\
    \            val fileNameCheck = file_name match {\n                case \"txt\"\
    \ => true\n                case \"exe\" => true\n                case \"dll\"\
    \ => true\n                case _ => false\n            }\n            if (!hasOnlyOneDot\
    \ || fileNameLength <= 3 || fileNameCheck == false)\n                return \"\
    No\"\n            fileName = \"Yes\"\n        }\n        return fileName\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9f5nncaz.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = file_name.indexOf(\e\
    [31m'.'\e[0m);\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvariable\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9f5nncaz.scala:33:16 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m            \e[33mval\e[0m \e[36mhasOnlyOneDot\e[0m = file_name.substring(\e\
    [31m0\e[0m, dotIndex) == \e[31m\".\"\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhasOnlyOneDot is already defined as \e[33mvariable\e[0m \e\
    [35mhasOnlyOneDot\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmp9f5nncaz.scala:25:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (firstLetterCode == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m     Values of types Array[Int] and Int cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp9f5nncaz.scala:29:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m (lastLetterCode != \e[31m0\e\
    [0m && !(lastLetterCode == \e[31m1\e[0m && (firstLetterCode == \e[31m65\e[0m ||\
    \ firstLetterCode == \e[31m66\e[0m || firstLetterCode == \e[31m67\e[0m || firstLetterCode\
    \ == \e[31m68\e[0m || firstLetterCode == \e[31m69\e[0m || firstLetterCode == \e\
    [31m70\e[0m)))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m     Values of types Array[Int] and Int cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp9f5nncaz.scala:29:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m (lastLetterCode != \e[31m0\e\
    [0m && !(lastLetterCode == \e[31m1\e[0m && (first"
  stdout: ''
  timestamp: 1660010716
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result = (\"No\")\n        if(file_name.nonEmpty)\
    \ {\n            if(file_name.length >= 4) {\n                var dotPosition\
    \ = file_name.indexOf(\".\")\n                if(dotPosition != -1) {\n      \
    \              var startWith = file_name.substring(0, dotPosition)\n         \
    \           var lastChar = file_name.substring(dotPosition, file_name.length)\n\
    \                    var fileExtension = lastChar.toLowerCase \n             \
    \       if(startWith.length == 1 || startWith.length == 2 || startWith.length\
    \ == 3 || startWith.length == 4) {\n                        if(fileExtension ==\
    \ \"txt\" || fileExtension == \"exe\" || fileExtension == \"dll\") {\n       \
    \                     result = (\"Yes\")\n                        }\n        \
    \            }\n                }\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxabpb_zm.scala:38)\n\tat Problem.main(tmpxabpb_zm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        def isValidFile(file_name : String): Boolean\
    \ = {\n            var ok = false\n            // Split file name into filename\
    \ and extension\n            val parts = file_name.split(\".\")\n            //\
    \ check file name\n            val length = parts.length\n            if (length\
    \ != 2) {\n                return false\n            }\n            val file_name\
    \ = parts(0)\n            val extension = parts(1)\n            // Check whether\
    \ file name contains only digits\n            if (file_name.matches(\"\\\\d+\"\
    )) {\n                // Check whether file name contains only valid letters\n\
    \                val letters = file_name.toCharArray\n                for (i <-\
    \ 0 until letters.length) {\n                    if (letters(i) < 'a' || letters(i)\
    \ > 'z') {\n                        return false\n                    }\n    \
    \            }\n            }\n            // Check whether file name contains\
    \ only one dot\n            if (file_name.contains(\".\")) {\n               \
    \ val dot_index = file_name.indexOf(\".\")\n                val first_character\
    \ = if (dot_index >= 0) file_name(dot_index) else 0\n                if (dot_index\
    \ > 0 && first_character == 0) return false\n            }\n            // Check\
    \ whether file name starts with letter from latin alphabet\n            val chars\
    \ = file_name.toCharArray\n            if (chars.length > 1 && chars(0) == 'a'\
    \ && chars(1) == 'z') return true\n            if (chars.length > 1 && chars(0)\
    \ == 'A' && chars(1) == 'Z') return true\n            return false\n        }\n\
    \n        // if file name is not valid, return false\n        if (!isValidFile(file_name))\
    \ {\n            return \"No\"\n        }\n        // if file name passed the\
    \ test, return true\n        return \"Yes\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpczlsnhjt.scala:28:28 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = parts(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m \
    \  |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mparts\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code goes here\n        val pattern\
    \ = \"\\\\d{3}\\\\.\\\\w+\"\n        val result = file_name.toString.matches(pattern)\n\
    \        if(result){\n            if(file_name.toString.substring(0,1) == file_name.toString.charAt(0))\
    \ {\n                if(!file_name.toString.substring(0,1) == file_name.toString.charAt(1)\
    \ || \"txt\".contains(file_name.toString.substring(file_name.toString.indexOf('.')))\
    \ || \"exe\".contains(file_name.toString.substring(file_name.toString.indexOf('.')))\
    \ || \"dll\".contains(file_name.toString.substring(file_name.toString.indexOf('.')))){\n\
    \                    return \"No\"\n                }else{\n                 \
    \   return \"Yes\"\n                }\n            }else{\n                return\
    \ \"No\"\n            }\n        }\n        return \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpy3xulzii.scala:23:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(file_name.toString.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) == file_name.toString.charAt(\e[31m0\e[0m)) {\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy3xulzii.scala:24:19\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e\
    [0m(!file_name.toString.substring(\e[31m0\e[0m,\e[31m1\e[0m) == file_name.toString.charAt(\e\
    [31m1\e[0m) || \e[31m\"txt\"\e[0m.contains(file_name.toString.substring(file_name.toString.indexOf(\e\
    [31m'.'\e[0m))) || \e[31m\"exe\"\e[0m.contains(file_name.toString.substring(file_name.toString.indexOf(\e\
    [31m'.'\e[0m))) || \e[31m\"dll\"\e[0m.contains(file_name.toString.substring(file_name.toString.indexOf(\e\
    [31m'.'\e[0m)))){\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value unary_! is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code goes here\n        val dots = file_name.split(\"\
    \\\\.\").length\n        if (dots > 3 || file_name != file_name.split(\"\\\\.\"\
    ).last){\n            return \"No\"\n        }\n        if(file_name.indexOf(\"\
    .\") == 0 || file_name.substring(0,1) == \".\" || file_name.substring(0,2) ==\
    \ \".txt\"){\n            return \"No\"\n        }\n        if(file_name.substring(file_name.lastIndexOf(\"\
    .\") + 1).toLowerCase != \"exe\" || file_name.substring(0,1) == \".\" || file_name.substring(0,2)\
    \ == \".dll\"){\n            return \"No\"\n        }\n        return \"Yes\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhkphvzd.scala:33)\n\tat Problem.main(tmpnhkphvzd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid : Boolean = true\n        val file_name\
    \ : String = (file_name split \".\").length == 1 \n        if(!file_name) {\n\
    \            valid = false\n        }\n        if(file_name.contains(\".\")) {\n\
    \            val subString = file_name.substring(0, file_name.indexOf(\".\"))\n\
    \            val subString = subString.toUpperCase().toCharArray\n           \
    \ val firstChar = subString(0)\n            val firstCharIsLetter = firstChar.isLetter\n\
    \            if(subString.length == 1) {\n                if(!firstCharIsLetter)\
    \ {\n                    valid = false\n                }\n            }\n   \
    \         else {\n                var valid : Boolean = false\n              \
    \  var i : Int = 0\n                for(i = 1; i < subString.length; i++) {\n\
    \                    val letter = subString(i)\n                    val letterIsLetter\
    \ = letter.isLetter\n                    if(!firstCharIsLetter && !letterIsLetter)\
    \ {\n                        valid = false\n                    }\n          \
    \      }\n                if(!valid) {\n                    valid = false\n  \
    \              }\n            }\n        }\n        if(!valid) {\n           \
    \ valid = \"No\"\n        }\n        valid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnpykzm_4.scala:37:22 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mfor\e[0m(i = \e[31m1\e[0m; i <\
    \ subString.length; i++) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0m                      ')' expected, but '=' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpnpykzm_4.scala:37:47 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mfor\e[0m(i = \e[31m1\e[0m; i <\
    \ subString.length; i++) {\n\e[31m\e[31m   |\e[0m                            \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \          '<-' expected, but ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpnpykzm_4.scala:37:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m                \e[33mfor\e\
    [0m(i = \e[31m1\e[0m; i < subString.length; i++) {\n\e[31m\e[31m   |\e[0m    \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                               pattern expected\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnpykzm_4.scala:20:33 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e\
    [0m = (file_name split \e[31m\".\"\e[0m).length == \e[31m1\e[0m \n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    Boolean\n\e[31m\
    \   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnpykzm_4.scala:21:11 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(!file_name) {\n\e[31m\e[31m   |\e\
    [0m           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value unary_! is not\
    \ a member of String\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnpykzm_4.scala:26:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e\
    [0m \e[36msubString\e[0m = subString.toUpperCase().toCharArray\n\e"
  stdout: ''
  timestamp: 1660010718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length <= 3) {\n            return\
    \ \"No\"\n        } else if (file_name.indexOf('.') == -1) {\n            return\
    \ \"No\"\n        } else if (file_name.substring(0, 1).toInt == 0 || file_name.substring(file_name.length-1,\
    \ file_name.length).toInt == 0 || file_name.substring(file_name.indexOf('.'),\
    \ file_name.indexOf('.')).toUpper != 'TXT' && file_name.substring(file_name.indexOf('.'),\
    \ file_name.indexOf('.')).toUpper != 'EXE' && file_name.substring(file_name.indexOf('.'),\
    \ file_name.indexOf('.')).toUpper != 'DLL') {\n            return \"No\"\n   \
    \     } else {\n            return \"Yes\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp25mogrqe.scala:23:210 ----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (file_name.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m).toInt == \e[31m0\e[0m || file_name.substring(file_name.length-\e\
    [31m1\e[0m, file_name.length).toInt == \e[31m0\e[0m || file_name.substring(file_name.indexOf(\e\
    [31m'.'\e[0m), file_name.indexOf(\e[31m'.'\e[0m)).toUpper != \e[31m'TXT\e[0m'\
    \ && file_name.substring(file_name.indexOf(\e[31m'.'\e[0m), file_name.indexOf(\e\
    [31m'.'\e[0m)).toUpper != \e[31m'EXE\e[0m' && file_name.substring(file_name.indexOf(\e\
    [31m'.'\e[0m), file_name.indexOf(\e[31m'.'\e[0m)).toUpper != \e[31m'DLL\e[0m')\
    \ {\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                                            \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0msymbol literal 'TXT is no longer supported,\n\e\
    [31m   |\e[0muse a string literal \"TXT\" or an application Symbol(\"TXT\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{TXT} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp25mogrqe.scala:23:214\
    \ --------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        } \e[33melse\e\
    [0m \e[33mif\e[0m (file_name.substring(\e[31m0\e[0m, \e[31m1\e[0m).toInt == \e\
    [31m0\e[0m || file_name.substring(file_name.length-\e[31m1\e[0m, file_name.length).toInt\
    \ == \e[31m0\e[0m || file_name.substring(file_name.indexOf(\e[31m'.'\e[0m), file_name.indexOf(\e\
    [31m'.'\e[0m)).toUpper != \e[31m'TXT\e[0m' && file_name.substring(file_name.indexOf(\e\
    [31m'.'\e[0m), file_name.indexOf(\e[31m'.'\e[0m)).toUpper != \e[31m'EXE\e[0m'\
    \ && file_name.substring(file_name.indexOf(\e[31m'.'\e[0m), file_name.indexOf(\e\
    [31m'.'\e[0m)).toUpper != \e[31m'DLL\e[0m') {\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                   "
  stdout: ''
  timestamp: 1660010714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      var check : Boolean = true\n      var newname\
    \ : String = \"\"\n      for (i <- 0 until fileName.length()) {\n        if (check(file_name.charAt(i))\
    \ && check(file_name.charAt(i)) && check(file_name.charAt(i)) && check(file_name.charAt(i))\
    \ && check(file_name.charAt(i)) && check(file_name.charAt(i)) && check(file_name.charAt(i)))\
    \ {\n          newname += file_name.charAt(i)\n        }\n      }\n      if (newname.length\
    \ < 3 && newname != \"\" && !check(newname.charAt(0))) {\n        return \"No\"\
    \n      }\n      else if (newname.length >= 3 && newname != \"\" && !check(newname.charAt(0)))\
    \ {\n        return \"No\"\n      }\n      else if (newname.length >= 2 && newname\
    \ != \"\" && !check(newname.charAt(0))) {\n        return \"No\"\n      }\n  \
    \    else {\n        return \"Yes\"\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjegwi27p.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mfor\e[0m (i <- \e[31m0\e[0m until fileName.length())\
    \ {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: fileName\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpjegwi27p.scala:22:12 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (check(file_name.charAt(i)) &&\
    \ check(file_name.charAt(i)) && check(file_name.charAt(i)) && check(file_name.charAt(i))\
    \ && check(file_name.charAt(i)) && check(file_name.charAt(i)) && check(file_name.charAt(i)))\
    \ {\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            \e\
    [33mvariable\e[0m \e[35mcheck\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpjegwi27p.scala:26:50 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m      \e[33mif\e[0m (newname.length < \e[31m3\e[0m &&\
    \ newname != \e[31m\"\"\e[0m && !check(newname.charAt(\e[31m0\e[0m))) {\n\e[31m\e\
    [31m   |\e[0m                                                  ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 \e[33mvariable\e[0m \e[35mcheck\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpjegwi27p.scala:29:56 -----------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m      \e[33melse\e[0m \e[33mif\e[0m (newname.length >= \e[31m3\e[0m &&\
    \ newname != \e[31m\"\"\e[0m && !check(newname.charAt(\e[31m0\e[0m))) {\n\e[31m\e\
    [31m   |\e[0m                                                        ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 \e[33mvariable\e[0m \e[35mcheck\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpjegwi27p.scala:32:56 -----------------------------\e[0m\e[0m\n\e[31m32"
  stdout: ''
  timestamp: 1660010713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result = \"No\";\n        var count = file_name.length;\n\
    \        var letterCount = 0;\n        var digitCount = 0;\n\n        while(count\
    \ > 0) {\n            if(file_name contains \"\\.\") {\n                result\
    \ = \"Yes\";\n                break;\n            }\n            else if(file_name.substring(0,1)\
    \ == \".\") {\n                result = \"No\";\n                break;\n    \
    \        }\n            else if ((file_name.substring(0,1) >='a' && file_name.substring(0,1)\
    \ <='z') \n                    || (file_name.substring(0,1) >='A' && file_name.substring(0,1)\
    \ <='Z')) {\n                letterCount++;\n            }\n            else if\
    \ ((file_name.substring(0,1) >='0' && file_name.substring(0,1) <='9')) {\n   \
    \             digitCount++;\n            }\n            else if ((file_name.substring(0,1)\
    \ >='a' && file_name.substring(0,1) <='z') \n                    || (file_name.substring(0,1)\
    \ >='A' && file_name.substring(0,1) <='Z')\n                    || (file_name.substring(0,1)\
    \ >='0' && file_name.substring(0,1) <='9')) {\n                result = \"No\"\
    ;\n                break;\n            }\n            else {\n               \
    \ result = \"No\";\n                break;\n            }\n            count--;\n\
    \        }\n        if(letterCount == 0 && digitCount == 0) {\n            result\
    \ = \"Yes\";\n        }\n        return result;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwy0c1x0v.scala:25:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m(file_name contains \e[31m\"\
    \\.\"\e[0m) {\n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\
    \e[31m   |\e[0m                                    invalid escape character\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmpwy0c1x0v.scala:35:29 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                letterCount++;\n\e[31m\e[31m   |\e[0m\
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \     expression expected but \e[31m';'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpwy0c1x0v.scala:38:28 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                digitCount++;\n\e[31m\e[31m   |\e[0m\
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \   expression expected but \e[31m';'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmpwy0c1x0v.scala:50:19 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m            count--;\n\e[31m\e[31m   |\e[0m         \
    \          ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m';'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwy0c1x0v.scala:27:16\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                break;\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwy0c1x0v.scala:31:16\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                break;\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /"
  stdout: ''
  timestamp: 1660010719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code here\n        val fileList = file_name.toList\n\
    \        val dotPos = fileList.indexWhere(_ == '.')\n        if (dotPos > 1) {\n\
    \            fileList(0)\n        }\n        else {\n            if (fileList.head\
    \ == \"\") fileList.head\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoekm2qo5.scala:23:20\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            fileList(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       Found:    Char\n\e[31m   |\e[0m            Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpoekm2qo5.scala:26:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m (fileList.head == \e[31m\"\"\
    \e[0m) fileList.head\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length > 3) {\n            return\
    \ \"No\"\n        }\n        if (file_name.contains(\".\")) {\n            return\
    \ \"No\"\n        }\n        if (file_name.substring(0, 1) == ('A'..'Z') || file_name.substring(0,\
    \ 1) == ('a'..'z')) {\n            return \"No\"\n        }\n        if (file_name.substringBeforeDot().isEmpty)\
    \ {\n            return \"No\"\n        }\n        if (file_name.substringAfterDot().toSet.size\
    \ == 3) {\n            return \"No\"\n        }\n        return \"Yes\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyueebiq4.scala:25:46 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (file_name.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m) == (\e[31m'A'\e[0m..\e[31m'Z'\e[0m) || file_name.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m) == (\e[31m'a'\e[0m..\e[31m'z'\e[0m)) {\n\e[31m\e[31m\
    \   |\e[0m                                              ^\e[0m\n\e[31m   |\e[0m\
    \                                   an identifier expected, but '.' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpyueebiq4.scala:25:89 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (file_name.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m) == (\e[31m'A'\e[0m..\e[31m'Z'\e[0m) || file_name.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m) == (\e[31m'a'\e[0m..\e[31m'z'\e[0m)) {\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \    an identifier expected, but '.' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpyueebiq4.scala:28:22 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mif\e[0m (file_name.substringBeforeDot().isEmpty) {\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          value substringBeforeDot is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpyueebiq4.scala:31:22 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m (file_name.substringAfterDot().toSet.size\
    \ == \e[31m3\e[0m) {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value substringAfterDot is not a member of String\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code here\n        val fileName = file_name\
    \ split '.'\n        if(fileName.count(_ < '0') >= 3 || fileName.count(_ < 'A')\
    \ >= 1 || fileName.count(_ > 'Z') >= 1) \"No\"\n        else if(fileName.count(_\
    \ > 'Z') >= 1) \"No\"\n        else \"Yes\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdn8o1dt2.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(fileName.count(_\
    \ < \e[31m'0'\e[0m) >= \e[31m3\e[0m || fileName.count(_ < \e[31m'A'\e[0m) >= \e\
    [31m1\e[0m || fileName.count(_ > \e[31m'Z'\e[0m) >= \e[31m1\e[0m) \e[31m\"No\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                              ^^^\e[0m\n\e[31m   |\e\
    [0m                              Found:    (\e[31m'0'\e[0m : Char)\n\e[31m   |\e\
    [0m                              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdn8o1dt2.scala:21:62 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(fileName.count(_ < \e[31m'0'\e\
    [0m) >= \e[31m3\e[0m || fileName.count(_ < \e[31m'A'\e[0m) >= \e[31m1\e[0m ||\
    \ fileName.count(_ > \e[31m'Z'\e[0m) >= \e[31m1\e[0m) \e[31m\"No\"\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (\e[31m'A'\e[0m : Char)\n\e[31m   |\e[0m                                 \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdn8o1dt2.scala:21:94 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mif\e[0m(fileName.count(_ < \e[31m'0'\e[0m) >= \e[31m3\e\
    [0m || fileName.count(_ < \e[31m'A'\e[0m) >= \e[31m1\e[0m || fileName.count(_\
    \ > \e[31m'Z'\e[0m) >= \e[31m1\e[0m) \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                  ^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    (\e[31m'Z'\e[0m : Char)\n\e[31m   |\e[0m         \
    \                                         Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdn8o1dt2.scala:22:35 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(fileNam"
  stdout: ''
  timestamp: 1660010719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name : String = \"invalid\"\n     \
    \   var isValid : Boolean = false\n        if(file_name.contains(\".\") && file_name.substring(0,\
    \ 1).isLetter){\n            val index = file_name.indexOf(\".\") + 1\n      \
    \      val sub_string = file_name.substring(0, index)\n            val extension\
    \ = file_name.substring(index)\n            if(sub_string.length == 2 && sub_string.contains(\"\
    0\") && sub_string.contains(\"9\") && sub_string.contains(\".\")){\n         \
    \       if(extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"\
    dll\")){\n                    isValid = true\n                }\n            }\n\
    \        }\n        if(!isValid){\n            return \"No\"\n        }else{\n\
    \            return \"Yes\"\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgt2imjgr.scala:21:64 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(file_name.contains(\e[31m\".\"\e\
    [0m) && file_name.substring(\e[31m0\e[0m, \e[31m1\e[0m).isLetter){\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name.matches(\"^[0-9]{1,3}[^.]+[.][^.]+[.][^.]+$\"\
    ))\n        {\n            if(file_name.indexOf('.') >= 0)\n            {\n  \
    \              var a = file_name.substring(0, file_name.indexOf('.'));\n     \
    \           var b = file_name.substring(file_name.lastIndexOf('.'));\n       \
    \         if(a.matches(\"^[a-zA-z]+\"))\n                {\n                 \
    \   if(b.toString.toUpperCase().contains(\".txt\") || b.toString.toUpperCase().contains(\"\
    .exe\") || b.toString.toUpperCase().contains(\".dll\"))\n                    {\n\
    \                        return \"Yes\";\n                    }\n            \
    \    }\n            }\n        }\n        return \"No\";\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpabi3pju1.scala:37)\n\tat Problem.main(tmpabi3pju1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // TODO : Implement the condition check here\n\
    \        if(!(file_name.length > 3 && file_name.contains(\".\")))\n          \
    \  return \"No\"\n        if(file_name.indexOf(\".\") > 0 && !(file_name.substring(0,1).isLetter\
    \ && file_name.substring(0,1).isLower) && file_name.substring(0,1) != \"\" &&\
    \ !(file_name.substring(0,4).equals(\"example\") || file_name.substring(0,4).equals(\"\
    1example\") || file_name.substring(0,4).equals(\"examples\")))\n            return\
    \ \"No\"\n        if(!(\"txt\" == file_name.substring(0,4) || \"exe\" == file_name.substring(0,4)\
    \ || \"dll\" == file_name.substring(0,4)))\n            return \"No\"\n      \
    \  \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp799x2bq7.scala:22:68 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m(file_name.indexOf(\e[31m\".\"\e\
    [0m) > \e[31m0\e[0m && !(file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m).isLetter\
    \ && file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m).isLower) && file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) != \e[31m\"\"\e[0m && !(file_name.substring(\e[31m0\e\
    [0m,\e[31m4\e[0m).equals(\e[31m\"example\"\e[0m) || file_name.substring(\e[31m0\e\
    [0m,\e[31m4\e[0m).equals(\e[31m\"1example\"\e[0m) || file_name.substring(\e[31m0\e\
    [0m,\e[31m4\e[0m).equals(\e[31m\"examples\"\e[0m)))\n\e[31m\e[31m   |\e[0m   \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010717
- exit_code: 143
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        def validator(name : String) : Boolean = \n\
    \            name.matches(\"^[0-9]{3}$\") && name.indexOf('.') == 1 && name.substring(0,\
    \ 1).matches('[A-Za-z]') && \n            name.substring(name.lastIndexOf('.')).toSet.contains('exe')\
    \ && name.substring(name.lastIndexOf('.')).contains('txt') \n            && name.substring(name.lastIndexOf('.')).contains('dll')\
    \ \n        if(validator(file_name)) \"Yes\" else \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpv_uwat9z.scala:20:106 ------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            name.matches(\e[31m\"^[0-9]{3}$\"\e[0m) &&\
    \ name.indexOf(\e[31m'.'\e[0m) == \e[31m1\e[0m && name.substring(\e[31m0\e[0m,\
    \ \e[31m1\e[0m).matches('[\e[35mA-Za-z\e[0m]') && \n\e[31m\e[31m   |\e[0m    \
    \                                                                            \
    \                          ^\e[0m\n\e[31m   |\e[0m                           \
    \                                                                            \
    \   unclosed character literal\n\e[31m\e[31m-- Error: /tmp/tmpv_uwat9z.scala:21:69\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            name.substring(name.lastIndexOf(\e[31m'.'\e\
    [0m)).toSet.contains(\e[31m'exe\e[0m') && name.substring(name.lastIndexOf(\e[31m'.'\e\
    [0m)).contains(\e[31m'txt\e[0m') \n\e[31m\e[31m   |\e[0m                     \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                                                unclosed character\
    \ literal\n\e[31m\e[31m-- Error: /tmp/tmpv_uwat9z.scala:21:126 ------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            name.substring(name.lastIndexOf(\e[31m'.'\e\
    [0m)).toSet.contains(\e[31m'exe\e[0m') && name.substring(name.lastIndexOf(\e[31m'.'\e\
    [0m)).contains(\e[31m'txt\e[0m') \n\e[31m\e[31m   |\e[0m                     \
    \                                                                            \
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \                                                                            \
    \              unclosed character literal\n\e[31m\e[31m-- Error: /tmp/tmpv_uwat9z.scala:22:66\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            && name.substring(name.lastIndexOf("
  stdout: ''
  timestamp: 1660055003
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val dotPos = file_name.lastIndexOf('.')\n  \
    \      if(dotPos < 0)\n            file_name\n        else\n            if(dotPos\
    \ == 0)\n                file_name\n            else\n                if(file_name.dropRight(1)\
    \ != \"txt\" && file_name.dropRight(1) != \"exe\" && file_name.dropRight(1) !=\
    \ \"dll\")\n                    file_name\n                else\n            \
    \        if(file_name.dropLeft(1) != \"a\")\n                        file_name\n\
    \                    else\n                        if(file_name.dropLeft(1) !=\
    \ \"A\")\n                            file_name\n                        else\n\
    \                            if(file_name.dropRight(1) != \"0\")\n           \
    \                     file_name\n                            else\n          \
    \                      file_name\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxl3c9dq.scala:29:33 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    \e[33mif\e[0m(file_name.dropLeft(\e\
    [31m1\e[0m) != \e[31m\"a\"\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \ ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       value dropLeft\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpqxl3c9dq.scala:32:37\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                        \e[33mif\e[0m(file_name.dropLeft(\e\
    [31m1\e[0m) != \e[31m\"A\"\e[0m)\n\e[31m\e[31m   |\e[0m                      \
    \     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                           value\
    \ dropLeft is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660054840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regex = \"\"\"^(?!.{3,}\\.)[a-z].+\\.(exe|dll|txt)$\"\
    \"\".r\n        val res = regex.findFirstIn(file_name).getOrElse(\"\")\n     \
    \   println(res)\n        res\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmplkz9pahr.scala:25)\n\tat Problem.main(tmplkz9pahr.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: '

    '
  timestamp: 1660054840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.trim.isEmpty) {\n            return\
    \ \"No\"\n        } else if (file_name.indexOf('.')==-1) {\n            return\
    \ \"No\"\n        } else if (file_name.substring(0,1) < 'a' || file_name.substring(0,1)\
    \ > 'z') {\n            return \"No\"\n        } else if (file_name.substring(file_name.indexOf('.')).matches(\"\
    [^\\.]\")) {\n            return \"No\"\n        } else if (file_name.substring(file_name.indexOf('.')).matches(\"\
    [^\\.][^\\.]\")) {\n            return \"No\"\n        } else if (file_name.substring(0,2).matches(\"\
    ^[0-9]\")) {\n            return \"No\"\n        } else {\n            return\
    \ \"Yes\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmptp5jksjc.scala:25:75 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (file_name.substring(file_name.indexOf(\e\
    [31m'.'\e[0m)).matches(\e[31m\"[^\\.]\"\e[0m)) {\n\e[31m\e[31m   |\e[0m      \
    \                                                                     ^\e[0m\n\
    \e[31m   |\e[0m                                                              \
    \             invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmptp5jksjc.scala:27:75\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (file_name.substring(file_name.indexOf(\e\
    [31m'.'\e[0m)).matches(\e[31m\"[^\\.][^\\.]\"\e[0m)) {\n\e[31m\e[31m   |\e[0m\
    \                                                                           ^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \                  invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmptp5jksjc.scala:27:80\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (file_name.substring(file_name.indexOf(\e\
    [31m'.'\e[0m)).matches(\e[31m\"[^\\.][^\\.]\"\e[0m)) {\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \    ^\e[0m\n\e[31m   |\e[0m                                                 \
    \                               invalid escape character\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmptp5jksjc.scala:21:41 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (file_name.indexOf(\e\
    [31m'.'\e[0m)==-\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value ==- is not a member of Int - did\
    \ you mean Int.==?\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmptp5jksjc.scala:23:46\
    \ -----"
  stdout: ''
  timestamp: 1660054840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        var name :\
    \ String = \"\"\n        var index = 0\n        while (index < file_name.length)\
    \ {\n            name += file_name(index)\n            if (index != file_name.length\
    \ - 1) {\n                name += \"/\";\n            }\n            index +=\
    \ 1\n        }\n        val dotIndex = name.lastIndexOf(\".\")\n        if (dotIndex\
    \ != -1) {\n            var i = 0\n            val fileName = name.substring(0,dotIndex)\n\
    \            val extension = name.substring(dotIndex + 1, name.length)\n     \
    \       val checkValidFileName = extension match {\n                case _ ::\
    \ _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ :: _ => true\n                case _ =>\
    \ false\n            }\n            if (checkValidFileName && fileName.contains(\"\
    0\") && fileName.contains(\"9\")) {\n                println(\"true\")\n     \
    \       }\n            else{\n                println(\"false\")\n           \
    \ }\n        }\n        else{\n            println(\"false\")\n        }\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppo59a5qm.scala:39:23\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                println(\e[31m\"true\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \     Found:    Unit\n\e[31m   |\e[0m                Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppo59a5qm.scala:42:23 ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m                println(\e[31m\"false\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \      Found:    Unit\n\e[31m   |\e[0m                Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppo59a5qm.scala:46:19 ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m            println(\e[31m\"false\"\e[0m)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Unit\n\e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660054841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val length = file_name.size // Returns length\
    \ of string\n        if (length <= 3 || (length != 3 && file_name.contains(\"\
    .\") == false) || (length == 0 && (file_name.substring(0,1).isEmpty)) || (length\
    \ == 0 && (file_name.substring(0,1).isDigit(true) == false) || (length >= 3 &&\
    \ file_name.substring(0,1).toUpperCase == \"A\" && file_name.substring(1,2).toUpperCase\
    \ != \"B\" && file_name.substring(1,2).toUpperCase != \"C\" && file_name.substring(1,2).toUpperCase\
    \ != \"D\" && file_name.substring(1,2).toUpperCase != \"E\" && file_name.substring(1,2).toUpperCase\
    \ != \"F\" && file_name.substring(1,2).toUpperCase != \"G\" && file_name.substring(1,2).toUpperCase\
    \ != \"H\" && file_name.substring(1,2).toUpperCase != \"I\" && file_name.substring(1,2).toUpperCase\
    \ != \"J\" && file_name.substring(1,2).toUpperCase != \"K\" && file_name.substring(1,2).toUpperCase\
    \ != \"L\" && file_name.substring(1,2).toUpperCase != \"M\" && file_name.substring(1,2).toUpperCase\
    \ != \"N\" && file_name.substring(1,2).toUpperCase != \"O\" && file_name.substring(1,2).toUpperCase\
    \ != \"P\" && file_name.substring(1,2).toUpperCase != \"Q\" && file_name.substring(1,2).toUpperCase\
    \ != \"R\" && file_name.substring(1,2).toUpperCase != \"S\" && file_name.substring(1,2).toUpperCase\
    \ != \"T\" && file_name.substring(1,2).toUpperCase != \"U\" && file_name.substring(1,2).toUpperCase\
    \ != \"V\" && file_name.substring(1,2).toUpperCase != \"W\" && file_name.substring(1,2).toUpperCase\
    \ != \"X\" && file_name.substring(1,2).toUpperCase != \"Y\" && file_name.substring(1,2).toUpperCase\
    \ != \"Z\" && file_name.substring(1,2).toUpperCase != \"A\" && file_name.substring(1,2).toUpperCase\
    \ != \"B\" && file_name.substring(1,2).toUpperCase != \"C\" && file_name.substring(1,2).toUpperCase\
    \ != \"D\" && file_name.substring(1,2).toUpperCase != \"E\" && file_name.substring(1,2).toUpperCase\
    \ != \"F\" && file_name.substring(1,2).toUpperCase != \"G\" && file_name.substring(1,2).toUpperCase\
    \ != \"H\" && file_name.substring(1,2).toUpperCase != \"I\" && file_name.substring(1,2).toUpperCase\
    \ != \"J\" && file_name.substring(1,2).toUpperCase != \"K\" && file_name.substring(1,2).toUpperCase\
    \ != \"L\" && file_name.substring(1,2).toUpperCase != \"M\" && file_name.substring(1,2).toUpperCase\
    \ != \"N\" && file_name.substring(1,2).toUpperCase != \"O\" && file_name\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcg1u5s9i.scala:21:4 ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcg1u5s9i.scala:20:177\
    \ -------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (length <= \e[31m3\e[0m || (length\
    \ != \e[31m3\e[0m && file_name.contains(\e[31m\".\"\e[0m) == \e[31mfalse\e[0m)\
    \ || (length == \e[31m0\e[0m && (file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m).isEmpty))\
    \ || (length == \e[31m0\e[0m && (file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m).isDigit(\e\
    [31mtrue\e[0m) == \e[31mfalse\e[0m) || (length >= \e[31m3\e[0m && file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m).toUpperCase == \e[31m\"A\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"B\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"C\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"D\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"E\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"F\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"G\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"H\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"I\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"J\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"K\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"L\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"M\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"N\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"O\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"P\"\e[0m && file_name.substring(\e\
    [31m1\e[0m,\e[31m2\e[0m).toUpperCase != \e[31m\"Q\"\e[0m && file_"
  stdout: ''
  timestamp: 1660054840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var isValid = false\n        val file_name =\
    \ file_name.trim()\n        val length = file_name.length\n        if (length\
    \ == 3 && file_name.contains(\".\") == true && file_name.split(\".\").length ==\
    \ 1 && file_name.substring(0, 1).toLowerCase != \"a\" && file_name.substring(0,\
    \ 1).toLowerCase != \"a\" && file_name.substring(0, 1).toLowerCase != \"a\" &&\
    \ file_name.substring(0,2).toUpperCase != \"A\" && file_name.substring(0,2).toUpperCase\
    \ != \"A\" && file_name.substring(0,2).toUpperCase != \"A\")\n            isValid\
    \ = true\n        if (length != 3)\n            isValid = false\n        if (isValid)\n\
    \            \"Yes\"\n        else\n            \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmptqh9kxg1.scala:20:24 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim()\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660054838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var fileCheck : Boolean = true\n        var\
    \ fileCheck1 : Boolean = true\n        val length : Int = file_name.length()\n\
    \        val dotIndex : Int = file_name.indexOf(\".\")\n        val firstLetterIndex\
    \ : Int = file_name.indexOf(\"a\", 0)\n        val substring : String = file_name.substring(0,dotIndex)\n\
    \        if (length == 0){\n            fileCheck = false\n        }\n       \
    \ if (dotIndex < 0){\n            fileCheck1 = false\n        }\n        if (firstLetterIndex\
    \ < 0){\n            fileCheck1 = false\n        }\n        if (substring.isEmpty){\n\
    \            fileCheck1 = false\n        }\n        if (substring.charAt(0) <\
    \ 'a' || substring.charAt(0) > 'z'){\n            fileCheck1 = false\n       \
    \ }\n        val substring_1 : String = file_name.substring(dotIndex + 1)\n  \
    \      if (substring_1.isEmpty){\n            fileCheck1 = false\n        }\n\
    \        val fileCheck2 = substring_1.contains(\".txt\") || substring_1.contains(\"\
    .exe\") || substring_1.contains(\".dll\")\n        if (fileCheck == true && fileCheck1\
    \ == true && fileCheck2 == true){\n            return(\"Yes\")\n        }\n  \
    \      return(\"No\")\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_7ftyv5s.scala:51)\n\tat Problem.main(tmp_7ftyv5s.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name = file_name\n        if (file_name.length()\
    \ > 3) {\n            file_name.substring(0, 3)\n        }\n        else {\n \
    \           file_name\n        }\n        val pos = file_name.lastIndexOf('.')\n\
    \        val sub_string = file_name.substring(0, pos)\n        val file_name =\
    \ file_name.substring(pos + 1)\n        if (sub_string.length() > 1 & sub_string.substring(0,\
    \ 1) == '_') {\n            \"No\"\n        }\n        else {\n            val\
    \ file_letter = file_name.charAt(0)\n            if (file_letter in ('A'..'Z')\
    \ || file_letter in ('a'..'z')) {\n                \"Yes\"\n            }\n  \
    \          else {\n                \"No\"\n            }\n        }\n    }\n \
    \   def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp67rq27bl.scala:34:36 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mif\e[0m (file_letter in (\e[31m'A'\e\
    [0m..\e[31m'Z'\e[0m) || file_letter in (\e[31m'a'\e[0m..\e[31m'z'\e[0m)) {\n\e\
    [31m\e[31m   |\e[0m                                    ^\e[0m\n\e[31m   |\e[0m\
    \                                    an identifier expected, but '.' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp67rq27bl.scala:34:65 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m            \e[33mif\e[0m (file_letter in (\e[31m'A'\e\
    [0m..\e[31m'Z'\e[0m) || file_letter in (\e[31m'a'\e[0m..\e[31m'z'\e[0m)) {\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \       ^\e[0m\n\e[31m   |\e[0m                                              \
    \                   an identifier expected, but '.' found\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmp67rq27bl.scala:28:12 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(pos\
    \ + \e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        file_name is already defined as \e[33mvariable\e[0m\
    \ \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        Note that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E045] Cyclic Error: /tmp/tmp67rq27bl.scala:19:24 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvariable\e[0m \e[35mfile_name\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660054838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      // Validate file name, and return 'Yes' if the\
    \ file's name is valid, and return 'No' otherwise.\n      val valid_chars = Set(\n\
    \        \"0123456789\".toList, \n        \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"\
    .toList,\n        \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\".toList,\n\
    \        \"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\".toList\n   \
    \   )\n\n      val pattern = \"^\\\\w{3}\\\\.\\\\w+$\".r\n      val result = pattern.findFirstIn(file_name)\
    \ != None\n      if (result == false || valid_chars -- file_name.split(\"\\\\\
    .\").head == Set.empty)\n        \"No\"\n      else\n        \"Yes\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnoh7on_c.scala:29:67\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m      \e[33mif\e[0m (result == \e[31mfalse\e[0m || valid_chars\
    \ -- file_name.split(\e[31m\"\\\\.\"\e[0m).head == Set.empty)\n\e[31m\e[31m  \
    \ |\e[0m                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Found:    String\n\
    \e[31m   |\e[0m                                            Required: IterableOnce[List[Char]]\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660054840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regex = \"\"\"[a-zA-Z]\"\"\".r\n       \
    \ val splitted = file_name.split(regex)\n        val len = splitted.size\n   \
    \     val dot = splitted(0)\n        val firstLetter = dot.substring(0, 1)\n \
    \       val fileExtension = dot.substring(1, 3)\n        val containsDot = splitted.contains(\"\
    .\")\n        val isValid = len > 1 &&\n                      len <= 3 &&\n  \
    \                    firstLetter != \"\" &&\n                      firstLetter\
    \ != \"a\" &&\n                      firstLetter != \"A\" &&\n               \
    \       fileExtension == \"txt\" ||\n                      fileExtension == \"\
    exe\" ||\n                      fileExtension == \"dll\"\n        isValid.toString\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1a10pida.scala:20:39\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36msplitted\e[0m = file_name.split(regex)\n\
    \e[31m\e[31m   |\e[0m                                       ^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                       Found:    (regex : scala.util.matching.Regex)\n\
    \e[31m   |\e[0m                                       Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660054840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result : String = null\n        var isValid\
    \ : Boolean = false\n\n        if (file_name.contains(\".\")) {\n            if\
    \ (file_name.contains(\"0\") || file_name.contains(\"9\")) {\n               \
    \ return \"No\"\n            }\n            val file_name : String = file_name.substring(0,\
    \ file_name.indexOf(\".\"))\n            val substring : String = file_name.substringBefore(\"\
    .\")\n            if (substring.length > 0 && substring.matches(\"[a-zA-Z]+\"\
    )) {\n                val substring_upper : String = substring.substring(0, 1).toString.toUpperCase\n\
    \                val substring_lower : String = substring.substring(0, 1).toLowerCase\n\
    \                if (substring_upper != \"A\" || substring_lower != \"A\") {\n\
    \                    return \"No\"\n                }\n                val extension\
    \ : String = file_name.substringAfterLast(\".\")\n                if (extension\
    \ == \"txt\" || extension == \"exe\" || extension == \"dll\") {\n            \
    \        isValid = true\n                }\n            }\n        }\n       \
    \ if (isValid) {\n            result = \"Yes\"\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp67gvskmc.scala:27:47 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36msubstring\e[0m : \e\
    [35mString\e[0m = file_name.substringBefore(\e[31m\".\"\e[0m)\n\e[31m\e[31m  \
    \ |\e[0m                                     ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                     value substringBefore is not\
    \ a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp67gvskmc.scala:34:51\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                \e[33mval\e[0m \e[36mextension\e[0m :\
    \ \e[35mString\e[0m = file_name.substringAfterLast(\e[31m\".\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                         value substringAfterLast\
    \ is not a member of String\n2 errors found\n"
  stdout: ''
  timestamp: 1660054840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val strArr = new Array[String](4)\n        val\
    \ strArr_temp = new Array[String](4)\n        val numArr = new Array[Int](2)\n\
    \        val numArr_temp = new Array[Int](2)\n        for (i <- 0 until strArr.length)\
    \ {\n            if (i <= strArr.length - 1) {\n                strArr(i) = file_name(i)\n\
    \            }\n        }\n        for (i <- 0 until numArr.length) {\n      \
    \      if (i <= numArr.length - 1) {\n                numArr(i) = file_name.indexOf('.',\
    \ i)\n            }\n        }\n        if (numArr_temp.length == 2) {\n     \
    \       if (numArr_temp(0) == 0 && numArr_temp(1) == 4) {\n                return\
    \ \"Yes\"\n            }\n        }\n        val numArr_temp2 = new Array[Int](2)\n\
    \        val numArr_temp2_temp = new Array[Int](2)\n        for (i <- 0 until\
    \ strArr_temp.length) {\n            if (i <= strArr_temp.length - 1) {\n    \
    \            strArr_temp(i) = file_name.substring(i, i + 1)\n            }\n \
    \       }\n        for (i <- 0 until numArr_temp2.length) {\n            if (i\
    \ <= numArr_temp2.length - 1) {\n                numArr_temp2(i) = file_name.indexOf('.',\
    \ i + 1)\n            }\n        }\n        if (numArr_temp2_temp.length == 2)\
    \ {\n            if (numArr_temp2_temp(0) == 0 && numArr_temp2_temp(1) == 4) {\n\
    \                return \"Yes\"\n            }\n        }\n        if (strArr.length\
    \ > 3) {\n            return \"No\"\n        }\n        if (numArr.length > 3)\
    \ {\n            return \"No\"\n        }\n        if (strArr_temp.length > 3)\
    \ {\n            return \"No\"\n        }\n        if (numArr_temp2.length > 3)\
    \ {\n            return \"No\"\n        }\n        if (strArr_temp.length > 0\
    \ && numArr_temp2.length > 0 && strArr_temp(0) == numArr_temp2(0)) {\n       \
    \     return \"Yes\"\n        }\n        return \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgjjjknkt.scala:25:37\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                strArr(i) = file_name(i)\n\e[31m\e[31m\
    \   |\e[0m                            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                       Found:    Char\n\e[31m   |\e[0m                      \
    \      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpgjjjknkt.scala:67:65\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m67 |\e[0m        \e[33mif\e[0m (strArr_temp.length > \e[31m0\e\
    [0m && numArr_temp2.length > \e[31m0\e[0m && strArr_temp(\e[31m0\e[0m) == numArr_temp2(\e\
    [31m0\e[0m)) {\n\e[31m\e[31m   |\e[0m                                        \
    \                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                                 Values of\
    \ types String and Int cannot be compared with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660054841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code goes here\n        val count =\
    \ 1\n        var count = 0\n        var letters = 0\n        val chars = file_name\
    \ map { c => c toLowerCase }\n        val char1 = chars.head\n        val char2\
    \ = chars.last\n        val char3 = chars.dropRight(1)\n        val char4 = char3(0)\n\
    \        val char5 = chars.last\n        val char6 = chars.dropRight(1)\n    \
    \    val char7 = char6(0)\n        val char8 = chars.last\n        val char9 =\
    \ chars.dropRight(1)\n        val char10 = char9(0)\n        val char11 = chars.last\n\
    \        val char12 = chars.dropRight(1)\n        val char13 = char13(0)\n   \
    \     val char14 = chars.last\n        val char15 = chars.dropRight(1)\n     \
    \   val char16 = char16(0)\n        val char17 = chars.last\n        val char18\
    \ = chars.dropRight(1)\n        val char19 = char19(0)\n        val char20 = chars.last\n\
    \        val char21 = chars.dropRight(1)\n        val char22 = chars.last\n  \
    \      val char23 = chars.dropRight(1)\n        val char24 = char24(0)\n     \
    \   val char25 = chars.last\n        val char26 = chars.dropRight(1)\n       \
    \ val char27 = chars.last\n        val char28 = chars.dropRight(1)\n        val\
    \ char29 = chars.last\n        val char30 = chars.last\n        val char31 = chars.last\n\
    \        val char32 = chars.last\n        val char33 = chars.last\n        val\
    \ char34 = chars.last\n        val char35 = chars.last\n        val char36 = chars.last\n\
    \        val char37 = chars.last\n        val char38 = chars.last\n        val\
    \ char39 = chars.last\n        val char40 = chars.last\n        val char41 = chars.last\n\
    \        val char42 = chars.last\n        val char43 = chars.last\n        val\
    \ char44 = chars.last\n        val char45 = chars.last\n        val char46 = chars.last\n\
    \        val char47 = chars.last\n        val char48 = chars.last\n        val\
    \ char49 = chars.last\n        val char50 = chars.last\n        val char51 = chars.last\n\
    \        val char52 = chars.last\n        val \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpnho63p7w.scala:23:55 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = file_name map\
    \ { \e[36mc\e[0m => c toLowerCase }\n\e[31m\e[31m   |\e[0m                   \
    \                                    ^\e[0m\n\e[31m   |\e[0m                 \
    \                                      expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpnho63p7w.scala:76:11\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m76 |\e[0m        \e[33mval\e[0m \n\e[31m\e[31m   |\e[0m      \
    \     ^\e[0m\n\e[31m   |\e[0m           pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E161] Naming Error: /tmp/tmpnho63p7w.scala:21:12 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mcount\e[0m = \e[31m0\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        count\
    \ is already defined as \e[33mvalue\e[0m \e[35mcount\e[0m\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m        Note that overloaded methods must all be defined in the same\
    \ group of toplevel definitions\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpnho63p7w.scala:23:43\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mchars\e[0m = file_name map\
    \ { \e[36mc\e[0m => c toLowerCase }\n\e[31m\e[31m   |\e[0m                   \
    \                      ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \                      value toLowerCase is not a member of Char\n\e[31m\e[31m--\
    \ [E045] Cyclic Error: /tmp/tmpnho63p7w.scala:36:21 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e[36mchar13\e[0m = char13"
  stdout: ''
  timestamp: 1660054840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var isValid : String = \"No\"\n        var dotCount\
    \ : Int = 0\n        var fileName : String = \"\"\n        for ((c, i) => fileName.length\
    \ < 3 || c != '.' || c.toInt < 0 || c > 9 || i == 0) \n        {\n           \
    \ fileName += c\n        }\n        for ((c, i) => i < fileName.indexOf(\".\"\
    ))\n        {\n            if (c == '.')\n            {\n                dotCount\
    \ += 1\n            }\n            else\n            {\n                dotCount\
    \ = 0\n            }\n        }\n        if (dotCount == 0)\n        {\n     \
    \       if (fileName.indexOf(\".\") != -1)\n            {\n                isValid\
    \ += \"Yes\"\n            }\n            else\n            {\n               \
    \ isValid += \"No\"\n            }\n        }\n        else\n        {\n     \
    \       isValid = \"No\"\n        }\n        isValid\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp__wzrfpj.scala:22:20 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m ((c, i) => fileName.length < \e\
    [31m3\e[0m || c != \e[31m'.'\e[0m || c.toInt < \e[31m0\e[0m || c > \e[31m9\e[0m\
    \ || i == \e[31m0\e[0m) \n\e[31m\e[31m   |\e[0m                    ^^\e[0m\n\e\
    [31m   |\e[0m                    ')' expected, but '=>' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmp__wzrfpj.scala:23:0 ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        {\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e\
    [0m'<-' expected, but 'end of statement' found\n\e[31m\e[31m-- [E032] Syntax Error:\
    \ /tmp/tmp__wzrfpj.scala:37:26 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mif\e[0m (dotCount == \e[31m0\e[0m)\n\e\
    [31m\e[31m   |\e[0m                          ^\e[0m\n\e[31m   |\e[0m         \
    \                 pattern expected\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp__wzrfpj.scala:53:4 ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '<-' expected, but '}' found\n4 errors found\n"
  stdout: ''
  timestamp: 1660054838
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code goes here\n        var fileNameList:\
    \ Array[String] = new Array[String](0)\n        fileNameList = file_name split\
    \ ('.') //split name into array\n        if (fileNameList.length > 3) {\n    \
    \        return \"No\"\n        }\n        if (fileNameList.length < 2) {\n  \
    \          return \"No\"\n        }\n        if (!(fileNameList(0).startsWith(\"\
    a\") || fileNameList(0).startsWith(\"A\"))) {\n            return \"No\"\n   \
    \     }\n        if (fileNameList(1).length == 0 || fileNameList(1).startsWith(\"\
    0\") || fileNameList(1).startsWith(\"1\")) {\n            return \"No\"\n    \
    \    }\n        if ((fileNameList(2).length == 1 && (fileNameList(2) == \"exe\"\
    \ || fileNameList(2) == \"dll\"))) {\n            return \"Yes\"\n        }\n\
    \        if ((fileNameList(2).length == 2 && (fileNameList(2) == \"txt\" || fileNameList(2)\
    \ == \"dll\"))) {\n            return \"Yes\"\n        }\n        return \"No\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp8ar890a.scala:43)\n\tat Problem.main(tmpp8ar890a.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var isNameValid = false\n        var fileNameValidity\
    \ = ()\n        if(fileName.contains(\".\")) {\n            var fileNameArray\
    \ = file_name.split(\"\\\\.\");\n            if(fileNameArray.length < 2) {\n\
    \                fileNameValidity = \"No\"\n            } else {\n           \
    \     var firstChar = fileNameArray(0) match {\n                    case \"a\"\
    \ | \"A\" => true\n                    case c => false\n                }\n  \
    \              if(firstChar == false) {\n                    fileNameValidity\
    \ = \"No\"\n                } else {\n                    var secondChar = fileNameArray(1)\
    \ match {\n                        case \"a\" | \"A\" => true\n              \
    \          case c => false\n                    }\n                    if(secondChar\
    \ == false) {\n                        fileNameValidity = \"No\"\n           \
    \         } else {\n                        var thirdChar = fileNameArray(2) match\
    \ {\n                            case \"a\" | \"A\" => true\n                \
    \            case c => false\n                        }\n                    \
    \    if(thirdChar == false) {\n                            fileNameValidity =\
    \ \"No\"\n                        } else {\n                            fileNameValidity\
    \ = \"Yes\"\n                        }\n                    }\n              \
    \  }\n            }\n        } else {\n            isNameValid = true\n      \
    \  }\n        if(isNameValid == true) {\n            return fileNameValidity\n\
    \        } else {\n            return \"No\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpereazb_a.scala:21:11 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(fileName.contains(\e[31m\".\"\e\
    [0m)) {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \     Not found: fileName\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpereazb_a.scala:56:19 ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m56 |\e[0m            \e[33mreturn\e[0m fileNameValidity\n\e[31m\e\
    [31m   |\e[0m                   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m       \
    \            Found:    (fileNameValidity : Unit)\n\e[31m   |\e[0m            \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- [E129] Potential Issue\
    \ Warning: /tmp/tmpereazb_a.scala:24:35 ------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[33m24 |\e[0m                fileNameValidity = \e[31m\"No\"\e[0m\n\
    \e[33m\e[33m   |\e[0m                                   ^^^^\e[0m\n\e[33m   |\e\
    [0m                                   A pure expression does nothing in statement\
    \ position; you may be omitting necessary parentheses\n\e[33m   |\e[0m\n\e[33m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmpereazb_a.scala:31:39 ------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[33m31 |\e[0m                    fileNameValidity = \e[31m\"No\"\e\
    [0m\n\e[33m\e[33m   |\e[0m                                       ^^^^\e[0m\n\e\
    [33m   |\e[0m                                       A pure expression does nothing\
    \ in statement position; you may be omitting necessary parentheses\n\e[33m   |\e\
    [0m\n\e[33m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpereazb_a.scala:38:43 -------------------"
  stdout: ''
  timestamp: 1660054840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var count = 0\n        if(file_name.length >=\
    \ 3 || file_name.indexOf('.') != -1 && file_name.substring(0, 1) == file_name.substring(0,\
    \ 1).toUpper && file_name.substring(1, file_name.length).split(\"\\.\").length\
    \ > 1){\n            for(i <- 0 until file_name.indexOf('.')){\n             \
    \   if(file_name.charAt(i) == file_name.charAt(i))\n                    count\
    \ += 1\n            }\n        }\n        if(count == 2 || count == 4)\n     \
    \       return \"Yes\"\n        else\n            return \"No\"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpkv331bct.scala:20:183 ------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(file_name.length >= \e[31m3\e[0m\
    \ || file_name.indexOf(\e[31m'.'\e[0m) != -\e[31m1\e[0m && file_name.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m) == file_name.substring(\e[31m0\e[0m, \e[31m1\e[0m).toUpper\
    \ && file_name.substring(\e[31m1\e[0m, file_name.length).split(\e[31m\"\\.\"\e\
    [0m).length > \e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m                          \
    \                                                                            \
    \                                                                            \
    \     ^\e[0m\n\e[31m   |\e[0m                                                \
    \                                                                    invalid escape\
    \ character\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkv331bct.scala:20:123\
    \ -------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(file_name.length >= \e[31m3\e[0m\
    \ || file_name.indexOf(\e[31m'.'\e[0m) != -\e[31m1\e[0m && file_name.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m) == file_name.substring(\e[31m0\e[0m, \e[31m1\e[0m).toUpper\
    \ && file_name.substring(\e[31m1\e[0m, file_name.length).split(\e[31m\"\\.\"\e\
    [0m).length > \e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m                          \
    \                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \                                        value toUpper is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660054840
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var correct = false \n        var n = file_name.indexOf(\"\
    .\") \n        if (n < 1 || n > 3 || file_name.substring(0, 1) == \"0\" || file_name.substring(0,\
    \ 1) != \"a\" || file_name.substring(n - 1, n) != \"txt\"){\n            correct\
    \ = false\n        }else{\n            correct = true \n        }\n        return\
    \ if(correct){\"Yes\"}else{(\"No\")}\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpyxk_noa3.scala:29)\n\tat Problem.main(tmpyxk_noa3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (!file_name.matches(\"[0-9]{3}\")) {\n  \
    \          return \"No\"\n        }\n        var dot : String = \"\"\n       \
    \ var file_name : String = \"\"\n        val dot_start : Int = file_name.indexOf(\"\
    .\") + 1\n        val dot_end : Int = file_name.indexOf(\".\", dot_start)\n  \
    \      val file_start : Int = file_name.indexOf(\".\")\n        val file_end :\
    \ Int = file_name.length\n        if(dot_start == -1 || dot_end == -1 || dot_end\
    \ < dot_start || file_start < 1 || file_end < 1) {\n            return \"No\"\n\
    \        } else {\n            dot = file_name.substring(dot_start, dot_end)\n\
    \            val file_name = file_name.substring(file_start, file_end)\n     \
    \       val valid = \n                (file_name.contains(\".\") && \n       \
    \          ((file_name.contains(\".\") &&\n                  file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && \n                  file_name.substring(1,3).matches(\"[0-9]\"\
    ))) || \n                 (file_name.contains(\".\") && \n                  file_name.substring(0,1).matches(\"\
    [a-zA-Z]\") && \n                  file_name.substring(1,3).matches(\"[0-9]\"\
    ) &&\n                  file_name.substring(3,5).matches(\"txt|exe|dll\"))) \n\
    \            if(valid) {\n                return \"Yes\"\n            } else {\n\
    \                return \"No\"\n            }\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpvew7c1te.scala:32:28 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(file_start,\
    \ file_end)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m \
    \  |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660054838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val s = file_name splitAt 1\n        val dot\
    \ = file_name splitAt 2 indexOfFirst '.'\n        if (dot == -1) return \"No\"\
    \n        val file_name = file_name splitAt dot + 1\n        if (file_name.nonEmpty)\
    \ {\n            val firstChar = file_name head\n            val lastChar = file_name\
    \ last\n            if (firstChar < 'a' || firstChar > 'z' || lastChar < 'a' ||\
    \ lastChar > 'z') return \"No\"\n            if (firstChar == lastChar) return\
    \ \"No\"\n            if (firstChar == '.') return \"Yes\"\n            val first_letter\
    \ = if (firstChar <= 'Z') firstChar else 'a'\n            val last_letter = if\
    \ (lastChar <= 'Z') lastChar else 'a'\n            if (first_letter <= last_letter)\
    \ return \"No\"\n        }\n        \"Yes\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp24hcrrb2.scala:24:42 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mfirstChar\e[0m = file_name\
    \ head\n\e[31m\e[31m   |\e[0m                                          ^\e[0m\n\
    \e[31m   |\e[0m                                          expression expected but\
    \ \e[31mend of statement\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E018] Syntax Error:\
    \ /tmp/tmp24hcrrb2.scala:25:41 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mval\e[0m \e[36mlastChar\e[0m = file_name\
    \ last\n\e[31m\e[31m   |\e[0m                                         ^\e[0m\n\
    \e[31m   |\e[0m                                         expression expected but\
    \ \e[31mif\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp24hcrrb2.scala:22:24\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name\
    \ splitAt dot + \e[31m1\e[0m\n\e[31m\e[31m   |\e[0m                        ^\e\
    [0m\n\e[31m   |\e[0m                        Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660054838
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val chars = file_name drop 3 drop 1 take 1\n\
    \        if (file_name contains \".\") {\n            if (file_name start with\
    \ (\"0\") || file_name start with (\"1\") || file_name start with (\"2\")) {\n\
    \                if (file_name drop 1 drop 1 take 1 not in (List(\"txt\", \"exe\"\
    , \"dll\"))) {\n                    return \"No\"\n                }\n       \
    \     }\n        }\n        if (chars startWith (\"a\") || chars startWith (\"\
    b\") || chars startWith (\"c\") || chars startWith (\"d\")\n            || chars\
    \ startWith (\"e\") || chars startWith (\"f\") || chars startWith (\"g\") || chars\
    \ startWith (\"h\")\n            || chars startWith (\"i\") || chars startWith\
    \ (\"j\") || chars startWith (\"k\") || chars startWith (\"l\")\n            ||\
    \ chars startWith (\"m\") || chars startWith (\"n\") || chars startWith (\"o\"\
    ) || chars startWith (\"p\")\n            || chars startWith (\"q\") || chars\
    \ startWith (\"r\") || chars startWith (\"s\") || chars startWith (\"t\")\n  \
    \          || chars startWith (\"u\") || chars startWith (\"v\") || chars startWith\
    \ (\"w\") || chars startWith (\"x\")\n            || chars startWith (\"y\") ||\
    \ chars startWith (\"z\")) {\n            return \"Yes\"\n        }\n        return\
    \ \"No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmp7ev8j6y7.scala:21:32 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (file_name start \e[33mwith\e\
    [0m (\e[31m\"0\"\e[0m) || file_name start \e[33mwith\e[0m (\e[31m\"1\"\e[0m) ||\
    \ file_name start \e[33mwith\e[0m (\e[31m\"2\"\e[0m)) {\n\e[31m\e[31m   |\e[0m\
    \                                ^^^^\e[0m\n\e[31m   |\e[0m                  \
    \              expression expected but \e[31mwith\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp7ev8j6y7.scala:21:26 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (file_name start \e[33mwith\e\
    [0m (\e[31m\"0\"\e[0m) || file_name start \e[33mwith\e[0m (\e[31m\"1\"\e[0m) ||\
    \ file_name start \e[33mwith\e[0m (\e[31m\"2\"\e[0m)) {\n\e[31m\e[31m   |\e[0m\
    \                ^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value start\
    \ is not a member of String - did you mean file_name.charAt?\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp7ev8j6y7.scala:22:51 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m (file_name drop \e[31m1\e\
    [0m drop \e[31m1\e[0m take \e[31m1\e[0m not in (List(\e[31m\"txt\"\e[0m, \e[31m\"\
    exe\"\e[0m, \e[31m\"dll\"\e[0m))) {\n\e[31m\e[31m   |\e[0m                   \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                   \
    \ value not is not a member of String\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp7ev8j6y7.scala:22:55 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                \e[33mif\e[0m (file_name drop \e[31m1\e\
    [0m drop \e[31m1\e[0m take \e[31m1\e[0m not in (List(\e[31m\"txt\"\e[0m, \e[31m\"\
    exe\"\e[0m, \e[31m\"dll\"\e[0m))) {\n\e[31m\e[31m   |\e[0m                   \
    \                                    ^^\e[0m\n\e[31m   |\e[0m                \
    \                                       No"
  stdout: ''
  timestamp: 1660054841
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var correct = false \n        var index = file_name.length\n\
    \        while(index > 0 && !correct){\n            val value = file_name(index)\n\
    \            if(value.matches(\"[0-9]+\")){\n                correct = true\n\
    \            }\n            else if(!value.contains(\".\") || value.substring(0,\
    \ 1) == \".\" || value.substring(0,1) != \"a\" || value.substring(0,1) != \"z\"\
    ){\n                correct = false\n            }\n            else{\n      \
    \          val sub = value.substring(1)\n                if(sub.split(\".\").length\
    \ >  1 && (sub.split(\".\").head.toInt == 0 || sub.split(\".\").head.toInt > 9)){\n\
    \                    correct = false\n                }\n            }\n     \
    \       index--\n        }\n        if(!correct){\n            return \"No\"\n\
    \        }\n        else{\n            return \"Yes\"\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpdgsvvwai.scala:35:19 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m            index--\n\e[31m\e[31m   |\e[0m          \
    \         ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m'}'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdgsvvwai.scala:23:21\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(value.matches(\e[31m\"[0-9]+\"\
    \e[0m)){\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               value matches is not a member of Char\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpdgsvvwai.scala:26:27 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m(!value.contains(\e\
    [31m\".\"\e[0m) || value.substring(\e[31m0\e[0m, \e[31m1\e[0m) == \e[31m\".\"\e\
    [0m || value.substring(\e[31m0\e[0m,\e[31m1\e[0m) != \e[31m\"a\"\e[0m || value.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) != \e[31m\"z\"\e[0m){\n\e[31m\e[31m   |\e[0m        \
    \             ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value contains\
    \ is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpdgsvvwai.scala:30:32\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mval\e[0m \e[36msub\e[0m = value.substring(\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                          ^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                          value substring is not a member\
    \ of Char\n4 errors found\n"
  stdout: ''
  timestamp: 1660054840
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name != null && !file_name isEmpty)\
    \ {\n            val split_name = file_name.split(\"\\\\.\") match {\n       \
    \         case Array(name, extension) =>\n                    if(name.length >\
    \ 3 || name.length < 3 || name.head == null || name.head != \"a\" || name.head\
    \ != \"b\" || name.head != \"c\" || name.head != \"d\" || name.head != \"e\" ||\
    \ name.head != \"f\" || name.head != \"g\" || name.head != \"h\" || name.head\
    \ != \"i\" || name.head != \"j\" || name.head != \"k\" || name.head != \"l\" ||\
    \ name.head != \"m\" || name.head != \"n\" || name.head != \"o\" || name.head\
    \ != \"p\" || name.head != \"q\" || name.head != \"r\" || name.head != \"s\" ||\
    \ name.head != \"t\" || name.head != \"u\" || name.head != \"v\" || name.head\
    \ != \"w\" || name.head != \"x\" || name.head != \"y\" || name.head != \"z\")\
    \ {\n                        return (\"No\")\n                    }\n        \
    \            if(extension.forall(_.toString.toInt == 0)) {\n                 \
    \       return (\"No\")\n                    }\n                    if(extension.length\
    \ != 1 || extension.toString.toInt == 0 || extension.toString.toInt == 1) {\n\
    \                        return (\"No\")\n                    }\n            \
    \        val before = name.subseq(0,1)\n                    val after = name.substring(extension.length)\n\
    \                    if(before.forall(_.toString.toInt >= 97 && _.toString.toInt\
    \ <= 122) || after.forall(_.toString.toInt >= 65 && _.toString.toInt <= 90) ||\
    \ after.forall(_.toString.toInt == 95)) {\n                        return (\"\
    No\")\n                    }\n                    val before2 = before.substring(0,1)\n\
    \                    val after2 = after.substring(extension.length)\n        \
    \            if(before2.forall(_.toString.toInt >= 97 && _.toString.toInt <= 122)\
    \ || after2.forall(_.toString.toInt >= 65 && _.toString.toInt <= 90) || after2.forall(_.toString.toInt\
    \ == 95)) {\n                        return (\"No\")\n                    }\n\
    \                    if(before2 != \"a\" && before2 != \"b\" && before2 != \"\
    c\" && before2 != \"d\" && before2 != \"e\" && before2 != \"f\" && before2 !=\
    \ \"g\" && before2 != \"h\" && before2 != \"i\" && before2 != \"j\" && before2\
    \ != \"k\" && before2 != \"l\" && before2 != \"m\" && before2 != \"n\" && before2\
    \ != \"o\" && before2 != \"p\" && before2 != \"q\" && before2 != \"r\" && before2\
    \ != \"s\" && before2 != \"t\" && before2 != \"u\" && before2 != \"v\" && before2\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpaea109qm.scala:19:50 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(file_name != \e[31mnull\e[0m &&\
    \ !file_name isEmpty) {\n\e[31m\e[31m   |\e[0m                               \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \                expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpaea109qm.scala:42:4 ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m42 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpaea109qm.scala:73:0\
    \ ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m73 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpaea109qm.scala:19:32\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(file_name != \e[31mnull\e[0m &&\
    \ !file_name isEmpty) {\n\e[31m\e[31m   |\e[0m                               \
    \ ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                value unary_!\
    \ is not a member of String\n\e[31m\e[31m-- Error: /tmp/tmpaea109qm.scala:22:61\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m                    \e[33mif\e[0m(name.length > \e[31m3\e\
    [0m || name.length < \e[31m3\e[0m || name.head == \e[31mnull\e[0m || name.head\
    \ != \e[31m\"a\"\e[0m || name.head != \e[31m\"b\"\e[0m || name.head != \e[31m\"\
    c\"\e[0m || name.head != \e[31m\"d\"\e[0m || name.head != \e[31m\"e\"\e[0m ||\
    \ name.head != \e[31m\"f\"\e[0m || name.head != \e[31m\"g\"\e[0m || name.head\
    \ != \e[31m\"h\"\e[0m || name.head != \e[31m\"i\"\e[0m || name.head != \e[31m\"\
    j\"\e[0m || name.head != \e[31m\"k\"\e[0m || name"
  stdout: ''
  timestamp: 1660054845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.startsWith(\".\") && file_name.length\
    \ >= 4 && file_name.split(\"\\\\.\").length == 1 &&\n                file_name.split(\"\
    \\\\.head\").forall(_.nonEmpty) && file_name.split(\"\\\\.last\").forall(_.forall(_.isLetter))\
    \ &&\n                file_name.split(\"\\\\.last\").forall(file_name.split(\"\
    \\\\.last\").forall(_.nonEmpty))) {\n            return (\"Yes\")\n        } else\
    \ {\n            return (\"No\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmph2j7kd5n.scala:21:83\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                file_name.split(\e[31m\"\\\\.last\"\e\
    [0m).forall(file_name.split(\e[31m\"\\\\.last\"\e[0m).forall(_.nonEmpty))) {\n\
    \e[31m\e[31m   |\e[0m                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   Boolean\n\e[31m   |\e[0m                                                 \
    \ Required: \e[1m\e[32mString\e[0m\e[1m\e[32m \e[0m\e[1m\e[32m=\e[0m\e[1m\e[32m>\e\
    [0m\e[1m\e[32m \e[0mBoolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660054843
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = Pattern.compile(\"(0[0-9]{1})([0-9]{3})(\\\
    \\.)(?!\\\\..*\\\\d)(ex|exe|dll)\");\n        val file_ext = file_name split '.';\n\
    \        if (file_ext.length == 1) \"Yes\" else file_ext exists { ext => \n  \
    \          val matcher = pattern.matcher(ext)\n            if (matcher.matches)\
    \ \"Yes\" else file_name contains (\".\") ? \"No\" : \"No\"\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpclrirgo1.scala:19:22 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = Pattern.compile(\e\
    [31m\"(0[0-9]{1})([0-9]{3})(\\\\.)(?!\\\\..*\\\\d)(ex|exe|dll)\"\e[0m);\n\e[31m\e\
    [31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \         Not found: Pattern\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpclrirgo1.scala:23:33 ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (matcher.matches) \e[31m\"\
    Yes\"\e[0m \e[33melse\e[0m file_name contains (\e[31m\".\"\e[0m) ? \e[31m\"No\"\
    \e[0m : \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m                             \
    \    ^^^^^\e[0m\n\e[31m   |\e[0m                                 Found:    (\e\
    [32m\"Yes\"\e[0m : String)\n\e[31m   |\e[0m                                 Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpclrirgo1.scala:23:69\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m (matcher.matches) \e[31m\"\
    Yes\"\e[0m \e[33melse\e[0m file_name contains (\e[31m\".\"\e[0m) ? \e[31m\"No\"\
    \e[0m : \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m                             \
    \                                  ^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \                                                  value ? is not a member of\
    \ String\n3 errors found\n"
  stdout: ''
  timestamp: 1660054844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length < 3) \"No\"\n        else\
    \ if (file_name.substring(0,1).isEmpty) \"No\"\n        else if (file_name.substring(0,1).toInt\
    \ == 0)\n        || (file_name.substring(0,1).toInt == 10 && file_name.substring(1,2)\
    \ < 'z' || \n        file_name.substring(0,1).toInt == 11 && file_name.substring(1,2)\
    \ < 'z') \"No\"\n        else if (file_name.substring(0,2).toInt > 10 || file_name.substring(0,2).toInt\
    \ < 1)\n            \"No\"\n        else if (file_name.substring(0,3).toInt >\
    \ 3 || file_name.substring(0,3).toInt < 4)\n            \"No\"\n        else if\
    \ (file_name.substring(0,4).toInt > 4 || file_name.substring(0,4).toInt < 5)\n\
    \            \"No\"\n        else if (file_name.substring(0,4).toInt > 6 || file_name.substring(0,4).toInt\
    \ < 7)\n            \"No\"\n        else if (file_name.substring(0,4).toInt >\
    \ 8 || file_name.substring(0,4).toInt < 9)\n            \"No\"\n        else if\
    \ (file_name.substring(0,4).toInt > 10 || file_name.substring(0,4).toInt < 11)\n\
    \            \"No\"\n        else if (file_name.substring(0,4).toInt > 12 || file_name.substring(0,4).toInt\
    \ < 13)\n            \"No\"\n        else if (file_name.substring(0,4).toInt >\
    \ 14 || file_name.substring(0,4).toInt < 15)\n            \"No\"\n        else\
    \ if (file_name.substring(0,5).toInt > 5 || file_name.substring(0,5).toInt < 6)\n\
    \            \"No\"\n        else if (file_name.substring(0,5).toInt > 7 || file_name.substring(0,5).toInt\
    \ < 8)\n            \"No\"\n        else if (file_name.substring(0,5).toInt >\
    \ 9 || file_name.substring(0,5).toInt < 10)\n            \"No\"\n        else\
    \ if (file_name.substring(0,5).toInt > 11 || file_name.substring(0,5).toInt <\
    \ 12)\n            \"No\"\n        else if (file_name.substring(0,6).toInt > 6\
    \ || file_name.substring(0,6).toInt < 7)\n            \"No\"\n        else if\
    \ (file_name.substring(0,6).toInt > 8 || file_name.substring(0,6).toInt < 9)\n\
    \            \"No\"\n        else if (file_name.substring(0,6).toInt > 10 || file_name.substring(0,6).toInt\
    \ < 11)\n            \"No\"\n        else if (file_name.substring(0,6).toInt >\
    \ 12 || file_name.substring(0,6).toInt < 13)\n            \"No\"\n        else\
    \ if (file_name.substring(0,6).toInt > 14 || file_name.substring(0,6).toInt <\
    \ 15)\n            \"No\"\n        else if (file_name.substring(0,7).toInt > \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp91z8dydo.scala:23:80 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m).toInt\
    \ == \e[31m11\e[0m && file_name.substring(\e[31m1\e[0m,\e[31m2\e[0m) < \e[31m'z'\e\
    [0m) \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                                                           end\
    \ of statement expected but string literal found\n\e[31m\e[31m-- Error: /tmp/tmp91z8dydo.scala:26:8\
    \ --------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (file_name.substring(\e\
    [31m0\e[0m,\e[31m3\e[0m).toInt > \e[31m3\e[0m || file_name.substring(\e[31m0\e\
    [0m,\e[31m3\e[0m).toInt < \e[31m4\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        end of statement expected but 'else' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmp91z8dydo.scala:28:8 --------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (file_name.substring(\e\
    [31m0\e[0m,\e[31m4\e[0m).toInt > \e[31m4\e[0m || file_name.substring(\e[31m0\e\
    [0m,\e[31m4\e[0m).toInt < \e[31m5\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        end of statement expected but 'else' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmp91z8dydo.scala:30:8 --------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (file_name.substring(\e\
    [31m0\e[0m,\e[31m4\e[0m).toInt > \e[31m6\e[0m || file_name.substring(\e[31m0\e\
    [0m,\e[31m4\e[0m).toInt < \e[31m7\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^\e[0m\n\
    \e[31m   |\e[0m        end of statement expected but 'else' found\n\e[31m\e[31m--\
    \ Error: /tmp/tmp91z8dydo.scala:32:8 --------------------------------------------------------------------------------------------------"
  stdout: ''
  timestamp: 1660054844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result : String = \"No\";\n        \n  \
    \      var file_name : String = file_name;\n        var first_digit = 0\n    \
    \    var second_digit = 0\n        var third_digit = 0\n        var third_digit_start\
    \ : Int = 0\n        var fourth_digit_end : Int = 0\n        var fourth_digit\
    \ : Int = 0\n\n        if (file_name.length < 3) \n            { result = \"No\"\
    ; }\n\n        else if (file_name.contains(\".\")) \n            { result = \"\
    No\"; }\n\n        else if (file_name.indexOf(\".\") > 0) \n            {\n  \
    \              first_digit = file_name.indexOf(\".\");\n                second_digit\
    \ = file_name.length -(first_digit - 1);\n                third_digit = file_name.lastIndexOf(\"\
    .\");\n                third_digit_start = file_name.indexOf(\".\") - 1;\n   \
    \             fourth_digit = file_name.indexOf(\".\") - 1;\n                fourth_digit_end\
    \ = file_name.indexOf(\".\") + 1;\n            }\n        else \n            {\n\
    \                first_digit = file_name.indexOf(\".\");\n                second_digit\
    \ = file_name.length -(first_digit - 1);\n                third_digit = 0;\n \
    \               third_digit_start = 0;\n                fourth_digit_end = 0;\n\
    \                fourth_digit = 0;\n            }\n\n        // Now we are only\
    \ interested in checking the first two digits, and checking\n        // the last\
    \ two digits\n        if (first_digit >= 0 && first_digit <= 9)\n            {\n\
    \                if (second_digit < 9 && second_digit >= 0) \n               \
    \     {\n                        if (third_digit > 0 && third_digit <= 9 && third_digit_start\
    \ > 0 && third_digit_start <= 9 && third_digit <= fourth_digit && third_digit\
    \ <= fourth_digit_end && second_digit >= 0)\n                            {\n \
    \                               if (second_digit == 0 && third_digit == 0 && first_digit\
    \ == 0 && fourth_digit == 0)\n                                    {\n        \
    \                                result = \"Yes\"\n                          \
    \          }\n                            }\n                    }\n         \
    \   }\n        \n        file_name\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E039] Reference Error: /tmp/tmpkk5s2q1j.scala:21:33 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m : \e[35mString\e\
    [0m = file_name;\n\e[31m\e[31m   |\e[0m                                 ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 file_name is a forward reference\
    \ extending over the definition of file_name\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660054842
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length > 3) {\n            return\
    \ \"No\"\n        } else {\n            var dotPos = file_name.lastIndexOf(\"\
    .\")\n            if (dotPos < 1) {\n                return \"No\"\n         \
    \   }\n            var firstChar = file_name.charAt(0)\n            if (firstChar\
    \ < 'a' || firstChar > 'z') {\n                return \"No\"\n            }\n\
    \            var firstTwoChars = file_name.substring(0, 2)\n            if (firstTwoChars.isEmpty\
    \ || firstTwoChars.contains(\".\")) {\n                return \"No\"\n       \
    \     }\n            \n            var endPos = file_name .lastIndexOf(\".\")\n\
    \            var lastChar = file_name.charAt(endPos)\n            var allowedExtensions\
    \ = Set(List(\"txt\", \"exe\", \"dll\"))\n            if (!allowedExtensions.contains(lastChar))\
    \ {\n                return \"No\"\n            }\n            \n            return\
    \ \"Yes\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmprdtqoggb.scala:38:44\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33mif\e[0m (!allowedExtensions.contains(lastChar))\
    \ {\n\e[31m\e[31m   |\e[0m                                            ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                            Found:    (lastChar\
    \ : Char)\n\e[31m   |\e[0m                                            Required:\
    \ List[String]\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660054845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var is_valid = false // true if the file's name\
    \ is valid\n        var dot_pos = -1 // the position of the dot '.'\n        var\
    \ name_first_char :String = \"\" // the first letter of file_name\n        var\
    \ name_substring :String = \"\" // the substring before dot\n        var name_substring_valid_chars\
    \ :[String] = List(\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"\
    i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"A\", \"B\", \"C\", \"D\", \"\
    E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"\
    P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\")\n \
    \       // 1. check the number of digits in file_name\n        if (file_name.length()\
    \ > 3) {\n            is_valid = false\n        }\n        // 2. check the file's\
    \ name contains exactly one dot\n        else if (((file_name.indexOf(\".\") >\
    \ 0) || (file_name.indexOf(\".\") == file_name.length - 1)) &&\n            (file_name.indexOf(\"\
    .\") > 0) &&\n            file_name.lastIndexOf(\".\") == file_name.length - 1)\
    \ {\n            is_valid = true\n        }\n        // 3. check the substring\
    \ before the dot should not be empty, and it starts with a letter from the latin\
    \ alphapet\n        else if (file_name.indexOf(\".\") > 0) {\n            dot_pos\
    \ = file_name.indexOf(\".\") - 1\n            name_first_char = file_name.substring(0,\
    \ dot_pos)\n            if (!((name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzsm445bw.scala:23:49 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mname_substring_valid_chars\e\
    [0m :[String] = List(\e[31m\"a\"\e[0m, \e[31m\"b\"\e[0m, \e[31m\"c\"\e[0m, \e\
    [31m\"d\"\e[0m, \e[31m\"e\"\e[0m, \e[31m\"f\"\e[0m, \e[31m\"g\"\e[0m, \e[31m\"\
    h\"\e[0m, \e[31m\"i\"\e[0m, \e[31m\"j\"\e[0m, \e[31m\"k\"\e[0m, \e[31m\"l\"\e\
    [0m, \e[31m\"m\"\e[0m, \e[31m\"n\"\e[0m, \e[31m\"o\"\e[0m, \e[31m\"p\"\e[0m, \e\
    [31m\"q\"\e[0m, \e[31m\"r\"\e[0m, \e[31m\"s\"\e[0m, \e[31m\"t\"\e[0m, \e[31m\"\
    u\"\e[0m, \e[31m\"v\"\e[0m, \e[31m\"w\"\e[0m, \e[31m\"x\"\e[0m, \e[31m\"y\"\e\
    [0m, \e[31m\"z\"\e[0m, \e[31m\"A\"\e[0m, \e[31m\"B\"\e[0m, \e[31m\"C\"\e[0m, \e\
    [31m\"D\"\e[0m, \e[31m\"E\"\e[0m, \e[31m\"F\"\e[0m, \e[31m\"G\"\e[0m, \e[31m\"\
    H\"\e[0m, \e[31m\"I\"\e[0m, \e[31m\"J\"\e[0m, \e[31m\"K\"\e[0m, \e[31m\"L\"\e\
    [0m, \e[31m\"M\"\e[0m, \e[31m\"N\"\e[0m, \e[31m\"O\"\e[0m, \e[31m\"P\"\e[0m, \e\
    [31m\"Q\"\e[0m, \e[31m\"R\"\e[0m, \e[31m\"S\"\e[0m, \e[31m\"T\"\e[0m, \e[31m\"\
    U\"\e[0m, \e[31m\"V\"\e[0m, \e[31m\"W\"\e[0m, \e[31m\"X\"\e[0m, \e[31m\"Y\"\e\
    [0m, \e[31m\"Z\"\e[0m)\n\e[31m\e[31m   |\e[0m                                \
    \                 ^\e[0m\n\e[31m   |\e[0m                                    \
    \             '=>>' expected, but '=' found\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmpzsm445bw.scala:39:4 ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpzsm445bw.scala:70:0\
    \ ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m70 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzsm445bw.scala:38:35\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m            \e[33mif\e[0m (!((name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_char.isDigit)\
    \ && (name_first_char.isDigit) && (name_first_char.isDigit) && (name_first_cha"
  stdout: ''
  timestamp: 1660054846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val invalid = Array('9','.','0',\"a\",\"b\"\
    ,\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\"\
    ,\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\").filter(x =>\
    \ !file_name.contains(x))\n        if(invalid.length > 3)\n        {\n       \
    \     file_name match {\n            case file_name if file_name.contains(\".\"\
    ) && file_name.substring(0,1).matches(\"^[a-zA-Z]\") && file_name.substring(0,3).matches(\"\
    [0-9]+\") =>\n                return(\"Yes\")\n            case _ =>\n       \
    \         return(\"No\")\n            }\n        }\n        else\n        {\n\
    \            return(\"No\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpovm98t53.scala:35)\n\tat Problem.main(tmpovm98t53.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var res = file_name match {\n            case\
    \ _ if !file_name.contains('.') => \n                throw new Exception(\"The\
    \ file's name should be like 'example.exe'\")\n            case _ if (file_name.indexOf('.')\
    \ <= 0) => \n                throw new Exception(\"The file's name should start\
    \ with a letter from the latin alphabet\")\n            case _ if (!file_name.substring(0,\
    \ 1).matches(\"[a-zA-Z]\") || \n                !file_name.substring(file_name.lastIndexOf('.')\
    \ + 1).matches(\"[a-zA-Z]{3}|.exe|.dll\")) =>\n                throw new Exception(\"\
    The file's name should end in 'exe' or 'dll'\")\n            case _ if (file_name.substring(0,\
    \ 1).matches(\"[a-zA-Z]\") && \n                !file_name.substring(1).matches(\"\
    [a-zA-Z]{3}|.exe|.dll\")) => \n                throw new Exception(\"The file's\
    \ name should only contain one dot, and end with 'exe' or 'dll'\")\n         \
    \   case _ if (!file_name.substring(0, 1).matches(\"[a-zA-Z]\") && !file_name.substring(1).matches(\"\
    [a-zA-Z]{3}|.exe|.dll\")) =>\n                throw new Exception(\"The file's\
    \ name should only contain one dot, and start with a letter from the latin alphabet\"\
    )\n            case _ if (file_name.substring(0, 1).matches(\"[a-zA-Z]\") && \n\
    \                !file_name.substring(1).matches(\"[a-zA-Z]{3}|.exe|.dll\")) =>\n\
    \                throw new Exception(\"The file's name should only contain one\
    \ dot, and start with a letter from the latin alphabet\")\n            case _\
    \ if (!file_name.substring(0, 1).matches(\"[a-zA-Z]\") && !file_name.substring(1).matches(\"\
    [a-zA-Z]{3}|.exe|.dll\") && \n                !file_name.substring(1).matches(\"\
    [a-zA-Z]{3}|.exe|.dll|.txt|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpb2mbf8ro.scala:36:48 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                !file_name.substring(\e[31m1\e[0m).matches(\"\
    [a-zA-Z]{3}|.exe|.dll|.txt|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe\n\
    \e[31m\e[31m   |\e[0m                                                ^\e[0m\n\e\
    [31m   |\e[0m                                                unclosed string literal\n\
    \e[31m\e[31m-- Error: /tmp/tmpb2mbf8ro.scala:38:34 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpb2mbf8ro.scala:68:0\
    \ ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpb2mbf8ro.scala:38:4\
    \ ---------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m    ^^^\e[0m\n\e\
    [31m   |\e[0mNot found: [a-zA-Z]{3}|.exe|.dll|.txt|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exe|.dll|.exedef\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanatio"
  stdout: ''
  timestamp: 1660054844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var counter = 1;\n        var file_name : String\
    \ = \"1\" + file_name;\n        while (file_name != \"1\" + file_name){\n    \
    \        if (file_name != \"1\" + file_name){\n                file_name += \"\
    0\";\n            }\n            file_name += \"1\";\n            counter += 1\n\
    \        }\n        val pattern = \"[a-zA-z][a-zA-z]*.(txt|exe|dll)\"\n      \
    \  if (file_name.contains(pattern) == true && counter == 1 && file_name.length\
    \ > 3 && file_name.substring(0, 1).isLetter == true && file_name.substring(1).contains(\"\
    .\") == true && file_name.substring(file_name.length-1, file_name.length).contains(\"\
    .\") == true && file_name.substring(file_name.length-2, file_name.length).contains(\"\
    .\") == true){\n            return \"Yes\"\n        }\n        else{\n       \
    \     return \"No\"\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpu0rfvdgd.scala:29:117 -------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m (file_name.contains(pattern) ==\
    \ \e[31mtrue\e[0m && counter == \e[31m1\e[0m && file_name.length > \e[31m3\e[0m\
    \ && file_name.substring(\e[31m0\e[0m, \e[31m1\e[0m).isLetter == \e[31mtrue\e\
    [0m && file_name.substring(\e[31m1\e[0m).contains(\e[31m\".\"\e[0m) == \e[31mtrue\e\
    [0m && file_name.substring(file_name.length-\e[31m1\e[0m, file_name.length).contains(\e\
    [31m\".\"\e[0m) == \e[31mtrue\e[0m && file_name.substring(file_name.length-\e\
    [31m2\e[0m, file_name.length).contains(\e[31m\".\"\e[0m) == \e[31mtrue\e[0m){\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                                                                \
    \                           value isLetter is not a member of String\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660054845
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your code here\n        val splitName\
    \ = file_name.split(\"\\\\.\").map(_.toInt)\n        val hasDot = splitName.length\
    \ == 1\n        val hasDigit = splitName.tail.exists(_.toString.matches(\"[0-9]\"\
    ))\n        val hasLetter = splitName.tail.exists(_.toString.matches(\"[a-zA-Z]\"\
    ))\n        if (!hasDot && !hasDigit && !hasLetter) \"No\" else \"Yes\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.NumberFormatException: For input string: \"example\"\n\tat java.base/java.lang.NumberFormatException.forInputString(NumberFormatException.java:67)\n\
    \tat java.base/java.lang.Integer.parseInt(Integer.java:668)\n\tat java.base/java.lang.Integer.parseInt(Integer.java:786)\n\
    \tat scala.collection.StringOps$.toInt$extension(StringOps.scala:915)\n\tat Problem$.$anonfun$1(tmpngcqe4r1.scala:20)\n\
    \tat scala.collection.ArrayOps$.map$extension(ArrayOps.scala:929)\n\tat Problem$.fileNameCheck(tmpngcqe4r1.scala:20)\n\
    \tat Problem$.main(tmpngcqe4r1.scala:27)\n\tat Problem.main(tmpngcqe4r1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name.contains(\".\")){\n           \
    \ if(file_name.substring(0,1).isEmpty){\n                return \"No\"\n     \
    \       }else if(file_name.substring(0,1) != \"a\" && file_name.substring(0,1)\
    \ != \"A\"){\n                return \"No\"\n            }else if(file_name.substring(0,1)\
    \ != \"z\" && file_name.substring(0,1) != \"Z\"){\n                return \"No\"\
    \n            }else if(file_name.substring(0,file_name.indexOf(\".\")).length\
    \ != 4){\n                return \"No\"\n            }\n            var names\
    \ : List[String] = file_name.substring(0,file_name.indexOf(\".\")).split(\"\\\\\
    .\").toList\n            if(names.length == 0 || names.indexOf(\"exe\") != -1\
    \ || names.indexOf(\"dll\") != -1){\n                return \"No\"\n         \
    \   }\n            return names.length == 1? \"Yes\" : \"No\"\n        }\n   \
    \     return \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp4ovtlpyl.scala:33:36 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mreturn\e[0m names.length == \e[31m1\e\
    [0m? \e[31m\"Yes\"\e[0m : \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m           \
    \                        ^^\e[0m\n\e[31m   |\e[0m                            \
    \       value ? is not a member of Int\n1 error found\n"
  stdout: ''
  timestamp: 1660054846
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (!file_name.matches(\"[0-9]{3}\")) {\n  \
    \          return \"No\"\n        }\n        if (!file_name.contains(\".\")){\n\
    \            return \"No\"\n        }\n        if (file_name.substring(0, 1) ==\
    \ \"\") {\n            return \"No\"\n        }\n        if (file_name.substring(file_name.indexOf(\"\
    .\") + 1).toString.toLowerCase != \"exe\" && file_name.substring(file_name.indexOf(\"\
    .\") + 1).toString.toLowerCase != \"dll\") {\n            return \"No\"\n    \
    \    }\n        \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp_cb3jxxc.scala:34)\n\tat Problem.main(tmp_cb3jxxc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      val split_string = file_name.split(\"\\\\.\")\n\
    \      if (split_string.size != 2) return \"No\"\n      if (split_string.last\
    \ != \"txt\" && split_string.last != \"exe\" && split_string.last != \"dll\")\
    \ return \"No\"\n      if (split_string.head == \"\") return \"No\"\n      if\
    \ (split_string.head !in ('a','A','b','B','c','C','d','D','e','E','f','F','g','G','h','H','i','I','j','J','k','K','l','L','m','M','n','N','o','O','p','P','q','Q','r','R','s','S','t','T','u','U','v','V','w','W','x','X','y','Y','z','Z'))\
    \ return \"No\"\n      val split_string2 = split_string.head.split(\"[\\\\W]\"\
    )\n      if (split_string2.length != 1 || split_string2.head == \"\") return \"\
    No\"\n      if (split_string2.head !in ('a','A','b','B','c','C','d','D','e','E','f','F','g','G','h','H','i','I','j','J','k','K','l','L','m','M','n','N','o','O','p','P','q','Q','r','R','s','S','t','T','u','U','v','V','w','W','x','X','y','Y','z','Z'))\
    \ return \"No\"\n      val split_string3 = split_string2.head.split(\"[\\\\W]\"\
    )\n      if (split_string3.length != 1 || split_string3.head == \"\") return \"\
    No\"\n      if (split_string3.head !in ('a','A','b','B','c','C','d','D','e','E','f','F','g','G','h','H','i','I','j','J','k','K','l','L','m','M','n','N','o','O','p','P','q','Q','r','R','s','S','t','T','u','U','v','V','w','W','x','X','y','Y','z','Z'))\
    \ return \"No\"\n      \"Yes\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7saddpk7.scala:23:28 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m      \e[33mif\e[0m (split_string.head !in (\e[31m'a'\e\
    [0m,\e[31m'A'\e[0m,\e[31m'b'\e[0m,\e[31m'B'\e[0m,\e[31m'c'\e[0m,\e[31m'C'\e[0m,\e\
    [31m'd'\e[0m,\e[31m'D'\e[0m,\e[31m'e'\e[0m,\e[31m'E'\e[0m,\e[31m'f'\e[0m,\e[31m'F'\e\
    [0m,\e[31m'g'\e[0m,\e[31m'G'\e[0m,\e[31m'h'\e[0m,\e[31m'H'\e[0m,\e[31m'i'\e[0m,\e\
    [31m'I'\e[0m,\e[31m'j'\e[0m,\e[31m'J'\e[0m,\e[31m'k'\e[0m,\e[31m'K'\e[0m,\e[31m'l'\e\
    [0m,\e[31m'L'\e[0m,\e[31m'm'\e[0m,\e[31m'M'\e[0m,\e[31m'n'\e[0m,\e[31m'N'\e[0m,\e\
    [31m'o'\e[0m,\e[31m'O'\e[0m,\e[31m'p'\e[0m,\e[31m'P'\e[0m,\e[31m'q'\e[0m,\e[31m'Q'\e\
    [0m,\e[31m'r'\e[0m,\e[31m'R'\e[0m,\e[31m's'\e[0m,\e[31m'S'\e[0m,\e[31m't'\e[0m,\e\
    [31m'T'\e[0m,\e[31m'u'\e[0m,\e[31m'U'\e[0m,\e[31m'v'\e[0m,\e[31m'V'\e[0m,\e[31m'w'\e\
    [0m,\e[31m'W'\e[0m,\e[31m'x'\e[0m,\e[31m'X'\e[0m,\e[31m'y'\e[0m,\e[31m'Y'\e[0m,\e\
    [31m'z'\e[0m,\e[31m'Z'\e[0m)) \e[33mreturn\e[0m \e[31m\"No\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m          ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          value !\
    \ is not a member of String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp7saddpk7.scala:26:29\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m      \e[33mif\e[0m (split_string2.head !in (\e[31m'a'\e\
    [0m,\e[31m'A'\e[0m,\e[31m'b'\e[0m,\e[31m'B'\e[0m,\e[31m'c'\e[0m,\e[31m'C'\e[0m,\e\
    [31m'd'\e[0m,\e[31m'D'\e[0m,\e[31m'e'\e[0m,\e[31m'E'\e[0m,\e[31m'f'\e[0m,\e[31m'F'\e\
    [0m,\e[31m'g'\e[0m,\e[31m'G'\e[0m,\e[31m'h'\e[0m,\e[31m'H'\e[0m,\e[31m'i'\e[0m,\e\
    [31m'I'\e[0m,\e[31m'j'\e[0m,\e[31m'J'\e[0m,\e[31m'k'\e[0m,\e[31m'K'\e[0m,\e[31m'l'\e\
    [0m,\e[31m'L'\e[0m,\e[31m'm'\e[0m,\e[31m'M'\e[0m,\e[31m'n'\e[0m,\e[31m'N'\e[0m,\e\
    [31m'o'\e[0m,\e[31m'O'\e[0m,\e[31m'p'\e[0m,\e[31m'P'\e[0m,\e[31m'q'\e[0m,\e[31m'Q'\e\
    [0m,\e[31m'r'\e[0m,\e[31m'R'\e[0m,\e[31m's'\e[0m,\e[31m'S'\e[0m,\e[31m't'\e[0m,\e\
    [31m'T'\e[0m,\e[31m'u'\e[0m,\e[31m'U'\e[0m,\e[31m'v'\e[0m,\e[31m'V'\e[0m,\e[31m'w'\e\
    [0m,\e[31m'W'\e[0m,\e[31m'x'\e[0m,\e[31m'X'\e[0m,\e[31m'y'\e[0m,\e[31m'Y'\e[0m,\e\
    [31m'z'\e[0m,\e[31m'Z'\e[0m)) \e[33mreturn\e[0m \e[31m\"No\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m          ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m          va"
  stdout: ''
  timestamp: 1660054846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"\"\"[0-9]+\"\"\".r\n       \
    \ if (!pattern.pattern.matcher(file_name).matches()) return \"No\"\n        var\
    \ dot = file_name.indexOf('.', 0).toInt\n        if (dot < 0) dot = 0\n      \
    \  var subString = file_name.substring(dot)\n        if (subString.isEmpty) subString\
    \ = \"\"\n        val alphabet = \"\"\"[ABCDEFGHIJKLMNOPQRSTUVWXYZ]\"\"\".r\n\
    \        if (!alphabet.pattern.matcher(subString).matches()) return \"No\"\n \
    \       if (subString.toString.length <= 3 && !\"0123456789\".r.matcher(subString).matches())\
    \ return \"No\"\n        if (subString.indexOf('.') != 0) return \"No\"\n    \
    \    if (subString.toString.length != 3 && subString.toString.length != 4 && subString.toString.length\
    \ != 5 && subString.toString.length != 6 && subString.toString.length != 7 &&\
    \ subString.toString.length != 8 && subString.toString.length != 9) return \"\
    No\"\n        if (subString.toString.substring(0, 1) != \"a\" && subString.toString.substring(0,\
    \ 1) != \"b\" && subString.toString.substring(0, 1) != \"c\" && subString.toString.substring(0,\
    \ 1) != \"d\" && subString.toString.substring(0, 1) != \"e\" && subString.toString.substring(0,\
    \ 1) != \"f\" && subString.toString.substring(0, 1) != \"g\" && subString.toString.substring(0,\
    \ 1) != \"h\" && subString.toString.substring(0, 1) != \"i\" && subString.toString.substring(0,\
    \ 1) != \"j\" && subString.toString.substring(0, 1) != \"k\" && subString.toString.substring(0,\
    \ 1) != \"l\" && subString.toString.substring(0, 1) != \"m\" && subString.toString.substring(0,\
    \ 1) != \"n\" && subString.toString.substring(0, 1) != \"o\" && subString.toString.substring(0,\
    \ 1) != \"p\" && subString.toString.substring(0, 1) != \"q\" && subString.toString.substring(0,\
    \ 1) != \"r\" && subString.toString.substring(0, 1) != \"s\" && subString.toString.substring(0,\
    \ 1) != \"t\" && subString.toString.substring(0, 1) != \"u\" && subString.toString.substring(0,\
    \ 1) != \"v\" && subString.toString.substring(0, 1) != \"w\" && subString.toString.substring(0,\
    \ 1) != \"x\" && subString.toString.substring(0, 1) != \"y\" && subString.toString.substring(0,\
    \ 1) != \"z\") return \"No\"\n        if (subString.substring(subString.length\
    \ - 1) != \"txt\" && subString.substring(subString.length - 1) != \"exe\" && subString.substring(subString.length\
    \ - 1) != \"dll\") return \"No\"\n        return \"Yes\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpjskc3165.scala:27:62 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m (subString.toString.length <= \e\
    [31m3\e[0m && !\e[31m\"0123456789\"\e[0m.r.matcher(subString).matches()) \e[33mreturn\e\
    [0m \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m                                 \
    \              ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                  \
    \                             value matcher is not a member of scala.util.matching.Regex\
    \ - did you mean Regex.matches?\n1 error found\n"
  stdout: ''
  timestamp: 1660054846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(fileName.split(\"\\\\.\").length != 3) {\n\
    \            return \"No\"\n        }\n        var valid = true\n        for(i\
    \ <- 1 until fileName.split(\"\\\\.\").length) {\n            if(fileName.split(\"\
    \\\\.\")(i).length == 0 || fileName.split(\"\\\\.\")(i).charAt(0) < 'a' || fileName.split(\"\
    \\\\.\")(i).charAt(0) > 'z') {\n                valid = false\n              \
    \  break\n            }\n            \n            if(fileName.split(\"\\\\.\"\
    )(i).length == 1 && fileName.split(\"\\\\.\")(i).charAt(0) == '.') {\n       \
    \         valid = false\n                break\n            }\n        }\n   \
    \     if(!valid) {\n            return \"No\"\n        }\n        val validExtensions\
    \ = mutable.List(\"txt\", \"exe\", \"dll\")\n        var ext = fileName.split(\"\
    \\\\.\").last\n        ext = ext.substring(0,ext.length-1)\n        if(!validExtensions.contains(ext))\
    \ {\n            return \"No\"\n        }\n        return \"Yes\"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzl8tx6n3.scala:19:11 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(fileName.split(\e[31m\"\\\\.\"\e\
    [0m).length != \e[31m3\e[0m) {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           Not found: fileName\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpzl8tx6n3.scala:23:25 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mfor\e[0m(i <- \e[31m1\e[0m until fileName.split(\e\
    [31m\"\\\\.\"\e[0m).length) {\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         Not found: fileName\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzl8tx6n3.scala:24:15 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m(fileName.split(\e[31m\"\\\\\
    .\"\e[0m)(i).length == \e[31m0\e[0m || fileName.split(\e[31m\"\\\\.\"\e[0m)(i).charAt(\e\
    [31m0\e[0m) < \e[31m'a'\e[0m || fileName.split(\e[31m\"\\\\.\"\e[0m)(i).charAt(\e\
    [31m0\e[0m) > \e[31m'z'\e[0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m               Not found: fileName\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpzl8tx6n3.scala:26:16 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzl8tx6n3.scala:29:15 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m       "
  stdout: ''
  timestamp: 1660054844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid_name : String = \"No\"\n        val\
    \ file_list = file_name split '\\\\'\n        if (file_list.length <= 3) {\n \
    \           val file_name = file_list(0)\n            var valid_name = \"No\"\n\
    \            val file_list = file_name split '.'\n            if (file_list.length\
    \ > 1) {\n                var file_name : String = \"\"\n                val file_name\
    \ = file_list(0)\n                var valid_name = \"No\"\n                var\
    \ i = 0\n                var letter_index = scala.util.control.Breaks._\n    \
    \            for (i <- 0 until file_list.length-1) {\n                    val\
    \ letter = file_list(i).toLowerCase \n                    letter_index = if (letter_index.control(letter))\
    \ \n                        letter_index.break\n                    letter_index.next\n\
    \                }\n                if (letter_index.break()) {\n            \
    \        valid_name = \"No\"\n                } else if (letter_index.break())\
    \ {\n                    valid_name = \"Yes\"\n                } else {\n    \
    \                valid_name = \"No\"\n                }\n            } else {\n\
    \                valid_name = \"No\"\n            }\n        } else {\n      \
    \      valid_name = \"No\"\n        }\n        return valid_name\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpxizivahd.scala:30:61 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m                \e[33mvar\e[0m \e[36mletter_index\e[0m\
    \ = scala.util.control.Breaks._\n\e[31m\e[31m   |\e[0m                       \
    \                                      ^\e[0m\n\e[31m   |\e[0m               \
    \                                              an identifier expected, but '_'\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpxizivahd.scala:24:28\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mval\e[0m \e[36mfile_list\e[0m = file_name\
    \ split \e[31m'.'\e[0m\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\
    \e[31m   |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpxizivahd.scala:27:20\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                \e[33mval\e[0m \e[36mfile_name\e[0m =\
    \ file_list(\e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                file_name is already defined as \e[33mvariable\e\
    [0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m                Note\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660054845
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name = file_name + \".\"\n        val\
    \ split = file_name.split(\"\\\\.\").toList\n        val fileNameLength = split.length\n\
    \        if (fileNameLength > 3) {\n            return \"No\"\n        }\n   \
    \     var num = 0\n        for (i <- 0 until split.length) {\n            val\
    \ s = split(i)\n            val length = s.length\n            if (length == 0)\
    \ continue\n            if (s.toInt >= 0 && s.toInt <= 9) {\n                num\
    \ = num * 10 + s.toInt\n            } else {\n                return \"No\"\n\
    \            }\n        }\n        val subString = split.head\n        if (subString.isEmpty)\
    \ {\n            return \"No\"\n        }\n        if (subString.toChar != 'a'\
    \ && subString.toChar != 'b' && subString.toChar != 'c' && subString.toChar !=\
    \ 'd' && subString.toChar != 'e' && subString.toChar != 'f' && subString.toChar\
    \ != 'g' && subString.toChar != 'h' && subString.toChar != 'i' && subString.toChar\
    \ != 'j' && subString.toChar != 'k' && subString.toChar != 'l' && subString.toChar\
    \ != 'm' && subString.toChar != 'n' && subString.toChar != 'o' && subString.toChar\
    \ != 'p' && subString.toChar != 'q' && subString.toChar != 'r' && subString.toChar\
    \ != 's' && subString.toChar != 't' && subString.toChar != 'u' && subString.toChar\
    \ != 'v' && subString.toChar != 'w' && subString.toChar != 'x' && subString.toChar\
    \ != 'y' && subString.toChar != 'z') {\n            return \"No\"\n        }\n\
    \        var num2 = 0\n        for (i2 <- 0 until split.length - 1) {\n      \
    \      val s2 = split(i2)\n            val length2 = s2.length\n            if\
    \ (length2 == 0) continue\n            if (s2.toChar >= 'a' && s2.toChar <= 'z')\
    \ {\n                num2 = num2 * 26 + s2.toChar - 'a'\n            } else if\
    \ (s2.toChar >= 'A' && s2.toChar <= 'Z') {\n                num2 = num2 * 26 +\
    \ s2.toChar - 'A'\n            } else {\n                return \"No\"\n     \
    \       }\n        }\n        if (num + num2 != 25) {\n            return \"No\"\
    \n        }\n        if (split.last.toInt >= 0 && split.last.toInt <= 9) {\n \
    \           var num3 = 0\n            for (i3 <- split.length - 2 until split.length)\
    \ {\n                val s3 = split(i3)\n                val length3 = s3.length\n\
    \                if (length3 == 0) \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdrrghfnk.scala:65:4 ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpdrrghfnk.scala:96:0\
    \ ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m96 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpdrrghfnk.scala:19:24\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name\
    \ + \e[31m\".\"\e[0m\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Recursive \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpdrrghfnk.scala:29:29\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m (length == \e[31m0\e[0m) continue\n\
    \e[31m\e[31m   |\e[0m                             ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                             Not found: continue\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpdrrghfnk.scala:47:30 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m            \e[33mif\e[0m (length2 == \e[31m0\e[0m) continue\n\
    \e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                              Not found: continue\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[33m\e\
    [33m-- Warning: /tmp/tmpdrrghfnk.scala:66:4 ------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n"
  stdout: ''
  timestamp: 1660054844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Create a mutable list to store all the valid\
    \ strings in it.\n        // Add all valid filenames into it in a loop. \n   \
    \     val valid_file_names = mutable.MutableList[String]()\n        for (file\
    \ <- fileName) {\n            if (file.length() > 3) \n                valid_file_names\
    \ += file\n            else if (file.indexOf('.') != -1) \n                valid_file_names\
    \ += file.substring(0, file.indexOf('.'))\n            else \n               \
    \ valid_file_names += file\n        }\n        // Now the list is complete, use\
    \ 'contains' function to check the validity of \n        // the file's name.\n\
    \        if (valid_file_names.contains(\"exe\") || valid_file_names.contains(\"\
    dll\") \n            || valid_file_names.contains(\"txt\")) {\n            return\
    \ \"Yes\"\n        }\n        else \"No\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppg7gtsrz.scala:21:31 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mvalid_file_names\e[0m =\
    \ mutable.MutableList[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \                   ^^^^^^^\e[0m\n\e[31m   |\e[0m                            \
    \   Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmppg7gtsrz.scala:22:21\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mfor\e[0m (file <- fileName) {\n\e[31m\e\
    [31m   |\e[0m                     ^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \        Not found: fileName\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660054844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      file_name match {\n        case (name @ if (name.length\
    \ < 3) || (name.contains(\".\") && name.length < (file_name indexOf(\".\"))))\n\
    \          if (\"exe\".contains(name) || \"dll\".contains(name)) || \"txt\".contains(name)\
    \ => \"Yes\"\n        case _ => \"No\"\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpppwummhy.scala:20:21 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mcase\e[0m (name @ \e[33mif\e[0m (name.length\
    \ < \e[31m3\e[0m) || (name.contains(\e[31m\".\"\e[0m) && name.length < (file_name\
    \ indexOf(\e[31m\".\"\e[0m))))\n\e[31m\e[31m   |\e[0m                     ^^\e\
    [0m\n\e[31m   |\e[0m                     pattern expected\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660054844
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Convert file's name to a list of digits and\
    \ letters\n        val digits = file_name.split(\"\").map(_.toInt)\n        val\
    \ letters = file_name.split(\"\").map(_.toUpperCase().toChar)\n        // Count\
    \ number of digits in file's name\n        var count = 0\n        for(i <- 0 to\
    \ digits.length-1){\n            if(digits(i) < 0 || digits(i) > 9){\n       \
    \         return \"No\"\n            }\n            count += 1\n        }\n  \
    \      // Count number of letters in file's name\n        var letterCount = 0\n\
    \        for(i <- 0 to letters.length-1){\n            if(letters(i) < 'a' ||\
    \ letters(i) > 'z' || letters(i) < 'A' || letters(i) > 'Z'){\n               \
    \ return \"No\"\n            }\n            letterCount += 1\n        }\n    \
    \    // If file's name is valid (count of digits == count of letters and count\
    \ of letters <= 3) \n        // return 'Yes'\n        if(count == letterCount\
    \ && count <= 3){\n            return \"Yes\"\n        }\n        return \"No\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpokztikdn.scala:21:62 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = file_name.split(\e\
    [31m\"\"\e[0m).map(_.toUpperCase().toChar)\n\e[31m\e[31m   |\e[0m            \
    \                                  ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                              value toChar is not a member of\
    \ String\n\e[31m\e[31m-- Error: /tmp/tmpokztikdn.scala:21:69 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mletters\e[0m = file_name.split(\e\
    [31m\"\"\e[0m).map(_.toUpperCase().toChar)\n\e[31m\e[31m   |\e[0m            \
    \                                                         ^\e[0m\n\e[31m   |\e\
    [0m                                                                     No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                                           where:    B is a type variable\n2\
    \ errors found\n"
  stdout: ''
  timestamp: 1660054846
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name = file_name.toUpperCase()\n  \
    \      var file_name : String\n        if ((file_name.contains(\".\"))) {\n  \
    \          file_name.split(\".\").length == 1\n        } else {\n            file_name.matches(\"\
    [0-9][0-9][0-9]\\\\.*\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp_s9n9rys.scala:20:12 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m : \e[35mString\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        file_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        Note that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045]\
    \ Cyclic Error: /tmp/tmp_s9n9rys.scala:19:24 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name.toUpperCase()\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvariable\e[0m \e[35mfile_name\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660054844
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Solution code goes here\n        if (file_name.contains(\"\
    .\")){\n            if (file_name.substring(0, 1).isEmpty){\n                return\
    \ \"No\"\n            }\n            if (file_name.substring(file_name.indexOf(\"\
    .\") + 1).toLowerCase != \"a\" && file_name.substring(file_name.indexOf(\".\"\
    ) + 1).toLowerCase != \"b\" && file_name.substring(file_name.indexOf(\".\") +\
    \ 1).toLowerCase != \"c\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase\
    \ != \"d\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase !=\
    \ \"e\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"\
    f\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"g\"\
    \ && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"h\" &&\
    \ file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"i\" && file_name.substring(file_name.indexOf(\"\
    .\") + 1).toLowerCase != \"j\" && file_name.substring(file_name.indexOf(\".\"\
    ) + 1).toLowerCase != \"k\" && file_name.substring(file_name.indexOf(\".\") +\
    \ 1).toLowerCase != \"l\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase\
    \ != \"m\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase !=\
    \ \"n\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"\
    o\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"p\"\
    \ && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"q\" &&\
    \ file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"r\" && file_name.substring(file_name.indexOf(\"\
    .\") + 1).toLowerCase != \"s\" && file_name.substring(file_name.indexOf(\".\"\
    ) + 1).toLowerCase != \"t\" && file_name.substring(file_name.indexOf(\".\") +\
    \ 1).toLowerCase != \"u\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase\
    \ != \"v\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase !=\
    \ \"w\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"\
    x\" && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"y\"\
    \ && file_name.substring(file_name.indexOf(\".\") + 1).toLowerCase != \"z\"){\n\
    \                return \"No\"\n            }\n        }\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpn8t4zazm.scala:31)\n\tat Problem.main(tmpn8t4zazm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name.length() == 3 && file_name != \"\
    ..\" && file_name.indexOf(\".\") > 0 && file_name.substring(0, 1) != \"_\" &&\
    \ file_name.substring(file_name.indexOf(\".\") + 1, file_name.length()) in List(\"\
    txt\", \"exe\", \"dll\"))\n            \"Yes\"\n        else\n            \"No\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpm3pqvsu3.scala:19:144\
    \ ---------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(file_name.length() == \e[31m3\e\
    [0m && file_name != \e[31m\"..\"\e[0m && file_name.indexOf(\e[31m\".\"\e[0m) >\
    \ \e[31m0\e[0m && file_name.substring(\e[31m0\e[0m, \e[31m1\e[0m) != \e[31m\"\
    _\"\e[0m && file_name.substring(file_name.indexOf(\e[31m\".\"\e[0m) + \e[31m1\e\
    [0m, file_name.length()) in List(\e[31m\"txt\"\e[0m, \e[31m\"exe\"\e[0m, \e[31m\"\
    dll\"\e[0m))\n\e[31m\e[31m   |\e[0m                                          \
    \                                                                            \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \                                                                  Found:    String\n\
    \e[31m   |\e[0m                                                              \
    \                                                             Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660054849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // your code here\n        val index = file_name.indexOf(\"\
    .\")\n        val index2 = file_name.indexOf(\".\", index+1)\n        val index3\
    \ = file_name.indexOf(\".\", index2+1)\n        if (index == -1) \"No\"\n    \
    \    if (index2 == -1) \"No\"\n        if (index3 == -1) \"No\"\n        if (file_name(index+1)\
    \ != file_name(index2)) \"No\"\n        if (file_name(index2) != file_name(index3))\
    \ \"No\"\n        if (file_name(index2) < 'a' || file_name(index2) > 'z') \"No\"\
    \n        if (file_name(index3) < 'a' || file_name(index3) > 'z') \"No\"\n   \
    \     if (file_name(index3) == file_name(index2)) \"No\"\n        if (file_name(index2).length()\
    \ == 0) \"No\"\n        if (file_name(index2).contains(\".\")) \"No\"\n      \
    \  if (file_name(index2).substring(0, 1).isEmpty) \"No\"\n        if (file_name(index2).substring(0,\
    \ 1).toString.toLowerCase != \"a\") \"No\"\n        if (file_name(index3).length()\
    \ == 0) \"No\"\n        if (file_name(index3).contains(\".\")) \"No\"\n      \
    \  if (file_name(index3).substring(0, 1).isEmpty) \"No\"\n        if (file_name(index3).substring(0,\
    \ 1).toString.toLowerCase != \"a\") \"No\"\n        else file_name(index2) ==\
    \ file_name(index3) ? \"Yes\" : \"No\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptck23m2z.scala:31:30 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m (file_name(index2).length() ==\
    \ \e[31m0\e[0m) \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmptck23m2z.scala:32:30 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mif\e[0m (file_name(index2).contains(\e\
    [31m\".\"\e[0m)) \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value contains is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmptck23m2z.scala:33:30 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mif\e[0m (file_name(index2).substring(\e\
    [31m0\e[0m, \e[31m1\e[0m).isEmpty) \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m  \
    \          ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            value\
    \ substring is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmptck23m2z.scala:34:30\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mif\e[0m (file_name(index2).substring(\e\
    [31m0\e[0m, \e[31m1\e[0m).toString.toLowerCase != \e[31m\"a\"\e[0m) \e[31m\"No\"\
    \e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m            value substring is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmptck23m2z.scala:35:30 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m        \e[33mif\e[0m (file_name(index3).length() ==\
    \ \e[31m0\e[0m) \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value length is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmptck23m2z.scala:36:30 ---------"
  stdout: ''
  timestamp: 1660054850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val parts = file_name.split(\"\\\\.\")\n   \
    \     var result = \"\"\n        if(parts.length == 1) {\n            result =\
    \ \"\"\n        } else if(parts.length == 2) {\n            result = parts(0)\n\
    \        } else if(parts.length == 3) {\n            val digit_count = parts(2).length\
    \ - 1\n            if(digit_count == 3) {\n                val first_letter_count\
    \ = 0\n                val letters = parts(2).toCharArray\n                for(letter\
    \ <- letters) {\n                    if(letter == 'a' || letter == 'A') {\n  \
    \                      first_letter_count += 1\n                    } else if(letter\
    \ == 'b' || letter == 'B') {\n                        first_letter_count += 1\n\
    \                    } else if(letter == 'c' || letter == 'C') {\n           \
    \             first_letter_count += 1\n                    } else if(letter ==\
    \ 'd' || letter == 'D') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'e' || letter == 'E') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'f' || letter == 'F') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'g' || letter == 'G') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'h' || letter == 'H') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'i' || letter == 'I') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'j' || letter == 'J') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'k' || letter == 'K') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'l' || letter == 'L') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'm' || letter == 'M') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'n' || letter == 'N') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'o' || letter == 'O') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'p' || letter == 'P') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'q' || letter == 'Q') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'r' || letter == 'R') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 's' || letter == 'S') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 't' || letter == 'T') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'u' || letter == 'U') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'v' || letter == 'V') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'w' || letter == 'W') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ 'x' || letter == 'X') {\n                        first_letter_count += 1\n \
    \                   } else if(letter == 'y' || letter == 'Y') {\n            \
    \            first_letter_count += 1\n                    } else if(letter ==\
    \ '\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpksxlphh6.scala:81:40 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m81 |\e[0m                    } \e[33melse\e[0m \e[33mif\e[0m(letter\
    \ == '\n\e[31m\e[31m   |\e[0m                                        ^\e[0m\n\e\
    [31m   |\e[0m                                        unclosed character literal\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpksxlphh6.scala:113:0 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m113 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpksxlphh6.scala:22:19\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            result = \e[31m\"\"\e[0m\n\e[31m\e[31m  \
    \ |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Unit\n\
    \e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpksxlphh6.scala:24:19 ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            result = parts(\e[31m0\e[0m)\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:\
    \    Unit\n\e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpksxlphh6.scala:32:43 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                        first_letter_count += \e[31m1\e\
    [0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                        value += is not a member of Int - did you\
    \ mean first_letter_count.!=?\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpksxlphh6.scala:34:43\
    \ -------------------------------------------------------------------"
  stdout: ''
  timestamp: 1660054851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regex = \"\"\"\\.?([^.])$\"\"\".r\n    \
    \    val regex2 = \"\"\"^[a-zA-Z][a-z]+$\"\"\".r\n        val regex3 = \"\"\"\
    ^(?!\\.)[a-z]+\"\"\".r\n        val regex4 = \"\"\"^[0-9]+$\"\"\".r\n        \n\
    \        val result = if(regex.findFirstIn(file_name).isEmpty) \n            \
    \            \"No\" \n                else if (regex.findFirstIn(file_name).isEmpty)\
    \ \n                        \"No\" \n                else if (regex2.findFirstIn(file_name).isEmpty)\
    \ \n                        \"No\" \n                else if (regex3.findFirstIn(file_name).isEmpty)\
    \ \n                        \"No\" \n                else if (regex4.findFirstIn(file_name).isEmpty)\
    \ \n                        \"No\" \n                else if (regex.findFirstIn(file_name).matches(\"\
    [0-9]\"))\n                        \"No\"\n                else if (regex2.findFirstIn(file_name).matches(\"\
    [a-zA-Z]\"))\n                        \"No\"\n                else if (regex3.findFirstIn(file_name).matches(\"\
    [a-zA-Z]+\"))\n                        \"No\"\n                else if (regex4.findFirstIn(file_name).matches(\"\
    [0-9]+\"))\n                        \"No\"\n                else\n           \
    \             \"Yes\"\n        return result\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoxx7gjaz.scala:34:54 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (regex.findFirstIn(file_name).matches(\e\
    [31m\"[0-9]\"\e[0m))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value matches is not a member of\
    \ Option[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoxx7gjaz.scala:36:55\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (regex2.findFirstIn(file_name).matches(\e\
    [31m\"[a-zA-Z]\"\e[0m))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value matches is not a member of\
    \ Option[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoxx7gjaz.scala:38:55\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (regex3.findFirstIn(file_name).matches(\e\
    [31m\"[a-zA-Z]+\"\e[0m))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value matches is not a member of\
    \ Option[String]\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpoxx7gjaz.scala:40:55\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m40 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m (regex4.findFirstIn(file_name).matches(\e\
    [31m\"[0-9]+\"\e[0m))\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                         value matches is not a member of\
    \ Option[String]\n4 errors found\n"
  stdout: ''
  timestamp: 1660054850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n    \tval file_name = file_name.trim\n    \tval dotIndex\
    \ = file_name.indexOf(\".\")\n    \tif (dotIndex == -1) file_name\n    \telse\
    \ if (dotIndex == 0 && (file_name.length > 1 && file_name.charAt(1) < 'a' || file_name.charAt(1)\
    \ > 'z')) file_name\n    \telse file_name + \".exe\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpmno5f0ie.scala:19:24 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m    \t\e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m    \t                ^\e[0m\n\e[31m   |\e[0m    \t     \
    \           Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660054848
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      val pat = \"\"\"^[0-9]*\\.[a-zA-Z].*$\"\"\".r\n\
    \      val pat2 = \"\"\"^[a-zA-Z].*\\.(txt|exe|dll)\"\"\".r\n      pat.findFirstIn(file_name).map(\
    \ _.toString.toInt).getOrElse(\"No\")\n      pat2.findFirstIn(file_name).map(\
    \ _.toString.toInt).getOrElse(\"No\")\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp510plnzv.scala:22:66\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m      pat2.findFirstIn(file_name).map( _.toString.toInt).getOrElse(\e\
    [31m\"No\"\e[0m)\n\e[31m\e[31m   |\e[0m      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m      Found:    Matchable\n\e[31m   |\e[0m      Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660054849
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val arr = file_name.split(\"\")\n        val\
    \ arr1 = arr(0)\n        var x = 1\n        val arr2 = arr1.split(\".\")\n   \
    \     while(arr2.length > 0){\n            val arr3 = arr2(0) \n            while(arr3.length\
    \ > 0){\n                if(x != 0){\n                    val y = arr3\n     \
    \               val z = arr3(1)\n                    if(z =='.' && x >= 1 && y\
    \ >= 'a' && y <= 'z' || z == '.' && y >= 'a' && y <= 'z'){\n                 \
    \       return \"Yes\"\n                    }\n                }\n           \
    \     x = x + 1\n                arr3 = arr2(x + 1)\n            }\n         \
    \   x = 1\n            arr2 = arr2(x + 1)\n        }\n        return \"No\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1cjs342u.scala:29:49\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    \e[33mif\e[0m(z ==\e[31m'.'\e[0m\
    \ && x >= \e[31m1\e[0m && y >= \e[31m'a'\e[0m && y <= \e[31m'z'\e[0m || z == \e\
    [31m'.'\e[0m && y >= \e[31m'a'\e[0m && y <= \e[31m'z'\e[0m){\n\e[31m\e[31m   |\e\
    [0m                                                 ^^^\e[0m\n\e[31m   |\e[0m\
    \                                                 Found:    (\e[31m'a'\e[0m :\
    \ Char)\n\e[31m   |\e[0m                                                 Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1cjs342u.scala:29:61\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    \e[33mif\e[0m(z ==\e[31m'.'\e[0m\
    \ && x >= \e[31m1\e[0m && y >= \e[31m'a'\e[0m && y <= \e[31m'z'\e[0m || z == \e\
    [31m'.'\e[0m && y >= \e[31m'a'\e[0m && y <= \e[31m'z'\e[0m){\n\e[31m\e[31m   |\e\
    [0m                                                             ^^^\e[0m\n\e[31m\
    \   |\e[0m                                                             Found:\
    \    (\e[31m'z'\e[0m : Char)\n\e[31m   |\e[0m                                \
    \                             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp1cjs342u.scala:29:85 ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                    \e[33mif\e[0m(z ==\e[31m'.'\e[0m\
    \ && x >= \e[31m1\e[0m && y >= \e[31m'a'\e[0m && y <= \e[31m'z'\e[0m || z == \e\
    [31m'.'\e[0m && y >= \e[31m'a'\e[0m && y <= \e[31m'z'\e[0m){\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \           ^^^\e[0m\n\e[31m   |\e[0m                                        \
    \                                             Found:    (\e[31m'a'\e[0m : Char)\n\
    \e[31m   |\e[0m                     "
  stdout: ''
  timestamp: 1660054851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val name_parts = file_name split \"_\"\n   \
    \     if (name_parts.length == 2) {\n            if (name_parts.head == \"\")\
    \ {\n                return \"No\"\n            }\n            if (name_parts.last\
    \ == \"\") {\n                return \"No\"\n            }\n            if (name_parts.last\
    \ != \"exe\" && name_parts.last != \"dll\" && \n                    name_parts.last\
    \ != \"txt\") {\n                return \"No\"\n            }\n            if\
    \ (name_parts.head.length >= 3 && name_parts.last.length >= 3 &&\n           \
    \         name_parts.head != \"\" && name_parts.last != \"dll\" &&\n         \
    \           name_parts.last != \"exe\" && name_parts.last != \"txt\") {\n    \
    \            val first_character = name_parts.head.head\n                if (first_character\
    \ != 'a' && first_character != 'b' &&\n                        first_character\
    \ != 'c' && first_character != 'd' &&\n                        first_character\
    \ != 'e' && first_character != 'f' &&\n                        first_character\
    \ != 'g' && first_character != 'h' &&\n                        first_character\
    \ != 'i' && first_character != 'j' &&\n                        first_character\
    \ != 'k' && first_character != 'l' &&\n                        first_character\
    \ != 'm' && first_character != 'n' &&\n                        first_character\
    \ != 'o' && first_character != 'p' &&\n                        first_character\
    \ != 'q' && first_character != 'r' &&\n                        first_character\
    \ != 's' && first_character != 't' &&\n                        first_character\
    \ != 'u' && first_character != 'v' &&\n                        first_character\
    \ != 'w' && first_character != 'x' &&\n                        first_character\
    \ != 'y' && first_character != 'z') {\n                    return \"No\"\n   \
    \             }\n            }\n        }\n        return \"Yes\"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpfgk_kajp.scala:56)\n\tat Problem.main(tmpfgk_kajp.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code here\n        val file_name : String\
    \ = file_name\n        val numDigits = file_name.filterNot(_.isDigit)\n      \
    \  val dotIndex = file_name.indexOf('.', 3) \n        val subStringBeforeDot =\
    \ file_name.substring(0, dotIndex)\n        val subStringAfterDot = file_name.substring(dotIndex)\n\
    \        val isContainingLetters = subStringBeforeDot.forall(_.isLetter)\n   \
    \     val isExecutable = subStringAfterDot.toString.toUpperCase == \"EXE\" ||\
    \ subStringAfterDot.toString.toUpperCase == \"DLL\"\n        val isContainingFileExtension\
    \ = subStringAfterDot match {\n            case \"TXT\" | \"DLL\" | \"EXE\" =>\
    \ \"Yes\"\n            case _ => \"No\"\n        }\n\n        if (isContainingLetters\
    \ && !(isContainingFileExtension && isExecutable)) {\n            \"No\"\n   \
    \     } else {\n            \"Yes\"\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp900zq6d3.scala:32:63 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mif\e[0m (isContainingLetters && !(isContainingFileExtension\
    \ && isExecutable)) {\n\e[31m\e[31m   |\e[0m                                 \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \               value && is not a member of String\n1 error found\n"
  stdout: ''
  timestamp: 1660054850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name match {\n         \
    \   case x : String if x.length >= 3 => x\n            case x if x.length == 1\
    \ => x\n            case _ => \"\"\n        }\n        val dotIndex = fileName.indexOf(\"\
    .\", 0)\n        if (dotIndex == -1) (fileName == \"exe\" || fileName == \"dll\"\
    ) else \"No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcapkm51w.scala:25:29\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (dotIndex == -\e[31m1\e[0m) (fileName\
    \ == \e[31m\"exe\"\e[0m || fileName == \e[31m\"dll\"\e[0m) \e[33melse\e[0m \e\
    [31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                             Found:    Boolean\n\e[31m   |\e\
    [0m                             Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660054850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val nums = file_name match {\n            case\
    \ x if x.matches(\"[1-9]+[0-9]*\") => x.toInt\n            case x => -1\n    \
    \    }\n        if (nums == -1) return \"No\"\n        val dots = file_name match\
    \ {\n            case x if x.matches(\".*\\\\.\") => true\n            case _\
    \ => false\n        }\n        val start = file_name match {\n            case\
    \ x if x.matches(\"^[a-zA-Z]\") => true\n            case _ => false\n       \
    \ }\n        val end = file_name match {\n            case x if x.matches(\"[a-zA-Z0-9]$\"\
    ) => true\n            case _ => false\n        }\n        if (!dots && !start\
    \ && !end) return \"No\"\n        if (nums < 0 || nums > 9) return \"No\"\n  \
    \      if (dots && (nums > 1 || start || end)) return \"No\"\n        if (nums\
    \ == 9 && dots && start && !end) return \"No\"\n        if (nums == 10 && dots\
    \ && start) return \"No\"\n        if (nums == 10 && dots && end) return \"No\"\
    \n        if (nums == 10 && dots && start && end) return \"No\"\n        if (nums\
    \ == 10 && dots && start) return \"No\"\n        if (nums == 10 && dots && end)\
    \ return \"No\"\n        if (nums == 10) return \"Yes\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpgikjarqu.scala:45:8\
    \ -----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m45 |\e[0m        \e[33mif\e[0m (nums == \e[31m10\e[0m) \e[33mreturn\e\
    [0m \e[31m\"Yes\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Unit\n\e[31m   |\e[0m        Required: String\n\
    \e[31m   |\e[0m        Maybe you are missing an else part for the conditional?\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660054850
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.contains(\".\") && file_name.split(\"\
    .\").length==1 && file_name.split(\".\").head.length>0 && file_name.split(\".\"\
    ).head.toCharArray.forall(_.isLetter)) \"Yes\" else \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpg3p88vyw.scala:22)\n\tat Problem.main(tmpg3p88vyw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regex = \"\"\"^[\\d\\w\\.]+$\"\"\".r\n \
    \       if(file_name != null && regex.findFirstIn(file_name).isDefined) \n   \
    \         \"Yes\"\n        else\n            \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwf5s28gn.scala:27)\n\tat Problem.main(tmpwf5s28gn.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name matches \"\\\\d+\".r) \n     \
    \       \"Yes\"\n        else if (file_name matches \"\\\\..*\".r)\n         \
    \   \"No\"\n        else if (file_name matches \"[a-zA-Z].*\".r)\n           \
    \ \"Yes\"\n        else\n            \"No\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4cvamksl.scala:19:37\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (file_name matches \e[31m\"\\\\\
    d+\"\e[0m.r) \n\e[31m\e[31m   |\e[0m                              ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                              Found:    scala.util.matching.Regex\n\
    \e[31m   |\e[0m                              Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4cvamksl.scala:21:43 ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (file_name matches\
    \ \e[31m\"\\\\..*\"\e[0m.r)\n\e[31m\e[31m   |\e[0m                           \
    \        ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                                   Found:\
    \    scala.util.matching.Regex\n\e[31m   |\e[0m                              \
    \     Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp4cvamksl.scala:23:48\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (file_name matches\
    \ \e[31m\"[a-zA-Z].*\"\e[0m.r)\n\e[31m\e[31m   |\e[0m                        \
    \           ^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                             \
    \      Found:    scala.util.matching.Regex\n\e[31m   |\e[0m                  \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660054851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        file_name match {\n            case s if s.indexOf('.')\
    \ != 0 => \"No\"\n            case s if s.length < 3 => \"No\"\n            case\
    \ s if s.substring(0, 1).toUpperCase != 'A' =>\n                \"No\"\n     \
    \       case s if s.substring(s.length - 1) != \"exe\" &&\n                s.substring(s.length\
    \ - 1) != \"dll\" =>\n                \"No\"\n            case s if s.substring(s.length\
    \ - 2) != \"txt\" =>\n                \"No\"\n            case s => \n       \
    \         \"Yes\"\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpeb38h_70.scala:22:22 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            \e[33mcase\e[0m s \e[33mif\e[0m s.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m).toUpperCase != \e[31m'A'\e[0m =>\n\e[31m\e[31m   |\e\
    [0m                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                      Values of types String and Char cannot be compared with\
    \ == or !=\n1 error found\n"
  stdout: ''
  timestamp: 1660054852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val dotIndex = fileName.indexOf(\".\");\n  \
    \      if(dotIndex == -1)\n            file_name;\n        else {\n          \
    \  val firstLetter = fileName.substring(0, dotIndex).toLowerCase;\n          \
    \  if(!(firstLetter >= 'a' && firstLetter <= 'z' || firstLetter >= 'A' && firstLetter\
    \ <= 'Z'))\n                return \"No\";\n            val lastLetter = fileName.substring(dotIndex\
    \ + 1).toLowerCase;\n            if(lastLetter != \"txt\" && lastLetter != \"\
    exe\" && lastLetter != \"dll\")\n                return \"No\";\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dy16bjk.scala:19:23 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = fileName.indexOf(\e\
    [31m\".\"\e[0m);\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                       Not found: fileName\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp5dy16bjk.scala:23:30 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mfirstLetter\e[0m = fileName.substring(\e\
    [31m0\e[0m, dotIndex).toLowerCase;\n\e[31m\e[31m   |\e[0m                    \
    \          ^^^^^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ fileName\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5dy16bjk.scala:26:29\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e[0m \e[36mlastLetter\e[0m = fileName.substring(dotIndex\
    \ + \e[31m1\e[0m).toLowerCase;\n\e[31m\e[31m   |\e[0m                        \
    \     ^^^^^^^^\e[0m\n\e[31m   |\e[0m                             Not found: fileName\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5dy16bjk.scala:27:12\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mif\e[0m(lastLetter != \e[31m\"txt\"\
    \e[0m && lastLetter != \e[31m\"exe\"\e[0m && lastLetter != \e[31m\"dll\"\e[0m)\n\
    \e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m            Found:   \
    \ Unit\n\e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m         \
    \   Maybe you are missing an else part for the conditional?\n\e[31m28 |\e[0m \
    \               \e[33mreturn\e[0m \e[31m\"No\"\e[0m;\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation availab"
  stdout: ''
  timestamp: 1660054850
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val len = file_name.length\n        if (len\
    \ > 3) {\n            val first_part = file_name.substring(0,1)\n            val\
    \ middle_part = file_name.substring(1,3)\n            val last_part = file_name.substring(len)\n\
    \            if (first_part.isEmpty) {\n                return \"No\"\n      \
    \      }\n            val non_letter = first_part.filter(!('a' <= _ && _ <= 'z'))\n\
    \            if (non_letter.length > 0) {\n                return \"No\"\n   \
    \         }\n            val non_number = first_part.filter(!('0' <= _ && _ <=\
    \ '9'))\n            if (non_number.length > 0) {\n                return \"No\"\
    \n            }\n            if (middle_part.indexOf(\".\") > 0) {\n         \
    \       return \"No\"\n            }\n            val exe_extension = last_part.toLowerCase\
    \ match {\n                case \"txt\" => true\n                case \"exe\"\
    \ => true\n                case \"dll\" => true\n                case _ => false\n\
    \            }\n            if (exe_extension) {\n                return \"Yes\"\
    \n            } else {\n                return \"No\"\n            }\n       \
    \ }\n        if (len < 3) {\n            return \"No\"\n        }\n        val\
    \ first_part = file_name.substring(0,1)\n        val middle_part = file_name.substring(1,3)\n\
    \        val last_part = file_name.substring(3)\n        val non_letter = first_part.filter(!('a'\
    \ <= _ && _ <= 'z'))\n        if (non_letter.length > 0) {\n            return\
    \ \"No\"\n        }\n        val non_number = first_part.filter(!('0' <= _ &&\
    \ _ <= '9'))\n        if (non_number.length > 0) {\n            return \"No\"\n\
    \        }\n        val exe_extension = last_part.toLowerCase match {\n      \
    \      case \"txt\" => true\n            case \"exe\" => true\n            case\
    \ \"dll\" => true\n            case _ => false\n        }\n        if (exe_extension)\
    \ {\n            return \"Yes\"\n        } else {\n            return \"No\"\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E081] Type Error: /tmp/tmp7vuynd1c.scala:27:56 -------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mnon_letter\e[0m = first_part.filter(!(\e\
    [31m'a'\e[0m <= _ && _ <= \e[31m'z'\e[0m))\n\e[31m\e[31m   |\e[0m            \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                               Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                                  \
    \      I could not infer the type of the parameter _$1 of expanded function:\n\
    \e[31m   |\e[0m                                                        (_$1, _$2)\
    \ => \e[31m'a'\e[0m <= _$1 && _$2 <= \e[31m'z'\e[0m.\n\e[31m\e[31m-- [E081] Type\
    \ Error: /tmp/tmp7vuynd1c.scala:27:61 -------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33mval\e[0m \e[36mnon_letter\e[0m = first_part.filter(!(\e\
    [31m'a'\e[0m <= _ && _ <= \e[31m'z'\e[0m))\n\e[31m\e[31m   |\e[0m            \
    \                                                 ^\e[0m\n\e[31m   |\e[0m    \
    \                                                         Missing parameter type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m                                             \
    \                I could not infer the type of the parameter _$2 of expanded function:\n\
    \e[31m   |\e[0m                                                             (_$1,\
    \ _$2) => \e[31m'a'\e[0m <= _$1 && _$2 <= \e[31m'z'\e[0m.\n\e[31m\e[31m-- [E081]\
    \ Type Error: /tmp/tmp7vuynd1c.scala:31:56 -------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mnon_number\e[0m = first_part.filter(!(\e\
    [31m'0'\e[0m <= _ && _ <= \e[31m'9'\e[0m))\n\e[31m\e[31m   |\e[0m            \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                               Missing parameter type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m                                                  \
    \      I cou"
  stdout: ''
  timestamp: 1660054851
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code goes here\n        val fileName\
    \ = file_name.replaceAll(\"\\\\D\", \"\").replace(\".\", \"\")\n        val name\
    \ = fileName.split(\"\\\\.\")(0)\n        val check = (name.split(\"\").map(c\
    \ => ('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z'))).reduceLeft(_ || _)\n \
    \       if(name.length < 3 || name contains \".\" || check != true){\n       \
    \     \"No\"\n        }else{\n            \"Yes\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E134] Type Error: /tmp/tmpopzw7oqo.scala:22:50 -------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcheck\e[0m = (name.split(\e\
    [31m\"\"\e[0m).map(\e[36mc\e[0m => (\e[31m'A'\e[0m <= c && c <= \e[31m'Z'\e[0m)\
    \ || (\e[31m'a'\e[0m <= c && c <= \e[31m'z'\e[0m))).reduceLeft(_ || _)\n\e[31m\e\
    [31m   |\e[0m                                              ^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                              None of the overloaded\
    \ alternatives of \e[33mmethod\e[0m \e[35m<=\e[0m in \e[33mclass\e[0m \e[35mChar\e\
    [0m with types\n\e[31m   |\e[0m                                              \
    \ (x: Double): Boolean\n\e[31m   |\e[0m                                      \
    \         (x: Float): Boolean\n\e[31m   |\e[0m                               \
    \                (x: Long): Boolean\n\e[31m   |\e[0m                         \
    \                      (x: Int): Boolean\n\e[31m   |\e[0m                    \
    \                           (x: Char): Boolean\n\e[31m   |\e[0m              \
    \                                 (x: Short): Boolean\n\e[31m   |\e[0m       \
    \                                        (x: Byte): Boolean\n\e[31m   |\e[0m \
    \                                             match arguments ((c : String))\n\
    \e[31m\e[31m-- Error: /tmp/tmpopzw7oqo.scala:22:94 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mcheck\e[0m = (name.split(\e\
    [31m\"\"\e[0m).map(\e[36mc\e[0m => (\e[31m'A'\e[0m <= c && c <= \e[31m'Z'\e[0m)\
    \ || (\e[31m'a'\e[0m <= c && c <= \e[31m'z'\e[0m))).reduceLeft(_ || _)\n\e[31m\e\
    [31m   |\e[0m                                                                \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                                                                       No ClassTag\
    \ available for B\n\e[31m   |\e[0m\n\e[31m   |\e[0m                          \
    \                                                                    where:  \
    \  B is a type variable\n\e[31m\e[31m-- [E007]"
  stdout: ''
  timestamp: 1660054852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code goes here\n        if(file_name.length()>3){\n\
    \            val no_digits=file_name.map(x => if(x>'9') '0'+ x else x)\n     \
    \       val dot=file_name.lastIndexOf('.')\n            val sub= if (dot < 1)\n\
    \              file_name\n            else\n              file_name.substring(0,\
    \ dot)\n            val valid_name=sub.matches(\"^[a-zA-Z][a-zA-Z0-9]*$\")\n \
    \           val exe=file_name.matches(\"^.*\\.(exe|dll)$\")\n            val is_txt_file=\
    \ exe\n            val is_txt_file= is_txt_file && valid_name\n            val\
    \ is_txt_file= is_txt_file && file_name.length()<4\n            if(!is_txt_file){\n\
    \                return \"No\"\n            }\n        }\n        return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpjyofswg5.scala:28:43 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mexe\e[0m=file_name.matches(\e\
    [31m\"^.*\\.(exe|dll)$\"\e[0m)\n\e[31m\e[31m   |\e[0m                        \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \         invalid escape character\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjyofswg5.scala:30:16\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mis_txt_file\e[0m= is_txt_file\
    \ && valid_name\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            is_txt_file is already defined as \e[33mvalue\e\
    [0m \e[35mis_txt_file\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m            Note that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmpjyofswg5.scala:31:16 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mis_txt_file\e[0m= is_txt_file\
    \ && file_name.length()<\e[31m4\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            is_txt_file is already defined as \e[33mvalue\e\
    [0m \e[35mis_txt_file\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m            Note that\
    \ overloaded methods must all be defined in the same group of toplevel definitions\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660054851
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      var index = 0\n      while (index < file_name.length)\
    \ {\n          val char = file_name.charAt(index)\n          if (char == '.')\
    \ {\n              index += 1 // Skip '.'\n          }\n          else if (!(Character.isLetter(char))\
    \ || (index >= file_name.length-1) ) {\n              return \"No\" // Reject\
    \ files with dots, non-letters, and/or non-first character\n          }\n    \
    \      else {\n              index += 1\n          }\n      }\n      file_name\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpprhqsuiz.scala:35)\n\tat Problem.main(tmpprhqsuiz.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val name = (file_name split \"_\" last)\n  \
    \      (name.length == 1 && name(0) match {\n            case \"txt\" | \"exe\"\
    \ | \"dll\" => \"Yes\"\n            case _ => \"No\"\n        })\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmpt0dwjy2p.scala:19:44 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mname\e[0m = (file_name split\
    \ \e[31m\"_\"\e[0m last)\n\e[31m\e[31m   |\e[0m                              \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \     expression expected but \e[31m')'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpt0dwjy2p.scala:20:14 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        (name.length == \e[31m1\e[0m && name(\e[31m0\e\
    [0m) \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m         ^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m         value length is not a member of Char\n2 errors found\n"
  stdout: ''
  timestamp: 1660054852
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val validFileNameRegex =\n            \"\"\"\
    ^[0-9]+\\.?[a-zA-Z]*$\"\"\".r\n        // TODO: Add the code here to validate\
    \ the file's name.\n        if (validFileNameRegex.findFirstIn(file_name).isDefined)\
    \ {\n            if (file_name.indexOf(\".\") > 0) {\n                if (file_name.substring(0,\
    \ 1) == file_name.substring(0, 1).substring(0, 1)) {\n                    if (file_name.substring(file_name.length\
    \ - 3) == \"txt\" ||\n                        file_name.substring(file_name.length\
    \ - 3) == \"exe\" ||\n                        file_name.substring(file_name.length\
    \ - 3) == \"dll\") {\n                        return \"Yes\"\n               \
    \     }\n                }\n            }\n        }\n        return \"No\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxucyczx3.scala:36)\n\tat Problem.main(tmpxucyczx3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your solution here\n        var counter\
    \ = 0;\n        var dotPos = 0;\n        for (i <- 0 until file_name.length){\n\
    \            if (file_name(i) == '.' && counter < 3){\n                dotPos\
    \ = i;\n                counter = counter + 1;\n            }\n            else\
    \ if file_name(i).equals('.') && counter < 3{\n                counter = counter\
    \ + 1;\n            }\n            else if (file_name(i).equals('.') && counter\
    \ > 3){\n                counter = counter - 1;\n            }\n            else\
    \ if (file_name(i).equals('a') && file_name(i-1) == 'z' && file_name(i-2) != 'Z'){\n\
    \                counter = counter - 1;\n            }\n            else if (file_name(i).equals('A')\
    \ && file_name(i-1) == 'Z' && file_name(i-2) != 'z'){\n                counter\
    \ = counter - 1;\n            }\n        }\n        if (counter < 3){\n      \
    \      return \"No\";\n        }\n        if (counter > 3){\n            return\
    \ \"Yes\";\n        }\n        if (dotPos == 0){\n            return \"No\";\n\
    \        }\n        if (dotPos == 1){\n            return \"Yes\";\n        }\n\
    \        if (dotPos == 2){\n            return \"Yes\";\n        }\n        else{\n\
    \            return \"No\";\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpl3w_pnyk.scala:30:12 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (file_name(i).equals(\e\
    [31m'.'\e[0m) && counter > \e[31m3\e[0m){\n\e[31m\e[31m   |\e[0m            ^^^^\e\
    [0m\n\e[31m   |\e[0m            'then' expected, but 'else' found\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpl3w_pnyk.scala:27:58 -------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m file_name(i).equals(\e\
    [31m'.'\e[0m) && counter < \e[31m3\e[0m{\n\e[31m\e[31m   |\e[0m              \
    \                                            ^\e[0m\n\e[31m   |\e[0m         \
    \                                                 expression does not take parameters\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[33m\e[33m-- [E129] Potential Issue Warning: /tmp/tmpl3w_pnyk.scala:39:8\
    \ -------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[33m38 |\e[0m            }\n\e[33m39 |\e[0m        }\n\e[33m\e[33m\
    \   |\e[0m             ^\e[0m\n\e[33m   |\e[0m             A pure expression does\
    \ nothing in statement position; you may be omitting necessary parentheses\n\e\
    [33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n2 errors found\n"
  stdout: ''
  timestamp: 1660054852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern1 = \"\"\"\\d+\"\"\".r\n        val\
    \ pattern2 = \"\"\"[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern3 = \"\"\"[^\\\
    .]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern4 = \"\"\"[^\\.]+\\.[^\\.]+\\\
    .[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern5 = \"\"\"[^\\.]+\\.[^\\.]+\\.[^\\\
    .]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern6 = \"\"\"[^\\.]+\\.[^\\.]+\\\
    .[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern7 = \"\"\"\
    [^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n\
    \        val pattern8 = \"\"\"[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\\
    .[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern9 = \"\"\"[^\\.]+\\.[^\\\
    .]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\"\
    .r\n        val pattern10 = \"\"\"[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\\
    .]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern11\
    \ = \"\"\"[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\\
    .[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern12 = \"\"\"\
    [^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\\
    .[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern13 = \"\"\"\
    [^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\\
    .[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\"\"\".r\n        val pattern14 = \"\"\"\
    [^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\\
    .[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpupz67m4g.scala:32:24 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mpattern14\e[0m = \"\"\"\
    [^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\\.]+\\\
    .[^\\.]+\\.[^\\.]+\\.[^\\.]+\\.[^\n\e[31m\e[31m   |\e[0m                     \
    \   ^\e[0m\n\e[31m   |\e[0m                        unclosed multi-line string\
    \ literal\n1 error found\n"
  stdout: ''
  timestamp: 1660054852
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      val regex = new Regex(\"^[0-9]{3}\\\\.[^.]+$\"\
    )\n      val check = new mutable.ArrayBuffer[String]()\n      val isFile = file_name\
    \ match {\n        case regex(str) => true\n        case _ => false\n      }\n\
    \      if(isFile){\n        var dotIndex = file_name.indexOf('.');\n        while(dotIndex\
    \ != -1){\n          val fileNameSubstring = file_name.substring(0, dotIndex);\n\
    \          val fileNameString = fileName.substring(dotIndex + 1);\n          val\
    \ isValidFileName = fileNameString.toSet.contains(\".txt\") ||\n             \
    \ fileNameString.toSet.contains(\".exe\") ||\n              fileNameString.toSet.contains(\"\
    .dll\");\n          if(isValidFileName){\n            check :+= fileNameString;\n\
    \          }\n          dotIndex = fileName.indexOf('.', dotIndex + 1);\n    \
    \    }\n        val fileName = check.toList\n        if(fileName.size == 1){\n\
    \          val fileNameWithoutDot = fileName(0)\n          val fileNameLetter\
    \ = fileNameWithoutDot\n          val isValidFileNameLetter = fileNameLetter match\
    \ {\n            case ('a' to 'z') | ('A' to 'Z') => true\n            case _\
    \ => false\n          }\n          if(isValidFileNameLetter){\n            check\
    \ += fileNameWithoutDot;\n          }\n        }\n        if(check.size == 0){\n\
    \          return \"No\"\n        }\n        val hasLetters = check.forall(s =>\
    \ s.toSet.contains(\"a\") || s.toSet.contains(\"A\"))\n        if(hasLetters){\n\
    \          return \"Yes\"\n        }\n      }\n      \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwvym0pya.scala:19:22 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m      \e[33mval\e[0m \e[36mregex\e[0m = \e[33mnew\e[0m\
    \ \e[35mRegex\e[0m(\e[31m\"^[0-9]{3}\\\\.[^.]+$\"\e[0m)\n\e[31m\e[31m   |\e[0m\
    \                      ^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ type Regex\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwvym0pya.scala:20:22\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mcheck\e[0m = \e[33mnew\e[0m\
    \ mutable.ArrayBuffer[\e[35mString\e[0m]()\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: mutable\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwvym0pya.scala:43:22\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33mcase\e[0m (\e[31m'a'\e[0m to \e[31m'z'\e\
    [0m) | (\e[31m'A'\e[0m to \e[31m'Z'\e[0m) => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e\
    [0m                      ^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ to\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwvym0pya.scala:43:37\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m            \e[33mcase\e[0m (\e[31m'a'\e[0m to \e[31m'z'\e\
    [0m) | (\e[31m'A'\e[0m to \e[31m'Z'\e[0m) => \e[31mtrue\e[0m\n\e[31m\e[31m   |\e\
    [0m                                     ^^\e[0m\n\e[31m   |\e[0m             \
    \                        Not found: to\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660054853
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regex = \"\"\"^(?!.*\\d)(?!.*\\.)[A-Za-z](?:\\\
    .(?!\\.))*\\.(txt|exe|dll)$\"\"\".r\n        val matches = regex.findFirstIn(file_name)\n\
    \        if (matches.isDefined) {\n            matches.get\n        } else {\n\
    \            \"No\"\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp1215lhi3.scala:28)\n\tat Problem.main(tmp1215lhi3.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // The pattern should be '[0-9][0-9][0-9]'.\n\
    \        // The pattern should be '\\.'.\n        // The pattern should be '[a-zA-Z]'.\n\
    \        // The pattern should be '[a-zA-Z][a-zA-Z][a-zA-Z]'.\n        // The\
    \ pattern should be '[a-zA-Z][a-zA-Z][a-zA-Z][a-zA-Z]'.\n        val pattern =\
    \ raw\"^(?=(?:[^\\\\.]*\\\\..*)*[^\\\\.]$)[0-9]{3}[a-zA-Z]$\" \n        // Check\
    \ whether file's name conforms to pattern.\n        val result = file_name.matches(pattern)\n\
    \        result match {\n            // If the file's name is valid.\n       \
    \     case true => \"Yes\"\n            // If the file's name is not valid.\n\
    \            case false => \n                // Construct an iterator for the\
    \ file's name.\n                // The iterator should be 'Iterator[String]'.\n\
    \                // The iterator should be 'Iterator[String]'.\n             \
    \   // The iterator should be 'Iterator[String]'.\n                // The iterator\
    \ should be 'Iterator[String]'.\n                // The iterator should be 'Iterator[String]'.\n\
    \                // The iterator should be 'Iterator[String]'.\n             \
    \   // The iterator should be 'Iterator[String]'.\n                // The iterator\
    \ should be 'Iterator[String]'.\n                // The iterator should be 'Iterator[String]'.\n\
    \                val file_name_iter = file_name.iterator\n                \n \
    \               // The first element should be '3'.\n                val first_element\
    \ = file_name_iter.next()\n                // Check whether the first element\
    \ is a digit.\n                val first_element_is_digit = first_element.matches(raw\"\
    ^[0-9]$\")\n                first_element_is_digit match {\n                 \
    \   // If the first element is a digit.\n                    case true => \n \
    \                       // Construct an iterator for the substring before the\
    \ dot.\n                        // The iterator should be 'Iterator[String]'.\n\
    \                        // The iterator should be 'Iterator[String]'.\n     \
    \                   // The iterator should be 'Iterator[String]'.\n          \
    \              // The iterator should be 'Iterator[String]'.\n               \
    \         // The iterator should be 'Iterator[String]'.\n                    \
    \    // The iterator should be 'Iterator[String]'.\n                        //\
    \ The iterator should be 'Iterator[String]'.\n                        // The iterator\
    \ should be 'Iterator[String]'.\n                        // The iterator should\
    \ be 'Iterator[String]'.\n                        // The iterator should be 'Iterator[String]'.\n\
    \                        // The iterator should be 'Iterator[String]'.\n     \
    \                   val beforedot = file_name_iter.drop(1).iterator\n        \
    \                // Check whether the substring before the dot is empty.\n   \
    \                     val beforedot_is_empty = beforedot.next match {\n      \
    \                      case null => true\n                            case _ =>\
    \ false\n                        }\n                        beforedot_is_empty\
    \ match {\n                            \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcjp07syi.scala:24:53 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31mraw\e\
    [0m\"^(?=(?:[^\\\\.]*\\\\..*)*[^\\\\.]$)[0-9]{3}[a-zA-Z]$\" \n\e[31m\e[31m   |\e\
    [0m                                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                                     invalid string interpolation:\
    \ `$$`, `$\"`, `$`ident or `$`BlockExpr expected\n\e[31m\e[31m-- Error: /tmp/tmpcjp07syi.scala:24:25\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31mraw\e\
    [0m\"^(?=(?:[^\\\\.]*\\\\..*)*[^\\\\.]$)[0-9]{3}[a-zA-Z]$\" \n\e[31m\e[31m   |\e\
    [0m                         ^\e[0m\n\e[31m   |\e[0m                         unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmpcjp07syi.scala:47:70 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                \e[33mval\e[0m \e[36mfirst_element_is_digit\e\
    [0m = first_element.matches(\e[31mraw\e[0m\"^[0-9]$\")\n\e[31m\e[31m   |\e[0m\
    \                                                                      ^\e[0m\n\
    \e[31m   |\e[0m                                                              \
    \        unclosed string literal\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpcjp07syi.scala:27:8\
    \ ---------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        result \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^\e[0m\n\e[31m   |\e[0m        Not found: result\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpcjp07syi.scala:47:59 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m47 |\e[0m                \e[33mval\e[0m \e[36mfirst_element_is_digit\e\
    [0m = first_element.matches(\e[31mraw\e[0m\"^[0-9]$\")\n\e"
  stdout: ''
  timestamp: 1660054855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        def isDigit(d: Char) = ('0' <= d && d <= '9')\n\
    \        def isValidFileName(d: Char, chars: Array[Char], idx: Int): Boolean =\
    \ {\n            isDigit(d) && d != '.' && chars(idx) != '.' && chars(idx) !=\
    \ '0' && chars(idx) != '9'\n        }\n        val fileNameArray = file_name.split('.')\n\
    \        val isValidFileName2 = (fileNameArray.length == 1) && isValidFileName(fileNameArray(0),\
    \ Array('a', 'z', 'A', 'Z'), 0)\n        (fileNameArray.length <= 3) && isValidFileName2\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpono0sbv3.scala:24:91\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misValidFileName2\e[0m =\
    \ (fileNameArray.length == \e[31m1\e[0m) && isValidFileName(fileNameArray(\e[31m0\e\
    [0m), Array(\e[31m'a'\e[0m, \e[31m'z'\e[0m, \e[31m'A'\e[0m, \e[31m'Z'\e[0m), \e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                                           \
    \                                   ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m   \
    \                                                                           Found:\
    \    String\n\e[31m   |\e[0m                                                 \
    \                             Required: Char\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpono0sbv3.scala:25:8 -----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        (fileNameArray.length <= \e[31m3\e[0m) && isValidFileName2\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    Boolean\n\e[31m   |\e[0m        Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660054855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.trim\n        if(fileName.contains(\"\
    .\")){\n            val file_name = file_name.split(\".\").head.trim\n       \
    \     if(file_name !=  \"\" && file_name.contains(\"a\") && file_name.contains(\"\
    z\")){\n                val file_name = file_name.split(\".\").last.trim\n   \
    \             if(file_name.contains(\"txt\") || file_name.contains(\"exe\") ||\
    \ file_name.contains(\"dll\")){\n                    return \"Yes\"\n        \
    \        }\n            }\n        }\n        return \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpqmgr90lj.scala:21:28 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.split(\e\
    [31m\".\"\e[0m).head.trim\n\e[31m\e[31m   |\e[0m                            ^\e\
    [0m\n\e[31m   |\e[0m                            Recursive \e[33mvalue\e[0m \e\
    [35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpqmgr90lj.scala:23:32 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33mval\e[0m \e[36mfile_name\e[0m =\
    \ file_name.split(\e[31m\".\"\e[0m).last.trim\n\e[31m\e[31m   |\e[0m         \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \  Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660054853
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // write your code\n        val validFileName\
    \ = \".\" :: file_name :: (\"exe\" :: \"\") :: Nil\n        \n        val count\
    \ = validFileName.filter(x => !x.contains(\" \") && !x.contains(\".\")).length\n\
    \        \n        if (count > 2)\n            \"No\"\n        else if (count\
    \ == 2 && validFileName.filter(_.startsWith(\"a\") || _.startsWith(\"A\")).length\
    \ == 0)\n            \"No\"\n        else \n            \"Yes\"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkyf2ii3c.scala:20:55 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mvalidFileName\e[0m = \e\
    [31m\".\"\e[0m :: file_name :: (\e[31m\"exe\"\e[0m :: \e[31m\"\"\e[0m) :: Nil\n\
    \e[31m\e[31m   |\e[0m                                                       ^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                       value\
    \ :: is not a member of String\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpkyf2ii3c.scala:26:52\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m (count == \e[31m2\e\
    [0m && validFileName.filter(_.startsWith(\e[31m\"a\"\e[0m) || _.startsWith(\e\
    [31m\"A\"\e[0m)).length == \e[31m0\e[0m)\n\e[31m\e[31m   |\e[0m              \
    \                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                    Wrong\
    \ number of parameters, expected: 1\n2 errors found\n"
  stdout: ''
  timestamp: 1660054856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val array = fileName.split(\"\\\\.\")\n    \
    \    if (array.length > 2 || array.size != 1 || array.isEmpty || array(0).toString.toInt\
    \ > 9 || !array(0).startsWith(\"a\") && !array(0).startsWith(\"A\") || array(0).length\
    \ != 1 || array(0).toString.toInt() > 9 || !array(0).endsWith(\"txt\") && !array(0).endsWith(\"\
    exe\") && !array(0).endsWith(\"dll\"))\n        {\n            return \"No\"\n\
    \        }\n        else\n        {\n            return \"Yes\"\n        }\n \
    \   }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpd3kceb7s.scala:19:20 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36marray\e[0m = fileName.split(\e\
    [31m\"\\\\.\"\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: fileName\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n1 error\
    \ found\n"
  stdout: ''
  timestamp: 1660054854
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result = file_name match {\n           \
    \ case _ if file_name.matches(\"^[0-9]{3}$\") && file_name.contains(\".\") &&\
    \ file_name.substring(0,1).matches(\"^[a-zA-Z]$\") && file_name.substring(0,1).nonEmpty\
    \ && file_name.substring(1,2).matches(\"^[a-zA-Z0-9.]$\") && file_name.substring(2,3).matches(\"\
    ^(exe|dll)$\") => \n                file_name.substring(0,3) == \"Yes.\"\n   \
    \         case _ => \"No\"\n        }\n        result\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbyuuluvm.scala:24:8\
    \ -----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        result\n\e[31m\e[31m   |\e[0m        ^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    (result : Matchable)\n\e[31m   |\e[0m  \
    \      Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660054856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val splitStr = file_name.split(\"\")\n     \
    \   if (splitStr.length > 4) {\n            return \"No\"\n        }\n       \
    \ val firstChar = splitStr(0)\n        if (firstChar.length != 1) {\n        \
    \    return \"No\"\n        }\n        val lastChar = splitStr(splitStr.length-1)\n\
    \        if (lastChar.length != 1) {\n            return \"No\"\n        }\n \
    \       val isLetter = firstChar <= 'Z' && firstChar >= 'A'\n        if (!isLetter)\
    \ {\n            return \"No\"\n        }\n        if (splitStr.drop(1).take(1).length\
    \ != 4) {\n            return \"No\"\n        }\n        if (splitStr.take(3).drop(1).toSet\
    \ != Set(\"txt\", \"exe\", \"dll\")) {\n            return \"No\"\n        }\n\
    \        return \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp5woc1q6b.scala:31:36\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36misLetter\e[0m = firstChar\
    \ <= \e[31m'Z'\e[0m && firstChar >= \e[31m'A'\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                                ^^^\e[0m\n\e[31m   |\e[0m                   \
    \                 Found:    (\e[31m'Z'\e[0m : Char)\n\e[31m   |\e[0m         \
    \                           Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmp5woc1q6b.scala:31:56 ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mval\e[0m \e[36misLetter\e[0m = firstChar\
    \ <= \e[31m'Z'\e[0m && firstChar >= \e[31m'A'\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                                                    ^^^\e[0m\n\e[31m   |\e[0m\
    \                                                        Found:    (\e[31m'A'\e\
    [0m : Char)\n\e[31m   |\e[0m                                                 \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660054857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = false\n        val file_str = file_name\n\
    \        if (file_str.contains('.')){\n            val first_part = file_str.substring(0,\
    \ file_str.indexOf('.'))\n            if (first_part.isEmpty){\n             \
    \   return \"No\"\n            }\n            val second_part = file_str.substring(file_str.indexOf('.'))\n\
    \            if (second_part.contains('0') && second_part.contains('1') && second_part.contains('2')\
    \ && second_part.contains('3') && second_part.contains('4') && second_part.contains('5')\
    \ && second_part.contains('6') && second_part.contains('7') && second_part.contains('8')\
    \ && second_part.contains('9')) {\n                return \"No\"\n           \
    \ }\n            val first_char_lowercase = first_part.toCharArray.filter(_ >=\
    \ 'a' && _ <='z').mkString\n            val first_char_uppercase = first_part.toCharArray.filter(_\
    \ >= 'A' && _ <='Z').mkString\n            val second_char_lowercase = second_part.toCharArray.filter(_\
    \ >= 'a' && _ <='z').mkString\n            val second_char_uppercase = second_part.toCharArray.filter(_\
    \ >= 'A' && _ <='Z').mkString\n            if (first_char_lowercase == first_char_uppercase\
    \ && first_char_lowercase != \"\" && second_char_lowercase == \"txt\" || second_char_lowercase\
    \ == \"exe\" || second_char_lowercase == \"dll\"){\n                valid = true\n\
    \            }\n        }\n        if (valid){\n            return \"Yes\"\n \
    \       }\n        return \"No\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpu_xclgzg.scala:30:69 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m            \e[33mval\e[0m \e[36mfirst_char_lowercase\e\
    [0m = first_part.toCharArray.filter(_ >= \e[31m'a'\e[0m && _ <=\e[31m'z'\e[0m).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                                               Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpu_xclgzg.scala:31:69 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m            \e[33mval\e[0m \e[36mfirst_char_uppercase\e\
    [0m = first_part.toCharArray.filter(_ >= \e[31m'A'\e[0m && _ <=\e[31m'Z'\e[0m).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \             ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                      \
    \                                               Wrong number of parameters, expected:\
    \ 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpu_xclgzg.scala:32:71 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e[36msecond_char_lowercase\e\
    [0m = second_part.toCharArray.filter(_ >= \e[31m'a'\e[0m && _ <=\e[31m'z'\e[0m).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \               ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                    \
    \                                                   Wrong number of parameters,\
    \ expected: 1\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmpu_xclgzg.scala:33:71\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mval\e[0m \e[36msecond_char_uppercase\e\
    [0m = second_part.toCharArray.filter(_ >= \e[31m'A'\e[0m && _ <=\e[31m'Z'\e[0m).mkString\n\
    \e[31m\e[31m   |\e[0m                                                        \
    \       "
  stdout: ''
  timestamp: 1660054855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_length = new File(file_name).length()\n\
    \        if(file_length > 3){\n            \"No\"\n        }else{\n          \
    \  val file_name =file_name.split(\"\\\\.\")\n            val dot_index =file_name.indexOf(\"\
    .\")\n            if(dot_index != -1){\n                val file_name =file_name(dot_index+1)\n\
    \                val sub_strings = file_name.split(\"\\\\\")\n               \
    \ val first_letter = sub_strings.head\n                if(first_letter <='z' ||\
    \ first_letter >='A' || first_letter >='Z' || sub_strings.tail.size < 2 || sub_strings.tail.size\
    \ < 2){\n                    \"No\"\n                }else{\n                \
    \    \"Yes\"\n                }\n            }else{\n                \"No\"\n\
    \            }\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpzgyvm_2s.scala:19:30 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_length\e[0m = \e[33mnew\e\
    [0m \e[35mFile\e[0m(file_name).length()\n\e[31m\e[31m   |\e[0m               \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                              Not found:\
    \ type File\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzgyvm_2s.scala:23:27\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m =file_name.split(\e\
    [31m\"\\\\.\"\e[0m)\n\e[31m\e[31m   |\e[0m                           ^\e[0m\n\e\
    [31m   |\e[0m                           Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpzgyvm_2s.scala:26:31\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                \e[33mval\e[0m \e[36mfile_name\e[0m =file_name(dot_index+\e\
    [31m1\e[0m)\n\e[31m\e[31m   |\e[0m                               ^\e[0m\n\e[31m\
    \   |\e[0m                               Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660054854
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n    \tval validFileNameRegex = \"\"\"^[a-zA-z]\\.txt$\"\
    \"\".r\n    \tval fileNameRegex = \"^(?!.+)[^.]$\"\n    \tif (file_name.matches(fileNameRegex)){\n\
    \    \t\t// If file name is OK, then return \"Yes\" string\n    \t\t\"Yes\"\n\
    \    \t}\n    \telse {\n    \t\t// If file name is NOT OK, then return \"No\"\
    \ string\n    \t\t\"No\"\n    \t}\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmppgzak8le.scala:31)\n\tat Problem.main(tmppgzak8le.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054857
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // 1. validate if the string contains more than\
    \ 3 digits\n        if (file_name.toString.isEmpty) {\n            return \"No\"\
    \n        }\n        \n        // 2. validate if the string contains exactly one\
    \ dot\n        if (file_name.toString.indexOf('.') == -1) {\n            return\
    \ \"No\"\n        }\n        \n        // 3. validate if the string contains all\
    \ those characters\n        var file_name : String = file_name.toString.substring(0,\
    \ file_name.toString.indexOf('.'))\n        var file_extension : String = file_name.toString.substring(file_name.toString.indexOf('.')\
    \ + 1)\n        if (file_name.matches(\"[a-zA-Z]+\")) {\n            file_extension\
    \ = file_extension.toString.toUpperCase\n        }\n        \n        var valid_extensions\
    \ : List[String] = List(\"TXT\", \"EXE\", \"DLL\")\n        if (valid_extensions.contains(file_extension.toLowercase()))\
    \ {\n            return \"Yes\"\n        } else {\n            return \"No\"\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmppjksedj0.scala:37:53 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m        \e[33mif\e[0m (valid_extensions.contains(file_extension.toLowercase()))\
    \ {\n\e[31m\e[31m   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                      value toLowercase is\
    \ not a member of String - did you mean String.toLowerCase?\n1 error found\n"
  stdout: ''
  timestamp: 1660054856
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val names = file_name.split(\"\\\\.\");\n  \
    \      names.length == 3\n            && names(0).length > 0\n            && names(1).length\
    \ == 1\n            && names(2).forall(c => c >= 'a' && c <= 'z')\n          \
    \  && names(2).forall(c => c >= 'A' && c <= 'Z')\n            && names(2).forall(c\
    \ => c != 'txt')\n            && names(2).forall(c => c != 'exe')\n          \
    \  && names(2).forall(c => c != 'dll')\n            && names(2).forall(c => c\
    \ != '')\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp691mxlh8.scala:25:41 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            && names(\e[31m2\e[0m).forall(\e[36mc\e[0m\
    \ => c != \e[31m'txt\e[0m')\n\e[31m\e[31m   |\e[0m                           \
    \              ^\e[0m\n\e[31m   |\e[0m                                       \
    \  symbol literal 'txt is no longer supported,\n\e[31m   |\e[0m              \
    \                           use a string literal \"txt\" or an application Symbol(\"\
    txt\") instead,\n\e[31m   |\e[0m                                         or enclose\
    \ in braces '{txt} if you want a quoted expression.\n\e[31m   |\e[0m         \
    \                                For now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0m                                         the idiom,\
    \ but this possibility might no longer be available in the future.\n\e[31m\e[31m--\
    \ Error: /tmp/tmp691mxlh8.scala:25:45 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            && names(\e[31m2\e[0m).forall(\e[36mc\e[0m\
    \ => c != \e[31m'txt\e[0m')\n\e[31m\e[31m   |\e[0m                           \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \          unclosed character literal\n\e[31m\e[31m-- Error: /tmp/tmp691mxlh8.scala:26:45\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            && names(\e[31m2\e[0m).forall(\e[36mc\e[0m\
    \ => c != \e[31m'exe\e[0m')\n\e[31m\e[31m   |\e[0m                           \
    \                  ^\e[0m\n\e[31m   |\e[0m                                   \
    \          unclosed character literal\n\e[31m\e[31m-- Error: /tmp/tmp691mxlh8.scala:27:45\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            && names(\e[31m2\e[0m).forall(\e[36mc\e[0m\
    \ => c != \e[31m'dll\e[0m')\n\e[31m\e[31m   |\e[0m                           \
    \               "
  stdout: ''
  timestamp: 1660054855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name != null && !fileName.contains(\"\
    .\")) \n            return \"No\"\n        \n        // check if there is the\
    \ dot in the string\n        if(!fileName.contains(\".\")) \n            return\
    \ \"No\"\n        \n        // get the substring before the dot and check if it\
    \ is not a number\n        if(!fileName.contains(\".\")) \n            return\
    \ \"No\"\n        \n        // get the substring after the dot and check if it\
    \ is one of ['txt', 'exe', 'dll']\n        if(!fileName.contains(\".\")) \n  \
    \          return \"No\"\n        \n        return \"Yes\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3m_qjr_y.scala:19:33 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(file_name != \e[31mnull\e[0m &&\
    \ !fileName.contains(\e[31m\".\"\e[0m)) \n\e[31m\e[31m   |\e[0m              \
    \                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                           \
    \      Not found: fileName\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3m_qjr_y.scala:23:12 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m(!fileName.contains(\e[31m\".\"\e\
    [0m)) \n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      Not found: fileName\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3m_qjr_y.scala:27:12 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m(!fileName.contains(\e[31m\".\"\e\
    [0m)) \n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      Not found: fileName\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3m_qjr_y.scala:31:12 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m(!fileName.contains(\e[31m\".\"\e\
    [0m)) \n\e[31m\e[31m   |\e[0m            ^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \      Not found: fileName\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660054855
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = Pattern.compile(\"^[1-9][0-9]{0,2}\\\
    \\.[^.].*$\")\n        val pattern2 = Pattern.compile(\"^[a-z][a-z].*$\")\n  \
    \      val pattern3 = Pattern.compile(\"^[^.].*$\")\n        val pattern4 = Pattern.compile(\"\
    ^\\\\d.*$\")\n        val pattern5 = Pattern.compile(\"^\\\\w.*$\")\n\n      \
    \  val file_list = file_name filter (x => !x.isEmpty)\n        val file_name_length:\
    \ Int = file_list.size\n        val pattern_match: Option[Boolean] = file_name\
    \ map {\n            _ match {\n                case pattern(p) =>\n         \
    \           Some(true)\n                case pattern2(p) =>\n                \
    \    Some(true)\n                case pattern3(p) =>\n                    Some(true)\n\
    \                case pattern4(p) =>\n                    Some(true)\n       \
    \         case pattern5(p) =>\n                    Some(true)\n              \
    \  case _ =>\n                    Some(false)\n            }\n        }\n\n  \
    \      val pattern_match_length = pattern_match.size\n        if ((file_name_length\
    \ < 1) || (pattern_match_length != file_name_length)) {\n            \"No\"\n\
    \        } else if (pattern_match_length == 0) {\n            \"No\"\n       \
    \ } else if (pattern_match != None) {\n            if (pattern_match contains\
    \ true) {\n                \"Yes\"\n            } else {\n                \"No\"\
    \n            }\n        } else {\n            \"No\"\n        }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wpdfbf1.scala:19:22 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = Pattern.compile(\e\
    [31m\"^[1-9][0-9]{0,2}\\\\.[^.].*$\"\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \          ^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found: Pattern\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wpdfbf1.scala:20:23\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mpattern2\e[0m = Pattern.compile(\e\
    [31m\"^[a-z][a-z].*$\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: Pattern\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wpdfbf1.scala:21:23 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mpattern3\e[0m = Pattern.compile(\e\
    [31m\"^[^.].*$\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: Pattern\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wpdfbf1.scala:22:23 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mpattern4\e[0m = Pattern.compile(\e\
    [31m\"^\\\\d.*$\"\e[0m)\n\e[31m\e[31m   |\e[0m                       ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: Pattern\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp8wpdfbf1.scala:23:23 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mpatter"
  stdout: ''
  timestamp: 1660054858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]*\\.[a-zA-Z]+$\";\n  \
    \      val re = s\"(${pattern})\"\n        val m = file_name match {\n       \
    \     case re(x) => x\n            case _ => throw new IllegalArgumentException(\"\
    Not a valid file's name\")\n        }\n        if(m.toString.length() > 3){\n\
    \            throw new IllegalArgumentException(\"Too many digits in file\")\n\
    \        }\n        if(m.indexOf('.') != 0){\n            throw new IllegalArgumentException(\"\
    File does not contain '.'\")\n        }\n        if(m.substring(m.indexOf('.'))\
    \ == \"\" ||\n            m.substring(m.indexOf('.')).charAt(0) == '0' ||\n  \
    \          m.substring(m.indexOf('.')).charAt(0) == '1'){\n            throw new\
    \ IllegalArgumentException(\"File does not start with number\")\n        }\n \
    \       if(m.substring(m.indexOf('.')).contains(\"exe\") || \n            m.substring(m.indexOf('.')).contains(\"\
    dll\")){\n            throw new IllegalArgumentException(\"File does not contain\
    \ 'exe' or 'dll'\")\n        }\n        \n        \"Yes\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpexvgb00p.scala:19:31 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]*\\.[a-zA-Z]+$\"\e[0m;\n\e[31m\e[31m   |\e[0m                          \
    \     ^\e[0m\n\e[31m   |\e[0m                               invalid escape character\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpexvgb00p.scala:28:13 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m        \e[33mif\e[0m(m.indexOf(\e[31m'.'\e[0m) != \e\
    [31m0\e[0m){\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \           value indexOf is not a member of Char\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpexvgb00p.scala:31:13 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m(m.substring(m.indexOf(\e[31m'.'\e\
    [0m)) == \e[31m\"\"\e[0m ||\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m           value substring is not a member of Char\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpexvgb00p.scala:31:25 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m(m.substring(m.indexOf(\e[31m'.'\e\
    [0m)) == \e[31m\"\"\e[0m ||\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       value indexOf is not a member of Char\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpexvgb00p.scala:36:13 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mif\e[0m(m.substring(m.indexOf(\e[31m'.'\e\
    [0m)).contains(\e[31m\"exe\"\e[0m) || \n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value substring is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpexvgb00p.scala:36:25 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m        \e[33mif\e[0m(m.su"
  stdout: ''
  timestamp: 1660054858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name != null) {\n            var flag\
    \ : Boolean = true\n            for {\n                x <- file_name.dropWhile(_\
    \ == '.')\n                x <- x.takeWhile(_ >= 'a' && _ <= 'z')\n          \
    \      x <- x.takeWhile(_ >= 'A' && _ <= 'Z')\n            } if !(file_name ==\
    \ x) && !(file_name.startsWith(x) && file_name.endsWith(x)) {\n              \
    \  flag = false\n                break\n            }\n            if (flag) {\n\
    \                if (file_name.size == 3) {\n                    for (x <- file_name.toString.split(''))\
    \ {\n                        if (x == '0')\n                            return\
    \ \"No\"\n                        if (x == '9')\n                            return\
    \ \"No\"\n                    }\n                    return \"Yes\"\n        \
    \        } else if(file_name.size == 2) {\n                    for (x <- file_name.toString.split(''))\
    \ {\n                        if (x == '.')\n                            return\
    \ \"No\"\n                    }\n                    return \"Yes\"\n        \
    \        } else if(file_name.size >= 2) {\n                    if (file_name.toString.indexOf('.')!=-1)\
    \ {\n                        for (x <- file_name.toString.split('')) {\n     \
    \                       if (x.startsWith(\".\"))\n                           \
    \     return \"No\"\n                        }\n                        return\
    \ \"Yes\"\n                    }\n                }\n            }\n        }\n\
    \        return \"No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmprk0lxe8v.scala:31:55 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m                    \e[33mfor\e[0m (x <- file_name.toString.split(''))\
    \ {\n\e[31m\e[31m   |\e[0m                                                   \
    \    ^\e[0m\n\e[31m   |\e[0m                                                 \
    \      empty character literal\n\e[31m\e[31m-- Error: /tmp/tmprk0lxe8v.scala:39:55\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m39 |\e[0m                    \e[33mfor\e[0m (x <- file_name.toString.split(''))\
    \ {\n\e[31m\e[31m   |\e[0m                                                   \
    \    ^\e[0m\n\e[31m   |\e[0m                                                 \
    \      empty character literal\n\e[31m\e[31m-- Error: /tmp/tmprk0lxe8v.scala:46:59\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m46 |\e[0m                        \e[33mfor\e[0m (x <- file_name.toString.split(''))\
    \ {\n\e[31m\e[31m   |\e[0m                                                   \
    \        ^\e[0m\n\e[31m   |\e[0m                                             \
    \              empty character literal\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmprk0lxe8v.scala:29:12\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m (flag) {\n\e[31m\e[31m   |\e\
    [0m            ^^\e[0m\n\e[31m   |\e[0m            'then' expected, but 'if' found\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmprk0lxe8v.scala:23:23 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                x <- x.takeWhile(_ >= \e[31m'a'\e[0m\
    \ && _ <= \e[31m'z'\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value takeWhile is not a member of Char\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660054858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.toUpperCase().replace(\"\
    \\\\\", \"\")\n        val firstDigits = fileName.substring(0, fileName.indexOf(\"\
    .\"))\n        val firstChar = firstDigits.charAt(0)\n        val firstCharIsLetter\
    \ = firstChar.isLetter\n        val isDot = fileName.indexOf(\".\") > 0\n    \
    \    val isValid = firstDigits.length <= 3\n            && firstCharIsLetter\n\
    \            && firstChar.isLetter\n            && !isDot\n            && !firstChar.isDigit\n\
    \            && Seq(\"txt\", \"exe\", \"dll\").forall(fileName.contains)\n   \
    \     if (isValid)\n        {\n            val beforeDot = fileName.substring(1,\
    \ fileName.indexOf(\".\"))\n            return s\"Yes, ${beforeDot}\"\n      \
    \  }\n        else \n        {\n            val beforeDot = fileName.substring(1,\
    \ fileName.indexOf(\".\"))\n            return s\"No, ${beforeDot}\"\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpie7wq33i.scala:42)\n\tat Problem.main(tmpie7wq33i.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        def isValid(filename: String) : Boolean = \n\
    \            !filename.isEmpty &&\n            filename.contains(\".\") &&\n \
    \           filename.substring(0, 1).matches(\"[a-zA-Z]+\") &&\n            filename.substring(filename.lastIndexOf('.')\
    \ + 1).toLowerCase() in Array(\"txt\", \"exe\", \"dll\")\n        if (isValid(file_name))\n\
    \            \"Yes\"\n        else\n            \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpqa_vc12k.scala:23:73\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            filename.substring(filename.lastIndexOf(\e\
    [31m'.'\e[0m) + \e[31m1\e[0m).toLowerCase() in Array(\e[31m\"txt\"\e[0m, \e[31m\"\
    exe\"\e[0m, \e[31m\"dll\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    String\n\e[31m   |\e[0m            Required:\
    \ Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660054858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var check : Boolean = false\n        var i =\
    \ 0\n        var len : Int = file_name.length()\n        var dot : Int = 0\n \
    \       var dot : Int = 0\n        while (i < len) {\n            if(file_name(i).isDigit)\
    \ {\n                i = i + 1\n            }\n            if(file_name(i) ==\
    \ \".\") {\n                dot = i\n                i = i + 1\n            }\n\
    \            if(file_name(i).isEmpty) {\n                i = i + 1\n         \
    \   }\n            if(!(file_name(i).isLetter || file_name(i).isDigit)) {\n  \
    \              i = i + 1\n            }\n            if(file_name(i).isDigit &&\
    \ file_name(i).isLetter && file_name(0) < 'a' || file_name(i).isLetter && file_name(0)\
    \ < 'A') {\n                i = i + 1\n            }\n            if((file_name(dot).isEmpty)\
    \ && file_name(i) < 'a' || file_name(i) < 'A') {\n                i = i + 1\n\
    \            }\n            if(!(file_name(dot).isDigit) && file_name(dot).isLetter)\
    \ {\n                i = i + 1\n            }\n            if(file_name(dot).isDigit\
    \ && file_name(dot).isLetter && file_name(dot+1) < 'a' || file_name(dot).isLetter\
    \ && file_name(dot+1) < 'A') {\n                i = i + 1\n            }\n   \
    \         if(file_name(dot).isEmpty) {\n                dot = dot + 1\n      \
    \      }\n            if((file_name(dot).isDigit) && file_name(dot).isLetter &&\
    \ file_name(dot+1) < 'a' || file_name(dot).isLetter && file_name(dot+1) < 'A')\
    \ {\n                i = i + 1\n            }\n            if(file_name(dot).isEmpty)\
    \ {\n                dot = dot + 1\n            }\n            if(file_name(i)\
    \ < 'a' || file_name(i) < 'A') {\n                i = i + 1\n            }\n \
    \           if(!(file_name(i).isDigit) && file_name(i).isLetter) {\n         \
    \       i = i + 1\n            }\n            if(file_name(i).isDigit && file_name(i).isLetter\
    \ && file_name(i+1) < 'a' || file_name(i).isLetter && file_name(i+1) < 'A') {\n\
    \                i = i + 1\n            }\n            if(file_name(i).isEmpty)\
    \ {\n                i = i + 1\n            }\n            if((file_name(i).isDigit)\
    \ && file_name(i).isLetter && file_name(i+1) < 'a' || file_name(i).isLetter &&\
    \ file_name(i+1) < 'A') {\n                i = i + 1\n            }\n        \
    \    if(file_name(i).isEmpty) {\n                i = i + 1\n            }\n  \
    \          if(!(file_name(i).isDigit) && file_name(i).isLetter) {\n          \
    \      i = i + 1\n            }\n            if(file_name(i).isDigit && \n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E018] Syntax Error: /tmp/tmph8x2ci7k.scala:80:38 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m            \e[33mif\e[0m(file_name(i).isDigit && \n\e\
    [31m\e[31m   |\e[0m                                      ^\e[0m\n\e[31m   |\e\
    [0m                                      expression expected but \e[31m'}'\e[0m\
    \ found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmph8x2ci7k.scala:112:0\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m112 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph8x2ci7k.scala:23:12\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m \e[36mdot\e[0m : \e[35mInt\e[0m\
    \ = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        dot is already defined as \e[33mvariable\e[0m \e[35mdot\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m        Note that overloaded methods must all\
    \ be defined in the same group of toplevel definitions\n\e[31m\e[31m-- Error:\
    \ /tmp/tmph8x2ci7k.scala:28:15 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mif\e[0m(file_name(i) == \e[31m\".\"\
    \e[0m) {\n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m               Values of types Char and String cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmph8x2ci7k.scala:32:28\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mif\e[0m(file_name(i).isEmpty) {\n\e\
    [31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \              value isEmpty is not a member of Char\n\e[31m\e[31m-- [E008] Not\
    \ Found Error: /tmp/tmph8x2ci7k.scala:41:31 ----------------------------"
  stdout: ''
  timestamp: 1660054859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"\"\"^\\d*(\\.txt|\\.exe|\\.dll)$\"\
    \"\".r\n        val matcher = pattern.findFirstIn(file_name);\n        if (matcher.isDefined)\
    \ {\n            if (file_name.indexOf('.') == 0) {\n                return \"\
    Yes\"\n            }\n            else {\n                return \"No\"\n    \
    \        }\n        }\n        else {\n            return \"Yes\"\n        }\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdokn_9nw.scala:35)\n\tat Problem.main(tmpdokn_9nw.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val nums = file_name.split('.')\n        if(nums.length\
    \ == 2){\n            if(nums(0).isEmpty){\n                return \"No\"\n  \
    \          }\n            val s = nums(0).head\n            if(!('a'<= s &&s <=\
    \ 'z')||!('A'<= s &&s <= 'Z')){\n                return \"No\"\n            }\n\
    \            val f = nums(1)\n            if(!('a'<= f &&f <= 'z')||!('A'<= f\
    \ &&f <= 'Z')){\n                return \"No\"\n            }\n        }\n   \
    \     return \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp3o9fop43.scala:25:36 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m(!(\e[31m'a'\e[0m<= s &&s <=\
    \ \e[31m'z'\e[0m)||!(\e[31m'A'\e[0m<= s &&s <= \e[31m'Z'\e[0m)){\n\e[31m\e[31m\
    \   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m      \
    \         value ||! is not a member of Boolean - did you mean Boolean.||?\n\e\
    [31m\e[31m-- [E134] Type Error: /tmp/tmp3o9fop43.scala:29:20 -------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m(!(\e[31m'a'\e[0m<= f &&f <=\
    \ \e[31m'z'\e[0m)||!(\e[31m'A'\e[0m<= f &&f <= \e[31m'Z'\e[0m)){\n\e[31m\e[31m\
    \   |\e[0m                 ^^^^^\e[0m\n\e[31m   |\e[0m                 None of\
    \ the overloaded alternatives of \e[33mmethod\e[0m \e[35m<=\e[0m in \e[33mclass\e\
    [0m \e[35mChar\e[0m with types\n\e[31m   |\e[0m                  (x: Double):\
    \ Boolean\n\e[31m   |\e[0m                  (x: Float): Boolean\n\e[31m   |\e\
    [0m                  (x: Long): Boolean\n\e[31m   |\e[0m                  (x:\
    \ Int): Boolean\n\e[31m   |\e[0m                  (x: Char): Boolean\n\e[31m \
    \  |\e[0m                  (x: Short): Boolean\n\e[31m   |\e[0m              \
    \    (x: Byte): Boolean\n\e[31m   |\e[0m                 match arguments ((f :\
    \ String))\n2 errors found\n"
  stdout: ''
  timestamp: 1660054859
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileNameRegEx = \"^[0-9]{1,3}[.]*[A-Za-z].*$\"\
    \n        val result = file_name match {\n            case fileNameRegEx => file_name\
    \ + \" is valid\"\n            case _ => file_name + \" is invalid\"\n       \
    \ }\n        result\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp31odc2za.scala:27)\n\tat Problem.main(tmp31odc2za.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054859
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result : String = \"No\"\n        var temp\
    \ : String = \"\"\n        var num : Int = 1\n        \n        // 1. Remove all\
    \ the dots from the name.\n        temp += file_name.replaceAll(\"\\\\.\", \"\"\
    )\n        \n        // 2. Check for minimum length \n        if (temp.length()\
    \ < 4) {\n            result = \"No\"\n        } else {\n            // 3. Check\
    \ for valid characters\n            val chars = temp.substring(0,4)\n        \
    \    val charSet = Set('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k',\
    \ 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A',\
    \ 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q',\
    \ 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\n            if (charSet != Set(chars))\
    \ {\n                result = \"No\"\n            } else {\n                //\
    \ 4. Check for dot\n                val dot = temp.indexOf('.', 0)\n         \
    \       if (dot != -1) {\n                    val startString = temp.substring(0,dot)\n\
    \                    val endString = temp.substring(dot + 1, temp.length)\n  \
    \                  \n                    for (eachFile <- List(\"exe\", \"dll\"\
    )) {\n                        val startChar = startString.charAt(0)\n        \
    \                val endChar = endString.charAt(0)\n                        val\
    \ startCharSet = Set('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B',\
    \ 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R',\
    \ 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')\n                        val endCharSet\
    \ = Set('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',\
    \ 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D',\
    \ 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\
    \ 'U', 'V', 'W', 'X', 'Y', 'Z')\n                        \n                  \
    \      // 5. If substring before dot == startChar, check for the substring after\n\
    \                        // dot == endChar.\n                        if (startChar\
    \ != eachFile && startCharSet == endCharSet) {\n                            val\
    \ startIndex = startString.indexOf(eachFile, 0)\n                            val\
    \ endIndex = endString.indexOf(eachFile, 0)\n                            val startFileName\
    \ = startString.substring(startIndex + 1, startIndex + eachFile.length)\n    \
    \                        val endFileName = endString.substring(endIndex + 1, \n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsot2xxm7.scala:55:4 ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpsot2xxm7.scala:86:0\
    \ ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m86 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsot2xxm7.scala:28:19\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            result = \e[31m\"No\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:  \
    \  Unit\n\e[31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- Error: /tmp/tmpsot2xxm7.scala:33:16 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m            \e[33mif\e[0m (charSet != Set(chars)) {\n\
    \e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               Values of types scala.collection.mutable.Set[Char] and scala.collection.mutable.Set[String]\
    \ cannot be compared with == or !=.\n\e[31m   |\e[0m               I found:\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m                   CanEqual.canEqualSet[\e[35mChar\e\
    [0m, \e[35mU\e[0m](/* missing */summon[CanEqual[Char, U]])\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m               But no implicit values were found that match type\
    \ CanEqual[Char, U].\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpsot2xxm7.scala:34:23\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                result = \e[31m\"No\"\e[0m\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             \
    \   Found:    Unit\n\e[31m   |\e[0m                Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |"
  stdout: ''
  timestamp: 1660054861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        val\
    \ parts = file_name.split('.')\n        if(parts.length < 3 || parts.length >\
    \ 4) {\n            throw new FileNotFoundException(\"Invalid file name; file\
    \ name has less than 3 or more than 4 parts\")\n        }\n        if(parts.dropRight(2).isEmpty)\
    \ {\n            throw new FileNotFoundException(\"Invalid file name; file name\
    \ is empty\")\n        }\n        val first_part = parts.head\n        if(first_part.isEmpty\
    \ || first_part.toLower != 'a' && first_part.toLower != 'b' && first_part.toLower\
    \ != 'c' && first_part.toLower != 'd' && first_part.toLower != 'e' && first_part.toLower\
    \ != 'f' && first_part.toLower != 'g' && first_part.toLower != 'h' && first_part.toLower\
    \ != 'i' && first_part.toLower != 'j' && first_part.toLower != 'k' && first_part.toLower\
    \ != 'l' && first_part.toLower != 'm' && first_part.toLower != 'n' && first_part.toLower\
    \ != 'o' && first_part.toLower != 'p' && first_part.toLower != 'q' && first_part.toLower\
    \ != 'r' && first_part.toLower != 's' && first_part.toLower != 't' && first_part.toLower\
    \ != 'u' && first_part.toLower != 'v' && first_part.toLower != 'w' && first_part.toLower\
    \ != 'x' && first_part.toLower != 'y' && first_part.toLower != 'z') {\n      \
    \      throw new FileNotFoundException(\"Invalid file name; invalid first character\"\
    )\n        }\n        val last_part = parts.last\n        if(last_part.isEmpty\
    \ || last_part.toLower != 'txt' && last_part.toLower != 'exe' && last_part.toLower\
    \ != 'dll') {\n            throw new FileNotFoundException(\"Invalid file name;\
    \ invalid last character\")\n        }\n        if(first_part.toLower != 'a' &&\
    \ first_part.toLower != 'b' && first_part.toLower != 'c' && first_part.toLower\
    \ != 'd' && first_part.toLower != 'e' && first_part.toLower != 'f' && first_part.toLower\
    \ != 'g' && first_part.toLower != 'h' && first_part.toLower != 'i' && first_part.toLower\
    \ != 'j' && first_part.toLower != 'k' && first_part.toLower != 'l' && first_part.toLower\
    \ != 'm' && first_part.toLower != 'n' && first_part.toLower != 'o' && first_part.toLower\
    \ != 'p' && first_part.toLower != 'q' && first_part.toLower != 'r' && first_part.toLower\
    \ != 's' \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpcgzbpz_n.scala:32:53 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mif\e[0m(last_part.isEmpty || last_part.toLower\
    \ != \e[31m'txt\e[0m' && last_part.toLower != \e[31m'exe\e[0m' && last_part.toLower\
    \ != \e[31m'dll\e[0m') {\n\e[31m\e[31m   |\e[0m                              \
    \                       ^\e[0m\n\e[31m   |\e[0m                              \
    \                       symbol literal 'txt is no longer supported,\n\e[31m  \
    \ |\e[0m                                                     use a string literal\
    \ \"txt\" or an application Symbol(\"txt\") instead,\n\e[31m   |\e[0m        \
    \                                             or enclose in braces '{txt} if you\
    \ want a quoted expression.\n\e[31m   |\e[0m                                 \
    \                    For now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0m                                                 \
    \    the idiom, but this possibility might no longer be available in the future.\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpcgzbpz_n.scala:32:57 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mif\e[0m(last_part.isEmpty || last_part.toLower\
    \ != \e[31m'txt\e[0m' && last_part.toLower != \e[31m'exe\e[0m' && last_part.toLower\
    \ != \e[31m'dll\e[0m') {\n\e[31m\e[31m   |\e[0m                              \
    \                           ^\e[0m\n\e[31m   |\e[0m                          \
    \                               ')' expected, but ' found\n\e[31m\e[31m-- Error:\
    \ /tmp/tmpcgzbpz_n.scala:32:117 ------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mif\e[0m(last_part.isEmpty || last_part.toLower\
    \ != \e[31m'txt\e[0m' && last_part.toLower != \e[31m'exe\e[0m' && last_part.toLower\
    \ != \e[31m'dll\e[0m') {\n\e[31m\e[31m   |\e[0m                              \
    \                                                                             "
  stdout: ''
  timestamp: 1660054858
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name match {\n        \
    \    case x if x.length < 3 => return \"No\"\n            case x if x.indexOf('.')\
    \ == -1 => return \"No\"\n            case x if x.substring(0, 1).toString.toInt\
    \ == 0 => return \"No\"\n            case x if x.substring(x.length - 3).toString.toInt\
    \ == 0 => return \"No\"\n            case x if x.substring(x.length - 3).toString.toInt\
    \ != 0 && x.substring(x.length - 1).toString.toInt == 3\n            && x.substring(x.length\
    \ - 2).toString.toInt == 3 => return \"No\"\n            case _ => \"Yes\"\n \
    \       }\n        file_name match {\n            case \"Yes\" => return \"Yes\"\
    \n            case \"No\" => return \"No\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpz9ca7yyw.scala:19:24 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name\
    \ \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e\
    [31m   |\e[0m                        Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660054858
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileNameWithDot =  file_name.replaceAll(\"\
    .\", \"\")\n        val fileName = fileNameWithDot.substring(0,1)\n        var\
    \ isValid = false\n        if(fileName.matches(\"[0-9]+\")){\n            isValid\
    \ = fileName.matches((\"^[a-zA-Z]+\"))\n        }\n        if(fileName.equals(\"\
    \")){\n            isValid = false\n        }\n        if(fileName.equals(\".\"\
    )){\n            isValid = true\n        }\n        if(fileName.matches(\"^[a-zA-Z]+\"\
    )){\n            if(fileName.equals(\"txt\") || fileName.equals(\"exe\") || fileName.equals(\"\
    dll\")){\n                isValid = true\n            }\n        }\n        if(isValid){\n\
    \            file_name \n        }\n        else \n            \"No\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end 1, length 0\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.fileNameCheck(tmpxzphhxif.scala:20)\n\tat Problem$.main(tmpxzphhxif.scala:43)\n\
    \tat Problem.main(tmpxzphhxif.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // 1. Convert the string to lowercase, remove\
    \ all spaces and commas.\n        // 2. Convert the string to an array of characters\
    \ using '.' as delimiter.\n        // 3. Convert the string to an array of characters\
    \ using '.' as delimiter, \n        // then filter out all the non-alphanumeric\
    \ characters except the last character.\n        // 4. Check if the length of\
    \ the array is exactly 2.\n        if(file_name.toLowerCase.split(\"\"\"\\.\"\"\
    \").length != 2) {\n            return \"No\";\n        }\n        if(file_name.toLowerCase.split(\"\
    \"\"\\.\"\"\").last.filter(c => !c.isLetter).toList.length == 0) {\n         \
    \   return \"No\";\n        }\n        if(file_name.toLowerCase.split(\"\"\"\\\
    .\"\"\").last.filter(c => !c.isLetter).toList.length != 1) {\n            return\
    \ \"No\";\n        }\n        if(file_name.toLowerCase.split(\"\"\"\\.\"\"\").last.filter(c\
    \ => c.isLetter).toList.head.length != 1) {\n            return \"No\";\n    \
    \    }\n        \n        // 5. Check if the substring before the dot is longer\
    \ than three characters.\n        if(file_name.toLowerCase.split(\"\"\"\\.\"\"\
    \").last.filter(c => !c.isLetter).toList.head.length > 3) {\n            return\
    \ \"No\";\n        }\n\n        // 6. Check if the substring after the dot is\
    \ in the list ['txt', 'exe', 'dll']\n        if(file_name.toLowerCase.split(\"\
    \"\"\\.\"\"\").last.filter(c => c.isLetter).toList.last.contains(\"exe\") &&\n\
    \           file_name.toLowerCase.split(\"\"\"\\.\"\"\").last.filter(c => c.isLetter).toList.last.contains(\"\
    dll\") &&\n           file_name.toLowerCase.split(\"\"\"\\.\"\"\").last.filter(c\
    \ => c.isLetter).toList.last.contains(\"txt\")) {\n            return \"Yes\"\
    ;\n        }\n        return \"No\";\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpc_eclsyc.scala:33:90 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m        \e[33mif\e[0m(file_name.toLowerCase.split(\e\
    [31m\"\"\"\\.\"\"\"\e[0m).last.filter(\e[36mc\e[0m => c.isLetter).toList.head.length\
    \ != \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpc_eclsyc.scala:38:91 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m        \e[33mif\e[0m(file_name.toLowerCase.split(\e\
    [31m\"\"\"\\.\"\"\"\e[0m).last.filter(\e[36mc\e[0m => !c.isLetter).toList.head.length\
    \ > \e[31m3\e[0m) {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value length is not a member of Char\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpc_eclsyc.scala:43:90 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        \e[33mif\e[0m(file_name.toLowerCase.split(\e\
    [31m\"\"\"\\.\"\"\"\e[0m).last.filter(\e[36mc\e[0m => c.isLetter).toList.last.contains(\e\
    [31m\"exe\"\e[0m) &&\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m           value contains is not a member of Char\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660054861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = false;\n        for (i<-0 to fileName.length\
    \ - 2) {\n            if (Character.isDigit(fileName(i))){\n                valid\
    \ = false;\n                break;\n            } else if (fileName(i) == '.'){\n\
    \                valid = false;\n                break;\n            } else if\
    \ (fileName(i).isEmpty) {\n                valid = false;\n                break;\n\
    \            }\n        }\n        for (i<-0 to file_name.length - 2) {\n    \
    \        if (fileName(i).isLetter) {\n                valid = false;\n       \
    \         break;\n            }\n        }\n        val result = valid && (file_name(0)\
    \ != '0') && (file_name(0) != 'A') && (file_name(0) != 'a') && (file_name(0) !=\
    \ '9') && (file_name(0) != '-') && (file_name(0) != '.') && (file_name(0) != '-')\
    \ && (file_name(0) != '_') && (file_name(0) != '0') && (file_name(0) != '-')\n\
    \        if (result) {\n            return \"Yes\";\n        }\n        else {\n\
    \            return \"No\";\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3c0j2rs.scala:20:21 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mfor\e[0m (i<-\e[31m0\e[0m to fileName.length\
    \ - \e[31m2\e[0m) {\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Not found: fileName\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmph3c0j2rs.scala:21:34 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m (Character.isDigit(fileName(i))){\n\
    \e[31m\e[31m   |\e[0m                                  ^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                                  Not found: fileName\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmph3c0j2rs.scala:23:16 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                break;\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmph3c0j2rs.scala:24:23 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m (fileName(i)\
    \ == \e[31m'.'\e[0m){\n\e[31m\e[31m   |\e[0m                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                       Not found: fileName\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmph3c0j2rs.scala:26:16 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m                break;\n\e[31m\e[31m   |\e[0m       \
    \         ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m\
    \   |\e[0m\n\e[31m   "
  stdout: ''
  timestamp: 1660054860
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code here\n        val fileName = file_name.split(\"\
    \\\\.\").length\n        if(fileName < 3 || fileName > 3){\n          return \"\
    No\"\n        } else {\n          val first = file_name.split(\"\\\\.\")(0)\n\
    \          if(!first.isEmpty() && !first.startsWith('a') && !first.startsWith('A')\
    \ \n              && !first.endsWith('txt') && !first.endsWith('exe') && !first.endsWith('dll')){\n\
    \            return \"No\"\n          } else {\n            return \"Yes\"\n \
    \         }\n        }\n      }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp2e531hb5.scala:26:33 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m              && !first.endsWith(\e[31m'txt\e[0m') &&\
    \ !first.endsWith(\e[31m'exe\e[0m') && !first.endsWith(\e[31m'dll\e[0m')){\n\e\
    [31m\e[31m   |\e[0m                                 ^\e[0m\n\e[31m   |\e[0m  \
    \                               symbol literal 'txt is no longer supported,\n\e\
    [31m   |\e[0m                                 use a string literal \"txt\" or\
    \ an application Symbol(\"txt\") instead,\n\e[31m   |\e[0m                   \
    \              or enclose in braces '{txt} if you want a quoted expression.\n\e\
    [31m   |\e[0m                                 For now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0m                                 the idiom, but this\
    \ possibility might no longer be available in the future.\n\e[31m\e[31m-- Error:\
    \ /tmp/tmp2e531hb5.scala:26:37 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m              && !first.endsWith(\e[31m'txt\e[0m') &&\
    \ !first.endsWith(\e[31m'exe\e[0m') && !first.endsWith(\e[31m'dll\e[0m')){\n\e\
    [31m\e[31m   |\e[0m                                     ^\e[0m\n\e[31m   |\e[0m\
    \                                     unclosed character literal\n\e[31m\e[31m--\
    \ Error: /tmp/tmp2e531hb5.scala:26:63 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m              && !first.endsWith(\e[31m'txt\e[0m') &&\
    \ !first.endsWith(\e[31m'exe\e[0m') && !first.endsWith(\e[31m'dll\e[0m')){\n\e\
    [31m\e[31m   |\e[0m                                                          \
    \     ^\e[0m\n\e[31m   |\e[0m                                                \
    \               unclosed character literal\n\e[31m\e[31m-- Error: /tmp/tmp2e531hb5.scala:26:89\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m              && !first.e"
  stdout: ''
  timestamp: 1660054861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var flag = false\n        var counter = -1\n\
    \        var result = \"\"\n        var lastChar = \"\"\n        for(i <- 0 until\
    \ file_name.length) \n        {\n            if(counter != -1 && (counter % 3\
    \ == 0 || counter == 0))\n            {\n                result += \".\"\n   \
    \         }\n            if(file_name(i) == \"\\\\\" || file_name(i) == \"/\"\
    \ || file_name(i) == \":\" \n                || file_name(i) == \"?\" || file_name(i)\
    \ == \"[\" || file_name(i) == \"]\")\n            {\n                flag = true\n\
    \            }\n            if(file_name(i) == \".\" && file_name(i + 1) != \"\
    .\" && counter == -1) \n            {\n                flag = true\n         \
    \   }\n            if(file_name(i) == \"[\" && file_name(i + 1) != \"]\" && counter\
    \ == -1) \n            {\n                flag = true\n            }\n       \
    \     if((file_name(i) == \".\" || file_name(i) == \".\" || file_name(i) == \"\
    .\" || file_name(i) == \".\") && \n            (file_name(i) != \".\" && file_name(i)\
    \ != \".\"))\n            {\n                flag = true\n            }\n    \
    \        if(file_name(i) == \".\" && file_name(i + 1) == \".\" && counter == -1)\
    \ \n            {\n                flag = true\n            }\n            if((file_name(i)\
    \ == \".\" || file_name(i) == \".\" || file_name(i) == \".\" || file_name(i) ==\
    \ \".\") && \n            (file_name(i) != \".\" && file_name(i) != \".\" && file_name(i)\
    \ != \".\"))\n            {\n                flag = true\n            }\n    \
    \        if(file_name(i) != \".\" && file_name(i + 1) == \".\") \n           \
    \ {\n                flag = true\n            }\n            if(file_name(i) !=\
    \ \".\" && file_name(i + 1) == \".\" && file_name(i + 2) == \".\") \n        \
    \    {\n                flag = true\n            }\n            if(file_name(i)\
    \ != \".\" && file_name(i + 1) == \".\" && file_name(i + 2) == \".\" && file_name(i\
    \ + 3) == \".\") \n            {\n                flag = true\n            }\n\
    \            if(file_name(i) != \".\" && file_name(i + 1) == \".\" && file_name(i\
    \ + 2) == \".\" && file_name(i + 3) == \".\" && file_name(i + 4) == \".\") \n\
    \            {\n                flag = true\n            }\n            if(file_name(i)\
    \ != \".\" && file_name(i + 1) == \".\" && file_name(i + 2) == \".\" && file_name(i\
    \ + 3) == \".\" && file_name(i + 4) == \".\" && file_name(i + 5) == \".\") \n\
    \            {\n                flag = true\n            }\n            if(file_name(i)\
    \ != \".\" && file_name(i + 1) == \".\" && file_name(i + 2) == \".\" && file_name(i\
    \ + 3) == \".\" && file_name(i + 4) == \".\" && file_name(i + 5) == \".\" && file_name(i\
    \ + 6) == \".\") \n            {\n                flag = true\n            }\n\
    \            if(file_name(i) != \".\" && file_name(i + 1) == \".\" && file_name(i\
    \ + 2) == \".\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwbg_bapf.scala:80:85 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m            \e[33mif\e[0m(file_name(i) != \e[31m\".\"\
    \e[0m && file_name(i + \e[31m1\e[0m) == \e[31m\".\"\e[0m && file_name(i + \e[31m2\e\
    [0m) == \".\n\e[31m\e[31m   |\e[0m                                           \
    \                                          ^\e[0m\n\e[31m   |\e[0m           \
    \                                                                          unclosed\
    \ string literal\n\e[31m\e[31m-- Error: /tmp/tmpwbg_bapf.scala:82:34 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m82 |\e[0m    \e[33mdef\e[0m \e[36mmain\e[0m(\e[36margs\e[0m: \e\
    [35mArray\e[0m[\e[35mString\e[0m]) = {\n\e[31m\e[31m   |\e[0m                \
    \                  ^\e[0m\n\e[31m   |\e[0m                                  end\
    \ of statement expected but '=' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpwbg_bapf.scala:112:0\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m112 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- Error: /tmp/tmpwbg_bapf.scala:29:15\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m(file_name(i) == \e[31m\"\\\\\
    \"\e[0m || file_name(i) == \e[31m\"/\"\e[0m || file_name(i) == \e[31m\":\"\e[0m\
    \ \n\e[31m\e[31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m               Values of types Char and String cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmpwbg_bapf.scala:29:39 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m(file_name(i) == \e[31m\"\\\\\
    \"\e[0m || file_name(i) == \e[31m\"/\"\e[0m || file_name(i) == \e[31m\":\"\e[0m\
    \ \n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1660054863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code goes here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //Your code here\n        //Your code\
    \ here\n        //Your code here\n        //\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp0tkbmkf3.scala:18:53\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m 18 |\e[0m    \e[33mdef\e[0m \e[36mfileNameCheck\e[0m(\e[36mfile_name\e\
    [0m : \e[35mString\e[0m) : \e[35mString\e[0m = {\n\e[31m\e[31m    |\e[0m     \
    \                                                ^\e[0m\n\e[31m    |\e[0m    \
    \                                                 Found:    Unit\n\e[31m    |\e\
    [0m                                                     Required: String\n\e[31m\
    \ 19 |\e[0m        \e[34m// Your code goes here\e[0m\n\e[31m 20 |\e[0m       \
    \ \e[34m//Your code here\e[0m\n\e[31m 21 |\e[0m        \e[34m//Your code here\e\
    [0m\n\e[31m 22 |\e[0m        \e[34m//Your code here\e[0m\n\e[31m 23 |\e[0m   \
    \     \e[34m//Your code here\e[0m\n\e[31m 24 |\e[0m        \e[34m//Your code here\e\
    [0m\n\e[31m 25 |\e[0m        \e[34m//Your code here\e[0m\n\e[31m 26 |\e[0m   \
    \     \e[34m//Your code here\e[0m\n\e[31m 27 |\e[0m        \e[34m//Your code here\e\
    [0m\n\e[31m 28 |\e[0m        \e[34m//Your code here\e[0m\n\e[31m 29 |\e[0m   \
    \     \e[34m//Your code here\e[0m\n\e[31m 30 |\e[0m        \e[34m//Your code here\e\
    [0m\n\e[31m 31 |\e[0m        \e[34m//Your code here\e[0m\n\e[31m 32 |\e[0m   \
    \     \e[34m//Your code here\e[0m\n\e[31m 33 |\e[0m        \e[34m//Your code here\e\
    [0m\n\e[31m 34 |\e[0m        \e[34m//Your code here\e[0m\n\e[31m 35 |\e[0m   \
    \     \e[34m//Your code here\e[0m\n\e[31m 36 |\e[0m        \e[34m//Your code here\e\
    [0m\n\e[31m 37 |\e[0m        \e[34m//Your code here\e[0m\n\e[31m 38 |\e[0m   \
    \     \e[34m//Your code here\e[0m\n\e[31m 39 |\e[0m        \e[34m//Your code here\e\
    [0m\n\e[31m 40 |\e[0m        \e[34m//Your code here\e[0m\n\e[31m 41 |\e[0m   \
    \     \e[34m//Your code here\e[0m\n\e[31m 42 |\e[0m        \e[34m//Your code here\e\
    [0m\n\e[31m 43 |\e[0m        \e[34m//Your code here\e[0m\n\e[31m 44 |\e[0m   \
    \     \e[34m//Your code here\e[0m\n\e[31m 45 |\e[0m        \e[34m//Your code here\e\
    [0m\n\e[31m 46 |\e[0m        \e[34m//Your code here\e[0m\n\e[31m 47 |\e[0m   \
    \     \e[34m//Your code here\e[0m\n\e[31m 48 |\e[0m        \e[34m//Your code here\e\
    [0m\n\e[31m 49 |\e[0m        \e[34m//Your code here\e[0m\n\e[31m 50 |\e[0m   \
    \     \e[34m//"
  stdout: ''
  timestamp: 1660054861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Create a mutable string whose initial value\
    \ is file_name \n        var new_file_name : String = \"\"\n\n        // Create\
    \ an array called 'parts' which keeps track of each part of a file's name\n  \
    \      var parts : Array[String] = new Array[String](4)\n\n        // Create a\
    \ new mutable string called 'valid_file_name' whose initial value is\n       \
    \ // 'Yes'\n        var valid_file_name : String = \"Yes\"\n\n        // Create\
    \ a loop which goes through each character in file_name and checks \n        //\
    \ whether it is a digit, and append it to the array called 'parts' if it is \n\
    \        // a digit.\n        for (c <- file_name) {\n            if (c.isDigit)\
    \ {\n                parts = parts.updated(0, c)\n            } else {\n     \
    \           // Append the new character to the array called 'parts'\n        \
    \        parts = parts.updated(0, c)\n            }\n        }\n\n        // Check\
    \ for a dot.\n        if (parts.last == \".\") {\n            // Remove the dot\
    \ from the array called 'parts'\n            parts = parts.updated(parts.length\
    \ - 1, \"\")\n        } else {\n            // Append an error message indicating\
    \ that the file's name is invalid\n            valid_file_name = \"No\"\n    \
    \    }\n\n        // Check for a filename that does not start with a letter from\
    \ latin alphapet\n        if (parts.head.nonEmpty && parts.head.head < 'a' ||\
    \ parts.head.head > 'z') {\n            // Append an error message indicating\
    \ that the file's name is invalid\n            valid_file_name = \"No\"\n    \
    \    } else {\n            // Append an error message indicating that the file's\
    \ name is invalid\n            valid_file_name = \"Yes\"\n        }\n\n      \
    \  // Check for a filename that does not contain more than one dot, and if \n\
    \        // it doesn't end with one of these strings (txt, exe, dll)\n       \
    \ if (parts.last.nonEmpty && parts.last != \".exe\" && parts.last != \"exe\")\
    \ {\n            // Append an error message indicating that the file's name is\
    \ invalid\n            valid_file_name = \"No\"\n        } else {\n          \
    \  // Append an error message indicating that the file's name is invalid\n   \
    \         valid_file_name = \"Yes\"\n        }\n\n        // Return the value\
    \ of valid_file_name\n        valid_file_name\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ol2six6.scala:34:41\
    \ ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m                parts = parts.updated(\e[31m0\e[0m, c)\n\
    \e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m \
    \  |\e[0m                                         Found:    (c : Char)\n\e[31m\
    \   |\e[0m                                         Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp7ol2six6.scala:37:41 ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                parts = parts.updated(\e[31m0\e[0m, c)\n\
    \e[31m\e[31m   |\e[0m                                         ^\e[0m\n\e[31m \
    \  |\e[0m                                         Found:    (c : Char)\n\e[31m\
    \   |\e[0m                                         Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660054862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code here\n        val digits = file_name.filter(x\
    \ => x >=='0' && x <='9').length\n        val dots = file_name.count(_ == '.')\n\
    \        val sub1 = file_name.substring(0, dots)\n        val sub2 = file_name.substring(dots,\
    \ file_name.length)\n        val valid = sub1.filter(_ >= 'a' && _ <= 'z').exists(_\
    \ == sub1)\n        val allowed = sub2.exists(_ match {\n            case x if\
    \ x.equals(\"txt\") || x.equals(\"exe\") || x.equals(\"dll\") => true\n      \
    \      case _ => false\n        })\n        if(digits < 3 || dots != 0 || sub1\
    \ == \"\" || !valid) {\n            return \"No\"\n        } else if(allowed)\
    \ {\n            return \"Yes\"\n        } else {\n            return \"No\"\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp0w26srw7.scala:20:45 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mdigits\e[0m = file_name.filter(\e\
    [36mx\e[0m => x >==\e[31m'0'\e[0m && x <=\e[31m'9'\e[0m).length\n\e[31m\e[31m\
    \   |\e[0m                                           ^^^^^\e[0m\n\e[31m   |\e\
    [0m                                           value >== is not a member of Char\
    \ - did you mean x.==?\n\e[31m\e[31m-- [E086] Syntax Error: /tmp/tmp0w26srw7.scala:24:32\
    \ -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvalid\e[0m = sub1.filter(_\
    \ >= \e[31m'a'\e[0m && _ <= \e[31m'z'\e[0m).exists(_ == sub1)\n\e[31m\e[31m  \
    \ |\e[0m                                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                Wrong number of parameters, expected: 1\n\e\
    [31m\e[31m-- Error: /tmp/tmp0w26srw7.scala:24:61 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mvalid\e[0m = sub1.filter(_\
    \ >= \e[31m'a'\e[0m && _ <= \e[31m'z'\e[0m).exists(_ == sub1)\n\e[31m\e[31m  \
    \ |\e[0m                                                             ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                                         \
    \    Values of types Char and String cannot be compared with == or !=\n3 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660054862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val splitted = file_name.split(\".\")\n    \
    \    val checker = splitted.length >= 2\n        val dotIndex = splitted.length\
    \ - 1\n        val firstLetterIndex = splitted(dotIndex).indexOfFirstLetter()\
    \ + dotIndex\n        val valid = checker && dotIndex >= 0 && firstLetterIndex\
    \ >= 0 && firstLetterIndex <= 25\n        if (valid) {\n            if (splitted(dotIndex).contains(\"\
    .\")) {\n                val checker = splitted(dotIndex).substring(0,1) == \"\
    \\\\\" && splitted(dotIndex).substring(1,2) == \"\\\\\"\n                if (checker)\
    \ return \"No\"\n            }\n        }\n        return \"Yes\"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp6cilck0z.scala:22:50 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfirstLetterIndex\e[0m =\
    \ splitted(dotIndex).indexOfFirstLetter() + dotIndex\n\e[31m\e[31m   |\e[0m  \
    \                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                               value indexOfFirstLetter is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660054861
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = true\n        var isCorrect = false\n\
    \        if (file_name.substring(0,3).matches(\"[0-9]*\") && file_name.substring(0,3).length\
    \ <= 3 &&\n            file_name.substring(0,1) != '.' && file_name.substring(0,1).matches(\"\
    [a-zA-Z]*\"))\n            {\n            val split_file = file_name.split('.');\n\
    \            val first_part = split_file(0);\n            if (first_part.isEmpty)\n\
    \                {\n                valid = false\n                isCorrect =\
    \ false\n                }\n            else\n                {\n            \
    \    val first_part_letter = first_part.substring(0,1);\n                if (!(first_part_letter\
    \ =:= 'a' && first_part_letter <='z' || first_part_letter =:= 'A' && first_part_letter\
    \ <='Z'))\n                    {\n                    valid = false\n        \
    \            isCorrect = false\n                    }\n                }\n   \
    \         if (!valid)\n                {\n                isCorrect = false\n\
    \                }\n            else\n                {\n                val second_part\
    \ = split_file(1);\n                if (second_part.length == 1 || !second_part.contains(\"\
    txt\") && !second_part.contains(\"exe\") && !second_part.contains(\"dll\"))\n\
    \                    {\n                    valid = false\n                  \
    \  isCorrect = false\n                    }\n                }\n            }\n\
    \        if (valid)\n            {\n            isCorrect = \"Yes\"\n        \
    \    }\n        else\n            {\n            isCorrect = \"No\"\n        \
    \    }\n        isCorrect\n        }\n}\n</code>\n<|/ a tags=scala,functional-programming\
    \ |>\n<| c |>\nAs an FYI, this answer is not using Scala idioms.\n<|/ c |>\n<|\
    \ c |>\nYes, I agree. My answer only shows how to solve the task with Scala idioms.\
    \ It's not Scala specific.\n<|/ c |>\n<| a tags=scala,functional-programming dscore=0\
    \ |>\nHere's my take, using Scalaz 7.0.1:\n<code>\nimport scalaz._\nimport Scalaz._\n\
    \ndef checkFileName(f: String => Boolean): String =\n  if (f _ \".\" _ \"*\" _\
    \ \"txt\" |> nonEmpty && f _ \".\" _ \"*\" _ \"exe\" |> nonEmpty && f _ \".\"\
    \ _ \"*\" _ \"dll\" |> nonEmpty) \n    \"Yes\" \n  else \n    \"No\"\n\ncheckFileName(_.toUpperCase)\n\
    </code>\nAnd a version that takes filenames as parameters (in addition to the\
    \ function to be tested):\n<code>\ndef checkFileName(f: String => Boolean, fileName:\
    \ String): String =\n  if (f _ \".\" _ \"*\" _ \"txt\" \n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E103] Syntax Error: /tmp/tmp57k6g_ky.scala:65:0 ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m65 |\e[0m</code>\n\e[31m\e[31m   |\e[0m^^\e[0m\n\e[31m   |\e[0mIllegal\
    \ start of toplevel definition\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E040] Syntax Error:\
    \ /tmp/tmp57k6g_ky.scala:80:10 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m80 |\e[0m  \e[33mif\e[0m (f _ \e[31m\".\"\e[0m _ \e[31m\"*\"\e\
    [0m _ \e[31m\"txt\"\e[0m |> nonEmpty && f _ \e[31m\".\"\e[0m _ \e[31m\"*\"\e[0m\
    \ _ \e[31m\"exe\"\e[0m |> nonEmpty && f _ \e[31m\".\"\e[0m _ \e[31m\"*\"\e[0m\
    \ _ \e[31m\"dll\"\e[0m |> nonEmpty) \n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e\
    [31m   |\e[0m          ')' expected, but string literal found\n\e[31m\e[31m--\
    \ [E103] Syntax Error: /tmp/tmp57k6g_ky.scala:85:0 ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m85 |\e[0mcheckFileName(_.toUpperCase)\n\e[31m\e[31m   |\e[0m^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mIllegal start of toplevel definition\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmp57k6g_ky.scala:90:10 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m90 |\e[0m  \e[33mif\e[0m (f _ \e[31m\".\"\e[0m _ \e[31m\"*\"\e\
    [0m _ \e[31m\"txt\"\e[0m \n\e[31m\e[31m   |\e[0m          ^\e[0m\n\e[31m   |\e\
    [0m          ')' expected, but string literal found\n\e[31m\e[31m-- Error: /tmp/tmp57k6g_ky.scala:22:12\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            file_name.substring(\e[31m0\e[0m,\e[31m1\e\
    [0m) != \e[31m'.'\e[0m && file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m).matches(\e\
    [31m\"[a-zA-Z]*\"\e[0m))\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e["
  stdout: ''
  timestamp: 1660054863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.toLowerCase\n    \
    \    val num_digits =  file_name.count(_ >= '0' && _ <= '9')\n        val dot_loc\
    \ = file_name.indexOf('.') \n        val dot_loc2 = file_name.indexOf('.', dot_loc\
    \ +1)\n        val dot_loc3 = file_name.indexOf('.', dot_loc2 +1)\n        val\
    \ dot_loc4 = file_name.indexOf('.', dot_loc3 +1)\n        val dot_loc5 = file_name.indexOf('.',\
    \ dot_loc4 +1)\n        val dot_loc6 = file_name.indexOf('.', dot_loc5 +1)\n \
    \       val dot_loc7 = file_name.indexOf('.', dot_loc6 +1)\n        val dot_loc8\
    \ = file_name.indexOf('.', dot_loc7 +1)\n        val dot_loc9 = file_name.indexOf('.',\
    \ dot_loc8 +1)\n        val dot_loc10 = file_name.indexOf('.', dot_loc9 +1)\n\
    \        val dot_loc11 = file_name.indexOf('.', dot_loc10 +1)\n        val dot_loc12\
    \ = file_name.indexOf('.', dot_loc11 +1)\n        val dot_loc13 = file_name.indexOf('.',\
    \ dot_loc12 +1)\n        val dot_loc14 = file_name.indexOf('.', dot_loc13 +1)\n\
    \        val dot_loc15 = file_name.indexOf('.', dot_loc14 +1)\n        val dot_loc16\
    \ = file_name.indexOf('.', dot_loc15 +1)\n        val dot_loc17 = file_name.indexOf('.',\
    \ dot_loc16 +1)\n        val dot_loc18 = file_name.indexOf('.', dot_loc17 +1)\n\
    \        val dot_loc19 = file_name.indexOf('.', dot_loc18 +1)\n        val dot_loc20\
    \ = file_name.indexOf('.', dot_loc19 +1)\n        val dot_loc21 = file_name.indexOf('.',\
    \ dot_loc20 +1)\n        val dot_loc22 = file_name.indexOf('.', dot_loc21 +1)\n\
    \        val dot_loc23 = file_name.indexOf('.', dot_loc22 +1)\n        val dot_loc24\
    \ = file_name.indexOf('.', dot_loc23 +1)\n        val dot_loc25 = file_name.indexOf('.',\
    \ dot_loc24 +1)\n        val dot_loc26 = file_name.indexOf('.', dot_loc25 +1)\n\
    \        val dot_loc27 = file_name.indexOf('.', dot_loc26 +1)\n        val dot_loc28\
    \ = file_name.indexOf('.', dot_loc27 +1)\n        val dot_loc29 = file_name.indexOf('.',\
    \ dot_loc28 +1)\n        val dot_loc30 = file_name.indexOf('.', dot_loc29 +1)\n\
    \        val dot_loc31 = file_name.indexOf('.', dot_loc30 +1)\n        val dot_loc32\
    \ = file_name.\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1tdjrp6o.scala:53:4 ------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmp1tdjrp6o.scala:19:24 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp1tdjrp6o.scala:53:5\
    \ -----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m53 |\e[0m    }\n\e[31m\e[31m   |\e[0m     ^\e[0m\n\e[31m   |\e\
    [0m     Found:    Unit\n\e[31m   |\e[0m     Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660054862
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length() > 3 || file_name.substring(0,1).isEmpty){\n\
    \            file_name = \"No\"\n        }\n        else if(file_name.substring(0,1)\
    \ != 'a' || file_name.substring(0,1) != 'b' \n                || file_name.substring(0,1)\
    \ != 'c' || file_name.substring(0,1) != 'd' \n                || file_name.substring(0,1)\
    \ != 'e' || file_name.substring(0,1) != 'f'\n                || file_name.substring(0,1)\
    \ != 'g' || file_name.substring(0,1) != 'h' \n                || file_name.substring(0,1)\
    \ != 'i' || file_name.substring(0,1) != 'j' \n                || file_name.substring(0,1)\
    \ != 'k' || file_name.substring(0,1) != 'l' \n                || file_name.substring(0,1)\
    \ != 'm' || file_name.substring(0,1) != 'n'\n                || file_name.substring(0,1)\
    \ != 'o' || file_name.substring(0,1) != 'p' \n                || file_name.substring(0,1)\
    \ != 'q' || file_name.substring(0,1) != 'r' \n                || file_name.substring(0,1)\
    \ != 's' || file_name.substring(0,1) != 't'\n                || file_name.substring(0,1)\
    \ != 'u' || file_name.substring(0,1) != 'v' \n                || file_name.substring(0,1)\
    \ != 'w' || file_name.substring(0,1) != 'x' \n                || file_name.substring(0,1)\
    \ != 'y' || file_name.substring(0,1) != 'z'){\n            file_name = \"No\"\n\
    \        }\n        else if (!file_name.substring(1,file_name.length).contains(\"\
    .\")){\n            file_name = \"No\"\n        }\n        else{\n           \
    \ file_name = \"Yes\"\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpacdvprqr.scala:20:22 -------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            file_name = \e[31m\"No\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m            ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Reassignment\
    \ to val file_name\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- Error: /tmp/tmpacdvprqr.scala:22:16\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) != \e[31m'a'\e[0m || file_name.substring(\e[31m0\e[0m,\e\
    [31m1\e[0m) != \e[31m'b'\e[0m \n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                Values of types String and Char cannot be\
    \ compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpacdvprqr.scala:22:51 -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) != \e[31m'a'\e[0m || file_name.substring(\e[31m0\e[0m,\e\
    [31m1\e[0m) != \e[31m'b'\e[0m \n\e[31m\e[31m   |\e[0m                        \
    \                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                                                   Values of types String and\
    \ Char cannot be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpacdvprqr.scala:23:19\
    \ -------------------------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                || file_name.substring(\e[31m0\e[0m,\e\
    [31m1\e[0m) != \e[31m'c'\e[0m || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m)\
    \ != \e[31m'd'\e[0m \n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   Values of types String and Char cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpacdvprqr.scala:23:54\
    \ --------------------------"
  stdout: ''
  timestamp: 1660054863
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Implement your solution here\n        val\
    \ pattern = \"\"\"^[0-9]{3,}\\.[a-z]{1,3}\"\"\".r\n        if(file_name == null\
    \ || file_name.length < 1 || pattern.findFirstIn(file_name).getOrElse(\"\") !=\
    \ \"\")\n            \"No\"\n        else\n            \"Yes\"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpu3kozkkv.scala:28)\n\tat Problem.main(tmpu3kozkkv.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result = new Array[String](2)\n        var\
    \ found = 0\n        var error = 0\n        var dot = 0\n        val file_name\
    \ = file_name.toLowerCase()\n        val file_count = file_name.length\n     \
    \   for (i<-0 until file_count){\n            if(file_name(i) == '_'){\n     \
    \           error += 1\n                result += (\"_\")\n            }\n   \
    \         if (file_name(i) > '9' || file_name(i) < '0'){\n                error\
    \ += 1\n                result += (\"_\")\n            }\n            if (file_name(i)\
    \ == '.' && found == 0 && dot != 0){\n                error += 1\n           \
    \     result += (\"_\")\n            }\n            if (file_name(i) == '_'){\n\
    \                found += 1\n            }\n            if (file_name(i) == '.'\
    \ && found == 0){\n                dot += 1\n            }\n        }\n      \
    \  if(file_count == error){\n            result(0) = \"No\"\n        }else{\n\
    \            if(file_count - error == 0){\n                result(0) = \"Yes\"\
    \n            }else{\n                result(0) = \"No\"\n            }\n    \
    \    }\n        result(1) = error\n        return result(0)\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpflqmm96b.scala:23:24 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toLowerCase()\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpflqmm96b.scala:28:23\
    \ --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                result += (\e[31m\"_\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Array[String] - did you mean Array[String].!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpflqmm96b.scala:32:23 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m                result += (\e[31m\"_\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Array[String] - did you mean Array[String].!=?\n\e[31m\e\
    [31m-- [E008] Not Found Error: /tmp/tmpflqmm96b.scala:36:23 --------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m36 |\e[0m                result += (\e[31m\"_\"\e[0m)\n\e[31m\e\
    [31m   |\e[0m                ^^^^^^^^^\e[0m\n\e[31m   |\e[0m                value\
    \ += is not a member of Array[String] - did you mean Array[String].!=?\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmpflqmm96b.scala:54:20 ----------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m54 |\e[0m        result(\e[31m1\e[0m) = error\n\e[31m\e[31m  \
    \ |\e[0m                    ^^^^^\e[0m\n\e[31m   |\e[0m                    Found:\
    \    (error : Int)\n\e[31m   |\e[0m                    Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explai"
  stdout: ''
  timestamp: 1660054863
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code here\n        val parts = file_name.split(\"\
    \\\\.\") // splits file_name at \".\" and returns a List\n        val file_name\
    \ = parts(0) // extracts file_name from List\n        val file_name = file_name.substring(0,1)\
    \ // extracts first letter from file_name\n        val file_name = file_name.substring(0,1)\
    \ // extracts first letter from file_name\n        val check = true\n        for\
    \ (c <- file_name.toCharArray) {\n            if (c.toInt < '0' || c.toInt > '9')\
    \ check = false\n            else if (\"a\"!=\"z\"!=\"A\"!=\"Z\") { check = false;\
    \ break } // if c is not a letter\n        }\n        val check = true\n     \
    \   val parts = file_name.split(\"\\\\.\") // splits file_name at \".\" and returns\
    \ a List\n        val file_name = parts(0) // extracts file_name from List\n \
    \       val file_name = file_name.substring(0,1) // extracts first letter from\
    \ file_name\n        val file_name = file_name.substring(0,1) // extracts first\
    \ letter from file_name\n        if (check) \n            if (file_name != \"\
    exe\" && file_name != \"dll\" && file_name != \"txt\") \n                \"No\"\
    \n            else \"Yes\"\n        else \n            \"No\"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpbnjeok3x.scala:22:12 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) \e[34m// extracts first letter from file_name\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        file_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        Note that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpbnjeok3x.scala:23:12 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) \e[34m// extracts first letter from file_name\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m        file_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0m        Note that overloaded methods must\
    \ all be defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161]\
    \ Naming Error: /tmp/tmpbnjeok3x.scala:29:12 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mval\e[0m \e[36mcheck\e[0m = \e[31mtrue\e\
    [0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \   check is already defined as \e[33mvalue\e[0m \e[35mcheck\e[0m\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m        Note that overloaded methods must all be defined in\
    \ the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmpbnjeok3x.scala:30:12 -----------------------------------------------------------------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mval\e[0m \e[36mparts\e[0m = file_name.split(\e\
    [31m\"\\\\.\"\e[0m) \e[34m// splits file_name at \".\" and returns a List\e[0m\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0"
  stdout: ''
  timestamp: 1660054861
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val splitFileName = file_name.split(\"\\\\.\"\
    ) // Split by \".\"\n        val fileName = splitFileName(0).toLowerCase // First\
    \ string in split by \".\"\n        val dotIndex = fileName.indexOf('.') // Find\
    \ index of \".\"\n        val fileNameWithoutDot = fileName.substring(0, dotIndex).toLowerCase\
    \ // First string before \".\"\n        val fileNameNoDigits = fileNameWithoutDot.replaceAll(\"\
    [0-9]\", \"\") // Delete all \"0\" and \"9\"\n        val fileNameLettersOnly\
    \ = fileNameNoDigits.replaceAll(\"[^a-z]\", \"\") // Delete all chars other than\
    \ \"a\" and \"z\"\n        val fileNameContainsDot = fileNameLettersOnly.contains('.')\
    \ // Check if fileName contains \".\"\n        val fileNameContainsFile = fileName.contains(\"\
    .txt\") || fileName.contains(\".exe\") || fileName.contains(\".dll\")\n      \
    \  if (fileNameNoDigits.length < 1 || fileNameNoDigits.length > 3 || fileNameContainsDot\
    \ || fileNameContainsFile) {\n            return \"No\"\n        }\n        else\
    \ {\n            return \"Yes\"\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.StringIndexOutOfBoundsException: begin 0, end -1, length 7\n\t\
    at java.base/java.lang.String.checkBoundsBeginEnd(String.java:4604)\n\tat java.base/java.lang.String.substring(String.java:2707)\n\
    \tat Problem$.fileNameCheck(tmpi1ow1pwe.scala:22)\n\tat Problem$.main(tmpi1ow1pwe.scala:35)\n\
    \tat Problem.main(tmpi1ow1pwe.scala)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660054863
