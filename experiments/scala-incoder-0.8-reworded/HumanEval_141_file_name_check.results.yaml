language: scala
name: HumanEval_141_file_name_check
results:
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      // Define a pattern to extract the valid file's\
    \ name\n      val pattern = Pattern.compile(\"^[^.]+[.](txt|exe|dll)$\")\n   \
    \   // Define a pattern to extract the substring before the dot\n      val pattern1\
    \ = Pattern.compile(\"^[^.]+\")\n      // Define a pattern to extract the substring\
    \ after the dot\n      val pattern2 = Pattern.compile(\"[.]([^.]+)\")\n      //\
    \ Extract the substring before the dot from the given file name\n      val substr_before_dot\
    \ = pattern1.findFirstIn(file_name)\n      // Extract the substring after the\
    \ dot from the given file name\n      val substr_after_dot = pattern2.findFirstIn(substr_before_dot)\n\
    \      // Extract the valid file's name\n      val file_name = substr_after_dot.group(0)\n\
    \      // Return the result\n      if(file_name.length > 3 && file_name.contains('.')){\n\
    \        if(substr_after_dot.group(0).equals(\".\")){\n          if(file_name.startsWith(\"\
    a\") || file_name.startsWith(\"A\")){\n            if(file_name.endsWith(\".txt\"\
    ) || file_name.endsWith(\".exe\") || file_name.endsWith(\".dll\")){\n        \
    \      return \"Yes\"\n            }\n          }\n          if(file_name.startsWith(\"\
    0\") || file_name.startsWith(\"9\")){\n            if(file_name.endsWith(\".txt\"\
    ) || file_name.endsWith(\".exe\") || file_name.endsWith(\".dll\")){\n        \
    \      return \"Yes\"\n            }\n          }\n        }\n      }\n      \"\
    No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmf3ap8xh.scala:20:20 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m      \e[33mval\e[0m \e[36mpattern\e[0m = Pattern.compile(\e\
    [31m\"^[^.]+[.](txt|exe|dll)$\"\e[0m)\n\e[31m\e[31m   |\e[0m                 \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                    Not found: Pattern\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpmf3ap8xh.scala:22:21 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m      \e[33mval\e[0m \e[36mpattern1\e[0m = Pattern.compile(\e\
    [31m\"^[^.]+\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                     Not found: Pattern\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmpmf3ap8xh.scala:24:21 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m      \e[33mval\e[0m \e[36mpattern2\e[0m = Pattern.compile(\e\
    [31m\"[.]([^.]+)\"\e[0m)\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     Not found: Pattern\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result : String = \"No\"\n        if (file_name.count(_.isDigits)\
    \ < 3){\n            result = \"No\"\n        }else if (file_name.contains(\"\
    .\")){\n            val file_name = file_name.split(\".\").head\n            if\
    \ (file_name.forall(_.matches(\"[a-zA-Z]+\"))) {\n                val file_name\
    \ = file_name.split(\".\").last\n                if (file_name.contains(\"txt\"\
    ) || file_name.contains(\"exe\") || file_name.contains(\"dll\")){\n          \
    \          result = \"Yes\"\n                }else{\n                    result\
    \ = \"No\"\n                }\n            }else{\n                result = \"\
    No\"\n            }\n        }else{\n            result = \"No\"\n        }\n\
    \        return result\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpkzdv_kw0.scala:20:30 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (file_name.count(_.isDigits) <\
    \ \e[31m3\e[0m){\n\e[31m\e[31m   |\e[0m                            ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                            value isDigits is not a member\
    \ of Char\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkzdv_kw0.scala:23:28 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.split(\e\
    [31m\".\"\e[0m).head\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\
    \e[31m   |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpkzdv_kw0.scala:25:32\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                \e[33mval\e\
    [0m \e[36mfile_name\e[0m = file_name.split(\e[31m\".\"\e[0m).last\n\e[31m\e[31m\
    \   |\e[0m                                ^\e[0m\n\e[31m   |\e[0m            \
    \                    Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var status = \"No\";\n        if (file_name.length\
    \ > 3 || file_name.indexOf('.') == -1 || file_name.charAt(0) == '0' || file_name.charAt(0)\
    \ == '9') {\n            status = \"Yes\";\n        }\n        if (file_name.indexOf('.')\
    \ != -1 && file_name.charAt(file_name.indexOf('.') + 1) != '.') {\n          \
    \  status = \"No\";\n        }\n        if (file_name.substring(0, 1) == ('A'\
    \ || 'a' || 'B' || 'b' || 'C' || 'c' || 'D' || 'd' || 'E' || 'e' || 'F' || 'f'\
    \ || 'G' || 'g' || 'H' || 'h' || 'I' || 'i' || 'J' || 'j' || 'K' || 'k' || 'L'\
    \ || 'l' || 'M' || 'm' || 'N' || 'n' || 'O' || 'o' || 'P' || 'p' || 'Q' || 'q'\
    \ || 'R' || 'r' || 'S' || 's' || 'T' || 't' || 'U' || 'u' || 'V' || 'v' || 'W'\
    \ || 'w' || 'X' || 'x' || 'Y' || 'y' || 'Z' || 'z') {\n            status = \"\
    No\";\n        }\n        if (file_name.substring(file_name.indexOf('.') + 1)\
    \ != ('txt' || 'exe' || 'dll')) {\n            status = \"No\";\n        }\n \
    \       return status;\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4n3l58r4.scala:29:8 ----------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m (file_name.substring(file_name.indexOf(\e\
    [31m'.'\e[0m) + \e[31m1\e[0m) != (\e[31m'txt\e[0m' || \e[31m'exe\e[0m' || \e[31m'dll\e\
    [0m')) {\n\e[31m\e[31m   |\e[0m        ^^\e[0m\n\e[31m   |\e[0m        ')' expected,\
    \ but 'if' found\n\e[31m\e[31m-- Error: /tmp/tmp4n3l58r4.scala:29:86 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mif\e[0m (file_name.substring(file_name.indexOf(\e\
    [31m'.'\e[0m) + \e[31m1\e[0m) != (\e[31m'txt\e[0m' || \e[31m'exe\e[0m' || \e[31m'dll\e\
    [0m')) {\n\e[31m\e[31m   |\e[0m                                              \
    \                                        ^\e[0m\n\e[31m   |\e[0m             \
    \                                 unclosed character literal\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmp4n3l58r4.scala:26:46 ------------------------\e[0m\e\
    [0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (file_name.substring(\e[31m0\e[0m, \e\
    [31m1\e[0m) == (\e[31m'A'\e[0m || \e[31m'a'\e[0m || \e[31m'B'\e[0m || \e[31m'b'\e\
    [0m || \e[31m'C'\e[0m || \e[31m'c'\e[0m || \e[31m'D'\e[0m || \e[31m'd'\e[0m ||\
    \ \e[31m'E'\e[0m || \e[31m'e'\e[0m || \e[31m'F'\e[0m || \e[31m'f'\e[0m || \e[31m'G'\e\
    [0m || \e[31m'g'\e[0m || \e[31m'H'\e[0m || \e[31m'h'\e[0m || \e[31m'I'\e[0m ||\
    \ \e[31m'i'\e[0m || \e[31m'J'\e[0m || \e[31m'j'\e[0m || \e[31m'K'\e[0m || \e[31m'k'\e\
    [0m || \e[31m'L'\e[0m || \e[31m'l'\e[0m || \e[31m'M'\e[0m || \e[31m'm'\e[0m ||\
    \ \e[31m'N'\e[0m || \e[31m'n'\e[0m || \e[31m'O'\e[0m || \e[31m'o'\e[0m || \e[31m'P'\e\
    [0m || \e[31m'p'\e[0m || \e[31m'Q'\e[0m || \e[31m'q'\e[0m || \e[31m'R'\e[0m ||\
    \ \e[31m'r'\e[0m || \e[31m'S'\e[0m || \e[31m's'\e[0m || \e[31m'T'\e[0m || \e[31m't'\e\
    [0m || \e[31m'U'\e[0m || \e[31m'u'\e[0m || \e[31m'V'\e[0m || \e[31m'v'\e[0m ||\
    \ \e[31m'W'\e[0m || \e[31m'w'\e[0m || \e[31m'X'\e[0m || \e[31m'x'\e[0m || \e[31m'Y'\e\
    [0m || \e[31m'y'\e[0m || \e[31m'Z'\e[0m || \e[31m'z'\e[0m) {\n\e[31m\e[31m   |\e\
    [0m                                          ^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                    value || is not a member of Char\n\e[33m\e\
    [33m-- [E129] Potential Issue Warning: /tmp/tmp4n3l58r4.scala:64:0 ----------"
  stdout: ''
  timestamp: 1660010681
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name : String = \"No\"\n        var\
    \ first_letter : String = null\n        var dot_counter : Int = 0\n        var\
    \ dot_counter : Int = 0\n        var dot_counter : Int = 0\n        var dot_counter\
    \ : Int = 0\n        var dot_counter : Int = 0\n        var dot_counter : Int\
    \ = 0\n        \n        if(file_name.length() > 3) {\n            file_name =\
    \ null\n        }\n        else {\n            \n            first_letter = file_name.charAt(0)\n\
    \            \n            dot_counter = file_name.lastIndexOf('.')\n        \
    \    \n            if(dot_counter < 0) {\n                file_name = null\n \
    \           }\n            \n            else {\n                dot_counter =\
    \ file_name.lastIndexOf('.', dot_counter + 1)\n                \n            \
    \    if(dot_counter < 0) {\n                    file_name = null\n           \
    \     }\n                \n                else {\n                    dot_counter\
    \ = file_name.indexOf('.')\n                    \n                    if(dot_counter\
    \ < 0) {\n                        file_name = null\n                    }\n  \
    \                  \n                    else {\n                        dot_counter\
    \ = file_name.indexOf('.', dot_counter + 1)\n                        \n      \
    \                  if(dot_counter < 0) {\n                            file_name\
    \ = null\n                        }\n                        \n              \
    \          else {\n                            dot_counter = file_name.indexOf('.',\
    \ dot_counter + 1)\n                            \n                           \
    \ if(dot_counter < 0) {\n                                file_name = null\n  \
    \                          }\n                            \n                 \
    \           else {\n                                dot_counter = file_name.indexOf('.',\
    \ dot_counter + 1)\n                                \n                       \
    \         if(dot_counter < 0) {\n                                    file_name\
    \ = null\n                                }\n                                \n\
    \                                else {\n                                    dot_counter\
    \ = file_name.indexOf('.', dot_counter + 1)\n                                \
    \    \n                                    if(dot_counter < 0) {\n           \
    \                             file_name = null\n                             \
    \       }\n                                    \n                            \
    \        else {\n                                        dot_counter = file_name.indexOf('.',\
    \ dot_counter + 1)\n                                        \n               \
    \                         if(dot_counter < 0) {\n                            \
    \                file_name = null\n                                        }\n\
    \                                        \n                                  \
    \      else {\n                                            dot_counter = file_name.indexOf('.',\
    \ dot_counter + 1)\n                                            \n           \
    \                                 if(dot_counter < 0) {\n                    \
    \                            file_name = null\n                              \
    \              }\n                                            \n             \
    \                               else {\n                                     \
    \           dot_counter = file_name.indexOf('.', dot_counter + 1)\n          \
    \                                      \n                                    \
    \            if(dot_counter < 0) {\n                                         \
    \           file_name = null\n                                               \
    \ }\n                                                \n                      \
    \                          else {\n                                          \
    \          dot_counter = file_name.indexOf('.', dot_counter + 1)\n           \
    \                                         \n                                 \
    \                   if(dot_counter < 0) {\n                                  \
    \                      file_name = null\n                                    \
    \                }\n                                                    \n   \
    \                                                 else {\n                   \
    \                                     dot_counter = file_name.indexOf('.', dot_counter\
    \ + 1)\n                                                        \n           \
    \                                             if(dot_counter < 0) {\n        \
    \                                                    file_name = null\n      \
    \                                                  }\n                       \
    \                                 \n                                         \
    \               else {\n                                                     \
    \       dot_counter = file_name.indexOf('.', dot_counter + 1)\n              \
    \                                              \n                            \
    \                                if(dot_counter < 0) {\n                     \
    \                                           file_name = null\n               \
    \                                             }\n                            \
    \                                \n\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpe7eh9d1c.scala:157:0 ---------------------------\e\
    [0m\e[0m\n\e[31m157 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe7eh9d1c.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdot_counter\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdot_counter is already\
    \ defined as \e[33mvariable\e[0m \e[35mdot_counter\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe7eh9d1c.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdot_counter\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdot_counter is already\
    \ defined as \e[33mvariable\e[0m \e[35mdot_counter\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe7eh9d1c.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdot_counter\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdot_counter is already\
    \ defined as \e[33mvariable\e[0m \e[35mdot_counter\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe7eh9d1c.scala:25:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mdot_counter\e[0m : \e[35mInt\e[0m = \e[31m0\e[0m\n\e[31m\e[31m   |\e[0m\
    \        ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mdot_counter is already\
    \ defined as \e[33mvariable\e[0m \e[35mdot_counter\e[0m\n\e[31m   |\e[0m\n\e[31m\
    \   |\e[0mNote that overloaded methods must all be defined in the same group of\
    \ toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpe7eh9d1c.scala:26:12\
    \ ---------------------------\e[0m\e[0m\n"
  stdout: ''
  timestamp: 1660010684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result : String = \"No\"\n        var index\
    \ : Int = 0\n        var dot_count : Int = 0\n        val file_name = file_name.trim\n\
    \        if (file_name =~ \"^([A-Za-z])+([0-9]+)(\\\\.txt|\\\\.exe|\\\\.dll)$\"\
    ) {\n            index = file_name.indexOf(\".\")\n            if (index >= 0)\
    \ {\n                val dot_index = file_name.indexOf(\".\", index + 1)\n   \
    \             if (dot_index >= 0) {\n                    dot_count = dot_index\
    \ - index\n                    if (dot_count > 3) {\n                        result\
    \ = \"No\"\n                    }\n                    else {\n              \
    \          result = \"Yes\"\n                    }\n                }\n      \
    \      }\n            else {\n                result = \"No\"\n            }\n\
    \        }\n        return result\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpcqzuzljr.scala:22:24 ---------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n         if (!file_name contains '.') \n           \
    \   file_name \n         else if (file_name length <= 3) \n              \"No\"\
    \ \n         else if (!file_name startsWith ('a')) \n              \"No\" \n \
    \        else if (!(file_name contains ('d')) \n              \"No\" \n      \
    \   else if (!(file_name contains ('e')) \n              \"No\" \n         else\
    \ if (!(file_name contains ('x')) \n              \"No\" \n         else if (!(file_name\
    \ contains ('t')) \n              \"No\" \n         else if (!(file_name contains\
    \ ('t')) \n              \"No\"\n         else if (!(file_name contains ('f'))\
    \ \n              \"No\" \n         else if (!(file_name contains ('s')) \n  \
    \            \"No\" \n         else if (!(file_name contains ('r')) \n       \
    \       \"No\" \n         else if (!(file_name contains ('t')) \n            \
    \  \"No\"\n         else \"Yes\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5gtacshx.scala:21:38 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m         \e[33melse\e[0m \e[33mif\e[0m (file_name length\
    \ <= \e[31m3\e[0m) \n\e[31m\e[31m   |\e[0m                                   \
    \   ^\e[0m\n\e[31m   |\e[0m                                 ')' expected, but\
    \ integer literal found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp5gtacshx.scala:26:14\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m              \e[31m\"\
    No\"\e[0m \n\e[31m\e[31m   |\e[0m              ^\e[0m\n\e[31m   |\e[0m       \
    \       ')' expected, but string literal found\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmp5gtacshx.scala:19:13 ------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m         \e[33mif\e[0m (!file_name contains \e[31m'.'\e[0m) \n\e[31m\e\
    [31m   |\e[0m             ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m             value unary_!\
    \ is not a member of String\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp5gtacshx.scala:21:35\
    \ ------------------------\e[0m\e[0m\n\e[31m21 |\e[0m         \e[33melse\e[0m\
    \ \e[33mif\e[0m (file_name length <= \e[31m3\e[0m) \n\e[31m\e[31m   |\e[0m   \
    \                                ^^\e[0m\n\e[31m   |\e[0m                    \
    \               Not found: <=\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp5gtacshx.scala:23:18 ------------------------\e[0m\e[0m\n\e[31m23 |\e\
    [0m         \e[33melse\e[0m \e[33mif\e[0m (!file_name startsWith (\e[31m'a'\e\
    [0m)) \n\e[31m\e[31m   |\e[0m                  ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                  value unary_! is not a member of String\n\e[33m\e[33m-- [E129]\
    \ Potential Issue Warning: /tmp/tmp5gtacshx.scala:75:0 -----------------\e[0m\e\
    [0m\n\e[33m75 |\e[0m}\n\e[33m\e[33m   |\e[0m ^\e[0m\n\e[33m   |\e[0mA pure expression\
    \ does nothing in statement position; you may be omitting necessary parentheses\n\
    \e[33m   |\e[0m\n\e[33m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 warning found\n5 errors found\n"
  stdout: ''
  timestamp: 1660010681
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code goes here\n        val s = file_name.split(\"\
    \\\\.\").length\n        if(s <= 3) \"No\" else \"Yes\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpb4cq9m1v.scala:24)\n\tat Problem.main(tmpb4cq9m1v.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name match {\n            case file_name\
    \ : String if (file_name matches \".*[0-9][0-9]*\" &&\n                      \
    \               file_name matches \".*[A-Za-z].*\" &&\n                      \
    \               file_name contains \".\" && \n                               \
    \      file_name startsWith \"[0-9]\" && \n                                  \
    \   file_name endsWith \"[A-Za-z]\") => \"Yes\"\n            case file_name :\
    \ String if (file_name contains \".\") => \"Yes\"\n            case file_name\
    \ : String if (file_name startsWith \"[0-9]\") => \"Yes\"\n            case file_name\
    \ : String if (file_name endsWith \"[A-Za-z]\") => \"Yes\"\n            case file_name\
    \ : String if (file_name startsWith \"a\" && file_name contains \"b\") => \"Yes\"\
    \n            case file_name : String if (file_name startsWith \"A\" && file_name\
    \ contains \"B\") => \"Yes\"\n            case _ => \"No\"\n        }) \n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1410zez6.scala:32:4 ----------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    'then' expected, but '}' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmp1410zez6.scala:20:74 ------------------------\e[0m\e[0m\n\e[31m20 |\e\
    [0m            \e[33mcase\e[0m file_name : String \e[33mif\e[0m (file_name matches\
    \ \e[31m\".*[0-9][0-9]*\"\e[0m &&\n\e[31m\e[31m   |\e[0m                     \
    \                                     ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \                                      value && is not a member of String\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1410zez6.scala:21:70 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m                                     file_name matches\
    \ \e[31m\".*[A-Za-z].*\"\e[0m &&\n\e[31m\e[31m   |\e[0m                      \
    \                                 ^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m    \
    \                                  value && is not a member of String\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp1410zez6.scala:24:71 --------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                                     file_name endsWith\
    \ \e[31m\"[A-Za-z]\"\e[0m) => \e[31m\"Yes\"\e[0m\n\e[31m\e[31m   |\e[0m      \
    \                                                                 ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                              Found:    (\e[32m\"\
    Yes\"\e[0m : String)\n\e[31m   |\e[0m                                        \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1410zez6.scala:25:67 --------------------\e[0m\e[0m\n\e[31m25\
    \ |\e[0m            \e[33mcase\e[0m file_name : String \e[33mif\e[0m (file_name\
    \ contains \e[31m\".\"\e[0m) => \e[31m\"Yes\"\e[0m\n\e[31m\e[31m   |\e[0m    \
    \                                                               ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                              Found:    (\e[32m\"\
    Yes\"\e[0m : String)\n\e[31m   |\e[0m                                        \
    \      Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e"
  stdout: ''
  timestamp: 1660010684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.trim\n        if(file_name.length()==0)\
    \ {\n            \"No\"\n        }\n        else if(file_name.indexOf(\".\") <\
    \ 0 ) {\n            \"No\"\n        }\n        else if(file_name.substring(0,1)\
    \ < \"a\" || file_name.substring(0,1) > \"z\" ){\n            \"No\"\n       \
    \ }\n        else if(file_name.substring(file_name.length-1)!= \".\" && file_name.substring(0,1).equals(\"\
    .\")){\n            \"No\"\n        }\n        else if(file_name.substring(file_name.length-2)!=\"\
    .\" && file_name.substring(0,1).equals(\".\") && file_name.substring(1,2).equals(\"\
    .\")){\n            \"No\"\n        }\n        else if(file_name.substring(file_name.length-3)!=\"\
    .\" && file_name.substring(0,1).equals(\".\") && file_name.substring(1,2).equals(\"\
    .\") && file_name.substring(2,3).equals(\".\")){\n            \"No\"\n       \
    \ }\n        else if(file_name.substring(file_name.length-4)!=\".\" && file_name.substring(0,1).equals(\"\
    .\") && file_name.substring(1,2).equals(\".\") && file_name.substring(2,3).equals(\"\
    .\") && file_name.substring(3,4).equals(\".\")){\n            \"No\"\n       \
    \ }\n        else if(file_name.substring(file_name.length-5)!=\".\" && file_name.substring(0,1).equals(\"\
    .\") && file_name.substring(1,2).equals(\".\") && file_name.substring(2,3).equals(\"\
    .\") && file_name.substring(3,4).equals(\".\") && file_name.substring(4,5).equals(\"\
    .\")){\n            \"No\"\n        }\n        else if(file_name.substring(file_name.length-6)!=\"\
    .\" && file_name.substring(0,1).equals(\".\") && file_name.substring(1,2).equals(\"\
    .\") && file_name.substring(2,3).equals(\".\") && file_name.substring(3,4).equals(\"\
    .\") && file_name.substring(4,5).equals(\".\") && file_name.substring(5,6).equals(\"\
    .\")){\n            \"No\"\n        }\n        else if(file_name.substring(file_name.length-7)!=\"\
    .\" && file_name.substring(0,1).equals(\".\") && file_name.substring(1,2).equals(\"\
    .\") && file_name.substring(2,3).equals(\".\") && file_name.substring(3,4).equals(\"\
    .\") && file_name.substring(4,5).equals(\".\") && file_name.substring(5,6).equals(\"\
    .\") && file_name.substring(6,7).equals(\".\")){\n            \"No\"\n       \
    \ }\n        else if(file_name.substring(file_name.length-8)!=\".\" && file_name.substring(0,1).\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpi4mdf6po.scala:51:4 ----------------------------\e\
    [0m\e[0m\n\e[31m51 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    an identifier expected, but '}' found\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmpi4mdf6po.scala:19:24 ---------------------------\e[0m\e[0m\n\e[31m19\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010679
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regex = \"\"\"^[0-9]{1,3}\\.[a-z][^\\.]+\\\
    .(txt|exe|dll)$\"\"\".r\n        if(file_name !~ regex) {\n            return\
    \ \"No\"\n        }\n        return \"Yes\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_d74kl8x.scala:20:21 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(file_name !~ regex) {\n\e[31m\e\
    [31m   |\e[0m           ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m         value !~ is\
    \ not a member of String - did you mean file_name.!=?\n1 error found\n"
  stdout: ''
  timestamp: 1660010682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"\"\"(\\d{1,3})\\.(txt|exe|dll)\"\
    \"\".r\n        val matched = file_name.matches(pattern)\n        if(matched)\
    \ (\"Yes\") else (\"No\")\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6ai1etux.scala:20:40\
    \ --------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mmatched\e\
    [0m = file_name.matches(pattern)\n\e[31m\e[31m   |\e[0m                      \
    \                  ^^^^^^^\e[0m\n\e[31m   |\e[0m                         Found:\
    \    (pattern : scala.util.matching.Regex)\n\e[31m   |\e[0m                  \
    \       Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val names = file_name.split(\"\\\\.\") \n  \
    \      val firstName = names(0).split(\"\")\n        if (firstName.length == 0)\n\
    \          return \"No\"\n        if (firstName.length > 3)\n          return\
    \ \"No\"\n        if (!(firstName.head >= 'a' && firstName.head <= 'z') && !(firstName.head\
    \ >= 'A' && firstName.head <= 'Z'))\n          return \"No\"\n        if (!names(1).contains('.')\
    \ || names(1).split('.').head == \"\") \n          return \"No\"\n        if (names(1).split('.').head\
    \ != \"txt\" && names(1).split('.').head != \"exe\" && names(1).split('.').head\
    \ != \"dll\")\n            return \"No\"\n        return \"Yes\"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf2s_ljy_.scala:25:32\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (!(firstName.head\
    \ >= \e[31m'a'\e[0m && firstName.head <= \e[31m'z'\e[0m) && !(firstName.head >=\
    \ \e[31m'A'\e[0m && firstName.head <= \e[31m'Z'\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                ^^^\e[0m\n\e[31m   |\e[0m                   \
    \             Found:    (\e[31m'a'\e[0m : Char)\n\e[31m   |\e[0m             \
    \                   Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmpf2s_ljy_.scala:25:57 --------------------\e[0m\e\
    [0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (!(firstName.head >= \e[31m'a'\e[0m\
    \ && firstName.head <= \e[31m'z'\e[0m) && !(firstName.head >= \e[31m'A'\e[0m &&\
    \ firstName.head <= \e[31m'Z'\e[0m))\n\e[31m\e[31m   |\e[0m                  \
    \                                       ^^^\e[0m\n\e[31m   |\e[0m            \
    \                                      Found:    (\e[31m'z'\e[0m : Char)\n\e[31m\
    \   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpf2s_ljy_.scala:25:85\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (!(firstName.head\
    \ >= \e[31m'a'\e[0m && firstName.head <= \e[31m'z'\e[0m) && !(firstName.head >=\
    \ \e[31m'A'\e[0m && firstName.head <= \e[31m'Z'\e[0m))\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \         ^^^\e[0m\n\e[31m   |\e[0m                                          \
    \        Found:    (\e[31m'A'\e[0m : Char)\n\e[31m   |\e[0m                  \
    \                                Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpf2s_ljy_.scala:25:110 -------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (!(firstName.head >= \e[31m'a'\e\
    [0m && firstName.head <= \e[31m'z'\e[0m) && !(firstName.head >= "
  stdout: ''
  timestamp: 1660010684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n    \timport scala.collection.mutable.ListBuffer\n \
    \       val fileName = file_name // make a local variable that is only used in\
    \ this method\n        val nameChars = fileName.split(\"\").toList\n        //\
    \ Checks to see if there are more than three digits in the file\n        if (nameChars.length\
    \ > 3) {\n            val noDigits = fileName.substring(0, fileName.length-1)\n\
    \            if (nameChars.count(_ > 0) > 2) {\n                return \"No\"\n\
    \            }\n        }\n        // Checks if the name only contains one dot\n\
    \        if (fileName.indexOf('.') == -1) {\n            return \"No\"\n     \
    \   }\n        // Checks to see if the name starts with a letter\n        if (nameChars.count(_\
    \ > 0) < nameChars.length + 1) {\n            return \"No\"\n        }\n     \
    \   // Checks to see if the name contains one of the 3 extensions\n        val\
    \ ext = fileName.substring(fileName.length-3, fileName.length)\n        if (ext\
    \ == \"txt\" || ext == \"exe\" || ext == \"dll\") {\n            return \"Yes\"\
    \n        }\n        return \"No\"\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp90ugblx8.scala:20:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfileName\e[0m = file_name\
    \ \e[34m// make a local variable that is only used in this method\e[0m\n\e[31m\e\
    [31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations of tabs\
    \ and spaces in indentation prefixes.\n\e[31m   |\e[0m   Previous indent : 4 spaces,\
    \ 1 tab\n\e[31m   |\e[0m   Latest indent   : 8 spaces\n\e[31m\e[31m-- Error: /tmp/tmp90ugblx8.scala:21:8\
    \ ------------------------------------------\e[0m\e[0m\n\e[31m21 |\e[0m      \
    \  \e[33mval\e[0m \e[36mnameChars\e[0m = fileName.split(\e[31m\"\"\e[0m).toList\n\
    \e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations\
    \ of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m   Previous indent\
    \ : 4 spaces, 1 tab\n\e[31m   |\e[0m   Latest indent   : 8 spaces\n\e[31m\e[31m--\
    \ Error: /tmp/tmp90ugblx8.scala:23:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        \e[33mif\e[0m (nameChars.length > \e[31m3\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m   Incompatible combinations\
    \ of tabs and spaces in indentation prefixes.\n\e[31m   |\e[0m   Previous indent\
    \ : 4 spaces, 1 tab\n\e[31m   |\e[0m   Latest indent   : 8 spaces\n\e[31m\e[31m--\
    \ Error: /tmp/tmp90ugblx8.scala:30:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m30 |\e[0m        \e[33mif\e[0m (fileName.indexOf(\e[31m'.'\e[0m)\
    \ == -\e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m   |\e[0m  \
    \ Incompatible combinations of tabs and spaces in indentation prefixes.\n\e[31m\
    \   |\e[0m   Previous indent : 4 spaces, 1 tab\n\e[31m   |\e[0m   Latest indent\
    \   : 8 spaces\n\e[31m\e[31m-- Error: /tmp/tmp90ugblx8.scala:34:8 ------------------------------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m        \e[33mif\e[0m (nameChars.count(_ > \e[31m0\e\
    [0m) < nameChars.length + \e[31m1\e[0m) {\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\
    \e[31m   |\e[0m   Incompatible combinations of tabs and spaces in indentation\
    \ prefixes.\n\e[31m   |\e[0m   Previous indent : 4 spaces, 1 tab\n\e[31m   |\e\
    [0m   Latest indent   : 8 spaces\n\e[31m\e[31m-- Error: /tmp/t"
  stdout: ''
  timestamp: 1660010683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_list = file_name.split(\"\")\n    \
    \    if(file_list.length <> 3) {\n            return \"No\"\n        }\n     \
    \   if(file_list.tail.count(x => x == \".\") != 1) {\n            return \"No\"\
    \n        }\n        if(file_list.head == \"\" || file_list.head < 'a' || file_list.head\
    \ > 'z') {\n            return \"No\"\n        }\n        if(file_list.tail.filter(x\
    \ => x !=\".\").filter(x => x != \"txt\" && x != \"exe\" && x != \"dll\").count(x\
    \ => x == \"\") != 1) {\n            return \"No\"\n        }\n        \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpd1tk5sz3.scala:20:28 ------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(file_list.length <> \e[31m3\e[0m)\
    \ {\n\e[31m\e[31m   |\e[0m           ^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \           value <> is not a member of Int - did you mean Int.<<?\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpd1tk5sz3.scala:26:52 --------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m(file_list.head == \e[31m\"\"\e\
    [0m || file_list.head < \e[31m'a'\e[0m || file_list.head > \e[31m'z'\e[0m) {\n\
    \e[31m\e[31m   |\e[0m                                                    ^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (\e[31m'a'\e[0m : Char)\n\e[31m   |\e[0m                                 \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpd1tk5sz3.scala:26:76 --------------------\e[0m\e[0m\n\e[31m26\
    \ |\e[0m        \e[33mif\e[0m(file_list.head == \e[31m\"\"\e[0m || file_list.head\
    \ < \e[31m'a'\e[0m || file_list.head > \e[31m'z'\e[0m) {\n\e[31m\e[31m   |\e[0m\
    \                                                                            ^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (\e[31m'z'\e[0m : Char)\n\e[31m   |\e[0m                                 \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name = null || file_name.length < 3\
    \ || file_name.indexOf('.') != -1 || file_name.substring(0, 1) == '0' || file_name.substring(file_name.lastIndexOf('.')\
    \ + 1).toLowerCase().indexOf(\"a\") == -1){\n             return \"No\"\n    \
    \    }\n        else{\n            val s = file_name.substring(file_name.lastIndexOf('.')\
    \ + 1)\n            val subs = s.split(\",\")\n            if(subs.contains(\"\
    txt\") || subs.contains(\"exe\") || subs.contains(\"dll\")){\n               \
    \ return \"Yes\"\n            }\n            else{\n                return \"\
    No\"\n            }\n        }\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp_isqvplg.scala:19:28 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m(file_name = \e[31mnull\e[0m ||\
    \ file_name.length < \e[31m3\e[0m || file_name.indexOf(\e[31m'.'\e[0m) != -\e\
    [31m1\e[0m || file_name.substring(\e[31m0\e[0m, \e[31m1\e[0m) == \e[31m'0'\e[0m\
    \ || file_name.substring(file_name.lastIndexOf(\e[31m'.'\e[0m) + \e[31m1\e[0m).toLowerCase().indexOf(\e\
    [31m\"a\"\e[0m) == -\e[31m1\e[0m){\n\e[31m\e[31m   |\e[0m                    \
    \   ^^^^^^^\e[0m\n\e[31m   |\e[0m                       value || is not a member\
    \ of Null\n1 error found\n"
  stdout: ''
  timestamp: 1660010682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid = True\n        if(file_name != ''){\n\
    \            if(!file_name.matches(\"[0-9]\")){\n                valid = False\n\
    \            }\n            if(!file_name.contains('.')){\n                valid\
    \ = False\n            }\n            if(!file_name.substring(0, 1).matches(\"\
    [a-zA-Z]\")){\n                valid = False\n            }\n            if(!file_name.substring(1,\
    \ file_name.length).matches(\"(txt|exe|dll)\")){\n                valid = False\n\
    \            }\n        }\n        if(!valid){\n            return \"No\"\n  \
    \      }else{\n            return \"Yes\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmphep_9b3y.scala:20:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m(file_name != ''){\n\e[31m\e[31m\
    \   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                    \
    \    empty character literal\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphep_9b3y.scala:19:20\
    \ ------------------------\e[0m\e[0m\n\e[31m19 |\e[0m        \e[33mvar\e[0m \e\
    [36mvalid\e[0m = True\n\e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmphep_9b3y.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            \e[33mif\e[0m(!file_name.matches(\e[31m\"\
    [0-9]\"\e[0m)){\n\e[31m\e[31m   |\e[0m            ^^\e[0m\n\e[31m   |\e[0m   \
    \         Not found: 'if\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmphep_9b3y.scala:22:24 ------------------------\e[0m\e[0m\n\e[31m22 |\e\
    [0m                valid = False\n\e[31m\e[31m   |\e[0m                      \
    \  ^^^^^\e[0m\n\e[31m   |\e[0m                        Not found: False\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphep_9b3y.scala:25:24 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m                valid = False\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmphep_9b3y.scala:28:24\
    \ ------------------------\e[0m\e[0m\n\e[31m28 |\e[0m                valid = False\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmphep_9b3y.scala:31:24 ------------------------\e[0m\e\
    [0m\n\e[3"
  stdout: ''
  timestamp: 1660010680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^[0-9]{1,3}\\.txt$|^[0-9]{1,3}\\\
    .exe$|^[0-9]{1,3}\\.dll$\"\n        val matcher = pattern.r findFirstIn file_name\n\
    \        matcher.map(fileName => if (fileName != \"\" && fileName.charAt(0) >\
    \ 'a' && fileName.charAt(0) > 'z') \"Yes\" else \"No\")\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp5l44tntm.scala:19:35 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    ^[0-9]{1,3}\\.txt$|^[0-9]{1,3}\\.exe$|^[0-9]{1,3}\\.dll$\"\e[0m\n\e[31m\e[31m\
    \   |\e[0m                                   ^\e[0m\n\e[31m   |\e[0m         \
    \                          invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp5l44tntm.scala:19:53\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"^[0-9]{1,3}\\.txt$|^[0-9]{1,3}\\\
    .exe$|^[0-9]{1,3}\\.dll$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \                              ^\e[0m\n\e[31m   |\e[0m                       \
    \                         invalid escape character\n\e[31m\e[31m-- Error: /tmp/tmp5l44tntm.scala:19:71\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m19 |\e[0m       \
    \ \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"^[0-9]{1,3}\\.txt$|^[0-9]{1,3}\\\
    .exe$|^[0-9]{1,3}\\.dll$\"\e[0m\n\e[31m\e[31m   |\e[0m                       \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                           invalid escape character\n\e[31m\e\
    [31m-- [E007] Type Mismatch Error: /tmp/tmp5l44tntm.scala:21:19 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        matcher.map(\e[36mfileName\e[0m => \e[33mif\e\
    [0m (fileName != \e[31m\"\"\e[0m && fileName.charAt(\e[31m0\e[0m) > \e[31m'a'\e\
    [0m && fileName.charAt(\e[31m0\e[0m) > \e[31m'z'\e[0m) \e[31m\"Yes\"\e[0m \e[33melse\e\
    [0m \e[31m\"No\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Found:    \e[1m\e[31mOption\e[0m\e[1m\e[31m[\e[0mString\e\
    [1m\e[31m]\e[0m\n\e[31m   |\e[0m        Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n4 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regex = \"\"\"^((?!\\d{3})(?!\\.)[a-zA-Z].*\\\
    .[a-zA-Z]{2,3})$\"\"\".r\n        val isFileValid = regex.findFirstIn(file_name).isDefined\n\
    \        val isDotFound = file_name.indexOf('.') != -1\n        val isNotEmpty\
    \ = file_name.nonEmpty\n        val isSingleLetter = file_name.startsWith('a')\n\
    \        val isNotLetter = file_name.startsWith('A')\n        val isValid = \n\
    \            isFileValid &&\n            isDotFound &&\n            isNotEmpty\
    \ &&\n            isSingleLetter &&\n            isNotLetter \n        regex.findFirstIn(file_name).map(str\
    \ => s\"Yes\").getOrElse(s\"No\")\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50u4icqk.scala:23:50\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m \e[36misSingleLetter\e\
    [0m = file_name.startsWith(\e[31m'a'\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                      ^^^\e[0m\n\e[31m   |\e[0m             \
    \                                     Found:    (\e[31m'a'\e[0m : Char)\n\e[31m\
    \   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp50u4icqk.scala:24:47\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36misNotLetter\e\
    [0m = file_name.startsWith(\e[31m'A'\e[0m)\n\e[31m\e[31m   |\e[0m            \
    \                                   ^^^\e[0m\n\e[31m   |\e[0m                \
    \                               Found:    (\e[31m'A'\e[0m : Char)\n\e[31m   |\e\
    [0m                                               Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010683
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        def isValid(name : String) : Boolean = \n  \
    \          name.size <= 3 || name.contains(\".\") && name.substring(0, 1).matches(\"\
    [a-zA-Z]\") &&\n            (name.substring(0,name.lastIndexOf('.')).toSet ==\
    \ Set(\"txt\", \"exe\", \"dll\") || \n            name.substring(0,name.lastIndexOf('.')).toSet\
    \ == Set(\"txt\", \"exe\", \"dll\"))\n        isValid(file_name) ? \"Yes\" : \"\
    No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpljlnkysw.scala:21:13 -----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            (name.substring(\e[31m0\e[0m,name.lastIndexOf(\e\
    [31m'.'\e[0m)).toSet == Set(\e[31m\"txt\"\e[0m, \e[31m\"exe\"\e[0m, \e[31m\"dll\"\
    \e[0m) || \n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Set[Char] and scala.collection.mutable.Set[String]\
    \ cannot be compared with == or !=.\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m    CanEqual.canEqualSet[\e[35mT\e[0m, \e[35mU\e[0m](/* missing\
    \ */summon[CanEqual[T, U]])\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values\
    \ were found that match type CanEqual[T, U].\n\e[31m\e[31m-- Error: /tmp/tmpljlnkysw.scala:22:12\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m22 |\e[0m       \
    \     name.substring(\e[31m0\e[0m,name.lastIndexOf(\e[31m'.'\e[0m)).toSet == Set(\e\
    [31m\"txt\"\e[0m, \e[31m\"exe\"\e[0m, \e[31m\"dll\"\e[0m))\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mValues of types Set[Char] and scala.collection.mutable.Set[String]\
    \ cannot be compared with == or !=.\n\e[31m   |\e[0mI found:\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m    CanEqual.canEqualSet[\e[35mT\e[0m, \e[35mU\e[0m](/* missing\
    \ */summon[CanEqual[T, U]])\n\e[31m   |\e[0m\n\e[31m   |\e[0mBut no implicit values\
    \ were found that match type CanEqual[T, U].\n\e[31m\e[31m-- [E008] Not Found\
    \ Error: /tmp/tmpljlnkysw.scala:23:27 ------------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m        isValid(file_name) ? \e[31m\"Yes\"\e[0m : \e[31m\"No\"\e[0m\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m        value\
    \ ? is not a member of Boolean\n3 errors found\n"
  stdout: ''
  timestamp: 1660010684
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n    \tif (file_name.length() > 3 || file_name.lastIndexOf('.')\
    \ < 0 || file_name.substring(0, 1).isEmpty) {\n    \t\treturn \"No\"\n    \t}\n\
    \    \tvar dot : String = _\n    \tvar file_name : String = _\n    \tvar dot_pos\
    \ : int = -1\n    \tfor (i <- 1 to file_name.length-1) {\n    \t\tif (file_name(i)\
    \ != '.') return \"No\"\n    \t}\n    \tfor (i <- 1 to file_name.length-1) {\n\
    \    \t\tif (file_name(i) != '.') {\n    \t\t\tdot_pos = i\n    \t\t\tbreak\n\
    \    \t\t}\n    \t}\n    \tif (dot_pos == -1) dot = \".\"\n    \telse {\n    \t\
    \tfor (i <- 1 to dot_pos) {\n    \t\t\tif (file_name(i) < 'a' || file_name(i)\
    \ > 'z') return \"No\"\n    \t\t}\n    \t}\n    \tif (file_name.substring(dot_pos+1).matches(\"\
    txt|exe|dll\")) return \"Yes\"\n    \telse return \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp87f6g0ys.scala:24:22 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m    \t\e[33mvar\e[0m \e[36mdot_pos\e[0m : \e[35mint\e\
    [0m = -\e[31m1\e[0m\n\e[31m\e[31m   |\e[0m    \t              ^^^\e[0m\n\e[31m\
    \   |\e[0m    \t              Not found: type int\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp87f6g0ys.scala:31:8 -------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m    \t\t\tbreak\n\e[31m\e[31m   |\e[0m    \t\t\t^^^^^\e\
    [0m\n\e[31m   |\e[0m    \t\t\tNot found: break\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010680
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val index = fileName.lastIndexOf('.')\n    \
    \    if (index == -1) {\n            \"No\"\n        } else {\n            if\
    \ (index == 0 || fileName.substring(0,1) == \"\") {\n                \"No\"\n\
    \            } else if(fileName.substring(0,1) < 'a' || fileName.substring(0,1)\
    \ > 'z') {\n                \"No\"\n            } else if(fileName.substring(0,1)\
    \ > 'a' && fileName.substring(0,1) < 'z') {\n                \"No\"\n        \
    \    } else if(fileName.substring(0,2) == \"..\") {\n                \"No\"\n\
    \            } else if(fileName.substring(index) <> \"txt\" && fileName.substring(index)\
    \ <> \"exe\" && fileName.substring(index) <> \"dll\") {\n                \"No\"\
    \n            } else if(fileName.substring(index,2) == \"..\") {\n           \
    \     \"No\"\n            } else {\n                \"Yes\"\n            }\n \
    \       }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_3sfxqz.scala:19:20 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mindex\e[0m = fileName.lastIndexOf(\e\
    [31m'.'\e[0m)\n\e[31m\e[31m   |\e[0m                    ^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                    Not found: fileName\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmpk_3sfxqz.scala:25:22 ------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(fileName.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) < \e[31m'a'\e[0m || fileName.substring(\e[31m0\e[0m,\e\
    [31m1\e[0m) > \e[31m'z'\e[0m) {\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: fileName\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_3sfxqz.scala:27:22 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(fileName.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) > \e[31m'a'\e[0m && fileName.substring(\e[31m0\e[0m,\e\
    [31m1\e[0m) < \e[31m'z'\e[0m) {\n\e[31m\e[31m   |\e[0m                      ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                      Not found: fileName\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_3sfxqz.scala:29:22 ------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            } \e[33melse\e[0m \e[33mif\e[0m(fileName.substring(\e\
    [31m0\e[0m,\e[31m2\e[0m) == \e[31m\"..\"\e[0m) {\n\e[31m\e[31m   |\e[0m      \
    \                ^^^^^^^^\e[0m\n\e[31m   |\e[0m                      Not found:\
    \ fileName\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpk_3sfxqz.scala:31:22\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m            } \e[33melse\e\
    [0m \e[33mif\e[0m(fileName.substring(index) <> \e[31m\"txt\"\e[0m && fileName.substring(index)\
    \ <> \e[31m\"exe\"\e[0m && fileName.substring(index) <> \e[31m\"dll\"\e[0m) {\n\
    \e[31m\e[31m   |\e[0m              "
  stdout: ''
  timestamp: 1660010678
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.substring(0,file_name.lastIndexOf('.')-1)\n\
    \        if (file_name.length==3 && file_name.substring(0,1).equals('0') && file_name.substring(0,1)\
    \ !='9' ) \n            return (\"No\")\n        else if (file_name.contains('.')==false\
    \ && file_name.substring(0,1).equals('a') && file_name.substring(0,1) !='z' &&\
    \ file_name.substring(0,1) !='A') \n            return (\"No\")\n        else\
    \ if (file_name.contains('.')==true && file_name.substring(0,1).equals('0') &&\
    \ file_name.substring(0,1) !='9' ) \n            return (\"No\")\n        else\
    \ \n            return (\"Yes\")\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp0dnpodxw.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.substring(\e\
    [31m0\e[0m,file_name.lastIndexOf(\e[31m'.'\e[0m)-\e[31m1\e[0m)\n\e[31m\e[31m \
    \  |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                     \
    \   Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010678
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name == \"\" || file_name.length() !=\
    \ 6){\n          return \"No\"\n        }\n        \n        var file_extension\
    \ = file_name.substring(file_name.lastIndexOf('.') + 1)\n        \n        if(file_extension.equals(\"\
    exe\") || file_extension.equals(\"dll\") || file_extension.equals(\"txt\")){\n\
    \          return \"Yes\"\n        } else {\n          return \"No\"\n       \
    \ }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmprgs9q7gb.scala:32)\n\tat Problem.main(tmprgs9q7gb.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010682
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name.matches(\"[0-9]{3}\")){\n     \
    \       if(file_name.contains(\".\")){\n                if(file_name.indexOf(\"\
    .\") > 1)\n                    return \"No\"\n                else if(file_name.charAt(0).toUpperCase\
    \ == (file_name.charAt(0).toLowerCase))\n                    return \"No\"\n \
    \               else\n                    return \"Yes\"\n            }\n    \
    \    }\n        else\n            return \"No\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsqr1aikw.scala:23:44 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                \e[33melse\e[0m \e[33mif\e[0m(file_name.charAt(\e\
    [31m0\e[0m).toUpperCase == (file_name.charAt(\e[31m0\e[0m).toLowerCase))\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                        value toUpperCase is not a member of Char\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // write your code here\n        val file_list\
    \ = file_name.split(\"\\\\.\").map(_.head.toInt)\n        val file_name = file_name.split(\"\
    \\\\.\").last\n        val result = if (file_name.length() > 3) \"Yes\" else \"\
    No\"\n        val dot_name = file_list.last.substring(0,1)\n        val file_name\
    \ = file_list.last.substring(1,file_list.length-1)\n        val ext = file_list.last.substring(file_list.length-1,file_list.length)\n\
    \        if (dot_name == \".\" && file_name != \"exe\" && file_name != \"dll\"\
    ) \"Yes\" else \"No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpd1f6siy2.scala:24:12 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_list.last.substring(\e\
    [31m1\e[0m,file_list.length-\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic\
    \ Error: /tmp/tmpd1f6siy2.scala:21:24 ---------------------------\e[0m\e[0m\n\e\
    [31m21 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.split(\e\
    [31m\"\\\\.\"\e[0m).last\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\
    \e[31m   |\e[0m                        Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010686
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var flag = false\n        var file_name = file_name.trim()\n\
    \        var temp_name = \"\"\n        var extension = \"\"\n        var dot_count\
    \ = 0\n        val file_name = file_name.trim()\n        // if file name is more\
    \ than 3 characters long, return \"No\"\n        if (file_name.length() <= 3)\
    \ {\n            flag = false\n        }\n        // if the file name is only\
    \ contains one dot ('.'), return \"No\"\n        else if (file_name.indexOf(\"\
    .\") == -1) {\n            flag = false\n        }\n        // if the file name\
    \ contains only empty substring, return \"No\"\n        else if (file_name.trim.isEmpty)\
    \ {\n            flag = false\n        }\n        // if the file name doesn't\
    \ start with a letter from the latin alphabet or \n        // doesn't end with\
    \ one of these strings(['txt', 'exe', 'dll']), return \"No\"\n        else if\
    \ (file_name.trim.length > 3 || file_name.trim.startsWith(\"a\") || file_name.trim.startsWith(\"\
    b\") || file_name.trim.startsWith(\"c\") || file_name.trim.startsWith(\"d\") ||\
    \ file_name.trim.startsWith(\"e\") || file_name.trim.startsWith(\"f\") || file_name.trim.startsWith(\"\
    g\") || file_name.trim.startsWith(\"h\") || file_name.trim.startsWith(\"i\") ||\
    \ file_name.trim.startsWith(\"j\") || file_name.trim.startsWith(\"k\") || file_name.trim.startsWith(\"\
    l\") || file_name.trim.startsWith(\"m\") || file_name.trim.startsWith(\"n\") ||\
    \ file_name.trim.startsWith(\"o\") || file_name.trim.startsWith(\"p\") || file_name.trim.startsWith(\"\
    q\") || file_name.trim.startsWith(\"r\") || file_name.trim.startsWith(\"s\") ||\
    \ file_name.trim.startsWith(\"t\") || file_name.trim.startsWith(\"u\") || file_name.trim.startsWith(\"\
    v\") || file_name.trim.startsWith(\"w\") || file_name.trim.startsWith(\"x\") ||\
    \ file_name.trim.startsWith(\"y\") || file_name.trim.startsWith(\"z\")) {\n  \
    \          flag = false\n        }\n        // if the file name doesn't contain\
    \ '.', return \"No\"\n        else if (file_name.indexOf('.') > -1) {\n      \
    \      flag = false\n        }\n        else {\n            temp_name = file_name.substring(0)\n\
    \            // count the number of dots in the file name\n            dot_count\
    \ = temp_name.lastIndexOf(\".\")\n            // if dot_count is equal to 0\n\
    \            if (dot_count == -1) {\n                temp_name = temp_name.substring(1)\n\
    \                // if file name contains any extension, get the extension name\n\
    \                if (temp\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplbmio30r.scala:55:4 ----------------------------\e\
    [0m\e[0m\n\e[31m55 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    ')' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmplbmio30r.scala:86:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m86 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmplbmio30r.scala:24:12 ---------------------------\e[0m\e[0m\n\e\
    [31m24 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.trim()\n\e\
    [31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e[0m\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E045] Cyclic Error:\
    \ /tmp/tmplbmio30r.scala:20:24 ---------------------------\e[0m\e[0m\n\e[31m20\
    \ |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name.trim()\n\e[31m\e\
    [31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m                 \
    \       Recursive \e[33mvariable\e[0m \e[35mfile_name\e[0m needs type\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmplbmio30r.scala:27:17 --------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m            flag = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e\
    [0m            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Unit\n\e\
    [31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplbmio30r.scala:31:17 --------------------\e[0m\e\
    [0m\n\e[31m31 |\e[0m            flag = \e[31mfalse\e[0m\n\e[31m\e[31m   |\e[0m\
    \            ^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m            Found:    Unit\n\e\
    [31m   |\e[0m            Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E007]\
    \ Type Mismatch Error: /tmp/tmplbmio30r.scala:35:17 --------------------\e[0m\e\
    [0m\n\e[31m35 |\e[0m     "
  stdout: ''
  timestamp: 1660010691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      val splitName = file_name.split(\"\\\\.\")\n \
    \     if (splitName.length > 2) {\n        if (splitName(0) matches \"^[a-z]+$\"\
    \ && splitName(1) != \"\") {\n          if (splitName(2) matches \"^(exe|dll)$\"\
    ) {\n            return \"Yes\"\n          } else {\n            return \"No\"\
    \n          }\n        } else {\n          return \"No\"\n        }\n      } else\
    \ {\n        return \"No\"\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpm3zznbwk.scala:21:44 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m (splitName(\e[31m0\e[0m) matches\
    \ \e[31m\"^[a-z]+$\"\e[0m && splitName(\e[31m1\e[0m) != \e[31m\"\"\e[0m) {\n\e\
    [31m\e[31m   |\e[0m                                 ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                                 value && is not a member of String\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010689
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Only change code below this line\n      \
    \  if( file_name.contains(\".\")){\n            if( !file_name.substring(0,1).matches(\"\
    [a-z]\") ||\n               file_name.substring(0,1).matches(\"[A-Z]\")){\n  \
    \              return \"No\"\n            } else{\n                return \"Yes\"\
    \n            }\n        } else{\n            return \"No\"\n        }\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp9w383ihq.scala:34)\n\tat Problem.main(tmp9w383ihq.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010691
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var flag = file_name match {\n            case\
    \ \"\" => \"No Name\"\n            case _ => true\n        }\n        var name\
    \ = file_name\n        var counter = 0;\n        var letter_index = 0;\n     \
    \   while (name.length > 0) {\n            letter_index = 0\n            while\
    \ (name.charAt(0) < '0' || name.charAt(0) > '9') {\n                letter_index\
    \ += 1\n                name =  name.substring(letter_index)\n            }\n\
    \            name =  name.substring(0,letter_index)\n            if (flag == true)\
    \ {\n                if (name.contains(\".\") == true) {\n                   \
    \ name =  name.substring(0,name.lastIndexOf(\".\"))\n                }\n     \
    \           if (name.length != 3) {\n                    name = \"No Name\"\n\
    \                }\n                if (name != \"No Name\" && name.charAt(0)\
    \ < 'a' || name.charAt(0) > 'z') {\n                    name = \"No Name\"\n \
    \               }\n                if (name != \"No Name\" && name.charAt(name.length-1)\
    \ < 'a' || name.charAt(name.length-1) > 'z') {\n                    name = \"\
    No Name\"\n                }\n                counter = counter + 1;\n       \
    \         if (counter > 3) {\n                    flag = \"No\"\n            \
    \    }\n            }\n        }\n        return flag\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmppijpeb3q.scala:52:15\
    \ --------------------\e[0m\e[0m\n\e[31m52 |\e[0m        \e[33mreturn\e[0m flag\n\
    \e[31m\e[31m   |\e[0m               ^^^^\e[0m\n\e[31m   |\e[0m               Found:\
    \    (flag : Matchable)\n\e[31m   |\e[0m               Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010691
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val len = file_name.length\n        if (len\
    \ >= 3 && file_name.contains(\".\") && file_name.substring(0,1).matches(\"[a-zA-Z]\"\
    ) && file_name.substring(len-2,len).contains(\"txt|exe|dll\"))\n            \"\
    Yes\"\n        else\n            \"No\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpp0w0sxuc.scala:26)\n\tat Problem.main(tmpp0w0sxuc.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileName = file_name.trim()\n        var\
    \ check = False\n        if (fileName.length() > 3 && !fileName.contains(\".\"\
    )){\n            check = True\n        }\n        if (fileName.contains(\".\"\
    )){\n            check = True\n        }\n        if (check){\n            for\
    \ (i <- 0 to fileName.length() - 1) {\n                val letter = fileName.charAt(i)\n\
    \                val alphaNum = letter.toInt\n                if (letter.isLetter\
    \ && alphaNum >= 'a' && alphaNum <= 'z' || letter.isLetter && alphaNum >= 'A'\
    \ && alphaNum <= 'Z'){\n                }\n                else{\n           \
    \         check = False\n                }\n            }\n        }\n       \
    \ if (check){\n            check = True\n        }\n        if (check){\n    \
    \        for (i <- 0 to fileName.length() - 1) {\n                val letter =\
    \ fileName.charAt(i)\n                val alphaNum = letter.toInt\n          \
    \      if (letter.isLetter && alphaNum >= 'a' && alphaNum <= 'z' || letter.isLetter\
    \ && alphaNum >= 'A' && alphaNum <= 'Z'){\n                }\n               \
    \ else{\n                    check = False\n                }\n            }\n\
    \        }\n        if (check){\n            check = True\n        }\n       \
    \ if (check){\n            for (i <- 0 to fileName.length() - 1) {\n         \
    \       val letter = fileName.charAt(i)\n                val alphaNum = letter.toInt\n\
    \                if (letter.isLetter && alphaNum >= 'a' && alphaNum <= 'z' ||\
    \ letter.isLetter && alphaNum >= 'A' && alphaNum <= 'Z'){\n                }\n\
    \                else{\n                    check = False\n                }\n\
    \            }\n        }\n        if (check){\n            check = True\n   \
    \     }\n        if (check){\n            for (i <- 0 to fileName.length() - 1)\
    \ {\n                val letter = fileName.charAt(i)\n                val alphaNum\
    \ = letter.toInt\n                if (letter.isLetter && alphaNum >= 'a' && alphaNum\
    \ <= 'z' || letter.isLetter && alphaNum >= 'A' && alphaNum <= 'Z'){\n        \
    \        }\n                else{\n                    check = False\n       \
    \         }\n            }\n        }\n        if (check){\n            check\
    \ = True\n        }\n        if (check){\n            for (i <- 0 to fileName.length()\
    \ - 1) {\n                val letter = fileName.charAt(i)\n                val\
    \ alphaNum = letter.toInt\n                if (letter.isLetter && alphaNum >=\
    \ 'a' && alphaNum <= 'z' || letter.isLetter && alphaNum >= 'A' && alphaNum <=\
    \ 'Z'){\n                }\n                else{\n                    check =\
    \ False\n                }\n            }\n        }\n        if (check){\n\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3sw_ib3e.scala:127:0 ---------------------------\e\
    [0m\e[0m\n\e[31m127 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3sw_ib3e.scala:20:20\
    \ ------------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e\
    [36mcheck\e[0m = False\n\e[31m\e[31m   |\e[0m                    ^^^^^\e[0m\n\e\
    [31m   |\e[0m                    Not found: False\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp3sw_ib3e.scala:22:20 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m            check = True\n\e[31m\e[31m   |\e[0m     \
    \               ^^^^\e[0m\n\e[31m   |\e[0m                    Not found: True\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3sw_ib3e.scala:25:20\
    \ ------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            check = True\n\
    \e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3sw_ib3e.scala:34:28 ------------------------\e[0m\e[0m\n\e[31m34 |\e\
    [0m                    check = False\n\e[31m\e[31m   |\e[0m                  \
    \          ^^^^^\e[0m\n\e[31m   |\e[0m                            Not found: False\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp3sw_ib3e.scala:39:20\
    \ ------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            check = True\n\
    \e[31m\e[31m   |\e[0m                    ^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Not found: True\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmp3sw_ib3e.scala:48:28 ------------------------\e[0m\e[0m\n\e[31m48 |\e\
    [0m                    check = False\n\e[31m\e[31m   |\e[0m                  \
    \          ^^^^^\e[0m\n\e[31m   |\e[0"
  stdout: ''
  timestamp: 1660010694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val split_name = file_name.split(\"\\\\.\")\n\
    \        if (split_name.length != 3 || split_name(0).isEmpty) {\n            return\
    \ \"No\"\n        }\n        if (split_name(1).isEmpty) {\n            return\
    \ \"No\"\n        }\n        if (!(split_name(1) match {\n            case s if\
    \ s.head < 'a' || s.head > 'z' =>\n                \"No\"\n            case s\
    \ if s.head < 'A' || s.head > 'Z' =>\n                \"No\"\n            case\
    \ s =>\n                \"Yes\"\n            })) {\n            return \"No\"\n\
    \        }\n        if (split_name(2) != \"exe\" && split_name(2) != \"dll\")\
    \ {\n            return \"No\"\n        }\n        return \"Yes\"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpzrqv6n64.scala:26:12 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33mif\e[0m (!(split_name(\e[31m1\e[0m) \e\
    [33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e[0m   \
    \  value unary_! is not a member of (\e[32m\"No\"\e[0m : String) | (\e[32m\"Yes\"\
    \e[0m : String)\n\e[31m27 |\e[0m            \e[33mcase\e[0m s \e[33mif\e[0m s.head\
    \ < \e[31m'a'\e[0m || s.head > \e[31m'z'\e[0m =>\n\e[31m28 |\e[0m            \
    \    \e[31m\"No\"\e[0m\n\e[31m29 |\e[0m            \e[33mcase\e[0m s \e[33mif\e\
    [0m s.head < \e[31m'A'\e[0m || s.head > \e[31m'Z'\e[0m =>\n\e[31m30 |\e[0m   \
    \             \e[31m\"No\"\e[0m\n\e[31m31 |\e[0m            \e[33mcase\e[0m s\
    \ =>\n\e[31m32 |\e[0m                \e[31m\"Yes\"\e[0m\n\e[31m33 |\e[0m     \
    \       })) {\n1 error found\n"
  stdout: ''
  timestamp: 1660010693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name.toLowerCase\n    \
    \    val length = file_name.length\n        val hasNumber = (length < 40 || length.startsWith(\"\
    0\") || length.startsWith(\".\"))\n        val hasDot = file_name contains '.'\n\
    \        val dotIndex = file_name lastIndexOf '.'\n        val isLetter = file_name\
    \ contains 'a' || 'b' || 'c' || 'd' || 'e' || 'f' || 'g' || 'h' || 'i' || 'j'\
    \ || 'k' || 'l' || 'm' || 'n' || 'o' || 'p' || 'q' || 'r' || 's' || 't' || 'u'\
    \ || 'v' || 'w' || 'x' || 'y' || 'z'\n        val isTxt = file_name contains \"\
    txt\" || \"txt\" || \"txt\"\n        val isExe = file_name contains \"exe\" ||\
    \ \"exe\" || \"exe\" || \"exe\"\n        val isDll = file_name contains \"dll\"\
    \ || \"dll\" || \"dll\"\n        if (hasNumber || hasDot || dotIndex == -1 ||\
    \ !isLetter || !isTxt || !isExe || !isDll) {\n            return \"No\"\n    \
    \    }\n        return \"Yes\"\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpwy8i7yul.scala:19:24 ---------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toLowerCase\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs type\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010690
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length > 3) {\n            //\
    \ if file_name.length > 3, then \n            //    1) check that file_name.split('.').length\
    \ == 1\n            //    2) check that file_name.split('.')(0) !=\"\" and file_name.split('.')(0).matches('^[a-zA-z]$')\n\
    \            //    3) check that file_name.split('.')(1) !=\"exe\" and file_name.split('.')(1)\
    \ != \"dll\"\n            \"No\" \n        } else {\n            // if file_name.length\
    \ < 3, then \n            //    1) check that file_name.split('.').length == 2\n\
    \            //    2) check that file_name.split('.')(0) !=\"\" and file_name.split('.')(0).matches('^[a-zA-z]$')\n\
    \            //    3) check that file_name.split('.')(1) !=\"exe\" and file_name.split('.')(1)\
    \ != \"dll\"\n            \"Yes\" \n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpdx1cn49c.scala:34)\n\tat Problem.main(tmpdx1cn49c.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010693
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"^\\\\d{0,3}\\\\.[a-zA-Z]{1}$\"\
    \n        val pattern2 = \"^[a-zA-Z]{1}$\"\n        val pattern3 = \"^[a-z]{1}$\"\
    \n        if(file_name.matches(pattern)){\n            return \"Yes\"\n      \
    \  }\n        else if(file_name.matches(pattern2)){\n            return \"No\"\
    \n        }\n        else if(file_name.matches(pattern3)){\n            return\
    \ \"No\"\n        }\n        else return \"No\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpwog_mm1d.scala:34)\n\tat Problem.main(tmpwog_mm1d.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010693
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length > 3) {\n            val\
    \ file_name = file_name.dropRight(3).dropLeft(1)\n            file_name match\
    \ {\n                case \"\" => return \"No\"\n                case _ => return\
    \ \"Yes\"\n            }\n        }\n        file_name match {\n            case\
    \ \".\" => return \"No\"\n            case _ => return \"Yes\"\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj_4j7m3x.scala:20:28 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.dropRight(\e\
    [31m3\e[0m).dropLeft(\e[31m1\e[0m)\n\e[31m\e[31m   |\e[0m                    \
    \        ^\e[0m\n\e[31m   |\e[0m                            Recursive \e[33mvalue\e\
    [0m \e[35mfile_name\e[0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010689
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val dotpos = file_name.indexOf(\".\")\n    \
    \    if(dotpos == -1) \n            No\n        else if(file_name.substring(0,dotpos)\
    \ == \"\") \n            No\n        else if(file_name.substring(0,dotpos) not\
    \ in  ('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z')\
    \ && \n                file_name.substring(dotpos,dotpos + 2) in List(\"txt\"\
    ,\"exe\",\"dll\") \n             ) \n            No\n        else\n          \
    \  Yes\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp87p2c6ud.scala:21:12 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m            No\n\e[31m\e[31m   |\e[0m            ^^\e\
    [0m\n\e[31m   |\e[0m            Not found: No\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E006] Not Found Error: /tmp/tmp87p2c6ud.scala:23:12 ------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            No\n\e[31m\e[31m   |\e[0m            ^^\e\
    [0m\n\e[31m   |\e[0m            Not found: No\n\e[31m   |\e[0m\n\e[31m   |\e[0m\
    \ longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmp87p2c6ud.scala:24:46 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(file_name.substring(\e\
    [31m0\e[0m,dotpos) not in  (\e[31m'a'\e[0m,\e[31m'b'\e[0m,\e[31m'c'\e[0m,\e[31m'd'\e\
    [0m,\e[31m'e'\e[0m,\e[31m'f'\e[0m,\e[31m'g'\e[0m,\e[31m'h'\e[0m,\e[31m'i'\e[0m,\e\
    [31m'j'\e[0m,\e[31m'k'\e[0m,\e[31m'l'\e[0m,\e[31m'm'\e[0m,\e[31m'n'\e[0m,\e[31m'o'\e\
    [0m,\e[31m'p'\e[0m,\e[31m'q'\e[0m,\e[31m'r'\e[0m,\e[31m's'\e[0m,\e[31m't'\e[0m,\e\
    [31m'u'\e[0m,\e[31m'v'\e[0m,\e[31m'w'\e[0m,\e[31m'x'\e[0m,\e[31m'y'\e[0m,\e[31m'z'\e\
    [0m) && \n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value not is not a member of String\n\e[31m\e\
    [31m-- [E006] Not Found Error: /tmp/tmp87p2c6ud.scala:24:50 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(file_name.substring(\e\
    [31m0\e[0m,dotpos) not in  (\e[31m'a'\e[0m,\e[31m'b'\e[0m,\e[31m'c'\e[0m,\e[31m'd'\e\
    [0m,\e[31m'e'\e[0m,\e[31m'f'\e[0m,\e[31m'g'\e[0m,\e[31m'h'\e[0m,\e[31m'i'\e[0m,\e\
    [31m'j'\e[0m,\e[31m'k'\e[0m,\e[31m'l'\e[0m,\e[31m'm'\e[0m,\e[31m'n'\e[0m,\e[31m'o'\e\
    [0m,\e[31m'p'\e[0m,\e[31m'q'\e[0m,\e[31m'r'\e[0m,\e[31m's'\e[0m,\e[31m't'\e[0m,\e\
    [31m'u'\e[0m,\e[31m'v'\e[0m,\e[31m'w'\e[0m,\e[31m'x'\e[0m,\e[31m'y'\e[0m,\e[31m'z'\e\
    [0m) && \n\e[31m\e[31m   |\e[0m                                              \
    \    ^^\e[0m\n\e[31m   |\e[0m                                                \
    \  Not found: in\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E"
  stdout: ''
  timestamp: 1660010694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name == null) {\n          \"No\"\n\
    \        }\n        else {\n          val pattern = \"[0-9]{1,3}\\\\.[a-zA-Z]+\"\
    \n          val pattern1 = \"^[a-zA-Z]+\"\n          val pattern2 = \"^[a-zA-Z]+$\"\
    \n          val pattern3 = \"^[a-zA-Z]+.[a-zA-Z]+$\"\n          val pattern4 =\
    \ \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+\"\n          val pattern5 = \"^[a-zA-Z0-9]+\\\\\
    .[a-zA-Z]+$\"\n          val pattern6 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n   \
    \       val pattern7 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern8\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern9 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern10 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern11 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern12\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern13 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern14 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern15 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern16\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern17 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern18 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern19 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern20\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern21 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern22 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern23 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern24\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern25 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern26 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern27 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern28\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern29 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern30 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern31 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern32\
    \ = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern33 = \"^[a-zA-Z0-9]+\\\
    \\.[a-zA-Z]+$\"\n          val pattern34 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n\
    \          val pattern35 = \"^[a-zA-Z0-9]+\\\\.[a-zA-Z]+$\"\n          val pattern36\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4vof7rlu.scala:60:4 ----------------------------\e\
    [0m\e[0m\n\e[31m60 |\e[0m    }\n\e[31m\e[31m   |\e[0m    ^\e[0m\n\e[31m   |\e\
    [0m    '=' expected, but '}' found\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp4vof7rlu.scala:91:0\
    \ ----------------------------\e[0m\e[0m\n\e[31m91 |\e[0m\n\e[31m\e[31m   |\e\
    [0m^\e[0m\n\e[31m   |\e[0m'}' expected, but eof found\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmp4vof7rlu.scala:90:1 ---------------------\e[0m\e[0m\n\
    \e[31m90 |\e[0m}\n\e[31m\e[31m   |\e[0m ^\e[0m\n\e[31m   |\e[0m Found:    Unit\n\
    \e[31m   |\e[0m Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[33m\e[33m-- Warning: /tmp/tmp4vof7rlu.scala:61:4\
    \ ----------------------------------------\e[0m\e[0m\n\e[33m61 |\e[0m    \e[33mdef\e\
    [0m \e[36mmain\e[0m(\e[36margs\e[0m: \e[35mArray\e[0m[\e[35mString\e[0m]) = {\n\
    \e[33m\e[33m   |\e[0m    ^\e[0m\n\e[33m   |\e[0m    Line is indented too far to\
    \ the left, or a `}` is missing\n1 warning found\n3 errors found\n"
  stdout: ''
  timestamp: 1660010694
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code here\n        var validFileName\
    \ = false\n        if(file_name.contains(\".\")){\n            if(file_name.length>3){\n\
    \                for(c <- file_name.toCharArray){\n                    if(c<='9'\
    \ && c>='0')\n                        return validFileName \n                \
    \    if(c != '.')\n                        return validFileName\n            \
    \    }\n            }\n        }\n        if(file_name.contains(\".txt\") || file_name.contains(\"\
    .exe\") || file_name.contains(\".dll\")){\n            validFileName=true\n  \
    \      }\n        if(!validFileName)\n            return \"No\"\n        return\
    \ \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn5lebfq0.scala:25:31\
    \ --------------------\e[0m\e[0m\n\e[31m25 |\e[0m                        \e[33mreturn\e\
    [0m validFileName \n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (validFileName :\
    \ Boolean)\n\e[31m   |\e[0m                               Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpn5lebfq0.scala:27:31\
    \ --------------------\e[0m\e[0m\n\e[31m27 |\e[0m                        \e[33mreturn\e\
    [0m validFileName\n\e[31m\e[31m   |\e[0m                               ^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                               Found:    (validFileName :\
    \ Boolean)\n\e[31m   |\e[0m                               Required: String\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n2 errors found\n"
  stdout: ''
  timestamp: 1660010695
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val regexp = \"\"\"^[a-z0-9]+\\.[a-z0-9]+$\"\
    \"\".r\n        val pattern = regexp.findFirstIn(file_name).get\n        if (file_name\
    \ != pattern) {\n            return \"No\"\n        } else {\n            return\
    \ \"Yes\"\n        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8sr6ks_0.scala:29)\n\tat Problem.main(tmp8sr6ks_0.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010694
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      val re = scala.util.matching.Regex(\"\"\"^(?!.*\\\
    .)[a-zA-z][a-zA-z.]*\\.(txt|exe|dll)$\"\"\")\n      if(re.findFirstIn(file_name).isDefined){\n\
    \        \"Yes\"\n      }\n      else {\n        \"No\"\n      }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8x46nmlx.scala:28)\n\tat Problem.main(tmp8x46nmlx.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010695
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val name_list = file_name.split(\"\\\\.\").toList\n\
    \        if (name_list.length < 3 || name_list.last == \"\" || name_list.last.charAt(0)\
    \ < 'a' || name_list.last.charAt(0) > 'z' || name_list.last.substring(0,1) < 'a'\
    \ || name_list.last.substring(0,1) > 'z' || name_list.last.substring(1, name_list.last.length).split(\"\
    [a-zA-Z]\").length != name_list.last.length || name_list.last.substring(1, name_list.last.length)\
    \ != \"txt\" || name_list.last.substring(1, name_list.last.length) != \"exe\"\
    \ || name_list.last.substring(1, name_list.last.length) != \"dll\") {\n      \
    \      return \"No\"\n        }\n        else {\n            return \"Yes\"\n\
    \        }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpofclswfd.scala:20:160\
    \ -------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (name_list.length\
    \ < \e[31m3\e[0m || name_list.last == \e[31m\"\"\e[0m || name_list.last.charAt(\e\
    [31m0\e[0m) < \e[31m'a'\e[0m || name_list.last.charAt(\e[31m0\e[0m) > \e[31m'z'\e\
    [0m || name_list.last.substring(\e[31m0\e[0m,\e[31m1\e[0m) < \e[31m'a'\e[0m ||\
    \ name_list.last.substring(\e[31m0\e[0m,\e[31m1\e[0m) > \e[31m'z'\e[0m || name_list.last.substring(\e\
    [31m1\e[0m, name_list.last.length).split(\e[31m\"[a-zA-Z]\"\e[0m).length != name_list.last.length\
    \ || name_list.last.substring(\e[31m1\e[0m, name_list.last.length) != \e[31m\"\
    txt\"\e[0m || name_list.last.substring(\e[31m1\e[0m, name_list.last.length) !=\
    \ \e[31m\"exe\"\e[0m || name_list.last.substring(\e[31m1\e[0m, name_list.last.length)\
    \ != \e[31m\"dll\"\e[0m) {\n\e[31m\e[31m   |\e[0m                            \
    \                                                                            \
    \                                                        ^^^\e[0m\n\e[31m   |\e\
    [0m                                                  Found:    (\e[31m'a'\e[0m\
    \ : Char)\n\e[31m   |\e[0m                                                  Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpofclswfd.scala:20:199\
    \ -------------------\e[0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (name_list.length\
    \ < \e[31m3\e[0m || name_list.last == \e[31m\"\"\e[0m || name_list.last.charAt(\e\
    [31m0\e[0m) < \e[31m'a'\e[0m || name_list.last.charAt(\e[31m0\e[0m) > \e[31m'z'\e\
    [0m || name_list.last.substring(\e[31m0\e[0m,\e[31m1\e[0m) < \e[31m'a'\e[0m ||\
    \ name_list.last.substring(\e[31m0\e[0m,\e[31m1\e[0m) > \e[31m'z'\e[0m || name_list.last.substring(\e\
    [31m1\e[0m, name_list.last.length).split(\e[31m\"[a-zA-Z]\"\e[0m).length != name_list.last.length\
    \ || name_list.last.substring(\e[31m1\e[0m, name_list.last.length) != \e[31m\"\
    txt\"\e[0m || name_list.last.substring(\e[31m1\e[0m, name_list.last.length) !=\
    \ \e[31m\"exe\"\e[0m || name_list.last.substring(\e[31m1\e[0m, name_list.last.length)\
    \ != \e[31m\"dll\"\e[0m) {"
  stdout: ''
  timestamp: 1660010696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"[0-9]{3}\\.[a-zA-Z].*\" // 3\
    \ digits followed by . followed by 1 letter from latin alphabet\n        val pattern2\
    \ = \"\"\"^[a-zA-Z].+[.]txt|dll|exe\"\"\"\n        val pattern3 = \"^[a-zA-Z].+[.]txt|dll|exe\"\
    \n        file_name match {\n            case pattern() => \"Yes\"\n         \
    \   case pattern2() => \"No\"\n            case pattern3() => \"No\"\n       \
    \     case _ => \"No\"\n        }\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpm0smspiy.scala:19:32 -----------------------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = \e[31m\"\
    [0-9]{3}\\.[a-zA-Z].*\"\e[0m \e[34m// 3 digits followed by . followed by 1 letter\
    \ from latin alphabet\e[0m\n\e[31m\e[31m   |\e[0m                            \
    \    ^\e[0m\n\e[31m   |\e[0m                                invalid escape character\n\
    \e[31m\e[31m-- [E107] Syntax Error: /tmp/tmpm0smspiy.scala:23:24 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m pattern() => \e[31m\"Yes\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^\e[0m\n\e[31m   |\e[0m \
    \        Wrong number of argument patterns for pattern; expected: (Char)\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E107] Syntax Error: /tmp/tmpm0smspiy.scala:24:25 ---------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m pattern2() => \e[31m\"No\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Wrong number of argument patterns for pattern2; expected: (Char)\n\e\
    [31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E107] Syntax Error: /tmp/tmpm0smspiy.scala:25:25\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m            \e[33mcase\e\
    [0m pattern3() => \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Wrong number of argument patterns for pattern3; expected:\
    \ (Char)\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010692
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var flag = false;\n        var count = file_name.length()\n\
    \        for (i<- 0 to count-2){\n            if(!((file_name(i) == '0') || (file_name(i)\
    \ == '1') || (file_name(i) == '2') || (file_name(i) == '3') || (file_name(i) ==\
    \ '4') || (file_name(i) == '5') || (file_name(i) == '6') || (file_name(i) == '7')\
    \ || (file_name(i) == '8') || (file_name(i) == '9'))){\n                flag =\
    \ true;\n            }\n        }\n        if(!flag){\n            flag = false;\n\
    \            for (i<- 0 to count-1){\n                if(!((file_name(i) == '.')\
    \ || (file_name(i) == '\\''))){\n                    flag = true;\n          \
    \      }\n            }\n        }\n        if(!flag){\n            flag = false;\n\
    \            for (i<- 0 to count-1){\n                if(file_name(i).charAt(0)\
    \ > 'z' ||\n                        file_name(i).charAt(0) > 'Z' ||\n        \
    \                file_name(i).charAt(0) > 'a' ||\n                        file_name(i).charAt(0)\
    \ > 'A'){\n                    flag = true;\n                }\n            }\n\
    \        }\n        if(!flag){\n            flag = false;\n            for (i<-\
    \ 0 to count-1){\n                if(file_name(i).length() > 3 || \n         \
    \               file_name(i).charAt(0) > '9'){\n                    flag = true;\n\
    \                }\n            }\n        }\n        if(flag){\n            return\
    \ \"No\";\n        }\n        return \"Yes\";\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp1xzjg4vw.scala:37:32 ------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mif\e[0m(file_name(i).charAt(\e\
    [31m0\e[0m) > \e[31m'z'\e[0m ||\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value charAt is not a member of Char\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmp1xzjg4vw.scala:48:32 ------------------------\e\
    [0m\e[0m\n\e[31m48 |\e[0m                \e[33mif\e[0m(file_name(i).length() >\
    \ \e[31m3\e[0m || \n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value length is not a member of Char\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = \"\"\"[0-9]{1,3}\\.[a-z][a-z]+\"\
    \"\"\n        if (file_name == \"\" || file_name == \".\" || file_name.dropWhile(x\
    \ => x == \".\").isEmpty) {\n            \"No\"\n        } else if (file_name.dropWhile(x\
    \ => x == \".\").takeWhile(x => x >= 'a' && x <= 'z').nonEmpty &&\n          \
    \         file_name.takeWhile(x => x >= 'a' && x <= 'z').dropWhile(x => x == \"\
    .\").forall(x => pattern.findFirstMatchIn(x) != None))\n            \"Yes\"\n\
    \        else\n            \"No\"\n    }\n    def main(args: Array[String]) =\
    \ {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpbk7duo0p.scala:20:76 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mif\e[0m (file_name == \e[31m\"\"\e[0m ||\
    \ file_name == \e[31m\".\"\e[0m || file_name.dropWhile(\e[36mx\e[0m => x == \e\
    [31m\".\"\e[0m).isEmpty) {\n\e[31m\e[31m   |\e[0m                            \
    \                                                ^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \        Values of types Char and String cannot be compared with == or !=\n\e\
    [31m\e[31m-- Error: /tmp/tmpbk7duo0p.scala:22:44 -----------------------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (file_name.dropWhile(x\
    \ => x == \e[31m\".\"\e[0m).takeWhile(x => x >= \e[31m'a'\e[0m && x <= \e[31m'z'\e\
    [0m).nonEmpty &&\n\e[31m\e[31m   |\e[0m                                      \
    \      ^^^^^^^^\e[0m\n\e[31m   |\e[0m        Values of types Char and String cannot\
    \ be compared with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpbk7duo0p.scala:23:81\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m       \
    \            file_name.takeWhile(\e[36mx\e[0m => x >= \e[31m'a'\e[0m && x <= \e\
    [31m'z'\e[0m).dropWhile(\e[36mx\e[0m => x == \e[31m\".\"\e[0m).forall(\e[36mx\e\
    [0m => pattern.findFirstMatchIn(x) != None))\n\e[31m\e[31m   |\e[0m          \
    \                                                                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbk7duo0p.scala:23:111\
    \ -----------------------\e[0m\e[0m\n\e[31m23 |\e[0m                   file_name.takeWhile(\e\
    [36mx\e[0m => x >= \e[31m'a'\e[0m && x <= \e[31m'z'\e[0m).dropWhile(\e[36mx\e\
    [0m => x == \e[31m\".\"\e[0m).forall(\e[36mx\e[0m => pattern.findFirstMatchIn(x)\
    \ != None))\n\e[31m\e[31m   |\e[0m                                           \
    \                                                            ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                        value findFirstMatchIn is not a member\
    \ of String\n4 errors found\n"
  stdout: ''
  timestamp: 1660010696
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var correct = false\n        var file_name =\
    \ file_name.trim\n        // Check all conditions\n        val letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n        val num = \"0123456789\"\n        for (i <- 0 until file_name.length\
    \ - 1) {\n            if(file_name(i) != \".\" && file_name(i).length() > 1 &&\
    \ \n              file_name(i).charAt(0) > '9' || \n              file_name(i).charAt(0)\
    \ > 'Z' || \n              file_name(i).charAt(0) > 'A' || \n              file_name(i).charAt(0)\
    \ > 'Z') {\n                println(\"Invalid file name $file_name\")\n      \
    \          correct = false\n            }\n            if(file_name(i) == \".\"\
    ) {\n                println(\"Invalid file name $file_name\")\n             \
    \   correct = false\n            }\n            if(file_name(i).isEmpty) {\n \
    \               println(\"Invalid file name $file_name\")\n                correct\
    \ = false\n            }\n            if(!letters.contains(file_name(i).charAt(0)))\
    \ {\n                println(\"Invalid file name $file_name\")\n             \
    \   correct = false\n            }\n            if(file_name(i).indexOf('.') <\
    \ 0) {\n                println(\"Invalid file name $file_name\")\n          \
    \      correct = false\n            }\n            if(!(num.contains(file_name(i).substring(1)))\
    \ ) {\n                println(\"Invalid file name $file_name\")\n           \
    \     correct = false\n            }\n        }\n        if(correct) {\n     \
    \       println(\"Valid file $file_name\")\n        } else {\n            println(\"\
    Invalid file $file_name\")\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmp6cnsy18n.scala:20:24 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m = file_name.trim\n\
    \e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m         \
    \               Recursive \e[33mvariable\e[0m \e[35mfile_name\e[0m needs type\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6cnsy18n.scala:55:19\
    \ --------------------\e[0m\e[0m\n\e[31m55 |\e[0m            println(\e[31m\"\
    Valid file $file_name\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmp6cnsy18n.scala:57:19\
    \ --------------------\e[0m\e[0m\n\e[31m57 |\e[0m            println(\e[31m\"\
    Invalid file $file_name\"\e[0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            Found:    Unit\n\e[31m   |\e[0m            Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n3 errors found\n"
  stdout: ''
  timestamp: 1660010696
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length > 3 || file_name.substring(0,1).isEmpty)\
    \ {\n            return \"No\"\n        }\n        if (file_name.substring(0,1)\
    \ != \"a\" && file_name.substring(0,1) != \"A\" || \n            file_name.substring(0,2)\
    \ == \"9\" && file_name.substring(0,2) != \"0\" || \n            file_name.substring(0,2)\
    \ != \"1\" || file_name.substring(0,3) != \".\") {\n            return \"No\"\n\
    \        }\n        if (file_name.substring(0,file_name.length-1).toLowerCase()\
    \ != \"exe\" &&\n            file_name.substring(0,file_name.length-1).toLowerCase()\
    \ != \"dll\" || \n            file_name.substring(0,file_name.length-1).toLowerCase()\
    \ != \"txt\") {\n            return \"No\"\n        }\n        return \"Yes\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8xmf4oo1.scala:35)\n\tat Problem.main(tmp8xmf4oo1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010698
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileNameStr = file_name\n        val fileName\
    \ = fileNameStr.substring(0, fileNameStr.lastIndexOf(\".\"))\n        val substr\
    \ = fileNameStr.substring(fileNameStr.lastIndexOf(\".\") + 1)\n        val fileExt\
    \ = fileNameStr.substring(fileNameStr.lastIndexOf(\".\") + 1, fileNameStr.length)\n\
    \n        // If the file's name contains less than three digits, return \"No\"\
    \n        if (fileNameStr.length < 3) {\n            return \"No\"\n        }\n\
    \n        // If the file's name contains more than three digits, return \"No\"\
    \n        if (fileNameStr.length > 3) {\n            return \"No\"\n        }\n\
    \n        // If the file does not contain dot ('.'), return \"No\"\n        if\
    \ (fileName.indexOf('.') == -1) {\n            return \"No\"\n        }\n\n  \
    \      // If the file's extension does not meet the requirements, return \"No\"\
    \n        if (fileExt.length != 3 && fileExt.length != 4) {\n            return\
    \ \"No\"\n        }\n\n        // If the file's name starts with letters from\
    \ the latin alphabet ('a'-'z' and\n        // 'A'-'Z'), return \"No\"\n      \
    \  if (fileName.charAt(0) < 'a' || fileName.charAt(0) > 'z' && fileName.charAt(0)\
    \ < 'A' || fileName.charAt(0) > 'Z') {\n            return \"No\"\n        }\n\
    \n        // If the file's name contains the substring 'txt' or 'exe' or 'dll',\
    \ return\n        // \"Yes\"\n        val fileExtArray = Array(fileExt.toLowerCase(),\
    \ fileExt.toLowerCase(), fileExt.toLowerCase())\n        var isCorrect = false\n\
    \        for (ext <- fileExtArray) {\n            if (fileName.contains(ext))\
    \ {\n                isCorrect = true\n                break\n            }\n\
    \        }\n        if (isCorrect) {\n            return \"Yes\"\n        } else\
    \ {\n            return \"No\"\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpq42t5440.scala:57:16 ------------------------\e\
    [0m\e[0m\n\e[31m57 |\e[0m                break\n\e[31m\e[31m   |\e[0m        \
    \        ^^^^^\e[0m\n\e[31m   |\e[0m                Not found: break\n\e[31m \
    \  |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010697
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length == 0)\n            throw\
    \ new IllegalArgumentException(\"file_name should not be empty\")\n        else\
    \ if (file_name.split(\".\").length < 2)\n            throw new IllegalArgumentException(\"\
    file_name should have one dot '.'\")\n        else if (file_name.split(\".\").head.nonEmpty\
    \ && \n                !file_name.split(\".\").head.head.matches(\"^[A-Za-z]\"\
    ))\n            throw new IllegalArgumentException(\"file's name should start\
    \ with a letter from the latin alphabet\")\n        else if (file_name.split(\"\
    .\").last.nonEmpty && \n                (file_name.split(\".\").last.head != \"\
    txt\" && \n                file_name.split(\".\").last.head != \"exe\" && \n \
    \               file_name.split(\".\").last.head != \"dll\"))\n            throw\
    \ new IllegalArgumentException(\"file's name should end with 'txt', 'exe' or 'dll'\"\
    )\n        else{\n            val valid = file_name.split(\".\").last.head ==\
    \ \"txt\" || file_name.split(\".\").last.head == \"exe\" || file_name.split(\"\
    .\").last.head == \"dll\"\n            if (valid)\n                return \"Yes\"\
    \n            else\n                return \"No\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpg8q6g86t.scala:24:48 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m                !file_name.split(\e[31m\".\"\e[0m).head.head.matches(\e\
    [31m\"^[A-Za-z]\"\e[0m))\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                 value matches is not a member of Char\n\e\
    [31m\e[31m-- Error: /tmp/tmpg8q6g86t.scala:27:17 -----------------------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m                (file_name.split(\e[31m\".\"\e[0m).last.head\
    \ != \e[31m\"txt\"\e[0m && \n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpg8q6g86t.scala:28:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m                file_name.split(\e[31m\".\"\e[0m).last.head\
    \ != \e[31m\"exe\"\e[0m && \n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpg8q6g86t.scala:29:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m                file_name.split(\e[31m\".\"\e[0m).last.head\
    \ != \e[31m\"dll\"\e[0m))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpg8q6g86t.scala:32:24 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e[0m \e[36mvalid\e[0m = file_name.split(\e\
    [31m\".\"\e[0m).last.head == \e[31m\"txt\"\e[0m || file_name.split(\e[31m\".\"\
    \e[0m).last.head == \e[31m\"exe\"\e[0m || file_name.split(\e[31m\".\"\e[0m).last.head\
    \ == \e[31m\"dll\"\e[0m\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- Error: /tmp/tmpg8q6g86t.scala:32:67 -----------------------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m            \e[33mval\e["
  stdout: ''
  timestamp: 1660010702
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n         //TODO: Implement me!\n         return \"Yes\"\
    \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp8wb098ry.scala:24)\n\tat Problem.main(tmp8wb098ry.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010700
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Create a mutable variable to hold the valid\
    \ string and initialize it \n        // to 'No'.\n        var valid : String =\
    \ \"No\"\n        // Create a mutable variable to hold the valid string and initialize\
    \ it to 'Yes'.\n        var valid : String = \"Yes\"\n        // Create a mutable\
    \ variable to hold the file's name and initialize it \n        // to an empty\
    \ string.\n        var file_name : String = \"\"\n        // Create a mutable\
    \ variable to hold the file's name and initialize it \n        // to the file's\
    \ name.\n        var file_name : String = \"\"\n        // Create a mutable variable\
    \ to hold the characters of the file name and initialize it \n        // to an\
    \ empty mutable collection.\n        var file_name_chars : mutable.MutableList[Char]\
    \ = mutable.MutableList[Char]()\n        // Create a mutable variable to hold\
    \ the characters of the file name and initialize it \n        // to the file's\
    \ name.\n        var file_name_chars : mutable.MutableList[Char] = mutable.MutableList[Char](file_name)\n\
    \        // Create a mutable variable to hold the characters of the valid string\
    \ and initialize it \n        // to an empty mutable collection.\n        var\
    \ valid_chars : mutable.MutableList[Char] = mutable.MutableList[Char]()\n    \
    \    // Create a mutable variable to hold the characters of the valid string and\
    \ initialize it \n        // to the valid string.\n        var valid_chars : mutable.MutableList[Char]\
    \ = mutable.MutableList[Char](valid)\n        // Create a mutable variable to\
    \ hold the characters of the file name and initialize it \n        // to the file's\
    \ name.\n        var file_name_chars : mutable.MutableList[Char] = mutable.MutableList[Char](file_name)\n\
    \        // Create a mutable variable to hold the characters of the valid string\
    \ and initialize it \n        // to the valid string.\n        var valid_chars\
    \ : mutable.MutableList[Char] = mutable.MutableList[Char](valid)\n        // Iterate\
    \ through the characters of the valid string.\n        for (i_valid_char <- 0\
    \ until valid_chars.length) {\n            // Create a temporary variable to hold\
    \ the character of the valid string.\n            var tmp_valid_char = valid_chars(i_valid_char)\n\
    \            // Iterate through the characters of the file name.\n           \
    \ for (i_file_name_char <- 0 until file_name_chars.length) {\n               \
    \ // Create a temporary variable to hold the character of the file name.\n   \
    \             var tmp_file_name_char = file_name_chars(i_file_name_char)\n   \
    \             // Check if the current character of the file name is \n       \
    \         // equal to the current character of the valid string.\n           \
    \     if (tmp_file_name_char == tmp_valid_char) {\n                    // If the\
    \ current character of the valid string is \n                    // equal to 'x',\
    \ and the current character of the file name is \n                    // equal\
    \ to 'x', then the current character of the valid string is \n               \
    \     // equal to 'y'.\n                    if (tmp_valid_char == \"x\") {\n \
    \                       valid == \"Yes\"\n                        // If the current\
    \ character of the valid string is \n                        // equal to 'x',\
    \ \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp3gbz3z8r.scala:98:0 ----------------------------\e\
    [0m\e[0m\n\e[31m98 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3gbz3z8r.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mvar\e[0m\
    \ \e[36mvalid\e[0m : \e[35mString\e[0m = \e[31m\"Yes\"\e[0m\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mvalid is already defined\
    \ as \e[33mvariable\e[0m \e[35mvalid\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote\
    \ that overloaded methods must all be defined in the same group of toplevel definitions\n\
    \e[31m\e[31m-- [E161] Naming Error: /tmp/tmp3gbz3z8r.scala:29:12 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m        \e[33mvar\e[0m \e[36mfile_name\e[0m : \e[35mString\e\
    [0m = \e[31m\"\"\e[0m\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name is already defined as \e[33mvariable\e[0m \e[35mfile_name\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp3gbz3z8r.scala:35:12 ---------------------------\e[0m\e[0m\n\e\
    [31m35 |\e[0m        \e[33mvar\e[0m \e[36mfile_name_chars\e[0m : mutable.MutableList[\e\
    [35mChar\e[0m] = mutable.MutableList[\e[35mChar\e[0m](file_name)\n\e[31m\e[31m\
    \   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mfile_name_chars is already defined as \e[33mvariable\e[0m\
    \ \e[35mfile_name_chars\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded\
    \ methods must all be defined in the same group of toplevel definitions\n\e[31m\e\
    [31m-- [E161] Naming Error: /tmp/tmp3gbz3z8r.scala:41:12 ---------------------------\e\
    [0m\e[0m\n\e[31m41 |\e[0m        \e[33mvar\e[0m \e[36mvalid_chars\e[0m : mutable.MutableList[\e\
    [35mChar\e[0m] = mutable.MutableList[\e[35mChar\e[0m](valid)\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mvalid_chars is already defined as \e[33mvariable\e[0m \e[35mvalid_char"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        def isValid(name : String): Boolean = {\n  \
    \          val parts = name.split(\"\\\\.\");\n            parts.length == 1 &&\
    \ parts.head.isEmpty || parts.length == 2 &&\n                parts.head.nonEmpty\
    \ && parts(0) match {\n                    case Character('a') | Character('z')\
    \ | Character('A') | Character('Z') => true;\n                    case _ => false;\n\
    \                }\n        }\n        val parts = file_name.split(\"\\\\.\");\n\
    \        if (parts.length == 1 && parts.head.isEmpty) {\n            return \"\
    No\"\n        } else if (parts.length == 2 && !parts.head.isEmpty) {\n       \
    \     val part0 = parts.head\n            if (!isValid(part0)) return \"No\"\n\
    \            val part1 = parts.last\n            if (part1 match {\n         \
    \       case Character('.') => isValid(part0) && (part1 match {\n            \
    \        case Character('t') | Character('x') | Character('t') => true;\n    \
    \                case Character('e') | Character('x') | Character('e') => true;\n\
    \                    case Character('.') => true;\n                    case _\
    \ => false;\n                }) \n                case _ => isValid(part0)\n \
    \           })\n        }\n        return \"Yes\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp1slxdhgb.scala:43:8 ----------------------------\e\
    [0m\e[0m\n\e[31m43 |\e[0m        }\n\e[31m\e[31m   |\e[0m        ^\e[0m\n\e[31m\
    \   |\e[0m        'then' expected, but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmp1slxdhgb.scala:22:44 --------------------\e[0m\e[0m\n\e[31m22\
    \ |\e[0m                parts.head.nonEmpty && parts(\e[31m0\e[0m) \e[33mmatch\e\
    [0m {\n\e[31m\e[31m   |\e[0m                                       ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                       Found:    String\n\e\
    [31m   |\e[0m                                       Required: Boolean\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E127] Syntax Error: /tmp/tmp1slxdhgb.scala:23:25 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mcase\e[0m Character(\e[31m'a'\e\
    [0m) | Character(\e[31m'z'\e[0m) | Character(\e[31m'A'\e[0m) | Character(\e[31m'Z'\e\
    [0m) => \e[31mtrue\e[0m;\n\e[31m\e[31m   |\e[0m                         ^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mCharacter cannot be used as an extractor in a pattern because\
    \ it lacks an unapply or unapplySeq method\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E127]\
    \ Syntax Error: /tmp/tmp1slxdhgb.scala:23:42 ---------------------------\e[0m\e\
    [0m\n\e[31m23 |\e[0m                    \e[33mcase\e[0m Character(\e[31m'a'\e\
    [0m) | Character(\e[31m'z'\e[0m) | Character(\e[31m'A'\e[0m) | Character(\e[31m'Z'\e\
    [0m) => \e[31mtrue\e[0m;\n\e[31m\e[31m   |\e[0m                              \
    \            ^^^^^^^^^\e[0m\n\e[31m   |\e[0mCharacter cannot be used as an extractor\
    \ in a pattern because it lacks an unapply or unapplySeq method\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E127] Syntax Error: /tmp/tmp1slxdhgb.scala:23:59 ---------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m                    \e[33mcase\e[0m Character(\e[31m'a'\e\
    [0m) | Character(\e[31m'z'\e[0m) | Character(\e[31m'A'\e[0m) | Character(\e[31m'Z'\e\
    [0m) => \e[31mtrue\e[0m;\n\e[31m\e[31m   |\e[0m    "
  stdout: ''
  timestamp: 1660010703
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n       val invalid = mutable.Set[Char]()\n       val\
    \ parts = file_name.split(\"\\\\.\") // split the file name into parts delimited\
    \ by a '.'\n       val numOfNumbers = parts.count(_.matches(\"[0-9]+\"))\n   \
    \    val emptyStrings = parts.count(_.isEmpty())\n       val startWithLetter =\
    \ parts.count(x => x.startsWith(\"a\") || x.startsWith(\"A\"))\n       val endingWithExtension\
    \ = parts.count(x => x.endsWith(\"txt\") || x.endsWith(\"exe\") || x.endsWith(\"\
    dll\"))\n       val numOfDots = parts.count(_.contains(\".\"))\n       val hasLetter\
    \ = parts.count(_.matches(\"[a-zA-Z]+\"))\n       val hasDot = parts.count(_.contains(\"\
    .\"))\n       val length = parts.length\n       if(length>3) return \"No\"\n \
    \      if(numOfDots > 1) return \"No\"\n       if(!emptyStrings) return \"No\"\
    \n       if(!startWithLetter) return \"No\"\n       if(!endingWithExtension) return\
    \ \"No\"\n       if(hasLetter) return \"No\"\n       if(hasDot) return \"No\"\n\
    \       if(!numOfNumbers) return \"No\"\n       if(invalid.contains(Char('.')))\
    \ return \"No\"\n       if(invalid.contains(Char('_'))) return \"No\"\n      \
    \ if(invalid.contains(Char('0'))) return \"No\"\n       if(invalid.contains(Char('1')))\
    \ return \"No\"\n       if(invalid.contains(Char('a'))) return \"No\"\n      \
    \ if(invalid.contains(Char('A'))) return \"No\"\n       \"Yes\"\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpbll20gwo.scala:19:21 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m       \e[33mval\e[0m \e[36minvalid\e[0m = mutable.Set[\e\
    [35mChar\e[0m]()\n\e[31m\e[31m   |\e[0m                     ^^^^^^^\e[0m\n\e[31m\
    \   |\e[0m                     Not found: mutable\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpbll20gwo.scala:31:10 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m       \e[33mif\e[0m(!emptyStrings) \e[33mreturn\e[0m\
    \ \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^^^^^\e[0m\n\e[31m\
    \   |\e[0mvalue unary_! is not a member of Int - did you mean emptyStrings.unary_+?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbll20gwo.scala:32:10 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m       \e[33mif\e[0m(!startWithLetter) \e[33mreturn\e\
    [0m \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0mvalue unary_! is not a member of Int - did you mean startWithLetter.unary_+?\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpbll20gwo.scala:33:10 ------------------------\e\
    [0m\e[0m\n\e[31m33 |\e[0m       \e[33mif\e[0m(!endingWithExtension) \e[33mreturn\e\
    [0m \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0mvalue unary_! is not a member of Int - did you mean endingWithExtension.unary_+?\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbll20gwo.scala:34:10 --------------------\e\
    [0m\e[0m\n\e[31m34 |\e[0m       \e[33mif\e[0m(hasLetter) \e[33mreturn\e[0m \e\
    [31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^^^^\e[0m\n\e[31m   |\e[0m\
    \          Found:    (hasLetter : Int)\n\e[31m   |\e[0m          Required: Boolean\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpbll20gwo.scala:35:10\
    \ --------------------\e[0m\e[0m\n\e[31m35 |\e[0m       \e[33mif\e[0m(hasDot)\
    \ \e[33mreturn\e[0m \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m          ^^^^^^\e\
    [0m\n\e[31m   |\e[0m          Found:    (hasDot : Int)\n\e[31m   |\e[0m      \
    \    Required: Boolean\n\e[31m   |\e[0m\n\e[31m   |\e[0m "
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n    \tval length = file_name.length\n    \tif (length\
    \ > 3) return \"No\"\n    \tif (file_name == \".\") return \"No\"\n    \tif (file_name.substring(0,\
    \ 1) == \".\" || file_name.substring(length-1, length) != \".\") return \"No\"\
    \n    \tif (file_name.substring(0,1).isEmpty || file_name.substring(0,1) >= 'a'\
    \ || file_name.substring(0,1) <= 'z' || file_name.substring(0,1) >= 'A' || file_name.substring(0,1)\
    \ <= 'Z') return \"No\"\n    \tif (file_name.substring(length-1,length) != \"\
    txt\" || file_name.substring(length-1,length) != \"exe\" || file_name.substring(length-1,length)\
    \ != \"dll\") return \"No\"\n    \t\"Yes\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcvxbolew.scala:23:76\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m    \t\e[33mif\e[0m (file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m).isEmpty || file_name.substring(\e[31m0\e[0m,\e[31m1\e\
    [0m) >= \e[31m'a'\e[0m || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) <= \e\
    [31m'z'\e[0m || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) >= \e[31m'A'\e\
    [0m || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) <= \e[31m'Z'\e[0m) \e[33mreturn\e\
    [0m \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m    \t                           \
    \                                         ^^^\e[0m\n\e[31m   |\e[0m          \
    \                                        Found:    (\e[31m'a'\e[0m : Char)\n\e\
    [31m   |\e[0m                                                  Required: String\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with\
    \ `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpcvxbolew.scala:23:111\
    \ -------------------\e[0m\e[0m\n\e[31m23 |\e[0m    \t\e[33mif\e[0m (file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m).isEmpty || file_name.substring(\e[31m0\e[0m,\e[31m1\e\
    [0m) >= \e[31m'a'\e[0m || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) <= \e\
    [31m'z'\e[0m || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) >= \e[31m'A'\e\
    [0m || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) <= \e[31m'Z'\e[0m) \e[33mreturn\e\
    [0m \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m    \t                           \
    \                                                                            ^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (\e[31m'z'\e[0m : Char)\n\e[31m   |\e[0m                                 \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpcvxbolew.scala:23:146 -------------------\e[0m\e[0m\n\e[31m23\
    \ |\e[0m    \t\e[33mif\e[0m (file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m).isEmpty\
    \ || file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m) >= \e[31m'a'\e[0m || file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) <= \e[31m'z'\e[0m || file_name.substring(\e[31m0\e[0m,\e\
    [31m1\e[0m) >= \e[31m'A'\e[0m ||"
  stdout: ''
  timestamp: 1660010704
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var check = \"\"\n        for (x <- 0 until\
    \ file_name.length) {\n            val c = file_name.charAt(x)\n            if\
    \ (c == '.') {\n                val sub = file_name.substring(x, x + 1)\n    \
    \            check += sub\n            }\n            else if (c >= 'a' && c <=\
    \ 'z' || c >= 'A' && c <= 'Z') {\n                check += c\n            }\n\
    \            else {\n                check += \".\"\n            }\n        }\n\
    \        \n        if (check.length >= 3 && check.length > 0 && !check.startsWith(\"\
    .\") && check.length != 0) {\n            for (x <- 0 until check.length) {\n\
    \                val c = check.charAt(x)\n                if (c == '.') {\n  \
    \                  val sub = check.substring(x, x + 1)\n                    check\
    \ += sub\n                }\n                else if (c >= 'a' && c <= 'z' ||\
    \ c >= 'A' && c <= 'Z') {\n                    check += c\n                }\n\
    \                else {\n                    check += \".\"\n                }\n\
    \            }\n        }\n        check\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpavytan6_.scala:52)\n\tat Problem.main(tmpavytan6_.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result : String = \"\"\n        var valid\
    \ = file_name match {\n            case x if x.length < 3 => \"No\"\n        \
    \    case x if x.indexOf('.') < 1 => \"No\"\n            case x if !x.startsWith('a')\
    \ && !x.startsWith('A') => \"No\"\n            case x if x.substring(0,1) != x.substring(0,1).toLower\
    \ => \"No\"\n            case x if x.substring(x.indexOf('.') + 1).contains(\"\
    exe\") => result = x.substring(x.indexOf('.') + 1).contains(\"exe\")\n       \
    \     case x if x.substring(x.indexOf('.') + 1).contains(\"dll\") => result =\
    \ x.substring(x.indexOf('.') + 1).contains(\"dll\")\n            case x if x.substring(x.indexOf('.')\
    \ + 1).contains(\"txt\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    txt\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"log\"\
    ) => result = x.substring(x.indexOf('.') + 1).contains(\"log\")\n            case\
    \ x if x.substring(x.indexOf('.') + 1).contains(\"config\") => result = x.substring(x.indexOf('.')\
    \ + 1).contains(\"config\")\n            case x if x.substring(x.indexOf('.')\
    \ + 1).contains(\"zip\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    zip\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"jar\"\
    ) => result = x.substring(x.indexOf('.') + 1).contains(\"jar\")\n            case\
    \ x if x.substring(x.indexOf('.') + 1).contains(\"conf\") => result = x.substring(x.indexOf('.')\
    \ + 1).contains(\"conf\")\n            case x if x.substring(x.indexOf('.') +\
    \ 1).contains(\"xml\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    xml\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"properties\"\
    ) => result = x.substring(x.indexOf('.') + 1).contains(\"properties\")\n     \
    \       case x if x.substring(x.indexOf('.') + 1).contains(\"xml\") => result\
    \ = x.substring(x.indexOf('.') + 1).contains(\"xml\")\n            case x if x.substring(x.indexOf('.')\
    \ + 1).contains(\"log4j\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    log4j\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"properties\"\
    ) => result = x.substring(x.indexOf('.') + 1).contains(\"properties\")\n     \
    \       case x if x.substring(x.indexOf('.') + 1).contains(\"xml\") => result\
    \ = x.substring(x.indexOf('.') + 1).contains(\"xml\")\n            case x if x.substring(x.indexOf('.')\
    \ + 1).contains(\"log4j\") => result = x.substring(x.indexOf('.') + 1).contains(\"\
    log4j\")\n            case x if x.substring(x.indexOf('.') + 1).contains(\"properties\"\
    ) => \n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpuue2us2e.scala:72:0 ----------------------------\e\
    [0m\e[0m\n\e[31m72 |\e[0m\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0m'}' expected,\
    \ but eof found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuue2us2e.scala:23:36\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m x\
    \ \e[33mif\e[0m !x.startsWith(\e[31m'a'\e[0m) && !x.startsWith(\e[31m'A'\e[0m)\
    \ => \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \    ^^^\e[0m\n\e[31m   |\e[0m                                    Found:    (\e\
    [31m'a'\e[0m : Char)\n\e[31m   |\e[0m                                    Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpuue2us2e.scala:23:58\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            \e[33mcase\e[0m x\
    \ \e[33mif\e[0m !x.startsWith(\e[31m'a'\e[0m) && !x.startsWith(\e[31m'A'\e[0m)\
    \ => \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m                                \
    \                          ^^^\e[0m\n\e[31m   |\e[0m                         \
    \                         Found:    (\e[31m'A'\e[0m : Char)\n\e[31m   |\e[0m \
    \                                                 Required: String\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpuue2us2e.scala:24:59 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) != x.substring(\e[31m0\e[0m,\e[31m1\e[0m).toLower =>\
    \ \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m                                   \
    \       ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                       \
    \          value toLower is not a member of String\n\e[31m\e[31m-- [E007] Type\
    \ Mismatch Error: /tmp/tmpuue2us2e.scala:25:122 -------------------\e[0m\e[0m\n\
    \e[31m25 |\e[0m            \e[33mcase\e[0m x \e[33mif\e[0m x.substring(x.indexOf(\e\
    [31m'.'\e[0m) + \e[31m1\e[0m).contains(\e[31m\"exe\"\e[0m) => result = x.substring(x.indexOf(\e\
    [31m'.'\e[0m) + \e[31m1\e[0m).contains(\e[31m\"exe\"\e[0m)\n\e[31m\e[31m   |\e\
    [0m             "
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val fileNameLength = file_name.length\n    \
    \    var isValid = true\n        for (i <- 0 until fileNameLength) {\n       \
    \     if (file_name(i).isDigit) {\n                if (i > 0) {\n            \
    \        isValid = false\n                    return\"No\"\n                }\n\
    \            }\n            else if (file_name(i) != \".\") {\n              \
    \  isValid = false\n                return\"No\"\n            }\n            else\
    \ if (file_name(i).isEmpty) {\n                isValid = false\n             \
    \   return\"No\"\n            }\n            else if (file_name(i).toLowerCase\
    \ != \"a\" && file_name(i).toLowerCase != \"b\" &&\n                     file_name(i).toLowerCase\
    \ != \"c\" && file_name(i).toLowerCase != \"d\" &&\n                     file_name(i).toLowerCase\
    \ != \"e\" && file_name(i).toLowerCase != \"f\" &&\n                     file_name(i).toLowerCase\
    \ != \"g\" && file_name(i).toLowerCase != \"h\" &&\n                     file_name(i).toLowerCase\
    \ != \"i\" && file_name(i).toLowerCase != \"j\" &&\n                     file_name(i).toLowerCase\
    \ != \"k\" && file_name(i).toLowerCase != \"l\" &&\n                     file_name(i).toLowerCase\
    \ != \"m\" && file_name(i).toLowerCase != \"n\" &&\n                     file_name(i).toLowerCase\
    \ != \"o\" && file_name(i).toLowerCase != \"p\" &&\n                     file_name(i).toLowerCase\
    \ != \"q\" && file_name(i).toLowerCase != \"r\" &&\n                     file_name(i).toLowerCase\
    \ != \"s\" && file_name(i).toLowerCase != \"t\" &&\n                     file_name(i).toLowerCase\
    \ != \"u\" && file_name(i).toLowerCase != \"v\" &&\n                     file_name(i).toLowerCase\
    \ != \"w\" && file_name(i).toLowerCase != \"x\" &&\n                     file_name(i).toLowerCase\
    \ != \"y\" && file_name(i).toLowerCase != \"z\") {\n                isValid =\
    \ false\n                return\"No\"\n            }\n        }\n        return\"\
    Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpp6eql8ia.scala:28:21 -----------------------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33melse\e[0m \e[33mif\e[0m (file_name(i)\
    \ != \e[31m\".\"\e[0m) {\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp6eql8ia.scala:32:34\
    \ ------------------------\e[0m\e[0m\n\e[31m32 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (file_name(i).isEmpty) {\n\e[31m\e[31m   |\e[0m            \
    \         ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m                     value\
    \ isEmpty is not a member of Char\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpp6eql8ia.scala:36:34\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m            \e[33melse\e\
    [0m \e[33mif\e[0m (file_name(i).toLowerCase != \e[31m\"a\"\e[0m && file_name(i).toLowerCase\
    \ != \e[31m\"b\"\e[0m &&\n\e[31m\e[31m   |\e[0m                     ^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                     value toLowerCase is not a member of\
    \ Char\n3 errors found\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name =\n            if (file_name.isEmpty)\
    \ return(\"No\")\n            else { file_name match {\n                case s\
    \ if s.contains(\".\") && (s.charAt(0) != 'a' && s.charAt(0) != 'z' && s.charAt(0)\
    \ != 'A' && s.charAt(0) != 'Z') =>\n                    return(\"No\")\n     \
    \           case _ =>\n                    if (file_name.toString.replaceFirst(\"\
    ^[0-9]\", \"\")\n                                .head\n                     \
    \           .matches(\"^[a-zA-Z]+\")) return(\"Yes\")\n                    else\
    \ return(\"No\")\n            }}\n    }\n    def main(args: Array[String]) = {\n\
    \    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj23k1wx_.scala:20:16 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[33mif\e[0m (file_name.isEmpty) \e[33mreturn\e\
    [0m(\e[31m\"No\"\e[0m)\n\e[31m\e[31m   |\e[0m                ^\e[0m\n\e[31m  \
    \ |\e[0m                Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj23k1wx_.scala:21:19\
    \ ---------------------------\e[0m\e[0m\n\e[31m21 |\e[0m            \e[33melse\e\
    [0m { file_name \e[33mmatch\e[0m {\n\e[31m\e[31m   |\e[0m                   ^\e\
    [0m\n\e[31m   |\e[0m                   Recursive \e[33mvalue\e[0m \e[35mfile_name\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpj23k1wx_.scala:25:24\
    \ ---------------------------\e[0m\e[0m\n\e[31m25 |\e[0m                    \e\
    [33mif\e[0m (file_name.toString.replaceFirst(\e[31m\"^[0-9]\"\e[0m, \e[31m\"\"\
    \e[0m)\n\e[31m\e[31m   |\e[0m                        ^\e[0m\n\e[31m   |\e[0m \
    \                       Recursive \e[33mvalue\e[0m \e[35mfile_name\e[0m needs\
    \ type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpj23k1wx_.scala:30:5\
    \ ---------------------\e[0m\e[0m\n\e[31m30 |\e[0m    }\n\e[31m\e[31m   |\e[0m\
    \     ^\e[0m\n\e[31m   |\e[0m     Found:    Unit\n\e[31m   |\e[0m     Required:\
    \ String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling\
    \ with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Write your solution here\n        val nameArray\
    \ = file_name.split(\"\\\\.\")\n        if(nameArray.length != 3 || nameArray(0).isEmpty()\
    \ || nameArray(0).first < 'a' || nameArray(0).first > 'z' || nameArray(1).isEmpty()\
    \ || nameArray(1).first < 'a' || nameArray(1).first > 'z' || nameArray(2).isEmpty()\
    \ || nameArray(2).first != 'txt' || nameArray(2).first != 'exe' || nameArray(2).first\
    \ != 'dll'){\n            return \"No\"\n        }\n        else{\n          \
    \  return \"Yes\"\n        }\n    }\n    def main(args: Array[String]) = {\n \
    \   assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpmie3fcv4.scala:21:248 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(nameArray.length != \e[31m3\e[0m\
    \ || nameArray(\e[31m0\e[0m).isEmpty() || nameArray(\e[31m0\e[0m).first < \e[31m'a'\e\
    [0m || nameArray(\e[31m0\e[0m).first > \e[31m'z'\e[0m || nameArray(\e[31m1\e[0m).isEmpty()\
    \ || nameArray(\e[31m1\e[0m).first < \e[31m'a'\e[0m || nameArray(\e[31m1\e[0m).first\
    \ > \e[31m'z'\e[0m || nameArray(\e[31m2\e[0m).isEmpty() || nameArray(\e[31m2\e\
    [0m).first != \e[31m'txt\e[0m' || nameArray(\e[31m2\e[0m).first != \e[31m'exe\e\
    [0m' || nameArray(\e[31m2\e[0m).first != \e[31m'dll\e[0m'){\n\e[31m\e[31m   |\e\
    [0m                                                                          \
    \                                                                            \
    \                                                                            \
    \                      ^\e[0m\n\e[31m   |\e[0msymbol literal 'txt is no longer\
    \ supported,\n\e[31m   |\e[0muse a string literal \"txt\" or an application Symbol(\"\
    txt\") instead,\n\e[31m   |\e[0mor enclose in braces '{txt} if you want a quoted\
    \ expression.\n\e[31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpmie3fcv4.scala:21:252\
    \ --------------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(nameArray.length\
    \ != \e[31m3\e[0m || nameArray(\e[31m0\e[0m).isEmpty() || nameArray(\e[31m0\e\
    [0m).first < \e[31m'a'\e[0m || nameArray(\e[31m0\e[0m).first > \e[31m'z'\e[0m\
    \ || nameArray(\e[31m1\e[0m).isEmpty() || nameArray(\e[31m1\e[0m).first < \e[31m'a'\e\
    [0m || nameArray(\e[31m1\e[0m).first > \e[31m'z'\e[0m || nameArray(\e[31m2\e[0m).isEmpty()\
    \ || nameArray(\e[31m2\e[0m).first != \e[31m'txt\e[0m' || nameArray(\e[31m2\e\
    [0m).first != \e[31m'exe\e[0m' || nameArray(\e[31m2\e[0m).first != \e[31m'dll\e\
    [0m'){\n\e[31m\e[31m   |\e[0m                                                \
    \                                                                            \
    \                                          "
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n       val nums = fileName.split('.').map(_.toInt).toSet\n\
    \       if(nums.size==0 || nums.toList.isEmpty || nums.toList.head.head < 'a'\
    \ || nums.toList.head.head > 'z'){\n       \treturn \"No\"\n       }\n       val\
    \ last = nums.toList.last\n       if(last.last!='e' && last.last!='E' && last.last!='x'\
    \ && last.last!='X' && last.last!='m' && last.last!='M'){\n       \treturn \"\
    No\"\n       }\n       val first = fileName.substring(0,fileName.indexOf('.')+1)\n\
    \       val validFirst = ('A'..'Z').filter(x => x!=first.head).exists(x => x!=first.last)\n\
    \       val validLast = ('a'..'z').filter(x => x!=last.last).exists(x => x!=last.head)\n\
    \       if(!validFirst || !validLast){\n       \treturn \"No\"\n       }\n   \
    \    \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp59ehhvzt.scala:28:29 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m       \e[33mval\e[0m \e[36mvalidFirst\e[0m = (\e[31m'A'\e\
    [0m..\e[31m'Z'\e[0m).filter(\e[36mx\e[0m => x!=first.head).exists(\e[36mx\e[0m\
    \ => x!=first.last)\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\
    \e[31m   |\e[0m                             an identifier expected, but '.' found\n\
    \e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp59ehhvzt.scala:29:28 ---------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m       \e[33mval\e[0m \e[36mvalidLast\e[0m = (\e[31m'a'\e\
    [0m..\e[31m'z'\e[0m).filter(\e[36mx\e[0m => x!=last.last).exists(\e[36mx\e[0m\
    \ => x!=last.head)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e\
    [31m   |\e[0m                            an identifier expected, but '.' found\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp59ehhvzt.scala:19:18 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m       \e[33mval\e[0m \e[36mnums\e[0m = fileName.split(\e\
    [31m'.'\e[0m).map(_.toInt).toSet\n\e[31m\e[31m   |\e[0m                  ^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                  Not found: fileName\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E006] Not Found Error: /tmp/tmp59ehhvzt.scala:27:19 ------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m       \e[33mval\e[0m \e[36mfirst\e[0m = fileName.substring(\e\
    [31m0\e[0m,fileName.indexOf(\e[31m'.'\e[0m)+\e[31m1\e[0m)\n\e[31m\e[31m   |\e\
    [0m                   ^^^^^^^^\e[0m\n\e[31m   |\e[0m                   Not found:\
    \ fileName\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available when\
    \ compiling with `-explain`\n4 errors found\n"
  stdout: ''
  timestamp: 1660010701
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val pattern = Pattern.compile(\n           \
    \ \"[0-9]{1,3}[.][^\\.]{0,1}|\" +\n            \"^[a-zA-z].{0,1}\"\n        )\n\
    \        if (!pattern.matcher(file_name).matches()) {\n            return \"No\"\
    \n        }\n        if (!file_name.contains('.')) {\n            return \"No\"\
    \n        }\n        if (!file_name.substringBefore('.').isEmpty) {\n        \
    \    return \"No\"\n        }\n        val file = file_name.substringBefore('.')\n\
    \        if (!file.matches(\"^[a-zA-Z]+\")) {\n            return \"No\"\n   \
    \     }\n        val file_extension = file_name.substringAfter('.')\n        if\
    \ (!file_extension.contains('.') || file_extension.contains(' ')) {\n        \
    \    return \"No\"\n        }\n        if (file_extension.contains(\"txt\") ||\
    \ file_extension.contains(\"exe\") || file_extension.contains(\"dll\")) {\n  \
    \          return \"Yes\"\n        } else {\n            return \"No\"\n     \
    \   }\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpafnegbrc.scala:20:29 -----------------------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m            \e[31m\"[0-9]{1,3}[.][^\\.]{0,1}|\"\e[0m\
    \ +\n\e[31m\e[31m   |\e[0m                             ^\e[0m\n\e[31m   |\e[0m\
    \                             invalid escape character\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpafnegbrc.scala:19:22 ------------------------\e[0m\e\
    [0m\n\e[31m19 |\e[0m        \e[33mval\e[0m \e[36mpattern\e[0m = Pattern.compile(\n\
    \e[31m\e[31m   |\e[0m                      ^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                 Not found: Pattern\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpafnegbrc.scala:29:23 ------------------------\e[0m\e\
    [0m\n\e[31m29 |\e[0m        \e[33mif\e[0m (!file_name.substringBefore(\e[31m'.'\e\
    [0m).isEmpty) {\n\e[31m\e[31m   |\e[0m             ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m             value substringBefore is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpafnegbrc.scala:32:29 ------------------------\e\
    [0m\e[0m\n\e[31m32 |\e[0m        \e[33mval\e[0m \e[36mfile\e[0m = file_name.substringBefore(\e\
    [31m'.'\e[0m)\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value substringBefore is not a member of\
    \ String\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpafnegbrc.scala:36:39\
    \ ------------------------\e[0m\e[0m\n\e[31m36 |\e[0m        \e[33mval\e[0m \e\
    [36mfile_extension\e[0m = file_name.substringAfter(\e[31m'.'\e[0m)\n\e[31m\e[31m\
    \   |\e[0m                             ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                          value substringAfter is not a member of String\n\
    5 errors found\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result : String = \"No\"\n        // Get\
    \ rid of the file extension.\n        file_name split ('.') foreach { x => x take\
    \ 1 foreach { y => if (y == '.') file_name replace (y, '') } }\n        // Get\
    \ rid of any leading '.'\n        file_name split ('.') foreach { x => x take\
    \ 1 foreach { y => if (y == '.') file_name replace (y, '') } }\n        // Get\
    \ rid of any trailing '.'\n        file_name split ('.') foreach { x => x take\
    \ 1 foreach { y => if (y == '.') file_name replace (y, '') } }\n        // Make\
    \ sure the file name is made up of only one '.'\n        if(file_name split ('\\\
    .').length < 1) file_name = file_name + \".\"\n        // Make sure the substring\
    \ before the dot is made up of only letters (a-z and A-Z)\n        if (file_name\
    \ split ('\\.')(0).filter(x => x >= 'a' && x <= 'z') != file_name split ('\\.')(0).filter(x\
    \ => x >= 'A' && x <= 'Z')) \"No\"\n        else result = \"Yes\"\n        return\
    \ result\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmplu15pc_u.scala:21:105 ----------------------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        file_name split (\e[31m'.'\e[0m) foreach { \e\
    [36mx\e[0m => x take \e[31m1\e[0m foreach { \e[36my\e[0m => \e[33mif\e[0m (y ==\
    \ \e[31m'.'\e[0m) file_name replace (y, '') } }\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                  empty character literal\n\e[31m\e[31m-- Error: /tmp/tmplu15pc_u.scala:23:105\
    \ ----------------------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        file_name\
    \ split (\e[31m'.'\e[0m) foreach { \e[36mx\e[0m => x take \e[31m1\e[0m foreach\
    \ { \e[36my\e[0m => \e[33mif\e[0m (y == \e[31m'.'\e[0m) file_name replace (y,\
    \ '') } }\n\e[31m\e[31m   |\e[0m                                             \
    \                                                            ^\e[0m\n\e[31m  \
    \ |\e[0m                                                 empty character literal\n\
    \e[31m\e[31m-- Error: /tmp/tmplu15pc_u.scala:25:105 ----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        file_name split (\e[31m'.'\e[0m) foreach { \e\
    [36mx\e[0m => x take \e[31m1\e[0m foreach { \e[36my\e[0m => \e[33mif\e[0m (y ==\
    \ \e[31m'.'\e[0m) file_name replace (y, '') } }\n\e[31m\e[31m   |\e[0m       \
    \                                                                            \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \                  empty character literal\n\e[31m\e[31m-- Error: /tmp/tmplu15pc_u.scala:27:30\
    \ -----------------------------------------\e[0m\e[0m\n\e[31m27 |\e[0m       \
    \ \e[33mif\e[0m(file_name split (\e[31m'\\.'\e[0m).length < \e[31m1\e[0m) file_name\
    \ = file_name + \e[31m\".\"\e[0m\n\e[31m\e[31m   |\e[0m                      \
    \        ^\e[0m\n\e[31m   |\e[0m                              invalid escape character\n\
    \e[31m\e[31m-- [E018] Syntax Error: /tmp/tmplu15pc_u.scala:27:56 ---------------------------\e\
    [0m\e[0m\n\e[31m27 |\e[0m        \e[33mif\e[0m(file_name split (\e[31m'\\.'\e\
    [0m).length < \e[31m1\e[0m) file_name = file_name + \e[31m\".\"\e[0m\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        def digit(c : Char) : Boolean = c >= '0' &&\
    \ c <= '9'\n        def dot(c : Char) : Boolean = c >= '.'\n        def startsWithLetter(c:\
    \ Char) : Boolean = c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z'\n        def\
    \ endsWithFileType(c: Char) : Boolean = c >= 't' && c <= 'z' || c >= 'T' && c\
    \ <= 'Z' || c >= 'e' && c <= 'z' || c >= 'E' && c <= 'Z' || c == '.' || c == ','\n\
    \n        val fileNameWithoutDot = file_name filterNot (c => dot(c)) filterNot\
    \ (c => digit(c))\n        val fileNameWithDot = file_name.drop(1) filterNot (c\
    \ => digit(c)) filterNot (c => dot(c))\n        val fileNameWithoutDotParts =\
    \ fileNameWithoutDot.map(c => c match {\n            case c if !startsWithLetter(c)\
    \ => c\n            case c if !endsWithFileType(c) => c\n            case c if\
    \ c == ',' => \"0\"\n            case c if c == '.' => \"0\"\n            case\
    \ c => \"1\"\n        })\n        val fileNameWithDotParts = fileNameWithDot.map(c\
    \ => c match {\n            case c if !startsWithLetter(c) => c\n            case\
    \ c if !endsWithFileType(c) => c\n            case c if c == ',' => \"0\"\n  \
    \          case c if c == '.' => \"0\"\n            case c => \"1\"\n        })\n\
    \n        (fileNameWithoutDotParts ++ fileNameWithDotParts).size <= 3\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpy4kkbb_j.scala:41:8\
    \ ---------------------\e[0m\e[0m\n\e[31m41 |\e[0m        (fileNameWithoutDotParts\
    \ ++ fileNameWithDotParts).size <= \e[31m3\e[0m\n\e[31m\e[31m   |\e[0m       \
    \ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m        Found:    Boolean\n\e[31m   |\e[0m        Required: String\n\e[31m\
    \   |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.split(\"[.]\").length != 2) return\
    \ \"No\"\n        if (file_name.split(\"[.]\")(0) == \"\") return \"No\"\n   \
    \     if (file_name.split(\"[.]\")(0).startsWith(\"a\") || file_name.split(\"\
    [.]\")(0).startsWith(\"A\")) return \"No\"\n        if (file_name.split(\"[.]\"\
    )(0).startsWith(\"0\") || file_name.split(\"[.]\")(0).startsWith(\"9\")) return\
    \ \"No\"\n        if (file_name.split(\"[.]\")(1).contains(\"exe\") || file_name.split(\"\
    [.]\")(1).contains(\"dll\")) return \"Yes\"\n        return \"No\"\n    }\n  \
    \  def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpqjk5mkr5.scala:27)\n\tat Problem.main(tmpqjk5mkr5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010707
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      var correct = false // true if string is valid\n\
    \      val str = \"\" + file_name // convert the file_name from String to String\n\
    \      var i = -1\n      val maxFileName = 100\n      while(!correct && i < maxFileName)\
    \ {\n        i += 1\n        str = str.replaceAll(\"\\\\D\", \"\")\n        str\
    \ = str.replaceAll(\"\\\\.\", \"\")\n        val dotIndex = str.indexOf(\".\"\
    )\n        if (dotIndex != -1) {\n          val beforeDot = str.substring(0, dotIndex)\n\
    \          val afterDot = str.substring(dotIndex + 1)\n          val isLetter\
    \ = beforeDot.matches(\"[a-zA-z]\")\n          val isDigit = beforeDot.matches(\"\
    [0-9]\")\n          val isSingleDot = afterDot.matches(\"[.]\")\n          if\
    \ (isLetter && isDigit && isSingleDot) {\n            val fileExtension = afterDot\n\
    \            if (fileExtension == \"txt\" || fileExtension == \"exe\" || fileExtension\
    \ == \"dll\") {\n              correct = true\n            }\n          } else\
    \ {\n            val fileExtension = str\n            if (fileExtension == \"\
    txt\" || fileExtension == \"exe\" || fileExtension == \"dll\") {\n           \
    \   correct = true\n            }\n          }\n        }\n      }\n      if (correct)\
    \ {\n        \"Yes\"\n      } else {\n        \"No\"\n      }\n    }\n    def\
    \ main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E052] Type Error: /tmp/tmpfqhzy4h9.scala:25:12 -----------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        str = str.replaceAll(\e[31m\"\\\\D\"\e[0m, \e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val str\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E052] Type Error: /tmp/tmpfqhzy4h9.scala:26:12 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        str = str.replaceAll(\e[31m\"\\\\.\"\e[0m, \e\
    [31m\"\"\e[0m)\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Reassignment to val str\n\e[31m   |\e[0m\n\e[31m \
    \  |\e[0m longer explanation available when compiling with `-explain`\n2 errors\
    \ found\n"
  stdout: ''
  timestamp: 1660010704
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val numDot = file_name.count { c => c == '.'\
    \ }\n        if (numDot > 3) \"No\"\n        else if (numDot == 0) \"No\"\n  \
    \      else {\n            val firstLetter = file_name.charAt(0)\n           \
    \ val firstLetterCap = firstLetter.toLower\n            if (firstLetter != 'a'\
    \ && firstLetter != 'b' && firstLetter != 'c' &&\n                firstLetter\
    \ != 'd' && firstLetter != 'e' && firstLetter != 'f' &&\n                firstLetter\
    \ != 'g' && firstLetter != 'h' && firstLetter != 'i' &&\n                firstLetter\
    \ != 'j' && firstLetter != 'k' && firstLetter != 'l' &&\n                firstLetter\
    \ != 'm' && firstLetter != 'n' && firstLetter != 'o' &&\n                firstLetter\
    \ != 'p' && firstLetter != 'q' && firstLetter != 'r' &&\n                firstLetter\
    \ != 's' && firstLetter != 't' && firstLetter != 'u' &&\n                firstLetter\
    \ != 'v' && firstLetter != 'w' && firstLetter != 'x' &&\n                firstLetter\
    \ != 'y' && firstLetter != 'z') {\n                return \"No\"\n           \
    \ }\n            var isValid = true\n            var subString = \"\"\n      \
    \      var checker = true\n            var firstLetterCap = file_name.charAt(0)\n\
    \            var lastLetterCap = file_name.charAt(file_name.length-1)\n      \
    \      var checker = true\n            val stringToCheck = file_name\n       \
    \     var i = 2\n            while (i <= stringToCheck.length) {\n           \
    \     val letter = stringToCheck.charAt(i)\n                val letterCap = letter.toLower\n\
    \                if (letter == '.') {\n                    if (checker == false)\
    \ {\n                        isValid = false\n                        break\n\
    \                    }\n                    checker = false\n                }\n\
    \                if (letter == '.') {\n                    checker = true\n  \
    \              }\n                if (letterCap >= 'a' && letterCap <= 'z') {\n\
    \                    if (firstLetterCap == letterCap) {\n                    \
    \    firstLetterCap = letterCap\n                    } else {\n              \
    \          isValid = false\n                        break\n                  \
    \  }\n                } else if (letterCap >= 'A' && letterCap <= 'Z') {\n   \
    \                 if (firstLetterCap == letterCap) {\n                       \
    \ firstLetterCap = letterCap\n                    } else {\n                 \
    \       isValid = false\n                        break\n                    }\n\
    \                } else {\n                    isValid = false\n             \
    \       break\n                }\n                subString += letter\n      \
    \          i += 1\n            }\n            if (isValid && firstLetterCap ==\
    \ 'a') {\n                if (subString.toLowerCase == \"txt\") {\n          \
    \          return \"Yes\"\n                } else if (subString.toLowerCase ==\
    \ \"exe\") {\n                    return \n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpagts2fnq.scala:114:0 ---------------------------\e\
    [0m\e[0m\n\e[31m114 |\e[0m\n\e[31m\e[31m    |\e[0m^\e[0m\n\e[31m    |\e[0m'}'\
    \ expected, but eof found\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpagts2fnq.scala:39:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m39 |\e[0m            \e[33mvar\e\
    [0m \e[36mfirstLetterCap\e[0m = file_name.charAt(\e[31m0\e[0m)\n\e[31m\e[31m \
    \  |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfirstLetterCap is already defined as \e[33mvalue\e[0m \e[35mfirstLetterCap\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmpagts2fnq.scala:41:16 ---------------------------\e[0m\e[0m\n\e\
    [31m41 |\e[0m            \e[33mvar\e[0m \e[36mchecker\e[0m = \e[31mtrue\e[0m\n\
    \e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mchecker\
    \ is already defined as \e[33mvariable\e[0m \e[35mchecker\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpagts2fnq.scala:50:24\
    \ ------------------------\e[0m\e[0m\n\e[31m50 |\e[0m                        break\n\
    \e[31m\e[31m   |\e[0m                        ^^^^^\e[0m\n\e[31m   |\e[0m     \
    \                   Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E052]\
    \ Type Error: /tmp/tmpagts2fnq.scala:59:39 -----------------------------\e[0m\e\
    [0m\n\e[31m59 |\e[0m                        firstLetterCap = letterCap\n\e[31m\e\
    [31m   |\e[0m                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m                        Reassignment to val firstLetterCap\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpagts2fnq.scala:62:24 ------------------------\e\
    [0m\e[0m\n\e[31m62 |\e[0m                        break\n\e[31m\e[31m   |\e[0m\
    \                        ^^^^^\e[0m\n\e[31m   |\e[0m                        Not\
    \ found: "
  stdout: ''
  timestamp: 1660010707
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val count = file_name.toCharArray.drop(3).sum\n\
    \        var isFileNameValid = false\n        if(count == 0){\n            isFileNameValid\
    \ = true\n        }\n        else if(count >= 3 && file_name.indexOf('.')>=1){\n\
    \            isFileNameValid = true\n        }\n        else if(!file_name.drop(1).isEmpty){\n\
    \            val beforeDot = file_name.drop(1).dropWhile(_.isLetter).mkString\n\
    \            val afterDot = file_name.drop(2).dropWhile(_.isDigit).mkString\n\
    \            isFileNameValid = beforeDot != \"\" && afterDot != \"\" && beforeDot.charAt(0)\
    \ < 'z' && beforeDot.charAt(0) > 'a' && afterDot.charAt(0) < 'z' && afterDot.charAt(0)\
    \ > 'a'\n        }\n        if(isFileNameValid){\n            if(file_name.drop(1).isEmpty){\n\
    \                return \"Yes\"\n            }\n            else{\n          \
    \      val beforeDot = file_name.drop(1).dropWhile(_.isLetter).mkString\n    \
    \            val afterDot = file_name.drop(2).dropWhile(_.isDigit).mkString\n\
    \                if(!beforeDot.isEmpty){\n                    if(beforeDot.charAt(0)\
    \ < 'z' && beforeDot.charAt(0) > 'a'){\n                        return \"No\"\n\
    \                    }\n                }\n                if(!afterDot.isEmpty){\n\
    \                    if(beforeDot.charAt(0) < 'z' && beforeDot.charAt(0) > 'a'){\n\
    \                        return \"No\"\n                    }\n              \
    \  }\n                if(afterDot != \"exe\" && afterDot != \"dll\" && afterDot\
    \ != \"txt\"){\n                    return \"No\"\n                }\n       \
    \         else{\n                    return \"Yes\"\n                }\n     \
    \       }\n        }\n        else{\n            return \"No\"\n        }\n  \
    \  }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpzo0rrkj5.scala:62)\n\tat Problem.main(tmpzo0rrkj5.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010710
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length > 3) {\n             return\
    \ \"No\"\n        }\n        val dotIndex = file_name.indexOf(\".\");\n      \
    \  if (dotIndex == 0) {\n             return \"No\"\n        }\n        val dotString:\
    \ String = file_name.substring(0, dotIndex);\n        val firstChar: Char = dotString.charAt(0);\n\
    \        if (firstChar < 'a' || firstChar > 'z') {\n             return \"No\"\
    \n        }\n        val lastChar: Char = dotString.charAt(dotString.length-1);\n\
    \        if (lastChar < 'a' || lastChar > 'z') {\n             return \"No\"\n\
    \        }\n        val fileNameNoExtension: String= dotString.substring(1);\n\
    \        var isValid = false;\n        if (fileNameNoExtension.contains(\"txt\"\
    ) || fileNameNoExtension.contains(\"exe\") || fileNameNoExtension.contains(\"\
    dll\") ) {\n             isValid = true;\n        }\n        if (fileNameNoExtension.length\
    \ > 3 ) {\n             isValid = false;\n        }\n        return if (isValid)\
    \ \n             \"Yes\" \n        else\n             \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmp47tw325j.scala:49)\n\tat Problem.main(tmp47tw325j.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010708
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val name = file_name.substring(0, file_name.length\
    \ - 1)\n        val index = name.lastIndexOf('.')\n        if (index > 0) {\n\
    \            val length = name.length - index\n            val letters = name.substring(0,\
    \ index).toCharArray\n            if (letters.length == 1 && letters(0) == 'a'\
    \ && letters(1) == 'z') \n                if (length == 2) \n                \
    \    val dotIndex = name.indexOf('.')\n                    val lastIndex = dotIndex\
    \ + 1\n                    if (lastIndex <= name.length && name.substring(lastIndex\
    \ - 1, lastIndex).toString == \"txt\" || name.substring(lastIndex - 1, lastIndex).toString\
    \ == \"exe\" || name.substring(lastIndex - 1, lastIndex).toString == \"dll\")\
    \ {\n                        return \"Yes\"\n                    } else { \n \
    \                       return \"No\"\n                    }\n            } else\
    \ \n                if (length == 0) \n                    return \"No\"\n   \
    \     }\n        \"No\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpahro_a6l.scala:68:0 ----------------------------\e\
    [0m\e[0m\n\e[31m68 |\e[0m}\n\e[31m\e[31m   |\e[0m^\e[0m\n\e[31m   |\e[0meof expected,\
    \ but '}' found\n\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpahro_a6l.scala:24:12\
    \ --------------------\e[0m\e[0m\n\e[31m24 |\e[0m            \e[33mif\e[0m (letters.length\
    \ == \e[31m1\e[0m && letters(\e[31m0\e[0m) == \e[31m'a'\e[0m && letters(\e[31m1\e\
    [0m) == \e[31m'z'\e[0m) \n\e[31m\e[31m   |\e[0m            ^\e[0m\n\e[31m   |\e\
    [0m            Found:    Unit\n\e[31m   |\e[0m            Required: String\n\e\
    [31m   |\e[0m            Maybe you are missing an else part for the conditional?\n\
    \e[31m25 |\e[0m                \e[33mif\e[0m (length == \e[31m2\e[0m) \n\e[31m26\
    \ |\e[0m                    \e[33mval\e[0m \e[36mdotIndex\e[0m = name.indexOf(\e\
    [31m'.'\e[0m)\n\e[31m27 |\e[0m                    \e[33mval\e[0m \e[36mlastIndex\e\
    [0m = dotIndex + \e[31m1\e[0m\n\e[31m28 |\e[0m                    \e[33mif\e[0m\
    \ (lastIndex <= name.length && name.substring(lastIndex - \e[31m1\e[0m, lastIndex).toString\
    \ == \e[31m\"txt\"\e[0m || name.substring(lastIndex - \e[31m1\e[0m, lastIndex).toString\
    \ == \e[31m\"exe\"\e[0m || name.substring(lastIndex - \e[31m1\e[0m, lastIndex).toString\
    \ == \e[31m\"dll\"\e[0m) {\n\e[31m29 |\e[0m                        \e[33mreturn\e\
    [0m \e[31m\"Yes\"\e[0m\n\e[31m30 |\e[0m                    } \e[33melse\e[0m {\
    \ \n\e[31m31 |\e[0m                        \e[33mreturn\e[0m \e[31m\"No\"\e[0m\n\
    \e[31m32 |\e[0m                    }\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer\
    \ explanation available when compiling with `-explain`\n\e[31m\e[31m-- [E006]\
    \ Not Found Error: /tmp/tmpahro_a6l.scala:34:20 ------------------------\e[0m\e\
    [0m\n\e[31m34 |\e[0m                \e[33mif\e[0m (length == \e[31m0\e[0m) \n\e\
    [31m\e[31m   |\e[0m                    ^^^^^^\e[0m\n\e[31m   |\e[0m          \
    \          Not found: length\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error:\
    \ /tmp/tmpahro_a6l.scala:40:11 ------------------------\e[0m\e[0m\n\e[31m40 |\e\
    [0m    assert(fileNameCheck((\e[31m\"example.txt\"\e[0m)).equals((\e[31m\"Yes\"\
    \e[0m)));\n\e[31m\e[31m "
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val numOfDigits = file_name.count { x => x <='9'\
    \ }\n        if(numOfDigits <= 3)\n            \"No\"\n        else if(file_name.contains(\"\
    .\"))\n            \"No\"\n        else if(file_name.substringBefore(\".\").isEmpty)\n\
    \            \"No\"\n        else if(!((file_name.substringBefore(file_name.indexOf(\"\
    .\")).matches(\"^[a-zA-Z]\"))))\n            \"No\"\n        else if(!file_name.substringAfter(\"\
    .\") in List(\"txt\", \"exe\", \"dll\"))\n            \"No\"\n        else\n \
    \           \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsgkqfdlj.scala:24:26 ------------------------\e\
    [0m\e[0m\n\e[31m24 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(file_name.substringBefore(\e\
    [31m\".\"\e[0m).isEmpty)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                value substringBefore is not a member of String\n\
    \e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpsgkqfdlj.scala:26:29 ------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(!((file_name.substringBefore(file_name.indexOf(\e\
    [31m\".\"\e[0m)).matches(\e[31m\"^[a-zA-Z]\"\e[0m))))\n\e[31m\e[31m   |\e[0m \
    \                  ^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           \
    \        value substringBefore is not a member of String\n\e[31m\e[31m-- [E008]\
    \ Not Found Error: /tmp/tmpsgkqfdlj.scala:28:27 ------------------------\e[0m\e\
    [0m\n\e[31m28 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(!file_name.substringAfter(\e\
    [31m\".\"\e[0m) in List(\e[31m\"txt\"\e[0m, \e[31m\"exe\"\e[0m, \e[31m\"dll\"\e\
    [0m))\n\e[31m\e[31m   |\e[0m                 ^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e\
    [31m   |\e[0m                 value substringAfter is not a member of String\n\
    3 errors found\n"
  stdout: ''
  timestamp: 1660010711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (fileName.split(\".\").length <= 1 || \"\
    ..\".equals(file_name.split(\".\").head) || !file_name.split(\".\").head.head.equals(\"\
    a\") || !file_name.split(\".\").last.contains(\"txt\") || !file_name.split(\"\
    .\").last.contains(\"exe\") || !file_name.split(\".\").last.contains(\"dll\"))\
    \ {\n            return \"No\"\n        }\n        return \"Yes\"\n    }\n   \
    \ def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmp1m7da7k1.scala:19:12 ------------------------\e\
    [0m\e[0m\n\e[31m19 |\e[0m        \e[33mif\e[0m (fileName.split(\e[31m\".\"\e[0m).length\
    \ <= \e[31m1\e[0m || \e[31m\"..\"\e[0m.equals(file_name.split(\e[31m\".\"\e[0m).head)\
    \ || !file_name.split(\e[31m\".\"\e[0m).head.head.equals(\e[31m\"a\"\e[0m) ||\
    \ !file_name.split(\e[31m\".\"\e[0m).last.contains(\e[31m\"txt\"\e[0m) || !file_name.split(\e\
    [31m\".\"\e[0m).last.contains(\e[31m\"exe\"\e[0m) || !file_name.split(\e[31m\"\
    .\"\e[0m).last.contains(\e[31m\"dll\"\e[0m)) {\n\e[31m\e[31m   |\e[0m        \
    \    ^^^^^^^^\e[0m\n\e[31m   |\e[0m            Not found: fileName\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    1 error found\n"
  stdout: ''
  timestamp: 1660010706
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        val file_name = file_name\n        val file_name\
    \ = file_name.toDouble\n        val file_name = file_name.toInt\n        val file_name\
    \ = file_name.toDouble.toChar\n        val file_name = file_name.toDouble.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar\n        val file_name\
    \ = file_name.toDouble.toChar.toChar.toChar\n        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar\n\
    \        val file_name = file_name.toDouble.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.toChar.to\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph82aa81e.scala:20:12 ---------------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toDouble\n\
    \e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0mfile_name is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\
    \e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be defined\
    \ in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error:\
    \ /tmp/tmph82aa81e.scala:21:12 ---------------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m = file_name.toInt\n\e[31m\e\
    [31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name\
    \ is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph82aa81e.scala:22:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m22 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.toDouble.toChar\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name\
    \ is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph82aa81e.scala:23:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.toDouble.toChar\n\e[31m\e[31m   |\e[0m    \
    \    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0mfile_name\
    \ is already defined as \e[33mvalue\e[0m \e[35mfile_name\e[0m\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0mNote that overloaded methods must all be defined in the same group\
    \ of toplevel definitions\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmph82aa81e.scala:24:12\
    \ ---------------------------\e[0m\e[0m\n\e[31m24 |\e[0m        \e[33mval\e[0m\
    \ \e[36mfile_name\e[0m = file_name.toDouble.toChar.toChar\n\e[31m\e[31m   |\e\
    [0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e\
    [0mfile_na"
  stdout: ''
  timestamp: 1660010712
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var fileName : String = \"No\"\n        var\
    \ dotIndex = 0\n        val dotIndex = file_name.indexOf('.');\n        if (dotIndex\
    \ != -1) {\n            var firstLetter = file_name.substring(0, dotIndex);\n\
    \            val firstLetterCode = firstLetter.toCharArray().map(_.toInt)\n  \
    \          if (firstLetterCode == 0)\n                return \"No\";\n       \
    \     var lastLetter = file_name.substring(dotIndex + 1);\n            val lastLetterCode\
    \ = lastLetter.toCharArray().map(_.toInt)\n            if (lastLetterCode != 0\
    \ && !(lastLetterCode == 1 && (firstLetterCode == 65 || firstLetterCode == 66\
    \ || firstLetterCode == 67 || firstLetterCode == 68 || firstLetterCode == 69 ||\
    \ firstLetterCode == 70)))\n                return \"No\";\n            var fileNameLength\
    \ = file_name.length - dotIndex - 1\n            var hasOnlyOneDot = false\n \
    \           val hasOnlyOneDot = file_name.substring(0, dotIndex) == \".\"\n  \
    \          if (hasOnlyOneDot)\n                fileNameLength = file_name.length\n\
    \            val fileNameCheck = file_name match {\n                case \"txt\"\
    \ => true\n                case \"exe\" => true\n                case \"dll\"\
    \ => true\n                case _ => false\n            }\n            if (!hasOnlyOneDot\
    \ || fileNameLength <= 3 || fileNameCheck == false)\n                return \"\
    No\"\n            fileName = \"Yes\"\n        }\n        return fileName\n   \
    \ }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E161] Naming Error: /tmp/tmp9f5nncaz.scala:21:12 ---------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mval\e[0m \e[36mdotIndex\e[0m = file_name.indexOf(\e\
    [31m'.'\e[0m);\n\e[31m\e[31m   |\e[0m        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mdotIndex is already defined as \e[33mvariable\e[0m \e[35mdotIndex\e\
    [0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods must all be\
    \ defined in the same group of toplevel definitions\n\e[31m\e[31m-- [E161] Naming\
    \ Error: /tmp/tmp9f5nncaz.scala:33:16 ---------------------------\e[0m\e[0m\n\e\
    [31m33 |\e[0m            \e[33mval\e[0m \e[36mhasOnlyOneDot\e[0m = file_name.substring(\e\
    [31m0\e[0m, dotIndex) == \e[31m\".\"\e[0m\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0mhasOnlyOneDot is already defined as \e[33mvariable\e[0m \e\
    [35mhasOnlyOneDot\e[0m\n\e[31m   |\e[0m\n\e[31m   |\e[0mNote that overloaded methods\
    \ must all be defined in the same group of toplevel definitions\n\e[31m\e[31m--\
    \ Error: /tmp/tmp9f5nncaz.scala:25:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m (firstLetterCode == \e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m \
    \  |\e[0m     Values of types Array[Int] and Int cannot be compared with == or\
    \ !=\n\e[31m\e[31m-- Error: /tmp/tmp9f5nncaz.scala:29:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m (lastLetterCode != \e[31m0\e\
    [0m && !(lastLetterCode == \e[31m1\e[0m && (firstLetterCode == \e[31m65\e[0m ||\
    \ firstLetterCode == \e[31m66\e[0m || firstLetterCode == \e[31m67\e[0m || firstLetterCode\
    \ == \e[31m68\e[0m || firstLetterCode == \e[31m69\e[0m || firstLetterCode == \e\
    [31m70\e[0m)))\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m     Values of types Array[Int] and Int cannot be compared with\
    \ == or !=\n\e[31m\e[31m-- Error: /tmp/tmp9f5nncaz.scala:29:41 -----------------------------------------\e\
    [0m\e[0m\n\e[31m29 |\e[0m            \e[33mif\e[0m (lastLetterCode != \e[31m0\e\
    [0m && !(lastLetterCode == \e[31m1\e[0m && (first"
  stdout: ''
  timestamp: 1660010716
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result = (\"No\")\n        if(file_name.nonEmpty)\
    \ {\n            if(file_name.length >= 4) {\n                var dotPosition\
    \ = file_name.indexOf(\".\")\n                if(dotPosition != -1) {\n      \
    \              var startWith = file_name.substring(0, dotPosition)\n         \
    \           var lastChar = file_name.substring(dotPosition, file_name.length)\n\
    \                    var fileExtension = lastChar.toLowerCase \n             \
    \       if(startWith.length == 1 || startWith.length == 2 || startWith.length\
    \ == 3 || startWith.length == 4) {\n                        if(fileExtension ==\
    \ \"txt\" || fileExtension == \"exe\" || fileExtension == \"dll\") {\n       \
    \                     result = (\"Yes\")\n                        }\n        \
    \            }\n                }\n            }\n        }\n        return result\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpxabpb_zm.scala:38)\n\tat Problem.main(tmpxabpb_zm.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        def isValidFile(file_name : String): Boolean\
    \ = {\n            var ok = false\n            // Split file name into filename\
    \ and extension\n            val parts = file_name.split(\".\")\n            //\
    \ check file name\n            val length = parts.length\n            if (length\
    \ != 2) {\n                return false\n            }\n            val file_name\
    \ = parts(0)\n            val extension = parts(1)\n            // Check whether\
    \ file name contains only digits\n            if (file_name.matches(\"\\\\d+\"\
    )) {\n                // Check whether file name contains only valid letters\n\
    \                val letters = file_name.toCharArray\n                for (i <-\
    \ 0 until letters.length) {\n                    if (letters(i) < 'a' || letters(i)\
    \ > 'z') {\n                        return false\n                    }\n    \
    \            }\n            }\n            // Check whether file name contains\
    \ only one dot\n            if (file_name.contains(\".\")) {\n               \
    \ val dot_index = file_name.indexOf(\".\")\n                val first_character\
    \ = if (dot_index >= 0) file_name(dot_index) else 0\n                if (dot_index\
    \ > 0 && first_character == 0) return false\n            }\n            // Check\
    \ whether file name starts with letter from latin alphabet\n            val chars\
    \ = file_name.toCharArray\n            if (chars.length > 1 && chars(0) == 'a'\
    \ && chars(1) == 'z') return true\n            if (chars.length > 1 && chars(0)\
    \ == 'A' && chars(1) == 'Z') return true\n            return false\n        }\n\
    \n        // if file name is not valid, return false\n        if (!isValidFile(file_name))\
    \ {\n            return \"No\"\n        }\n        // if file name passed the\
    \ test, return true\n        return \"Yes\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E045] Cyclic Error: /tmp/tmpczlsnhjt.scala:28:28 ---------------------------\e\
    [0m\e[0m\n\e[31m28 |\e[0m            \e[33mval\e[0m \e[36mfile_name\e[0m = parts(\e\
    [31m0\e[0m)\n\e[31m\e[31m   |\e[0m                            ^\e[0m\n\e[31m \
    \  |\e[0m                            Recursive \e[33mvalue\e[0m \e[35mparts\e\
    [0m needs type\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n1 error found\n"
  stdout: ''
  timestamp: 1660010711
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code goes here\n        val pattern\
    \ = \"\\\\d{3}\\\\.\\\\w+\"\n        val result = file_name.toString.matches(pattern)\n\
    \        if(result){\n            if(file_name.toString.substring(0,1) == file_name.toString.charAt(0))\
    \ {\n                if(!file_name.toString.substring(0,1) == file_name.toString.charAt(1)\
    \ || \"txt\".contains(file_name.toString.substring(file_name.toString.indexOf('.')))\
    \ || \"exe\".contains(file_name.toString.substring(file_name.toString.indexOf('.')))\
    \ || \"dll\".contains(file_name.toString.substring(file_name.toString.indexOf('.')))){\n\
    \                    return \"No\"\n                }else{\n                 \
    \   return \"Yes\"\n                }\n            }else{\n                return\
    \ \"No\"\n            }\n        }\n        return \"No\"\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpy3xulzii.scala:23:15 -----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m            \e[33mif\e[0m(file_name.toString.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) == file_name.toString.charAt(\e[31m0\e[0m)) {\n\e[31m\e\
    [31m   |\e[0m               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types String and Char cannot be compared\
    \ with == or !=\n\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpy3xulzii.scala:24:19\
    \ ------------------------\e[0m\e[0m\n\e[31m24 |\e[0m                \e[33mif\e\
    [0m(!file_name.toString.substring(\e[31m0\e[0m,\e[31m1\e[0m) == file_name.toString.charAt(\e\
    [31m1\e[0m) || \e[31m\"txt\"\e[0m.contains(file_name.toString.substring(file_name.toString.indexOf(\e\
    [31m'.'\e[0m))) || \e[31m\"exe\"\e[0m.contains(file_name.toString.substring(file_name.toString.indexOf(\e\
    [31m'.'\e[0m))) || \e[31m\"dll\"\e[0m.contains(file_name.toString.substring(file_name.toString.indexOf(\e\
    [31m'.'\e[0m)))){\n\e[31m\e[31m   |\e[0m                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                   value unary_! is not a member of String\n\
    2 errors found\n"
  stdout: ''
  timestamp: 1660010715
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code goes here\n        val dots = file_name.split(\"\
    \\\\.\").length\n        if (dots > 3 || file_name != file_name.split(\"\\\\.\"\
    ).last){\n            return \"No\"\n        }\n        if(file_name.indexOf(\"\
    .\") == 0 || file_name.substring(0,1) == \".\" || file_name.substring(0,2) ==\
    \ \".txt\"){\n            return \"No\"\n        }\n        if(file_name.substring(file_name.lastIndexOf(\"\
    .\") + 1).toLowerCase != \"exe\" || file_name.substring(0,1) == \".\" || file_name.substring(0,2)\
    \ == \".dll\"){\n            return \"No\"\n        }\n        return \"Yes\"\n\
    \    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpnhkphvzd.scala:33)\n\tat Problem.main(tmpnhkphvzd.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010717
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var valid : Boolean = true\n        val file_name\
    \ : String = (file_name split \".\").length == 1 \n        if(!file_name) {\n\
    \            valid = false\n        }\n        if(file_name.contains(\".\")) {\n\
    \            val subString = file_name.substring(0, file_name.indexOf(\".\"))\n\
    \            val subString = subString.toUpperCase().toCharArray\n           \
    \ val firstChar = subString(0)\n            val firstCharIsLetter = firstChar.isLetter\n\
    \            if(subString.length == 1) {\n                if(!firstCharIsLetter)\
    \ {\n                    valid = false\n                }\n            }\n   \
    \         else {\n                var valid : Boolean = false\n              \
    \  var i : Int = 0\n                for(i = 1; i < subString.length; i++) {\n\
    \                    val letter = subString(i)\n                    val letterIsLetter\
    \ = letter.isLetter\n                    if(!firstCharIsLetter && !letterIsLetter)\
    \ {\n                        valid = false\n                    }\n          \
    \      }\n                if(!valid) {\n                    valid = false\n  \
    \              }\n            }\n        }\n        if(!valid) {\n           \
    \ valid = \"No\"\n        }\n        valid\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpnpykzm_4.scala:37:22 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mfor\e[0m(i = \e[31m1\e[0m; i <\
    \ subString.length; i++) {\n\e[31m\e[31m   |\e[0m                      ^\e[0m\n\
    \e[31m   |\e[0m                      ')' expected, but '=' found\n\e[31m\e[31m--\
    \ [E040] Syntax Error: /tmp/tmpnpykzm_4.scala:37:47 ---------------------------\e\
    [0m\e[0m\n\e[31m37 |\e[0m                \e[33mfor\e[0m(i = \e[31m1\e[0m; i <\
    \ subString.length; i++) {\n\e[31m\e[31m   |\e[0m                            \
    \                   ^\e[0m\n\e[31m   |\e[0m                                  \
    \          '<-' expected, but ';' found\n\e[31m\e[31m-- [E032] Syntax Error: /tmp/tmpnpykzm_4.scala:37:52\
    \ ---------------------------\e[0m\e[0m\n\e[31m37 |\e[0m                \e[33mfor\e\
    [0m(i = \e[31m1\e[0m; i < subString.length; i++) {\n\e[31m\e[31m   |\e[0m    \
    \                                                ^\e[0m\n\e[31m   |\e[0m     \
    \                                               pattern expected\n\e[31m   |\e\
    [0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpnpykzm_4.scala:20:33 --------------------\e\
    [0m\e[0m\n\e[31m20 |\e[0m        \e[33mval\e[0m \e[36mfile_name\e[0m : \e[35mString\e\
    [0m = (file_name split \e[31m\".\"\e[0m).length == \e[31m1\e[0m \n\e[31m\e[31m\
    \   |\e[0m                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                 Found:    Boolean\n\e[31m\
    \   |\e[0m                                 Required: String\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E008] Not Found Error: /tmp/tmpnpykzm_4.scala:21:11 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(!file_name) {\n\e[31m\e[31m   |\e\
    [0m           ^^^^^^^^^^\e[0m\n\e[31m   |\e[0m           value unary_! is not\
    \ a member of String\n\e[31m\e[31m-- [E161] Naming Error: /tmp/tmpnpykzm_4.scala:26:16\
    \ ---------------------------\e[0m\e[0m\n\e[31m26 |\e[0m            \e[33mval\e\
    [0m \e[36msubString\e[0m = subString.toUpperCase().toCharArray\n\e"
  stdout: ''
  timestamp: 1660010718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length <= 3) {\n            return\
    \ \"No\"\n        } else if (file_name.indexOf('.') == -1) {\n            return\
    \ \"No\"\n        } else if (file_name.substring(0, 1).toInt == 0 || file_name.substring(file_name.length-1,\
    \ file_name.length).toInt == 0 || file_name.substring(file_name.indexOf('.'),\
    \ file_name.indexOf('.')).toUpper != 'TXT' && file_name.substring(file_name.indexOf('.'),\
    \ file_name.indexOf('.')).toUpper != 'EXE' && file_name.substring(file_name.indexOf('.'),\
    \ file_name.indexOf('.')).toUpper != 'DLL') {\n            return \"No\"\n   \
    \     } else {\n            return \"Yes\"\n        }\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmp25mogrqe.scala:23:210 ----------------------------------------\e\
    [0m\e[0m\n\e[31m23 |\e[0m        } \e[33melse\e[0m \e[33mif\e[0m (file_name.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m).toInt == \e[31m0\e[0m || file_name.substring(file_name.length-\e\
    [31m1\e[0m, file_name.length).toInt == \e[31m0\e[0m || file_name.substring(file_name.indexOf(\e\
    [31m'.'\e[0m), file_name.indexOf(\e[31m'.'\e[0m)).toUpper != \e[31m'TXT\e[0m'\
    \ && file_name.substring(file_name.indexOf(\e[31m'.'\e[0m), file_name.indexOf(\e\
    [31m'.'\e[0m)).toUpper != \e[31m'EXE\e[0m' && file_name.substring(file_name.indexOf(\e\
    [31m'.'\e[0m), file_name.indexOf(\e[31m'.'\e[0m)).toUpper != \e[31m'DLL\e[0m')\
    \ {\n\e[31m\e[31m   |\e[0m                                                   \
    \                                                                            \
    \                                                                            \
    \       ^\e[0m\n\e[31m   |\e[0msymbol literal 'TXT is no longer supported,\n\e\
    [31m   |\e[0muse a string literal \"TXT\" or an application Symbol(\"TXT\") instead,\n\
    \e[31m   |\e[0mor enclose in braces '{TXT} if you want a quoted expression.\n\e\
    [31m   |\e[0mFor now, you can also `import language.deprecated.symbolLiterals`\
    \ to accept\n\e[31m   |\e[0mthe idiom, but this possibility might no longer be\
    \ available in the future.\n\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmp25mogrqe.scala:23:214\
    \ --------------------------\e[0m\e[0m\n\e[31m23 |\e[0m        } \e[33melse\e\
    [0m \e[33mif\e[0m (file_name.substring(\e[31m0\e[0m, \e[31m1\e[0m).toInt == \e\
    [31m0\e[0m || file_name.substring(file_name.length-\e[31m1\e[0m, file_name.length).toInt\
    \ == \e[31m0\e[0m || file_name.substring(file_name.indexOf(\e[31m'.'\e[0m), file_name.indexOf(\e\
    [31m'.'\e[0m)).toUpper != \e[31m'TXT\e[0m' && file_name.substring(file_name.indexOf(\e\
    [31m'.'\e[0m), file_name.indexOf(\e[31m'.'\e[0m)).toUpper != \e[31m'EXE\e[0m'\
    \ && file_name.substring(file_name.indexOf(\e[31m'.'\e[0m), file_name.indexOf(\e\
    [31m'.'\e[0m)).toUpper != \e[31m'DLL\e[0m') {\n\e[31m\e[31m   |\e[0m         \
    \                                                                            \
    \                   "
  stdout: ''
  timestamp: 1660010714
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n      var check : Boolean = true\n      var newname\
    \ : String = \"\"\n      for (i <- 0 until fileName.length()) {\n        if (check(file_name.charAt(i))\
    \ && check(file_name.charAt(i)) && check(file_name.charAt(i)) && check(file_name.charAt(i))\
    \ && check(file_name.charAt(i)) && check(file_name.charAt(i)) && check(file_name.charAt(i)))\
    \ {\n          newname += file_name.charAt(i)\n        }\n      }\n      if (newname.length\
    \ < 3 && newname != \"\" && !check(newname.charAt(0))) {\n        return \"No\"\
    \n      }\n      else if (newname.length >= 3 && newname != \"\" && !check(newname.charAt(0)))\
    \ {\n        return \"No\"\n      }\n      else if (newname.length >= 2 && newname\
    \ != \"\" && !check(newname.charAt(0))) {\n        return \"No\"\n      }\n  \
    \    else {\n        return \"Yes\"\n      }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpjegwi27p.scala:21:24 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m      \e[33mfor\e[0m (i <- \e[31m0\e[0m until fileName.length())\
    \ {\n\e[31m\e[31m   |\e[0m                        ^^^^^^^^\e[0m\n\e[31m   |\e\
    [0m                        Not found: fileName\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E050] Type Error: /tmp/tmpjegwi27p.scala:22:12 -----------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m (check(file_name.charAt(i)) &&\
    \ check(file_name.charAt(i)) && check(file_name.charAt(i)) && check(file_name.charAt(i))\
    \ && check(file_name.charAt(i)) && check(file_name.charAt(i)) && check(file_name.charAt(i)))\
    \ {\n\e[31m\e[31m   |\e[0m            ^^^^^\e[0m\n\e[31m   |\e[0m            \e\
    [33mvariable\e[0m \e[35mcheck\e[0m does not take parameters\n\e[31m   |\e[0m\n\
    \e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E050] Type Error: /tmp/tmpjegwi27p.scala:26:50 -----------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m      \e[33mif\e[0m (newname.length < \e[31m3\e[0m &&\
    \ newname != \e[31m\"\"\e[0m && !check(newname.charAt(\e[31m0\e[0m))) {\n\e[31m\e\
    [31m   |\e[0m                                                  ^^^^^\e[0m\n\e\
    [31m   |\e[0m                                 \e[33mvariable\e[0m \e[35mcheck\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpjegwi27p.scala:29:56 -----------------------------\e[0m\e[0m\n\e[31m29\
    \ |\e[0m      \e[33melse\e[0m \e[33mif\e[0m (newname.length >= \e[31m3\e[0m &&\
    \ newname != \e[31m\"\"\e[0m && !check(newname.charAt(\e[31m0\e[0m))) {\n\e[31m\e\
    [31m   |\e[0m                                                        ^^^^^\e[0m\n\
    \e[31m   |\e[0m                                 \e[33mvariable\e[0m \e[35mcheck\e\
    [0m does not take parameters\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E050] Type Error:\
    \ /tmp/tmpjegwi27p.scala:32:56 -----------------------------\e[0m\e[0m\n\e[31m32"
  stdout: ''
  timestamp: 1660010713
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var result = \"No\";\n        var count = file_name.length;\n\
    \        var letterCount = 0;\n        var digitCount = 0;\n\n        while(count\
    \ > 0) {\n            if(file_name contains \"\\.\") {\n                result\
    \ = \"Yes\";\n                break;\n            }\n            else if(file_name.substring(0,1)\
    \ == \".\") {\n                result = \"No\";\n                break;\n    \
    \        }\n            else if ((file_name.substring(0,1) >='a' && file_name.substring(0,1)\
    \ <='z') \n                    || (file_name.substring(0,1) >='A' && file_name.substring(0,1)\
    \ <='Z')) {\n                letterCount++;\n            }\n            else if\
    \ ((file_name.substring(0,1) >='0' && file_name.substring(0,1) <='9')) {\n   \
    \             digitCount++;\n            }\n            else if ((file_name.substring(0,1)\
    \ >='a' && file_name.substring(0,1) <='z') \n                    || (file_name.substring(0,1)\
    \ >='A' && file_name.substring(0,1) <='Z')\n                    || (file_name.substring(0,1)\
    \ >='0' && file_name.substring(0,1) <='9')) {\n                result = \"No\"\
    ;\n                break;\n            }\n            else {\n               \
    \ result = \"No\";\n                break;\n            }\n            count--;\n\
    \        }\n        if(letterCount == 0 && digitCount == 0) {\n            result\
    \ = \"Yes\";\n        }\n        return result;\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- Error: /tmp/tmpwy0c1x0v.scala:25:36 -----------------------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m            \e[33mif\e[0m(file_name contains \e[31m\"\
    \\.\"\e[0m) {\n\e[31m\e[31m   |\e[0m                                    ^\e[0m\n\
    \e[31m   |\e[0m                                    invalid escape character\n\e\
    [31m\e[31m-- [E018] Syntax Error: /tmp/tmpwy0c1x0v.scala:35:29 ---------------------------\e\
    [0m\e[0m\n\e[31m35 |\e[0m                letterCount++;\n\e[31m\e[31m   |\e[0m\
    \                             ^\e[0m\n\e[31m   |\e[0m                        \
    \     expression expected but \e[31m';'\e[0m found\n\e[31m   |\e[0m\n\e[31m  \
    \ |\e[0m longer explanation available when compiling with `-explain`\n\e[31m\e\
    [31m-- [E018] Syntax Error: /tmp/tmpwy0c1x0v.scala:38:28 ---------------------------\e\
    [0m\e[0m\n\e[31m38 |\e[0m                digitCount++;\n\e[31m\e[31m   |\e[0m\
    \                            ^\e[0m\n\e[31m   |\e[0m                         \
    \   expression expected but \e[31m';'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E018] Syntax Error: /tmp/tmpwy0c1x0v.scala:50:19 ---------------------------\e\
    [0m\e[0m\n\e[31m50 |\e[0m            count--;\n\e[31m\e[31m   |\e[0m         \
    \          ^\e[0m\n\e[31m   |\e[0m                   expression expected but \e\
    [31m';'\e[0m found\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwy0c1x0v.scala:27:16\
    \ ------------------------\e[0m\e[0m\n\e[31m27 |\e[0m                break;\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E006] Not Found Error: /tmp/tmpwy0c1x0v.scala:31:16\
    \ ------------------------\e[0m\e[0m\n\e[31m31 |\e[0m                break;\n\e\
    [31m\e[31m   |\e[0m                ^^^^^\e[0m\n\e[31m   |\e[0m               \
    \ Not found: break\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation available\
    \ when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch Error: /"
  stdout: ''
  timestamp: 1660010719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code here\n        val fileList = file_name.toList\n\
    \        val dotPos = fileList.indexWhere(_ == '.')\n        if (dotPos > 1) {\n\
    \            fileList(0)\n        }\n        else {\n            if (fileList.head\
    \ == \"\") fileList.head\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpoekm2qo5.scala:23:20\
    \ --------------------\e[0m\e[0m\n\e[31m23 |\e[0m            fileList(\e[31m0\e\
    [0m)\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m     \
    \       Found:    Char\n\e[31m   |\e[0m            Required: String\n\e[31m  \
    \ |\e[0m\n\e[31m   |\e[0m longer explanation available when compiling with `-explain`\n\
    \e[31m\e[31m-- Error: /tmp/tmpoekm2qo5.scala:26:16 -----------------------------------------\e\
    [0m\e[0m\n\e[31m26 |\e[0m            \e[33mif\e[0m (fileList.head == \e[31m\"\"\
    \e[0m) fileList.head\n\e[31m\e[31m   |\e[0m                ^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m        Values of types Char and String cannot be compared\
    \ with == or !=\n2 errors found\n"
  stdout: ''
  timestamp: 1660010718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if (file_name.length > 3) {\n            return\
    \ \"No\"\n        }\n        if (file_name.contains(\".\")) {\n            return\
    \ \"No\"\n        }\n        if (file_name.substring(0, 1) == ('A'..'Z') || file_name.substring(0,\
    \ 1) == ('a'..'z')) {\n            return \"No\"\n        }\n        if (file_name.substringBeforeDot().isEmpty)\
    \ {\n            return \"No\"\n        }\n        if (file_name.substringAfterDot().toSet.size\
    \ == 3) {\n            return \"No\"\n        }\n        return \"Yes\"\n    }\n\
    \    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"example.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    ?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    @this1_is6_valid.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"I563_No.exe\")).equals((\"Yes\")));\n  \
    \  assert(fileNameCheck((\"Is3youfault.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    no_one#knows.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final132\")).equals((\"No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E040] Syntax Error: /tmp/tmpyueebiq4.scala:25:46 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (file_name.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m) == (\e[31m'A'\e[0m..\e[31m'Z'\e[0m) || file_name.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m) == (\e[31m'a'\e[0m..\e[31m'z'\e[0m)) {\n\e[31m\e[31m\
    \   |\e[0m                                              ^\e[0m\n\e[31m   |\e[0m\
    \                                   an identifier expected, but '.' found\n\e\
    [31m\e[31m-- [E040] Syntax Error: /tmp/tmpyueebiq4.scala:25:89 ---------------------------\e\
    [0m\e[0m\n\e[31m25 |\e[0m        \e[33mif\e[0m (file_name.substring(\e[31m0\e\
    [0m, \e[31m1\e[0m) == (\e[31m'A'\e[0m..\e[31m'Z'\e[0m) || file_name.substring(\e\
    [31m0\e[0m, \e[31m1\e[0m) == (\e[31m'a'\e[0m..\e[31m'z'\e[0m)) {\n\e[31m\e[31m\
    \   |\e[0m                                                                   \
    \                      ^\e[0m\n\e[31m   |\e[0m                               \
    \    an identifier expected, but '.' found\n\e[31m\e[31m-- [E008] Not Found Error:\
    \ /tmp/tmpyueebiq4.scala:28:22 ------------------------\e[0m\e[0m\n\e[31m28 |\e\
    [0m        \e[33mif\e[0m (file_name.substringBeforeDot().isEmpty) {\n\e[31m\e\
    [31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\e[31m   |\e[0m  \
    \          value substringBeforeDot is not a member of String\n\e[31m\e[31m--\
    \ [E008] Not Found Error: /tmp/tmpyueebiq4.scala:31:22 ------------------------\e\
    [0m\e[0m\n\e[31m31 |\e[0m        \e[33mif\e[0m (file_name.substringAfterDot().toSet.size\
    \ == \e[31m3\e[0m) {\n\e[31m\e[31m   |\e[0m            ^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m            value substringAfterDot is not a member of String\n\
    4 errors found\n"
  stdout: ''
  timestamp: 1660010718
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // Your code here\n        val fileName = file_name\
    \ split '.'\n        if(fileName.count(_ < '0') >= 3 || fileName.count(_ < 'A')\
    \ >= 1 || fileName.count(_ > 'Z') >= 1) \"No\"\n        else if(fileName.count(_\
    \ > 'Z') >= 1) \"No\"\n        else \"Yes\"\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdn8o1dt2.scala:21:30\
    \ --------------------\e[0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(fileName.count(_\
    \ < \e[31m'0'\e[0m) >= \e[31m3\e[0m || fileName.count(_ < \e[31m'A'\e[0m) >= \e\
    [31m1\e[0m || fileName.count(_ > \e[31m'Z'\e[0m) >= \e[31m1\e[0m) \e[31m\"No\"\
    \e[0m\n\e[31m\e[31m   |\e[0m                              ^^^\e[0m\n\e[31m   |\e\
    [0m                              Found:    (\e[31m'0'\e[0m : Char)\n\e[31m   |\e\
    [0m                              Required: String\n\e[31m   |\e[0m\n\e[31m   |\e\
    [0m longer explanation available when compiling with `-explain`\n\e[31m\e[31m--\
    \ [E007] Type Mismatch Error: /tmp/tmpdn8o1dt2.scala:21:62 --------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(fileName.count(_ < \e[31m'0'\e\
    [0m) >= \e[31m3\e[0m || fileName.count(_ < \e[31m'A'\e[0m) >= \e[31m1\e[0m ||\
    \ fileName.count(_ > \e[31m'Z'\e[0m) >= \e[31m1\e[0m) \e[31m\"No\"\e[0m\n\e[31m\e\
    [31m   |\e[0m                                                              ^^^\e\
    [0m\n\e[31m   |\e[0m                                                  Found: \
    \   (\e[31m'A'\e[0m : Char)\n\e[31m   |\e[0m                                 \
    \                 Required: String\n\e[31m   |\e[0m\n\e[31m   |\e[0m longer explanation\
    \ available when compiling with `-explain`\n\e[31m\e[31m-- [E007] Type Mismatch\
    \ Error: /tmp/tmpdn8o1dt2.scala:21:94 --------------------\e[0m\e[0m\n\e[31m21\
    \ |\e[0m        \e[33mif\e[0m(fileName.count(_ < \e[31m'0'\e[0m) >= \e[31m3\e\
    [0m || fileName.count(_ < \e[31m'A'\e[0m) >= \e[31m1\e[0m || fileName.count(_\
    \ > \e[31m'Z'\e[0m) >= \e[31m1\e[0m) \e[31m\"No\"\e[0m\n\e[31m\e[31m   |\e[0m\
    \                                                                            \
    \                  ^^^\e[0m\n\e[31m   |\e[0m                                 \
    \                 Found:    (\e[31m'Z'\e[0m : Char)\n\e[31m   |\e[0m         \
    \                                         Required: String\n\e[31m   |\e[0m\n\e\
    [31m   |\e[0m longer explanation available when compiling with `-explain`\n\e\
    [31m\e[31m-- [E007] Type Mismatch Error: /tmp/tmpdn8o1dt2.scala:22:35 --------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33melse\e[0m \e[33mif\e[0m(fileNam"
  stdout: ''
  timestamp: 1660010719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        var file_name : String = \"invalid\"\n     \
    \   var isValid : Boolean = false\n        if(file_name.contains(\".\") && file_name.substring(0,\
    \ 1).isLetter){\n            val index = file_name.indexOf(\".\") + 1\n      \
    \      val sub_string = file_name.substring(0, index)\n            val extension\
    \ = file_name.substring(index)\n            if(sub_string.length == 2 && sub_string.contains(\"\
    0\") && sub_string.contains(\"9\") && sub_string.contains(\".\")){\n         \
    \       if(extension.equals(\"txt\") || extension.equals(\"exe\") || extension.equals(\"\
    dll\")){\n                    isValid = true\n                }\n            }\n\
    \        }\n        if(!isValid){\n            return \"No\"\n        }else{\n\
    \            return \"Yes\"\n        }\n    }\n    def main(args: Array[String])\
    \ = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmpgt2imjgr.scala:21:64 ------------------------\e\
    [0m\e[0m\n\e[31m21 |\e[0m        \e[33mif\e[0m(file_name.contains(\e[31m\".\"\e\
    [0m) && file_name.substring(\e[31m0\e[0m, \e[31m1\e[0m).isLetter){\n\e[31m\e[31m\
    \   |\e[0m                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e\
    [0m\n\e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010718
- exit_code: 0
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        if(file_name.matches(\"^[0-9]{1,3}[^.]+[.][^.]+[.][^.]+$\"\
    ))\n        {\n            if(file_name.indexOf('.') >= 0)\n            {\n  \
    \              var a = file_name.substring(0, file_name.indexOf('.'));\n     \
    \           var b = file_name.substring(file_name.lastIndexOf('.'));\n       \
    \         if(a.matches(\"^[a-zA-z]+\"))\n                {\n                 \
    \   if(b.toString.toUpperCase().contains(\".txt\") || b.toString.toUpperCase().contains(\"\
    .exe\") || b.toString.toUpperCase().contains(\".dll\"))\n                    {\n\
    \                        return \"Yes\";\n                    }\n            \
    \    }\n            }\n        }\n        return \"No\";\n    }\n    def main(args:\
    \ Array[String]) = {\n    assert(fileNameCheck((\"example.txt\")).equals((\"Yes\"\
    )));\n    assert(fileNameCheck((\"1example.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s1sdf3.asd\")).equals((\"No\")));\n    assert(fileNameCheck((\"K.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"MY16FILE3.exe\")).equals((\"Yes\")));\n\
    \    assert(fileNameCheck((\"His12FILE94.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    _Y.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"/this_is_valid.dll\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"this_is_valid.wow\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    this_is_valid.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: Exception
  stderr: "java.lang.AssertionError: assertion failed\n\tat scala.runtime.Scala3RunTime$.assertFailed(Scala3RunTime.scala:11)\n\
    \tat Problem$.main(tmpabi3pju1.scala:37)\n\tat Problem.main(tmpabi3pju1.scala)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat dotty.tools.runner.RichClassLoader$.run$extension$$anonfun$1(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.ScalaClassLoader$.asContext(ScalaClassLoader.scala:80)\n\
    \tat dotty.tools.runner.RichClassLoader$.dotty$tools$runner$RichClassLoader$$$asContext$extension(ScalaClassLoader.scala:18)\n\
    \tat dotty.tools.runner.RichClassLoader$.run$extension(ScalaClassLoader.scala:36)\n\
    \tat dotty.tools.runner.CommonRunner.run(ObjectRunner.scala:23)\n\tat dotty.tools.runner.CommonRunner.run$(ObjectRunner.scala:13)\n\
    \tat dotty.tools.runner.ObjectRunner$.run(ObjectRunner.scala:48)\n\tat dotty.tools.runner.CommonRunner.runAndCatch(ObjectRunner.scala:30)\n\
    \tat dotty.tools.runner.CommonRunner.runAndCatch$(ObjectRunner.scala:13)\n\tat\
    \ dotty.tools.runner.ObjectRunner$.runAndCatch(ObjectRunner.scala:48)\n\tat dotty.tools.MainGenericRunner$.run$1(MainGenericRunner.scala:213)\n\
    \tat dotty.tools.MainGenericRunner$.main(MainGenericRunner.scala:268)\n\tat dotty.tools.MainGenericRunner.main(MainGenericRunner.scala)\n"
  stdout: ''
  timestamp: 1660010719
- exit_code: 1
  program: "import scala.math._\nimport scala.collection.mutable._\nobject Problem\
    \ {\n    // Create a function which takes a string representing a file's name,\
    \ and returns\n    // 'Yes' if the the file's name is valid, and returns 'No'\
    \ otherwise.\n    // A file's name is considered to be valid if and only if all\
    \ the following conditions \n    // are met:\n    // - There should not be more\
    \ than three digits ('0'-'9') in the file's name.\n    // - The file's name contains\
    \ exactly one dot '.'\n    // - The substring before the dot should not be empty,\
    \ and it starts with a letter from \n    // the latin alphapet ('a'-'z' and 'A'-'Z').\n\
    \    // - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\
    \    // Examples:\n    // >>> fileNameCheck((\"example.txt\"))\n    // (\"Yes\"\
    )\n    // >>> fileNameCheck((\"1example.dll\"))\n    // (\"No\")\n    def fileNameCheck(file_name\
    \ : String) : String = {\n        // TODO : Implement the condition check here\n\
    \        if(!(file_name.length > 3 && file_name.contains(\".\")))\n          \
    \  return \"No\"\n        if(file_name.indexOf(\".\") > 0 && !(file_name.substring(0,1).isLetter\
    \ && file_name.substring(0,1).isLower) && file_name.substring(0,1) != \"\" &&\
    \ !(file_name.substring(0,4).equals(\"example\") || file_name.substring(0,4).equals(\"\
    1example\") || file_name.substring(0,4).equals(\"examples\")))\n            return\
    \ \"No\"\n        if(!(\"txt\" == file_name.substring(0,4) || \"exe\" == file_name.substring(0,4)\
    \ || \"dll\" == file_name.substring(0,4)))\n            return \"No\"\n      \
    \  \"Yes\"\n    }\n    def main(args: Array[String]) = {\n    assert(fileNameCheck((\"\
    example.txt\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"1example.dll\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"s1sdf3.asd\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"K.dll\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"\
    MY16FILE3.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"His12FILE94.exe\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"_Y.txt\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"?aREYA.exe\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    /this_is_valid.dll\")).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.wow\"\
    )).equals((\"No\")));\n    assert(fileNameCheck((\"this_is_valid.txt\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"this_is_valid.txtexe\")).equals((\"No\"\
    )));\n    assert(fileNameCheck((\"#this2_i4s_5valid.ten\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"@this1_is6_valid.exe\")).equals((\"No\")));\n   \
    \ assert(fileNameCheck((\"this_is_12valid.6exe4.txt\")).equals((\"No\")));\n \
    \   assert(fileNameCheck((\"all.exe.txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    I563_No.exe\")).equals((\"Yes\")));\n    assert(fileNameCheck((\"Is3youfault.txt\"\
    )).equals((\"Yes\")));\n    assert(fileNameCheck((\"no_one#knows.dll\")).equals((\"\
    Yes\")));\n    assert(fileNameCheck((\"1I563_Yes3.exe\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\"I563_Yes3.txtt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    final..txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"final132\")).equals((\"\
    No\")));\n    assert(fileNameCheck((\"_f4indsartal132.\")).equals((\"No\")));\n\
    \    assert(fileNameCheck((\".txt\")).equals((\"No\")));\n    assert(fileNameCheck((\"\
    s.\")).equals((\"No\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: "\e[31m\e[31m-- [E008] Not Found Error: /tmp/tmp799x2bq7.scala:22:68 ------------------------\e\
    [0m\e[0m\n\e[31m22 |\e[0m        \e[33mif\e[0m(file_name.indexOf(\e[31m\".\"\e\
    [0m) > \e[31m0\e[0m && !(file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m).isLetter\
    \ && file_name.substring(\e[31m0\e[0m,\e[31m1\e[0m).isLower) && file_name.substring(\e\
    [31m0\e[0m,\e[31m1\e[0m) != \e[31m\"\"\e[0m && !(file_name.substring(\e[31m0\e\
    [0m,\e[31m4\e[0m).equals(\e[31m\"example\"\e[0m) || file_name.substring(\e[31m0\e\
    [0m,\e[31m4\e[0m).equals(\e[31m\"1example\"\e[0m) || file_name.substring(\e[31m0\e\
    [0m,\e[31m4\e[0m).equals(\e[31m\"examples\"\e[0m)))\n\e[31m\e[31m   |\e[0m   \
    \                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\e[0m\n\
    \e[31m   |\e[0m                                value isLetter is not a member\
    \ of String\n1 error found\n"
  stdout: ''
  timestamp: 1660010717
