name: HumanEval_82_prime_length
language: scala
prompt: "import scala.math._\nimport scala.collection.mutable._\nobject Problem {\n\
  \    // Write a function that takes a string and returns true if the string\n  \
  \  // length is a prime number or false otherwise\n    // Examples\n    // >>> primeLength((\"\
  Hello\"))\n    // (true)\n    // >>> primeLength((\"abcdcba\"))\n    // (true)\n\
  \    // >>> primeLength((\"kittens\"))\n    // (true)\n    // >>> primeLength((\"\
  orange\"))\n    // (false)\n    def primeLength(string : String) : Boolean = {\n"
tests: "    }\n    def main(args: Array[String]) = {\n    assert(primeLength((\"Hello\"\
  )) == (true));\n    assert(primeLength((\"abcdcba\")) == (true));\n    assert(primeLength((\"\
  kittens\")) == (true));\n    assert(primeLength((\"orange\")) == (false));\n   \
  \ assert(primeLength((\"wow\")) == (true));\n    assert(primeLength((\"world\"))\
  \ == (true));\n    assert(primeLength((\"MadaM\")) == (true));\n    assert(primeLength((\"\
  Wow\")) == (true));\n    assert(primeLength((\"\")) == (false));\n    assert(primeLength((\"\
  HI\")) == (true));\n    assert(primeLength((\"go\")) == (true));\n    assert(primeLength((\"\
  gogo\")) == (false));\n    assert(primeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n\
  \    assert(primeLength((\"Madam\")) == (true));\n    assert(primeLength((\"M\"\
  )) == (false));\n    assert(primeLength((\"0\")) == (false));\n    }\n\n}\n"
completions: ["        if (string.length <= 0) return false\n        var i = 0\n \
    \       var prime = true\n        while (i < string.length && prime) {\n     \
    \       if (string.charAt(i) != '0') prime = false\n            else {\n     \
    \           i = i + 1\n                while (i < string.length && string.charAt(i)\
    \ != '0') i = i + 1\n            }\n        }\n        return prime", "      \
    \  var isPrime : Boolean = false\n\n        string match {\n            case s:\
    \ String =>\n                for (i <- 0 until s.length - 1) {\n             \
    \       val upperIndex = i.toInt + 1\n\n                    if(s.charAt(i).toUpper\
    \ == s.charAt(upperIndex).toUpper) {\n                        isPrime = true\n\
    \                        break\n                    }\n                }\n   \
    \         case _ => throw new java.lang.RuntimeException(\"Not a String\")\n \
    \       }\n\n        isPrime", "        val isPrime = scala.collection.mutable.Set[Boolean]()\n\
    \        var n = string.length\n        while(n > 1){\n            if(string.charAt(n-1)\
    \ == string.charAt(n)) {\n                n -= 1\n            }\n            else{\n\
    \                isPrime += false\n            }\n        }\n        isPrime +=\
    \ true\n        isPrime.contains( false )", "      var result = false\n      var\
    \ i = 0\n      var isPrime = true\n\n      while (i < string.length) {\n     \
    \   val nextChar = string(i)\n        if (!(nextChar <= 0 || nextChar > string.length)\
    \ || nextChar == 0) \n          result = false\n        else if (string.charAt(i)\
    \ != '\\\\') {\n          if (string.charAt(i) != nextChar) {\n            isPrime\
    \ = false\n          }\n        }\n        else {\n          if (string.charAt(i\
    \ + 1) == \"\\\\\") {\n            i += 1\n            if (string.charAt(i) !=\
    \ '\\\\') {\n              isPrime = false\n            }\n          }\n     \
    \     else {\n            i += 1\n            val nextNextChar = string(i)\n \
    \           if (string.charAt(i) != '\\\\') {\n              isPrime = false\n\
    \            }\n            else {\n              if (string.charAt(i + 1) ==\
    \ \"\\\\\") {\n                i += 1\n                if (string.charAt(i) !=\
    \ '\\\\') {\n                  isPrime = false\n                }\n          \
    \    }\n              else {\n                i += 1\n                val nextNextNextChar\
    \ = string(i)\n                if (string.charAt(i) != '\\\\') {\n           \
    \       isPrime = false\n                }\n                else {\n         \
    \         if (string.charAt(i + 1) == \"\\\\\") {\n                    i += 1\n\
    \                    if (string.charAt(i) != '\\\\') {\n                     \
    \ isPrime = false\n                    }\n                  }\n              \
    \    else {\n                    i += 1\n                    val nextNextNextNextChar\
    \ = string(i)\n                    if (string.charAt(i) != '\\\\') {\n       \
    \               isPrime = false\n                    }\n                    else\
    \ {\n                      if (string.charAt(i + 1) == \"\\\\\") {\n         \
    \               i += 1\n                        if (string.charAt(i) != '\\\\\
    ') {\n                          isPrime = false\n                        }\n \
    \                     }\n                      else {\n                      \
    \  i += 1\n                        val nextNextNextNextNextChar = string(i)\n\
    \                        if (string.charAt(i) != '\\\\') {\n                 \
    \         isPrime = false\n                        }\n                       \
    \ else {\n                          if (string.charAt(i + 1) == \"\\\\\") {\n\
    \                            i += 1\n                            if (string.charAt(i)\
    \ != '\\\\') {\n                              isPrime = false\n              \
    \              }\n                          }\n                          else\
    \ {\n                            i += 1\n                            val nextNextNextNextNextNextChar\
    \ = string(i)\n                            if (string.charAt(i) != '\\\\') {\n\
    \                              isPrime = false\n                            }\n\
    \                            else {\n                              if (string.charAt(i\
    \ + 1) == \"\\\\\") {\n                                i += 1\n              \
    \                  if (string.charAt(i) != '\\\\') {\n                       \
    \           isPrime = false\n                                }\n             \
    \                 }\n                              else {\n                  \
    \              i += 1\n                                val nextNextNextNextNextNextNextChar\
    \ = string(i)\n                                if (string.charAt(i) != '\\\\')\
    \ {\n                                  isPrime = false\n                     \
    \           }\n                                else {\n                      \
    \            i += 1\n                                  val nextNextNextNextNextNextNextNextChar\
    \ = ", "        // Check if string is empty or null\n        if (string.isEmpty)\
    \ false\n        else string.forall(x => string.contains(\"a\")|| string.contains(\"\
    b\")|| string.contains(\"c\") || string.contains(\"d\")|| string.contains(\"e\"\
    )|| string.contains(\"f\")|| string.contains(\"g\")|| string.contains(\"h\")||\
    \ string.contains(\"i\")|| string.contains(\"j\")|| string.contains(\"k\")|| string.contains(\"\
    l\")|| string.contains(\"m\")|| string.contains(\"n\")|| string.contains(\"o\"\
    )|| string.contains(\"p\")|| string.contains(\"q\")|| string.contains(\"r\")||\
    \ string.contains(\"s\")|| string.contains(\"t\")|| string.contains(\"u\")|| string.contains(\"\
    v\")|| string.contains(\"w\")|| string.contains(\"x\")|| string.contains(\"y\"\
    )|| string.contains(\"z\"))", "        if(string.length < 2) { return false }\n\
    \        var result = true\n        val isPrime: Set[Int] = Set(2, 3 ,5 ,7)\n\
    \        for(i <- 2 until string.length-1) {\n            var prime = true\n \
    \           for(j <- 1 until i) {\n                if(string(i).charAt(j) !in\
    \ isPrime) { prime = false }\n            }\n            if(prime == true) { result\
    \ = false }\n        }\n        result", "        val len = string.length\n  \
    \      if (len == 1) return true\n        val prime = mutable.ArrayBuffer.empty[Int]\n\
    \        for (i <- 0 until len) {\n            var flag = false\n            prime\
    \ += 2\n            prime += 4\n            if (prime > len) flag = true\n   \
    \         prime += 6\n            if (prime > len) flag = true\n            if\
    \ (flag) break\n        }\n        return !flag", "        val nums = Array(\"\
    1\", \"2\", \"3\", \"5\", \"7\", \"11\")\n        for (i <- nums.indices) {\n\
    \            val num = nums(i)\n            val s = string + num\n           \
    \ val length = (s.length).toInt\n            if (length == 1)\n              \
    \  true\n            else\n                for (j <- 1 until length) {\n     \
    \               if (s % length != 0)\n                        false\n        \
    \        }\n        }\n        true", "        val length = string.length\n  \
    \      var flag = true\n        val list = List.fill(length)(true)\n        for(i<-0\
    \ until length) {\n            for(j<-(i+1) until length) {\n                list(i)\
    \ =! list(j)\n            }\n            if(flag && list.forall(x => x == true))\
    \ {\n                flag = false\n            }\n        }\n        flag", " \
    \       val primes = mutable.HashSet[Int]()\n        for (i <- 1 to string.length)\n\
    \            if (primes.contains(string.charAt(i))) {\n            primes = primes.updated(string.charAt(i),\
    \ 0)\n        }\n        primes.isEmpty", "        def isPrime(string : String,\
    \ primes : Int) : Boolean = {\n            if (primes % 2 == 0) return false\n\
    \            for (i <- 2 to (string.length / 2)) {\n                if (string.charAt(i)\
    \ == string.charAt(2 * i - 1)) {\n                    return false\n         \
    \       }\n            }\n            return true\n        }\n        var primes\
    \ = 2\n        var isPrime = true\n        for (i <- 0 to string.length - 1) {\n\
    \            if (isPrime(string , i)) {\n                primes ++\n         \
    \   }\n            else {\n                isPrime = false\n            }\n  \
    \      }\n        isPrime", "        //  Write your code\n        var isPrime\
    \ = true\n        val charArray = string.toCharArray\n        for ( i <- 1 until\
    \ charArray.length ) {\n            if(charArray(i) > 1 )\n            {\n   \
    \             val numArray = charArray.toInt\n                for (j <- 0 until\
    \ numArray.length ) {\n                    if((numArray(j) != 0) && (numArray(j)\
    \ == (numArray(j + 1) * (numArray.length - j - 1))))\n                    {\n\
    \                        isPrime = false\n                        break\n    \
    \                }\n                }\n            }\n        }\n        return\
    \ isPrime", "        val primes = new mutable.HashSet[Int]\n        var primeVal\
    \ = 0\n\n        for(i <- 0 until string.length) {\n            primeVal = primeVal\
    \ * string.charAt(i)\n            if(!primes.contains(primeVal)) {\n         \
    \       primes.add(primeVal)\n            }\n        }\n        primes.size ==\
    \ string.length", "      var prime = true : Boolean\n      for(i <- 2 to math.sqrt(string.length).toInt)\
    \ {\n        if(string.length % i == 0) {\n          prime = false\n         \
    \ break\n        }\n      }\n      prime", '        string.forall(char => string.contains(char)
    && string.size() % char == 0)', "        // Write your function here\n       \
    \ val isPrime = false \n        \n        if(string.length % 2 == 0 && string.length\
    \ >= 3){\n            for(number <- 0 until string.length - 1){\n            \
    \    if(string.charAt(number) == string.charAt(number + 1)){\n               \
    \     if(number == 0){\n                        isPrime = true\n             \
    \       }else{\n                        if(number == (string.length/2) || number\
    \ == (string.length/2 -1) || number == string.length - 1){\n                 \
    \           isPrime = true\n                        }\n                    }\n\
    \                }\n            }\n        }\n        \n        if(isPrime){\n\
    \            return true\n        }else{\n            return false\n        }",
  "        for (i <- 1 to string.length until string.length/2) {\n            val\
    \ start = i\n            val stop = i + string.length/2\n            if (string.slice(start,stop).forall(x\
    \ => x % string.length == 0)) {\n                return true\n            }\n\
    \        }\n        return false", "        val primes = scala.collection.mutable.MutableSet[Int]()\n\
    \        for ( s <- string.split(' ') ) {\n            if ( primes.contains(s.length-1)\
    \ == false ) primes += s.length-1\n        }\n        primes.size == string.length",
  "        val list = string.split(\"\")\n        val listOfPrimes = list.filter(x\
    \ => List(2, 3, 5, 7, 11, 13, 17, 19).contains(x))\n        listOfPrimes.length\
    \ == string.length", "        var res = true\n        for (str <- string) {\n\
    \            val m = scala.math.sqrt(str.size)\n            val m1 = scala.math.ceil(m\
    \ / 2)\n            if ((str.length % m) == 0) {\n                res = (str.length\
    \ % m) == 0\n            } else {\n                res = (str.length % m) != 0\n\
    \            }\n            if (res == true) {\n                break\n      \
    \      }\n        }\n        return res", "        // Complete this function\n\
    \        val primes = mutable.Set[Boolean]()\n        for(c <- string) {\n   \
    \         if(primes.contains(c)) {\n                return false\n           \
    \ }\n            primes.contains(c) match {\n            case true => primes +=\
    \ true\n            case false => primes += false\n            }\n        }\n\
    \        true", "        if(string == null || string.length <= 1)\n          \
    \  return false\n        val primes = new mutable.HashSet[Int]\n        for(i\
    \ <- 2 to string.length-1)\n            if(primes.contains(i) && primes.forall(i\
    \ => string.charAt(i) == string.charAt(i+1)))\n                primes.add(i)\n\
    \        return primes.size == string.length", "        var prime = true\n   \
    \     var charCount = string.length\n        val oddCount = charCount / 2\n  \
    \      var maxCount = charCount - 1\n        val primeCount = 2\n        while(prime\
    \ == true && primeCount <= maxCount) {\n            charCount = charCount * 2\n\
    \            val newOddCount = charCount / 2\n            if(newOddCount != oddCount\
    \ && string.charAt(newOddCount - 1).isLetter == true ) {\n                prime\
    \ = false\n            }\n            oddCount = newOddCount\n            maxCount\
    \ = maxCount / 2\n            primeCount += 1\n        }\n        prime", "  \
    \      var result = true\n        for(i <- 2 until string.length)\n        {\n\
    \            if(!prime(i, string))\n            {\n                result = false\n\
    \                break\n            }\n        }\n        result", "        if\
    \ (string.length == 1) false\n        else if (string.length == 2) true\n    \
    \    else {\n            // The first two characters of the string should be greater\
    \ than 1\n            val isPrime = true\n            val start = 0\n        \
    \    val end = string.length - 1 \n            while (start < end) {\n       \
    \         if (string.charAt(start) != string.charAt(start + 1)) {\n          \
    \          isPrime = false\n                    break\n                }\n   \
    \             start += 1\n            }\n            if (isPrime) {\n        \
    \        println(\"string \" + string + \" is a prime length\")\n            \
    \    return true\n            } else {\n                println(\"string \" +\
    \ string + \" is not a prime length\")\n                return false\n       \
    \     }\n        }", "        var prime = true\n        for (i<-2 until string.length-1)\
    \ {\n            if (i==0) prime = false\n            else if (string.charAt(i)==string.charAt(i-1))\
    \ prime = false\n            else prime = true\n        }\n        prime", " \
    \       string.map(s => (s + \"a\").foldLeft(true){ (acc, s) =>\n            val\
    \ n = s.length\n            acc * (n % 2 == 0 || s == \"a\")\n        }).filter(_\
    \ == true).length == string.length", "        val primes = mutable.ListBuffer(2)\n\
    \        var isPrime = true\n        var len = 0\n        for (c <- string) {\n\
    \            val n = math.pow(2, len)\n            if (c == 'a') {\n         \
    \       len += 1\n                continue\n            }\n            var isPrime\
    \ = true\n            for (i <- 2 to n) {\n                if (math.mod(i, c)\
    \ == 0) {\n                    isPrime = false\n                    break\n  \
    \              }\n            }\n            if (isPrime) {\n                primes\
    \ += c\n            }\n            len += 1\n        }\n        primes.size ==\
    \ string.size && primes.forall(x => string.indexOf(x) == 0)", "        var isPrime\
    \ = true\n        var length = string.length\n        var index = 0\n        var\
    \ isPrime = true\n        while (index <= (length / 2)){\n            if(string.charAt(index)\
    \ != string.charAt(length / 2 + index)){\n                isPrime = false\n  \
    \          }\n            index += 1\n        }\n        return isPrime", "  \
    \      val primes = new mutable.ArrayList[Int](2)\n        var isPrime : Boolean\
    \ = false\n        for (i <- 2 until string.length)\n            if (string.charAt(i)\
    \ != '\\\\')\n                primes += string.charAt(i)\n            for (j <-\
    \ 2 until primes.length) {\n                if (primes(j) == string.charAt(i))\n\
    \                    isPrime = true\n            }\n        if (isPrime)\n   \
    \         true\n        else\n            false", "        val str = string.map(_.toInt)\n\
    \        val primes = mutable.ListBuffer(2)\n        for (s <- str) {\n      \
    \      for (pprime <- primes) {\n                if (pprime * pprime > s) return\
    \ false\n                if (s % pprime == 0) primes += pprime\n            }\n\
    \        }\n        return true", "        val primes = Array(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29)\n        for (i <- 1 to string.length) yield {\n       \
    \     if (primes.contains(string.charAt(i))) {\n                false\n      \
    \      } else true \n        }", "        for( i <- 1 to string.length-1 )\n \
    \       { \n            if( string.charAt(i) != string.charAt(i+1) && string.charAt(i)\
    \ != \"0\" )\n            { \n                if( string.charAt(i) != string.charAt(i+2)\
    \ && string.charAt(i) != \"0\" )\n                { \n                    if(\
    \ string.charAt(i) != string.charAt(i+3) && string.charAt(i) != \"0\" )\n    \
    \                { \n                        if( string.charAt(i) != string.charAt(i+4)\
    \ && string.charAt(i) != \"0\" )\n                        {\n                \
    \            if( string.charAt(i) != string.charAt(i+5) && string.charAt(i) !=\
    \ \"0\" )\n                            { \n                                if(\
    \ string.charAt(i) != string.charAt(i+6) && string.charAt(i) != \"0\" )\n    \
    \                            { \n                                    if( string.charAt(i)\
    \ != string.charAt(i+7) && string.charAt(i) != \"0\" )\n                     \
    \               { \n                                        if( string.charAt(i)\
    \ != string.charAt(i+8) && string.charAt(i) != \"0\" )\n                     \
    \                   { \n                                            if( string.charAt(i)\
    \ != string.charAt(i+9) && string.charAt(i) != \"0\" )\n                     \
    \                       { \n                                                if(\
    \ string.charAt(i) != string.charAt(i+10) && string.charAt(i) != \"0\" )\n   \
    \                                             {\n                            \
    \                        if( string.charAt(i) != string.charAt(i+11) && string.charAt(i)\
    \ != \"0\" )\n                                                    {\n        \
    \                                                if( string.charAt(i) != string.charAt(i+12)\
    \ && string.charAt(i) != \"0\" )\n                                           \
    \             {\n                                                            if(\
    \ string.charAt(i) != string.charAt(i+13) && string.charAt(i) != \"0\" )\n   \
    \                                                         {\n                \
    \                                                if( string.charAt(i) != string.charAt(i+14)\
    \ && string.charAt(i) != \"0\" )\n                                           \
    \                     {\n                                                    \
    \                if( string.charAt(i) != string.charAt(i+15) && string.charAt(i)\
    \ != \"0\" )\n                                                               \
    \     {\n                                                                    \
    \    if( string.charAt(i) != string.charAt(i+16) && string.charAt(i) != \"0\"\
    \ )\n                                                                        {\
    \ \n                                                                         \
    \   if( string.charAt(i) != string.charAt(i+17) && string.charAt(i) != \"0\" )\n\
    \                                                                            {\
    \ \n                                                                         \
    \       if( string.charAt(i) != string.charAt(i+18) && string.charAt(i) != \"\
    0\" )\n                                                                      \
    \          { \n                                                              \
    \                      if( string.charAt(i) != string.charAt(i+19) && string.charAt(i)\
    \ != \"0\" )\n                                                               \
    \                     { \n                                                   \
    \                                     if( string.charAt(i) != string.charAt(i+20)\
    \ && string.charAt(i) != \"0\" )\n                                           \
    \                                             {\n                            \
    \                                                                if( string.charAt(i)\
    \ != string.charAt(i+21) && string.charAt(i) != \"0\" )\n                    \
    \                                                                        { \n\
    \                                                                            \
    \                    if( string.charAt(i) != string.charAt(i+22) && string.charAt(i)\
    \ != \"0\" )\n                                                                ",
  "      val allLetters = string.filter(letter => letter.isLetter)\n      if(allLetters.isEmpty)\n\
    \        true\n      else\n        allLetters.forall(_ % 2 != 0)", '      string.forall(char
    => string.count(_ == char) > 1)', "        val length = string.length()\n    \
    \    val counter = for (i <- 0 until length-1) yield i -> 1 // counter: Map[Int,Int]\n\
    \        val primes = Set()\n        for (n = length to 1 by -1) primes.add(true)\
    \ //primes: Set[Boolean]\n        counter.foreach { case (i,c) =>\n          \
    \  if (c>1 && counter(i-1) * c > length) primes.updated(i, false)\n        }\n\
    \        primes.contains(true)", "        string match {\n            case x ::\
    \ y => {\n                val primesIndex = new Array[Int](y.length)\n       \
    \         val isPrime = true\n                for (i <- 0 until primesIndex.length)\
    \ {\n                    val number = y(i)\n                    if (number % 2\
    \ == 0 || number % 3 == 0) {\n                        primesIndex(i) = false\n\
    \                    }\n                    if (number < 2) isPrime = false\n\
    \                }\n                if (isPrime)\n                    primesIndex.length\
    \ match {\n                        case x if x > 1 => true\n                 \
    \       case _ => false\n                    }\n            }\n        }", " \
    \       for(str <- string.toCharArray) yield {\n            val x = math.ceil(math.log1p(str.toDouble).toInt)\n\
    \            if(str.toInt == 1) false\n            if(str.toInt == x-1) true\n\
    \            else primeLength2(str, x, true)\n        }", "        var primeNumber\
    \ : Int = 0\n        var isPrime : Boolean = true\n        for (char c : string.toCharArray){\n\
    \            if (c != ' ') {\n                for (i : Int = c to Character.MAX_VALUE){\n\
    \                    val value = Math.pow(i, 2)\n                    if (value\
    \ < primeNumber) {\n                        isPrime = false\n                \
    \        break\n                    }\n                    primeNumber = value\n\
    \                }\n            }\n        }\n        isPrime", "        // Your\
    \ code here\n        var isPrime = true\n        for (c <- string) {\n       \
    \     if (string.count(_ == c) > 1) {\n                isPrime = false\n     \
    \           break\n            }\n        }\n        return isPrime", "      \
    \  var flag = false\n        val numList: mutable.MutableList[Int] = mutable.MutableList()\n\
    \        var index = 0\n        var j = 1\n        for ( i <- 0 until string.length\
    \ )\n            if(i == 0) {\n                numList.append(0)\n           \
    \     index = i\n                j = 1\n            }\n            else {\n  \
    \              if(string.charAt(i) == string.charAt(i-1))\n                  \
    \  numList(numList.length-1) = numList(numList.length-1)+1\n                else\
    \ {\n                    while(j<numList.length){\n                        if(string.charAt(i)\
    \ == string.charAt(numList(j))){\n                            numList(j) = numList(j)+1\n\
    \                            break\n                        }\n              \
    \          else\n                            j=j+1\n                    }\n  \
    \                  if(numList.length==0)\n                        numList.append(i)\n\
    \                }\n                index = i\n            }\n        for ( i\
    \ <- numList )\n            if(i % 2 != 0)\n                flag = false\n   \
    \     return flag", "        if(string.length <= 1 || string.length > 1000) false\n\
    \        else\n        for((x <- 2 until string.length)) {\n            if(!string.contains(x.toString))\
    \ {\n                return false\n            }\n        }\n        true", " \
    \       // Write your code here\n        def isPrime(i:Int):Boolean =\n      \
    \      if(i == 1) true\n            else if(i == 2) true\n            else if(i\
    \ % 2 == 0) false\n            else if(i % 3 == 0) false\n            else {\n\
    \                var result = true\n                for(j <- 3 to ((i/3)+1) by\
    \ 2){\n                    result = result && i % j == 0\n                }\n\
    \                result\n            }\n        for(i <- 0 to string.length-1)\
    \ {\n            if(!isPrime(string.charAt(i))) {\n                return false\n\
    \            }\n        }\n        return true", '        for(i <- 1 to string.length)
    yield { if(string.length % i == 0) true else false }', "        //Write code here\n\
    \        var counter = 0\n        var counter2 = 0\n        for( i <- 0 until\
    \ string.length){\n            if( string(i) == string.charAt(i) && string.charAt(i)\
    \ != \"a\" && string.charAt(i) != \"e\" && string.charAt(i) != \"i\" && string.charAt(i)\
    \ != \"o\" && string.charAt(i) != \"u\"){\n                counter += 1\n    \
    \        }\n        }\n        for( i <- 0 until string.length){\n           \
    \ if( string(i) == string.charAt(i) && string.charAt(i) != \"a\" && string.charAt(i)\
    \ != \"e\" && string.charAt(i) != \"i\" && string.charAt(i) != \"o\" && string.charAt(i)\
    \ != \"u\"){\n                counter2 += 1\n            }\n        }\n      \
    \  if(counter % 2 == 0){\n            true\n        }else{\n            false\n\
    \        }\n        ", "        var result = true\n        for (letter <- string.toCharArray)\
    \ {\n            val counter = (string.count(x => x == letter).toInt)\n      \
    \      if (counter == 0) result = false\n            if (counter != 2) result\
    \ = false\n        }\n        result", "      var prime = false\n      var divisor\
    \ = 1\n      while( !prime && divisor < string.length){\n         if( string.charAt(divisor)\
    \ != string.charAt(divisor-1)){\n            prime = true\n         }\n      \
    \   divisor+=1\n      }\n      return prime", "        for( i <- 2 to string.size){\n\
    \            if( string.charAt(i) equals string.charAt(string.size-i)){\n    \
    \            false\n            }\n        }\n        true", "        // Write\
    \ your code here\n        string.size <= 2 || string.forall(i => string.contains(s\"\
    ${i}\"))", "        // base case\n        if(string.length <= 1) {\n         \
    \   return true\n        }\n\n        // iterate through the string and keep track\
    \ of the smallest number\n        var smallest = string(0)\n\n        for(i <-\
    \ 1 to string.length) {\n            // if current character is smaller than the\
    \ current smallest number\n            if(string.charAt(i) < smallest) {\n   \
    \             smallest = string.charAt(i)\n            }\n        }\n\n      \
    \  // if the smallest number is equal to the first character, then we have a prime\
    \ number\n        // if not, then we have not a prime number\n        return string.charAt(0)\
    \ == smallest", "        val n = (for (x <- string.length if !(x %in% 2 :: 3 ::\
    \ 5 :: 7 :: 11 :: 13 :: 17)) yield x).toArray\n        val m = n.length\n    \
    \    var d = 0\n        var i = 2\n        var b = True\n        while (i <= m)\
    \ {\n            if (n(i) % i != 0) {\n                d = n(i) + d + 1\n    \
    \        }\n            else {\n                d = n(i) + d + 1\n           \
    \     b = False\n            }\n            i = i + 1\n        }\n        return\
    \ b", "      val lengthList = string.split(\"\").toList\n      lengthList.foldLeft(true)((x,y)\
    \ => x && isPrime(y))", "        if (string.length == 2) true\n        else {\n\
    \            val listOfPrimes = scala.collection.mutable.ListBuffer[Int]()\n \
    \           val intList = string.split(\" \").toList\n            intList.foreach{\
    \ item => \n                if (isPrime(item)) { listOfPrimes += item }\n    \
    \        }\n            if (listOfPrimes.size == intList.length) true\n      \
    \      else false\n        }", "        val length = string.length()\n       \
    \ if (length > 1) {\n            var isPrime = true\n            for (i = 1 until\
    \ length) {\n                if (string.charAt(i) != string.charAt(i - 1)) {\n\
    \                    val isComposite = string.length % i == 0\n              \
    \      if (isComposite) isPrime = false\n                }\n            }\n  \
    \          isPrime\n        } else {\n            true\n        }", "        //\
    \ Write your code here\n        // Return true if string is a prime number\n \
    \       // Return false otherwise", "        string match{\n            case \"\
    \" => true\n            case _ => string.length match {\n                case\
    \ 1 => true\n                case _ => {\n                    val num = string.length\n\
    \                    val numPrimes = 2 #:: 2 #:: 3 #:: 5 #:: 7 #:: 13 #:: 17 #::\
    \ 19 #:: 25 #:: 31\n                    def isPrime(n: Int): Boolean = {\n   \
    \                     if(num % n == 0) numPrimes.takeWhile(x => num % x == 0).forall(n\
    \ => n % n == 0)\n                        else false\n                    }\n\
    \                    numPrimes.find(isPrime(_)).isDefined\n                }\n\
    \            }\n        }", "        for (i<-0 to string.length-1){\n        \
    \    for (j<-i+1 to string.length-1){\n                if (string(i) != string(j)){\n\
    \                    if (string.chars(i).count(_ == 'a') == string.chars(j).count(_\
    \ == 'a') + 1)\n                        return false\n                }\n    \
    \        }\n        }\n        return true", "         if(string.length == 0)\
    \ return true\n         var isPrime = true\n         for(i <- 1 until string.length){\n\
    \             if(string.charAt(i) == string.charAt(i)){\n                 isPrime\
    \ = false\n                 break\n             }\n         }\n         isPrime",
  "        var isPrime : Boolean = true\n\n        if(string.length == 1 || string.length\
    \ == 0){\n            return true\n        }\n        // Check string for prime\
    \ characters\n        for(i <- 2 to string.length -1 ){\n            if(string.charAt(i)\
    \ != string.charAt(i-1)){\n                isPrime = false\n                break\n\
    \            }\n        }\n        isPrime", "        val primes = mutable.ListBuffer[Int]()\n\
    \        string.forall { c =>\n            if (c <= 1) false\n            if (primes.contains(c))\
    \ false\n            val i = 2\n            while (i * i <= c) primes += i\n \
    \           primes.contains(c)\n        }", "        val str = string.trim\n \
    \       val primes = List[Int]().toList\n        val length = str.size\n     \
    \   var i = 2\n        while(i < length){\n            if(primes.contains(i))\n\
    \                continue\n            primes += i\n            if(i % length\
    \ == 0)\n                return false\n            i += 1 \n        }\n      \
    \  true", "        val len = string.length\n        if(len > 1 & len < 1000) (true)\
    \ else false", "        for (i <- 2 until string.length) {\n            if (string.charAt(i)\
    \ == string.charAt(string.length-i-1)) {\n                return false\n     \
    \       }\n        }\n        return true", "        val length = string.length\n\
    \        for( i <- 0 until length ) {\n            if( i % length == 0 && length\
    \ == string.length ) {\n                return false\n            }\n        }\n\
    \        true", "        def primeLength(string : String) : Boolean = {\n    \
    \        var prime = scala.util.MurmurHash.stringHash(string) % 2 == 0\n     \
    \       var i : Int = 0\n            while (prime && i < string.length)\n    \
    \            prime = scala.util.MurmurHash.stringHash(string.substring(0, i +\
    \ 1)) % 2 == 0\n                i += 1\n            prime\n        }", "     \
    \   var index = 0\n        var count = 1\n        var isPrime = true\n       \
    \ while(isPrime && index < string.length) {\n            index = index + 1\n \
    \           count = count + 1\n            if(string.charAt(index) >= 'a' && string.charAt(index)\
    \ <= 'z') {\n                isPrime = true\n            } else {\n          \
    \      isPrime = false\n            }\n        }\n        count = count - 1\n\
    \        if(isPrime) {\n            true\n        } else {\n            false\n\
    \        }", "        val lengths = string.toSet.toList map {c => c length }\n\
    \        for(i <- 0 until lengths.length)\n        { if(lengths(i) > 1 ) false\
    \ else true }", "        string.map(x => x match {\n                case _ if\
    \ x == ' ' =>  false\n                case x => x.toInt != 0\n            }).distinct.getOrElse(false)",
  "        var isPrime = true\n        for (letter <- string) {\n            var i\
    \ = 2\n            while (i <= letter.length) {\n                if (letter.length\
    \ % i > 0) {\n                    isPrime = false\n                    break\n\
    \                }\n                i += 1\n            }\n        }\n       \
    \ return isPrime", "        // Write code here\n        val charArray = string.toCharArray\n\
    \        for(i <- 0 until charArray.length){\n            val n = charArray(i)\n\
    \            val prime = if(n % 2 == 0) 2 else 1\n            if((n*prime) % 100\
    \ == 0) false else true\n        }", "        val stringLength : Int = string.length\n\
    \        val primeLength : Int = stringLength.toInt\n        for( i <- 2 to stringLength.toInt\
    \ ) {\n            if( ( stringLength rem i ) == 0 ) {\n                primeLength\
    \ = i\n                stringLength rem i\n            }\n        }\n        return\
    \ stringLength >= primeLength.toInt", "      var isPrime : Boolean = true\n  \
    \    var divisor = 2\n      var length : Int = string.length\n\n      while(isPrime){\n\
    \        if(string.length == 1){\n          isPrime = false\n        }else{\n\
    \          divisor = 3\n          while(divisor < string.length && divisor * divisor\
    \ <= string.length){\n            if(string.length % divisor == 0){\n        \
    \      isPrime = false\n            }else{\n              divisor += 2\n     \
    \       }\n          }\n        }\n      }\n      isPrime", "        val primes\
    \ = mutable.ArrayBuffer.empty[Boolean]\n        for (char <- string.toCharArray)\
    \ {\n            if (primes.contains(char)) {\n                continue\n    \
    \        }\n            var isPrime = true\n            for (i <- 2 to char.asInstanceOf[Int])\
    \ {\n                if (char.asInstanceOf[Int] * i == char.asInstanceOf[Int])\
    \ {\n                    isPrime = false\n                    break\n        \
    \        }\n            }\n            primes ++= isPrime\n        }\n       \
    \ primes.toSet.length == 1", "        def isPrime(n:Int) : Boolean = {\n     \
    \       if (n == 1) {\n                return true\n            }\n          \
    \  val m = n/2\n            if (n % 2 == 0) {\n                return true\n \
    \           }\n            for (i <- 3 to Math.sqrt(n).toInt) {\n            \
    \    if ((n % i) == 0) {\n                    return false\n                }\n\
    \            }\n            return true\n        }\n        var counter = 1\n\
    \        string.split(\"\\\\W+\").foreach{ word =>\n            if (!word.equals(\"\
    \")) {\n                if (!isPrime(counter)) {\n                    return false\n\
    \                }\n                counter += 1\n            }\n        }\n \
    \       return true", '        // TODO: Implement this function', "        val\
    \ n = string.length\n        for (i <- 2 to math.sqrt(n)){\n            if(n %\
    \ i == 0){\n                return false\n            }\n        }\n        return\
    \ true", "        if(string.length < 2)\n            return true\n        var\
    \ length = string.length\n        while(length > 1){\n            if(string.charAt(length-1)\
    \ == string.charAt(length-2))\n                length -=1\n            else\n\
    \                return false\n        }\n        return true", "        val primes\
    \ = mutable.ListBuffer[Boolean]()\n        for(i <- 2 to math.sqrt[Int](string.length)\
    \ by 2){\n            if(string.takeWhile(_ => i % _ != 0).length == 0){\n   \
    \             primes = primes.+(i)\n            }\n        }\n        primes.contains(true)",
  "        if(string.length <= 1) true\n        else {\n            var isPrime =\
    \ true\n            for (i <- 1 until string.length)\n                if (string.charAt(i)\
    \ > 0) isPrime = false //check if char is > than 0\n            if (isPrime) true\n\
    \            else false\n        }", "        if (string.length == 0) return false\n\
    \        var isPrime = true\n        var max = (string.length - 1) / 2\n     \
    \   var i = 2\n        while (i < max) {\n            if (string.charAt(i) !=\
    \ string.charAt(max - i)) {\n                if (string.charAt(i) == string.charAt(max\
    \ - i)) {\n                    isPrime = false\n                    break\n  \
    \              }\n            } else {\n                if (string.charAt(i) ==\
    \ string.charAt(max - i)) {\n                    isPrime = false\n           \
    \         break\n                }\n            }\n            i += 1\n      \
    \  }\n        if (isPrime) {\n            return true\n        } else {\n    \
    \        return false\n        }", "        val n = string.size\n        val aList\
    \ = collection.mutable.ArrayBuffer.empty[Int]\n        aList += 2\n        aList\
    \ += 3\n        aList += 5\n        aList += 7\n        aList += 11\n        aList\
    \ += 13\n        aList += 17\n        aList += 19\n        aList += 23\n     \
    \   aList += 29\n        aList += 31\n        aList += 37\n        aList += 41\n\
    \        aList += 43\n        aList += 47\n        aList += 53\n        aList\
    \ += 59\n        aList += 61\n        aList += 67\n        aList += 71\n     \
    \   aList += 73\n        aList += 79\n        aList += 83\n        aList += 89\n\
    \        aList += 97\n        aList += 101\n        aList += 103\n        aList\
    \ += 107\n        aList += 109\n        aList += 113\n        aList += 127\n \
    \       aList += 131\n        aList += 137\n        aList += 139\n        aList\
    \ += 149\n        aList += 151\n        aList += 157\n        aList += 163\n \
    \       aList += 167\n        aList += 173\n        aList += 179\n        aList\
    \ += 181\n        aList += 191\n        aList += 197\n        aList += 199\n \
    \       aList += 211\n        aList += 223\n        aList += 229\n        aList\
    \ += 233\n        aList += 239\n        aList += 241\n        aList += 251\n \
    \       aList += 253\n        aList += 257\n        aList += 263\n        aList\
    \ += 269\n        aList += 271\n        aList += 277\n        aList += 281\n \
    \       aList += 283\n        aList += 293\n        aList += 297\n        aList\
    \ += 301\n        aList += 303\n        aList += 307\n        aList += 311\n \
    \       aList += 313\n        aList += 317\n        aList += 331\n        aList\
    \ += 337\n        aList += 347\n        aList += 349\n        aList += 353\n \
    \       aList += 359\n        aList += 363\n        aList += 369\n        aList\
    \ += 373\n        aList += 379\n        aList += 383\n        aList += 389\n \
    \       aList += 395\n        aList += 411\n        aList += 419\n        aList\
    \ += 431\n        aList += 439\n        aList += 443\n        aList += 449\n \
    \       aList += 457\n        aList += 461\n        aList += 467\n        aList\
    \ += 479\n        aList += 487", "        val nums = new mutable.MutableList[Int]()\n\
    \        for (str <- string) {\n            if (!(nums.contains(str))) {\n   \
    \             if (nums.contains(str + 1)) {\n                    nums.remove(nums.indexOf(str))\n\
    \                } else {\n                    nums += str\n                }\n\
    \            }\n        }\n        return nums.length == 0", "        val primes\
    \ = mutable.Set[Int]()\n        for (character : String <- string) primes += character\n\
    \        val primeCount = primes.size\n        primeCount == 0 || primes.lastOption\
    \ isDefined || primeCount < 3", '        // Complete the implementation here',
  "        // Write code here\n        val primes = mutable.ListBuffer[Int]()\n  \
    \      var x = 0\n        var prime = true\n        val chars = string.toCharArray\n\
    \        while (x < chars.length)\n            if (chars(x) == ' ')\n        \
    \    {\n                x = x + 1\n                prime = true\n            }\n\
    \            else\n            {\n                if (prime)\n               \
    \     prime = false\n                else\n                {\n               \
    \     x = x + 1\n                    prime = true\n                }\n       \
    \     }\n            primes += chars(x)\n        }\n        if (primes.isEmpty)\n\
    \            return true\n        else\n            return false", "        if\
    \ (string == null || string.length <= 0) {\n          return false\n        }\n\
    \        var isPrime : Boolean = true\n        var count = 1\n        var length\
    \ = string.length\n        while (count <= length) {\n          if(string.charAt(count)\
    \ ==  string.charAt(count + 1) && string.charAt(count) == string.charAt(count\
    \ + 2)) {\n              isPrime = false\n              count = count + 1\n  \
    \        }\n          else {\n            count = count + 1\n          }\n   \
    \       if (count > length) {\n            isPrime = false\n          }\n    \
    \    }\n        return isPrime", "        val l  = string.length\n        val\
    \ set = Set(2L to l.toLong)\n        set.forall(l => string.charAt(l) == string.charAt(l-1))",
  "        var prime = True\n        var length = 0\n        var test = 1\n      \
    \  for( var i = 0; i < string.length ; i ++ ) {\n            val digit = string.charAt(i)\n\
    \            val result = if ( digit == 'H' ) test * 2\n            else if( digit\
    \ == 'I' ) test * 3\n            else if( digit == 'L' ) test * 4\n          \
    \  else if( digit == 'O' ) test * 5\n            else if( digit == 'P' ) test\
    \ * 7\n            else if( digit == 'S' ) test * 9\n            else if( digit\
    \ == 'T' ) test * 11\n            else if( digit == 'D' ) test * 13\n        \
    \    else if( digit == 'C' ) test * 17\n            else test * 19\n         \
    \   test = result\n            length = length +1\n        }\n        if( length\
    \ == 1 && prime == True ) {\n            prime = True\n        }\n        else\
    \ if( length == 2 && prime == True ) {\n            prime = True\n        }\n\
    \        else if( length == 3 && prime == True ) {\n            prime = True\n\
    \        }\n        else if( length == 4 && prime == True ) {\n            prime\
    \ = True\n        }\n        else if( length == 5 && prime == True ) {\n     \
    \       prime = True\n        }\n        else if( length == 6 && prime == True\
    \ ) {\n            prime = True\n        }\n        else if( length == 7 && prime\
    \ == True ) {\n            prime = True\n        }\n        else if( length ==\
    \ 8 && prime == True ) {\n            prime = True\n        }\n        else if(\
    \ length == 9 && prime == True ) {\n            prime = True\n        }\n    \
    \    else if( length == 10 && prime == True ) {\n            prime = True\n  \
    \      }\n        else if( length == 11 && prime == True ) {\n            prime\
    \ = True\n        }\n        else if( length == 12 && prime == True ) {\n    \
    \        prime = True\n        }\n        else if( length == 13 && prime == True\
    \ ) {\n            prime = True\n        }\n        else if( length == 14 && prime\
    \ == True ) {\n            prime = True\n        }\n        else if( length ==\
    \ 15 && prime == True ) {\n            prime = True\n        }\n        else if(\
    \ length == 16 && prime == True ) {\n            prime = True\n        }\n   \
    \     else if( length == 17 && prime == True ) {\n            prime = True\n \
    \       }\n        else if( length == 18 && prime == True ) {\n            prime\
    \ = True\n        }\n        else if( length == 19 && prime == True ) {\n    \
    \        prime = True\n        }\n        else if( length == 20 && prime == True\
    \ ) {\n            prime = True\n        }\n        else if( length == 21 && prime\
    \ == True ) {\n            prime = True\n        }\n        else if( length ==\
    \ 22 && prime == True ) {\n            prime = True\n        }\n        else if( ",
  '        // Write your code here', "        var isPrime : Boolean = true\n     \
    \   for(i <- 2 to string.length-1){\n            if(string.charAt(i) != \"K\"\
    ) {\n                if(string.charAt(i) > \"Z\") {\n                    isPrime\
    \ = false\n                } else {\n                    for(j <- 2 to string.length-1\
    \ if string.charAt(i) > string.charAt(j)) {\n                        if(string.charAt(i)\
    \ > \"Z\") {\n                            isPrime = false\n                  \
    \      }\n                    }\n                }\n            }\n        }\n\
    \        isPrime", "        val stringList = string.split(\"\")\n        val lengthOfList:\
    \ List[Int] = stringList.length\n        var isPrime = true\n\n        for(number\
    \ <- 0 until lengthOfList) {\n            val nextNumber = lengthOfList - number\
    \ - 1\n            val factors = stringList.drop(number).filter(item => item %\
    \ number == 0)\n            val isMultiplicand = stringList.take(nextNumber).length\
    \ != 1\n            val isDivisor = stringList.take(number).forall(item => item\
    \ % number != 0)\n\n            if (isPrime && (isMultiplicand || isDivisor))\
    \ {\n                isPrime = false\n                break\n            }\n \
    \       }\n\n        isPrime", "    \n        val numArray = Array(\"2\",\"3\"\
    ,\"5\",\"7\",\"11\",\"13\",\"17\",\"19\",\"23\",\"29\",\"31\",\"37\",\"41\",\"\
    43\",\"47\",\"53\",\"59\",\"61\",\"67\",\"71\",\"73\",\"79\",\"83\",\"89\",\"\
    97\",\"101\",\"103\",\"107\",\"109\",\"113\",\"127\",\"131\",\"137\",\"139\",\"\
    149\",\"151\",\"157\",\"163\",\"167\",\"173\",\"179\",\"181\",\"191\",\"193\"\
    ,\"197\",\"199\",\"211\",\"223\",\"227\",\"229\",\"233\",\"239\",\"241\",\"247\"\
    ,\"251\",\"257\",\"263\",\"269\",\"271\",\"277\",\"281\",\"283\",\"293\",\"307\"\
    ,\"311\",\"313\",\"317\",\"331\",\"337\",\"347\",\"349\",\"353\",\"359\",\"367\"\
    ,\"373\",\"379\",\"383\",\"389\",\"397\",\"401\",\"409\",\"419\",\"421\",\"431\"\
    ,\"433\",\"439\",\"443\",\"449\",\"457\",\"461\",\"463\",\"467\",\"479\",\"487\"\
    ,\"491\",\"499\",\"503\",\"509\",\"521\",\"523\",\"541\",\"547\",\"557\",\"563\"\
    ,\"569\",\"571\",\"577\",\"587\",\"593\",\"599\",\"601\",\"607\",\"613\",\"617\"\
    ,\"619\",\"631\",\"641\",\"643\",\"647\",\"653\",\"659\",\"661\",\"673\",\"677\"\
    ,\"683\",\"691\",\"701\",\"709\",\"719\",\"727\",\"733\",\"739\",\"743\",\"751\"\
    ,\"757\",\"761\",\"769\",\"787\",\"797\",\"809\",\"811\",\"821\",\"823\",\"827\"\
    ,\"829\",\"839\",\"853\",\"857\",\"859\",\"863\",\"877\",\"881\",\"883\",\"887\"\
    ,\"907\",\"911\",\"919\",\"929\",\"937\",\"941\",\"947\",\"953\",\"967\",\"971\"\
    ,\"977\",\"983\",\"991\")\n        val result = string.count(letter => numArray.contains(letter))\n\
    \        result > 1", "       var i = 0\n       var length = 0\n       while (i\
    \ < string.length) {\n          val char = string.charAt(i)\n          if (char\
    \ > 'Z' || char < 'A') {\n             length++\n          }\n          else {\n\
    \             length = 0\n          }\n          i += 1\n       }\n       var\
    \ num = 0\n       while (length != 0) {\n          if (num > 'Z') {\n        \
    \     return false\n          }\n          val num2 = num * num\n          if\
    \ (num2 + length < num) {\n             num2 = num2 + length\n          }\n  \
    \        if (num2 == num) {\n             return false\n          }\n        \
    \  num += 1\n          length -= 1\n       }\n       return true", "        //\
    \ Complete the implementation\n        for( i <- 0 until string.length )\n   \
    \         if( string.charAt(i) != '\\0' )\n                if( string.charAt(i)\
    \ == string.charAt(i+1) && string.charAt(i) != string.charAt(i+2) ) \n       \
    \             if( string.charAt(i) == string.charAt(i+2) ) \n                \
    \        if( string.charAt(i) == string.charAt(i+3) ) \n                     \
    \       return false\n        true", "        val length = string.length\n   \
    \     if(length < 2) false else (string.indices.forall(n => string.charAt(n) ==\
    \ string.charAt(length-1)) && primeLength(string.substring(0, length-1)))", " \
    \       var isPrime = true\n        var isPrime2 = true\n        var length =\
    \ 0\n        var length2 = 0\n        var length3 = 0\n        var length4 = 0\n\
    \        var length5 = 0\n        var length6 = 0\n        var length7 = 0\n \
    \       var length8 = 0\n        var length9 = 0\n        var length10 = 0\n \
    \       var length11 = 0\n        var length12 = 0\n        var length13 = 0\n\
    \        var length14 = 0\n        var length15 = 0\n        var length16 = 0\n\
    \        var length17 = 0\n        var length18 = 0\n        var length19 = 0\n\
    \        var length20 = 0\n        var length21 = 0\n        var length22 = 0\n\
    \        var length23 = 0\n        var length24 = 0\n        var length25 = 0\n\
    \        var length26 = 0\n        var length27 = 0\n        var length28 = 0\n\
    \        var length29 = 0\n        var length30 = 0\n        var length31 = 0\n\
    \        var length32 = 0\n        var length33 = 0\n        var length34 = 0\n\
    \        var length35 = 0\n        var length36 = 0\n        var length37 = 0\n\
    \        var length38 = 0\n        var length39 = 0\n        var length40 = 0\n\
    \        var length41 = 0\n        var length42 = 0\n        var length43 = 0\n\
    \        var length44 = 0\n        var length45 = 0\n        var length46 = 0\n\
    \        var length47 = 0\n        var length48 = 0\n        var length49 = 0\n\
    \        var length50 = 0\n        var length51 = 0\n        var length52 = 0\n\
    \        var length53 = 0\n        var length54 = 0\n        var length55 = 0\n\
    \        var length56 = 0\n        var length57 = 0\n        var length58 = 0\n\
    \        var length59 = 0\n        var length60 = 0\n        var length61 = 0\n\
    \        var length62 = 0\n        var length63 = 0\n        var length64 = 0\n\
    \        var length65 = 0\n        var length66 = 0\n        var length67 = 0\n\
    \        var length68 = 0\n        var length69 = 0\n        var length70 = 0\n\
    \        var length71 = 0\n        var length72 = 0\n        var length73 = 0\n\
    \        var length74 = 0\n        var length75 = 0\n        var length76 = 0\n\
    \        var length77 = 0\n        var length78 = 0\n        var length79 = 0\n\
    \        var length80 = 0\n        var length81 = 0\n        var length82 = 0\n\
    \        var length83 = 0\n        var length84 = 0\n        var length85 = 0\n\
    \        var length86 = 0\n        var length87 = 0\n        var length88 = 0\n\
    \        var length89 = 0\n        var length90 = 0\n        var length91 = 0\n\
    \        var length92 = 0\n        var length93 = 0\n        var length94 = 0\n\
    \        var length95 = 0\n        var length96 = 0\n        var length97 = 0\n\
    \        var length98 = 0\n        var length99 = 0\n        var length100 = 0\n",
  "      var count = 0\n      var lastNum = 1\n      var flag = true\n      for (letter\
    \ <- string) {\n        if (lastNum % letter != 0) {\n          flag = false\n\
    \        }\n        lastNum = lastNum * 2\n        count += 1\n      }\n     \
    \ if (flag) count == string.length else count == 0", "        val n = string.length\n\
    \        def isPrime(x : Int) : Boolean = x == 2 || x % 2 == 0 && !(x % n == 0)\n\
    \        string.foreach(x => {\n            if(isPrime(x)){\n                false\n\
    \            }else{\n                true\n            }\n        })", "     \
    \   var prime = mutable.ArrayBuffer(2)\n        for(i <- 2 to string.length){\n\
    \            prime += prime.length\n            if(i * i <= string.length){\n\
    \                prime += prime + i\n            }\n        }\n        prime.length\
    \ == string.length", "        var isPrime = true;\n        for ( i <- 1 to string.length\
    \ ) {\n            if ( string.charAt(i) != string.charAt(i-1) ) \n          \
    \      isPrime = false;\n        }\n        return isPrime;", "        // If there\
    \ are no characters in the string, return true\n        if (string.isEmpty) return\
    \ true\n        // Otherwise, if there are only characters that have the value\
    \ 0 return true\n        else if (string.all(_ == '0')) return true\n        //\
    \ Otherwise\n        else\n            // We want to check each character in the\
    \ string and see if it is divisible by any number\n            // from 2 to (string.length/2)\
    \ inclusive\n            (for (char <- string.chars) yield {\n               \
    \ if (char == 0) return false\n                else if (char.modulo(2) == 0) return\
    \ true\n                else return false\n            }).reduce(_ || _)", " \
    \       var i = 2\n        var isPrime = true\n        while (i <= string.length)\
    \ {\n            if (string.charAt(i) != string.charAt(i - 1)) {\n           \
    \     isPrime = !isPrime\n            }\n            i += 1\n        }\n     \
    \   return isPrime", "        // Your code here\n        val arrayList = string.split(\"\
    \\\\s+\").map(_.toInt)\n        val primes = mutable.Set.empty[Int]\n        val\
    \ odds = mutable.Set.empty[Int]\n        var count = 0\n        for (i <- arrayList)\
    \ {\n            val r = scala.math.sqrt(i)\n            if (i != r) {\n     \
    \           if (i % 2 == 0 && i != r) {\n                    primes += i\n   \
    \             } else if (i % 2 != 0 && i != r) {\n                    odds +=\
    \ i\n                }\n            }\n        }\n        if (primes.size == arrayList.length)\
    \ {\n            count += 1\n        }\n        if (primes.size != arrayList.length\
    \ || odds.length != arrayList.length) {\n            count = 0\n        }\n  \
    \      return count == arrayList.length", "        def isPrime(integer : Int)\
    \ : Boolean = {\n            def isPrime(integer : Int, flag : Boolean) : Boolean\
    \ = {\n                if(integer < 1) flag else isPrime(integer / 2, flag &&\
    \ integer % 2 == 0)\n            }\n            isPrime(integer, true)\n     \
    \   }\n        if(string.length <= 1) true\n        else if(string.length == 2\
    \ && isPrime(Integer.parseInt(string)) && isPrime(Integer.parseInt(string),false))\
    \ true\n        else false", "        // Only go up to the square root of the\
    \ length of the string\n        val stringLength = string.length\n        var\
    \ isPrime = true\n        for (x <- 2 to stringLength) {\n            val sqrt\
    \ = (stringLength + 1) - (x * x)\n            if (string contains x.toString &&\
    \ sqrt > 1) {\n                isPrime = false\n            }\n        }\n   \
    \     isPrime", "        var flag : Boolean = false\n        var num : Int = 1\n\
    \        while (string.contains(num.toString())) {\n            if (string.contains(num.toString()))\
    \ {\n                flag = true\n            }\n            num += 1\n      \
    \  }\n        flag", "        val primeNum = PrimeNumbers.primeNum\n        string.map\
    \ { x => primeNum(x-1) }.contains(true)", "        val count = string.length\n\
    \        for ( i <- 1 until count ) {\n            if ( string.charAt( i ) ==\
    \ string.charAt( count - 1 ) ) {\n                count = count - 1\n        \
    \    } else {\n                count = count - 1\n                return false\n\
    \            }\n        }\n        true", "        val n = string.length\n   \
    \     // Loop through the string as many times as there are characters\n     \
    \   var j = 0\n        while(j < n) {\n            var prime = true\n        \
    \    // Test the current character with every other one\n            var k = 0\n\
    \            while (k < j && prime == true) {\n                if (string.charAt(k)\
    \ %% string.charAt(k + 1) != 0) {\n                    prime = false\n       \
    \         }\n                k += 1\n            }\n            j += prime\n \
    \       }\n        // If the loop completes without reaching n then there is a\
    \ prime\n        // number at the end of the string\n        if (j == n) {\n \
    \           return true\n        }\n        // Otherwise, there is not a prime\
    \ at the end of the string\n        return false", "        def isPrime(n : Int)\
    \ : Boolean = {\n            if (n < 2) {\n                return true\n     \
    \       }\n            if (n % 2 == 0) {\n                return false\n     \
    \       }\n            for (i = 3; i <= n/i; i += 2) {\n                if (n\
    \ % i == 0) {\n                    return false\n                }\n         \
    \   }\n            return true\n        }\n        val length : Int = string.length\n\
    \        val numbers : Array[Int] = new Array[Int](length)\n        for (i <-\
    \ 0 until length) numbers(i) = string.charAt(i).toInt\n        val primes = mutable.ArrayBuffer(2)\n\
    \        for (i <- 0 until length) {\n            if (isPrime(numbers(i))) primes\
    \ += numbers(i)\n        }\n        if (primes.size == 2) {\n            true\n\
    \        } else {\n            false\n        }", '        string.forall(x =>
    x % 2 != 0)', "        string match {\n            case \"\" => false\n      \
    \      case _ if string.length == 1 => true\n            case _ =>\n         \
    \       for (i <- 0 until string.length)\n                    if (string.charAt(i)\
    \ != string.charAt(i)) {\n                        string.length - 1\n        \
    \            } else {\n                        false\n                    }\n\
    \        }", "      var prime = false\n      for(i <- 2 to string.length - 1){\n\
    \        if(string.substring(i).forall(x => x != 0 && x != 1)){\n          prime\
    \ = true\n        }\n      }\n      prime", "        var prime = string.filter(_\
    \ => true).count(_ == 1)\n        return prime != 0", "    // Write your code\
    \ here\n    val isPrime = for (x <- 1 to string.length) yield {\n        for(i\
    \ <- 0 until string.length-1){\n            if(string(i).asInstanceOf[Char].toInt\
    \ == x.toInt){\n                if((string(i+1).asInstanceOf[Char].toInt != x.toInt)\
    \ || (string(i).asInstanceOf[Char].toInt != x.toInt)){\n                    return\
    \ false\n                }\n            }\n        }\n        true", "       \
    \ if (string.length < 2) return false\n        var prime = true\n        for (_\
    \ <- 2 to string.length-1){\n            if (string.charAt(_) %2 != 0) prime =\
    \ false\n        }\n        return prime", "        val primes = mutable.Set[String]()\n\
    \        var prime = true\n        for (x <- string toList take string.length)\
    \ {\n            prime match {\n                case false =>\n              \
    \      prime = false\n                case true =>\n                    prime\
    \ match {\n                        case false =>\n                           \
    \ prime = false\n                        case true =>\n                      \
    \      prime match {\n                                case false =>\n        \
    \                            prime = false\n                                case\
    \ true =>\n                                    prime match {\n               \
    \                         case false =>\n                                    \
    \        prime = false\n                                        case true =>\n\
    \                                            prime match {\n                 \
    \                               case false =>\n                              \
    \                      prime = false\n                                       \
    \         case true =>\n                                                    prime\
    \ match {\n                                                        case false\
    \ =>\n                                                            prime = false\n\
    \                                                        case true =>\n      \
    \                                                      prime match {\n       \
    \                                                         case false =>\n    \
    \                                                                prime = false\n\
    \                                                                case true =>\n\
    \                                                                    prime match\
    \ {\n                                                                        case\
    \ false =>\n                                                                 \
    \           prime = false\n                                                  \
    \                      case true =>\n                                        \
    \                                    prime match {\n                         \
    \                                                       case false =>\n      \
    \                                                                            \
    \  prime = false\n                                                           \
    \                     case true =>\n                                         \
    \                                           prime match {\n                  \
    \                                                                      case false\
    \ =>\n                                                                       \
    \                     prime = false\n                                        \
    \                                                case true =>\n              \
    \                                                                            \
    \  prime match {\n                                                           \
    \                                     case false =>\n                        \
    \                                                                            prime\
    \ = false\n                                                                  \
    \                              case true =>\n                                \
    \                                                                    prime match\
    \ {\n                                                                        \
    \                                case false =>\n                             \
    \                                                                            \
    \   prime = false\n                                                          \
    \                                              case true =>\n                \
    \                                                                            \
    \                prime match {\n                                             \
    \                                                                   case false\
    \ =>\n                                                                       \
    \                                             prime = false\n                \
    \                                                                            \
    \                    case true =>\n                                          \
    \                                                                          prime\
    \ match {\n                                                                  \
    \                                                      case false =>\n       \
    \                                                                            \
    \                                         prime = false\n                    \
    \                                                                            \
    \                        case true =>\n                                      \
    \                                                                            \
    \          prime match {\n                                                   \
    \                                                                            \
    \ case false =>\n                                                            \
    \                                                                        prime\
    \ = false\n                                                                  \
    \                                                              case true =>\n\
    \                                                                            \
    \                                                        prime match {\n     \
    \                                                                            \
    \                                                       case false =>\n      \
    \                                                                            \
    \                                                          prime = false\n   \
    \                                                                            \
    \                                                         case true =>\n     \
    \                                                                            \
    \                                                           prime match {\n  \
    \                                                                            \
    \                                                                  case false\
    \ =>\n                                                                       \
    \                                                                            \
    \ prime = false\n                                                            \
    \                                                                            \
    \        case true =>\n                                                      \
    \                                                                            \
    \                  prime match {\n                                           \
    \                                                                            \
    \                                 case false =>\n                            \
    \                                                                            \
    \                                                    prime = false\n         \
    \                                                                            \
    \                                                                   case true\
    \ =>\n                                                                       \
    \                                                                            \
    \         prime match {\n                                                    \
    \                                                                            \
    \                                case false =>\n                             \
    \                                                                            \
    \                                                           prime = false\n  \
    \                                                                            \
    \                                                                            \
    \      case true =>\n                                                        \
    \                                                                            \
    \                                prime match {\n                             \
    \                                                                            \
    \                                                               case false =>\n\
    \                                                                            \
    \                                                                            \
    \                    prime = false\n                                         \
    \                                                                            \
    \                                                   case true =>\n           \
    \                                                                            \
    \                                                                            \
    \         prime match {\n                                                    \
    \                                                                            \
    \                                                case false =>\n             \
    \                                                                            \
    \                                                                            \
    \               prime = false\n                                              \
    \                                                                            \
    \                                                      case true =>\n        \
    \                                                                            \
    \                                                                            \
    \                    prime match {\n                                         \
    \                                                                            \
    \                                                                   case false ",
  "        var result : Boolean = false\n        var i = 2\n        var prime = true\n\
    \        val charArray = string.toCharArray\n        while (i<charArray.length)\
    \ {\n            prime = prime && isPrime(i)\n            i++\n        }\n   \
    \     result = prime\n        return result", "        def isPrime(num: Int) :\
    \ Boolean = {\n            val nums = Vector.fill(num)(1)\n            for (i\
    \ <- 2 to num) {\n                if (nums(i) != 0) {\n                    for\
    \ ((j <- 2 to nums/i) if (nums(j) < j)) {\n                        nums(j) = nums(j)\
    \ + nums(j)\n                    }\n                }\n                if (nums(num)\
    \ == 1) {\n                    return true\n                }\n            }\n\
    \            return false\n        }\n        val words = string.split(\" \")\n\
    \        for (word <- words) {\n            if (word == \"\") continue\n     \
    \       if (isPrime(word.toInt)) {\n                return true\n            }\n\
    \        }\n        return false", "        for(letter <- string.toCharArray)\n\
    \        if(!(PrimeLetters.contains(letter))) {\n            false\n        }\
    \ else {\n            true\n        }", "        val ls = new mutable.ListBuffer[Int]()\n\
    \        var index = 0\n        var last = 1\n        var isPrime = true\n   \
    \     while (index < string.length) {\n            val next = last + last\n  \
    \          if (ls.contains(next)) {\n                isPrime = false\n       \
    \     }\n            index += 1\n            last += last\n            if (isPrime)\
    \ {\n                ls += last\n            }\n        }\n        return isPrime",
  "        string.filter(_.forall(c => c < 'a' || c > 'z')).length == string.length",
  "        var len : int = 0\n        for( char <- string ){\n            if( char.isDigit\
    \ ){\n                len += 1\n            }else{\n                if( len ==\
    \ 1 ){\n                    return true\n                }else{\n            \
    \        if( isPrime(len) == false ){\n                        return false\n\
    \                    }\n                }\n            }\n        }", "      \
    \  val length = string.length\n        val factors = mutable.ListBuffer.empty[Int]\n\
    \        for (i  <- 0 until length) {\n            factors += i\n        }\n \
    \       val notPrime = 0\n        for (i  <- factors) {\n            if (isPrime(i))\
    \ {\n                notPrime = 0\n            }\n            else if (i < length)\
    \ {\n                notPrime += 1\n                if (notPrime > 1) {\n    \
    \                return false\n                }\n            }\n        }\n \
    \       return true", '        // Write code here', "        for (char <- string.toCharArray)\n\
    \            if (!isPrime(IntChars(char))) {\n                false\n        \
    \    }\n        true", "        // Write your code here\n        val primes =\
    \ mutable.Set[Int]()\n        var index = 0\n        while(index<string.length){\n\
    \            val n = string.charAt(index).toInt\n            if(n==1){\n     \
    \           primes.add(2)\n            }else if(n==0){\n                primes.add(1)\n\
    \            }else{\n                var j = 0\n                while(j<primes.size){\n\
    \                    val p = primes(j)\n                    if(n%p==0){\n    \
    \                    primes.remove(j)\n                        break\n       \
    \             }else{\n                        j+=1\n                    }\n  \
    \              }\n                primes.add(n)\n            }\n            index+=1\n\
    \        }\n        primes.isEmpty", "        def isPrime(num: Int) : Boolean\
    \ = {\n            var isPrime = true\n            var i = 1\n            while\
    \ (i < num) {\n                if (i % num == 0)\n                    isPrime\
    \ = false\n                i += 1\n            }\n            return isPrime\n\
    \        }\n        val charSet = string.toCharArray.map(_.toInt)\n        val\
    \ length = charSet.length\n        val primes = mutable.Buffer.empty[Int]\n\n\
    \        def isPrimeIter(primes: mutable.Buffer[Int], i: Int) : Boolean = {\n\
    \            if (primes.isEmpty) {\n                for {\n                  \
    \  p <- 1 until length\n                    if isPrime(p)\n                } primes\
    \ += p\n                if (primes.size == length)\n                    return\
    \ true\n                else\n                    return false\n            }\n\
    \            else {\n                val candidate = primes.head\n           \
    \     primes.apply(0)\n                for {\n                    p <- 1 until\
    \ length\n                    if candidate % p == 0\n                } {\n   \
    \                 primes += candidate\n                    if (primes.size ==\
    \ length)\n                        return true\n                    else\n   \
    \                     return false\n                }\n            }\n       \
    \ }\n\n        for (prime <- primes) {\n            isPrimeIter(primes, prime)\n\
    \        }", "        string match {\n            case s if (s.length <= 1) =>\
    \ false\n            case s => string match {\n                case s if (s contains\
    \ 'a' && s contains 'b' && s contains 'c' && s contains 'd' && s contains 'e'\
    \ && s contains 'f' && s contains 'g' && s contains 'h' && s contains 'i' && s\
    \ contains 'j' && s contains 'k' && s contains 'l' && s contains 'm' && s contains\
    \ 'n' && s contains 'o' && s contains 'p' && s contains 'q' && s contains 'r'\
    \ && s contains 's' && s contains 't' && s contains 'u' && s contains 'v' && s\
    \ contains 'w' && s contains 'x' && s contains 'y' && s contains 'z') => true\n\
    \                case s => false\n            }\n        }", "        var result\
    \ = true\n        for (c <- string) {\n            for (r <- 0 to string.length-1){\n\
    \                if (string.indexOf(c) != r)\n                    result = false\n\
    \            }\n        }\n        result", "        val s = string.asInstanceOf[StringBuilder]\n\
    \        val count = mutable.Map.empty[Int, Boolean]\n        for (i <- 1 to s.length)\n\
    \        count.put(i, s.charAt(i) != 'z')\n        count.foreach(x => if (x._2)\
    \ return false)\n        true", "        var isPrime = true\n        var length\
    \ = string.length\n        while (length > 0) {\n            var isDivisibleBy2\
    \ = true\n            for (var index = 3; index <= length; index++) {\n      \
    \          if (length == index) {\n                    return true\n         \
    \       }\n                if ((string.length % index) == 0) {\n             \
    \       isDivisibleBy2 = false\n                }\n            }\n           \
    \ if (isDivisibleBy2 == true) {\n                isPrime = false\n           \
    \     break\n            }\n            length--\n        }\n        return isPrime",
  "        val primes = mutable.ArrayBuffer(2,3,5,7,11,13,17)\n        for(num <-\
    \ 0 to string.length-1){\n            for(prime <- primes){\n                if(prime\
    \ * prime <= num && num <= prime*prime){\n                    return true\n  \
    \              }\n            }\n        }\n        return false", "      var\
    \ primeCounter = 1\n      val length: Int = string.length\n      var charIndex\
    \ = 0\n      var isPrime = true\n      while (primeCounter <= length / 2) {\n\
    \        val currChar = string.charAt(charIndex)\n        val next = string.charAt(charIndex\
    \ + 1)\n        val isPrime = currChar == next.toChar\n        if (!isPrime) {\n\
    \          primeCounter = primeCounter + 1\n        }\n        else {\n      \
    \    primeCounter = primeCounter + 1\n          isPrime = true\n        }\n  \
    \      charIndex = charIndex + 1\n      }\n      isPrime", "        val n = string.length\n\
    \n        val numbers = mutable.LinkedHashSet[Int]()\n        for (i <- 1 to n\
    \ by 2)\n            numbers.add(i)\n\n        var result: Boolean = true\n  \
    \      for (i <- numbers until (n+1)) {\n            val product = string.toLong.product\n\
    \            if (product % i != 0)\n                result = false\n        }\n\
    \        result", "       string.nonEmpty\n       string.head != null\n      \
    \ val len = string.size\n       var isPrime = true\n       for(i <- 1 to len/2\
    \ if isPrime)\n       {\n           val div = string.charAt(i).toInt\n       \
    \    isPrime = (div > 1 && div % 2 == 0)\n       }\n       isPrime", "       \
    \ val str = string.split(\"\").map(_.toInt)\n        val list = new collection.mutable.ListBuffer[Boolean]\n\
    \        val primes = primes.toList\n        for(prime <- primes.filterNot(_%primes.contains(_)))\
    \ {\n            val sumOfPrimes = str.map(x => prime * x).sum\n            val\
    \ lastDigit = str.map(x => x / prime).last\n            if(sumOfPrimes % lastDigit\
    \ != 0) {\n                list.add(false)\n                break\n          \
    \  }\n            list.add(false)\n        }\n        list.contains(true)", " \
    \       if (string.length < 2) return true\n        val list = string.filter(_\
    \ <= 'z').map(_.toInt)\n        val primes = Primes.filter(p => list.contains(p.toInt))\n\
    \        primes.length == string.length", '        for( c <- string.toCharArray
    ) if( (c%2) == 0 ) false else true', "        val listOfPrimes = for (i <- 2 to\
    \ string.length) yield {\n            if (string.charAt(i) == string.charAt(i-1)\
    \ && string.charAt(i) == string.charAt(i-2))\n                true\n         \
    \   else if (string.charAt(i) != string.charAt(i-1) && string.charAt(i) != string.charAt(i-2))\n\
    \                false\n            else\n                listOfPrimes.last\n\
    \        }\n        listOfPrimes.toSet.size == 1", "        if(string.length <\
    \ 2)\n            return true\n        val length = string.length - 1\n      \
    \  val primes = mutable.ArrayBuffer(2).toList\n        for(i <- 2 until length)\
    \ {\n            val j = (i + 1) until length\n            if(i < (length - 1))\
    \ {\n                if(primes.contains((i) * j))\n                    return\
    \ false\n            }\n            primes += i * j\n        }\n        return\
    \ true", "        val primes = mutable.Set.empty[Int]\n        for(i<-1 to string.length-1){\n\
    \            val index = string.charAt(i).toInt\n            if(index>=0){\n \
    \               if(primes.contains(index)){\n                    primes.add(index)\n\
    \                }\n            }\n        }\n        primes.forall(primes.contains)",
  "        var prime = true\n        var count = 0\n        for (i <- 0 to string.length){\n\
    \            for(j <- 0 to string.length){\n                if(i!=j){\n      \
    \              if((string.charAt(i).toString.toInt==string.charAt(j).toString.toInt)\
    \ && (i != j)){\n                        prime = prime && (string.charAt(i).toString.toInt%string.charAt(j).toString.toInt==0)\n\
    \                        count = count + 1\n                    }\n          \
    \      }\n            }\n        }\n        if(count>2){\n            prime =\
    \ false\n        }\n        prime", "        var counter : Int = 0\n        for\
    \ (letter : String <- string) {\n            for (i : Int <- 0 to string.length-1)\
    \ {\n                if (letter != string.charAt(i)) {\n                    if\
    \ (letter % string.charAt(i) == 0) {\n                        counter++\n    \
    \                    break\n                    }\n                }\n       \
    \     }\n        }\n        if (counter == 0) {\n            return false\n  \
    \      }\n        return true", "        if(string.length < 2) {\n           \
    \ return true\n        }\n        var prime = false\n        var primeIndex =\
    \ 0\n        var remainder = string.charAt(0)\n        var nextCharacterIndex\
    \ = string.length\n        var currentCharacterIndex = 1\n        while(primeIndex\
    \ < string.length-1 && primeIndex + currentCharacterIndex <= string.length-1)\
    \ {\n            prime = true\n            while(prime) {\n                remainder\
    \ = remainder + string.charAt(currentCharacterIndex)\n                primeIndex\
    \ += currentCharacterIndex\n                if(remainder == 0) {\n           \
    \         prime = false\n                    primeIndex = primeIndex + 1\n   \
    \                 remainder = string.charAt(currentCharacterIndex)\n         \
    \       }\n                currentCharacterIndex += 1\n            }\n       \
    \     if(prime) {\n                if(string.charAt(currentCharacterIndex) ==\
    \ 0){\n                    return false\n                }\n                primeIndex\
    \ = primeIndex + 1\n                remainder = string.charAt(currentCharacterIndex)\n\
    \                currentCharacterIndex += 1\n            }\n        }\n      \
    \  return true", "        // Your code goes here\n        val prime = ListBuffer[Int]()\n\
    \        var number = 1\n        var count = 0\n        while(count != string.length){\n\
    \            number = number + 1\n            if(number%2 == 0) {\n          \
    \      prime.append(number)\n            }\n            var temp = 2\n       \
    \     while(temp < number){\n                if(number%temp == 0){\n         \
    \           prime.append(number)\n                }\n                temp = temp\
    \ + 1\n            }\n            count = count + 1\n        }\n        var check\
    \ = true\n        for(element <- prime){\n            if(check == false){\n  \
    \              check = false\n                return false\n            }\n  \
    \      }\n        return true", "        var count = 0\n        for( char <- string\
    \ ) {\n            if( char == 'a' || char == 'e' || char == 'i' || char == 'o'\
    \ || char == 'u' ) {\n                count += 1\n            }\n            else\
    \ {\n                if( count % 2 == 0 ) {\n                    count = 0\n \
    \               }\n                else {\n                    count -= 1\n  \
    \              }\n            }\n        }\n        count == 0 || count % 2 ==\
    \ 0", "        val length = string.length\n        if (length == 0) return true\n\
    \        var sum = 0\n        for (i <- 1 until length) {\n            val remainder\
    \ = length % i\n            sum = sum + remainder\n            if (sum == 0) return\
    \ false\n        }\n        return true", "        val arr = mutable.Array[String]()\n\
    \        for (letter <- string.toCharArray) {\n            if (arr.contains(letter))\
    \ {\n              return false\n            }\n            arr.update(letter,\
    \ 1)\n        }\n        return true", "        val isPrime = PrimeIterator.hasNext\n\
    \        string.map { letter =>\n            isPrime(letter)\n        }.exists(_)",
  "        val length : Int = string.length\n        val isPrimeIter = collection.immutable.Iterator.from(2).takeWhile(x\
    \ => x <= length).filter(x => string.chars.exists(_ == x.toString)).takeWhile(x\
    \ => x <= length).forall(x => x % 2 != 0)\n        if (isPrimeIter.hasNext) isPrimeIter.next()\
    \ else false", "        val m = math.floor(math.sqrt(string.length))\n       \
    \ var isPrime = true\n        var i = 2\n        while (i <= m) {\n          \
    \  if (string == prime(i) || string.indexOf(i) == -1) {\n                isPrime\
    \ = false\n                break\n            }\n            i += 1\n        }\n\
    \        isPrime", "        val primes = new mutable.HashSet[Int]()\n        for\
    \ (c <- string) primes += c\n\n        for (prime <- primes) {\n            if\
    \ (primes.contains(prime)) {\n                return false\n            }\n  \
    \      }\n        true", "        def isPrime(n: Int) : Boolean = \n         \
    \   if (n <= 1) true\n            else\n                if (n % 2 == 0) false\n\
    \                else\n                    for {\n                        x <-\
    \ 3 to (math.sqrt(n).toInt + 1) by 2\n                        if (n % x == 0)\
    \ false\n                    } yield x\n                    else\n           \
    \             true\n        string.size.toStream.exists(isPrime)", "        def\
    \ isPrime(n : Int) : Boolean = {\n            val a = 2 #:: a\n            var\
    \ isPrime = true\n            while (a <= (n * n)){\n                if (n % a\
    \ == 0) {\n                    isPrime = false\n                }\n          \
    \      a += 1\n            }\n            return isPrime\n        }\n        if\
    \ (isPrime(string.length)) {\n            return true\n        } else {\n    \
    \        return false\n        }", "        val primes = mutable.ArrayBuffer(2)\n\
    \        var n = 2\n        while (primes.contains(n)) {\n            primes +=\
    \ n\n            n += 1\n        }\n        primes.contains(string.length)", " \
    \       string match {\n            case \"\" => true\n            case s if (s.length\
    \ <= 1) => true\n            case s => prime(s.toInt)\n        }", "        val\
    \ primes = mutable.Set[Int]()\n        for (c <- string.toCharArray)\n       \
    \ {\n            val c = c.toInt\n            val prime = c - 1\n            if\
    \ (primes.contains(prime)) { continue }\n            if (prime > 1) {\n      \
    \          primes += prime\n            }\n            else\n            {\n \
    \               primes.add(prime)\n            }\n        }\n        return primes.size\
    \ == string.length", "        for( i <- 1 to string.length ) {\n            if(\
    \ string.charAt(i) == string.charAt(string.length-1) ) \n                return\
    \ false\n        }\n        return true", "        var result = true\n       \
    \ var length = string.length()\n        val numPrimes = primesTo(length)\n   \
    \     for ( i <- numPrimes ) {\n            if( string.substring(length - i).contains(string.substring(0,\
    \ length -i)))\n                result = false\n        }\n        result", " \
    \       string.asInstanceOf[List[Char]].reverse.filter(_.isDigit).reverse match\
    \ {\n            case Nil => true\n            case x => x.toInt == primes\n \
    \       }", "        val primesSet = Set(2,3)\n        for( n <- string.length\
    \ ) {\n            if( primesSet.contains(n) && n % 2 == 0 ) {\n             \
    \   primesSet -= n\n            }\n            else {\n                primesSet\
    \ += n\n            }\n        }\n        if( primesSet.size == 0 ) {\n      \
    \      true\n        }\n        else {\n            false\n        }", "     \
    \   for(number <- 1 to string.length-1){\n            if (string.contains(number.toString))\
    \ number += 1\n        }\n        val testLength = string.length\n        var\
    \ flag = false\n        if(testLength == 1) return true\n        for(number <-\
    \ 1 to testLength-1){\n            if (string.contains(number.toString) && string.contains((number+1).toString))\n\
    \                flag = true\n            else if (!string.contains(number.toString)\
    \ && string.contains((number+1).toString))\n                flag = true\n    \
    \        else if (!string.contains(number.toString) && string.contains((number+1).toString))\n\
    \                flag = true\n        }\n        if (flag) return true\n     \
    \   false", "      def isPrime(num : Int) : Boolean = {\n        if (num < 2)\
    \ false\n        else if (num == 2 || num == 3) true\n        else if (num % 2\
    \ == 0) false\n        else num %2 == 1 && (num + 1) != num\n      }\n\n     \
    \ var len : int = string.length\n      var flag : Boolean = true\n\n      while\
    \ (len > 1) {\n        flag &= isPrime(len)\n        len -= 1\n      }\n\n   \
    \   flag", "        string.trim.toUpperCase match {\n            case \"\" =>\
    \ false\n            case x if (x == \"Y\") => true\n            case _ =>\n \
    \               var isPrime = true\n                for (i <- 0 until string.length)\
    \ {\n                    if(string.charAt(i) == ' ') {\n                     \
    \   isPrime = false\n                        break\n                    }\n  \
    \                  val lastChar = string.charAt(string.length-1)\n           \
    \         val char = string.charAt(i)\n                    if(char == 'E' && lastChar\
    \ == 'L' && ( i > 1 && string.charAt(i-1) == 'L' )) {\n                      \
    \  isPrime = false\n                        break\n                    }\n   \
    \                 if(char == 'E' && lastChar == 'L' && ( i > 1 && string.charAt(i-1)\
    \ == 'A' )) {\n                        isPrime = false\n                     \
    \   break\n                    }\n                    if(char == 'E' && lastChar\
    \ == 'L' && ( i > 1 && string.charAt(i-1) == 'R' )) {\n                      \
    \  isPrime = false\n                        break\n                    }\n   \
    \                 if(char == 'E' && lastChar == 'L' && ( i > 1 && string.charAt(i-1)\
    \ == 'E' )) {\n                        isPrime = false\n                     \
    \   break\n                    }\n                    if(char == 'E' && lastChar\
    \ == 'L' && ( i > 1 && string.charAt(i-1) == 'A' )) {\n                      \
    \  isPrime = false\n                        break\n                    }\n   \
    \                 if(char == 'E' && lastChar == 'L' && ( i > 1 && string.charAt(i-1)\
    \ == 'L' )) {\n                        isPrime = false\n                     \
    \   break\n                    }\n                    if(char == 'E' && lastChar\
    \ == 'L' && ( i > 1 && string.charAt(i-1) == 'S' )) {\n                      \
    \  isPrime = false\n                        break\n                    }\n   \
    \                 if(char == 'E' && lastChar == 'L' && ( i > 1 && string.charAt(i-1)\
    \ == 'T' )) {\n                        isPrime = false\n                     \
    \   break\n                    }\n                    if(char == 'E' && lastChar\
    \ == 'L' && ( i > 1 && string.charAt(i-1) == 'I' )) {\n                      \
    \  isPrime = false\n                        break\n                    }\n   \
    \                 if(char == 'E' && lastChar == 'L' && ( i > 1 && string.charAt(i-1)\
    \ == 'O' )) {\n                        isPrime = false\n                     \
    \   break\n                    }\n                    if(char == 'E' && lastChar\
    \ == 'L' && ( i > 1 && string.charAt(i-1) == 'N' )) {\n                      \
    \  isPrime = false\n                        break\n                    }\n   \
    \                 if(char == 'E' && lastChar == 'L' && ( i > 1 && string.charAt(i-1)\
    \ == 'G' )) {\n                        isPrime = false\n                     \
    \   break\n                    }\n                    if(char == 'E' && lastChar\
    \ == 'L' && ( i > 1 && string.charAt(i-1) == 'P' ", "        def checkPrime(n\
    \ : Int) : Boolean = {\n            if(n==1 || n==2 || n==3) true\n          \
    \  else if(n%2==0 || n%3==0) checkPrime(n/2) || checkPrime(n/3)\n            else\
    \ false\n        }\n        val result = string.map(x => x.toInt).filterNot(x\
    \ => x==0).filter(_ => checkPrime(_))\n        !result.isEmpty", "        var\
    \ sum = 0\n        for(i <- 0 until string.length){\n            sum+=string.charAt(i)\n\
    \        }\n        for(i <- 0 until string.length){\n            if(string.charAt(i)\
    \ == string.charAt(i+1) && string.charAt(i) != 0){\n                return false\n\
    \            }\n        }\n        return true", "        if (string.length ==\
    \ 1) return false\n        var isPrime = true\n        for(i<- 0 until string.length-1){\n\
    \            if((string.charAt(i).toInt == string.charAt(i+1).toInt)){\n     \
    \           isPrime = false\n                break\n            }\n        }\n\
    \        isPrime", "        var res = true\n        for (x <- 0 until string.length)\
    \ { \n            res = res && string.length % x == 0 && isPrime(x); \n      \
    \  }\n        res", "        val primes = mutable.Set[Boolean]()\n        string.foreach\
    \ { char : Char =>\n            val isPrime = char.toString.length <= 1 || char.toString.length\
    \ == 1 && char.toString == \"1\"\n            primes += isPrime\n        }\n \
    \       if (primes.toList.size == string.length)\n            true\n        else\n\
    \            false", "        val length = string.length\n        var isPrime\
    \ = true\n        for (i <- 1 to length-1 if string.charAt(i) != 'a' && string.charAt(i)\
    \ != 'e' && string.charAt(i) != 'i'\n             && string.charAt(i) != 'o' &&\
    \ string.charAt(i) != 'u') isPrime = false\n        for (i <- 1 to length-1 if\
    \ string.charAt(i) == 'a' || string.charAt(i) == 'e' || string.charAt(i) == 'i'\n\
    \             || string.charAt(i) == 'o' || string.charAt(i) == 'u') isPrime =\
    \ false\n        isPrime", "        var primeNum : Boolean = true\n        var\
    \ stringLength : Int = string.length\n        for (i <- 0 until stringLength)\
    \ {\n            val sqrt: Double = Math.sqrt(stringLength)\n            if (stringLength\
    \ % i == 0) {\n                primeNum = false\n                break\n     \
    \       } else {\n                stringLength -= i\n            }\n        }\n\
    \        return primeNum", "        // Write your code here\n        string match\
    \ {\n            case \"\" => true\n            case _ => {\n                val\
    \ lengths = string.split(\"\").map(x => x.toInt).toList\n                lengths\
    \ foreach {length =>\n                    if(length < 2) true\n              \
    \      else {\n                        val n = 1\n                        while(length\
    \ % 2 == 0) length /= 2\n                        val m = 1\n                 \
    \       while(length % 2 == 1) length /= 2\n                        while(n <\
    \ length && m < length) n += length +  m\n                        lengths.exists(_\
    \ == n)\n                    }\n                }\n            }\n        }",
  "        if(string.length > 0) {\n            val a = string.toList\n          \
    \  val length = getLength(a)\n            val counter = mutable.HashSet[Int]()\n\
    \            val isPrime = for {\n                i <- 2 to length\n         \
    \       if (a(i).isDigit) {\n                    val prime = a.filter(_ <= i).filter(_\
    \ => !(counter.contains(i)))\n                    if (prime.length == 1) {\n \
    \                       counter = counter :+ i\n                    }\n      \
    \          }\n            } yield true\n            isPrime match {\n        \
    \        case Some(true) => true\n                case Some(false) => false\n\
    \                case _ => false\n            }\n        } else {\n          \
    \  return false\n        }", "        val length: Int = string.length\n      \
    \  if (length == 0) false\n        else (2 until length).forall(x => string.charAt(x)\
    \ != string.charAt(length - x))", "        // your code here\n        var isPrime\
    \ = string.length == 2 || string.length == 3 || string.length % 2 == 0\n     \
    \   for(i <- 0 until string.length){\n            if(string.length % 2 == 0){\n\
    \                if(string.charAt(i) == string.charAt(i+1)){\n               \
    \     isPrime = false\n                }\n                else {\n           \
    \         isPrime = true\n                    break\n                }\n     \
    \       }\n            else if(string.length % 3 == 0){\n                if(string.charAt(i)\
    \ == string.charAt(i+1) && string.charAt(i+1) == string.charAt(i+2)){\n      \
    \              isPrime = false\n                }\n                else {\n  \
    \                  isPrime = true\n                    break\n               \
    \ }\n            }\n        }\n        isPrime", "        if(string.length < 3)\n\
    \            return true\n\n        val l = string.length\n        val candidatePrimes\
    \ = (0 until l).filter { i => \n            val num = string.charAt(i)\n     \
    \       val isPrime = true\n\n            // Not prime if evenly divisible by\
    \ itself or is 1\n            if( ((i * i) <= num) && (num != 1) ) isPrime = false\n\
    \n            // Not prime if odd number\n            if( (num % 2) != 0 ) isPrime\
    \ = false\n\n            // If evenly divisible by primes up to sqrt(num)\n  \
    \          for(prime <- 2 until Math.sqrt(num) ; prime > 1 ) if( (num % prime)\
    \ == 0 ) isPrime = false\n\n            isPrime\n        }\n\n        // If there\
    \ are multiple prime numbers, return true\n        if(candidatePrimes.size > 1\
    \ ) return true\n\n        // If there is only one prime number, return that number\n\
    \        if(candidatePrimes.size == 1 ) candidatePrimes.head else false", "  \
    \    def isPrime(x: Int) : Boolean = {\n        def isPrime(x: Int) : Boolean\
    \ = {\n          for(y <- 1 until x) yield {\n            if(y % x == 0) false\n\
    \            else if(y == x) true\n            else isPrime(y)\n          }\n\
    \        }\n        x match {\n          case 1 => true\n          case _ => isPrime(x)\n\
    \        }\n      }\n      val len = string.length\n      val list = mutable.ArrayBuffer(2)\n\
    \      for(i <- 0 to len - 1) {\n        if(!isPrime(i)) {\n          list.push(i)\n\
    \        }\n      }\n      list.size == len", "        var isPrime = true\n  \
    \      for (i<- 1 to string.length){\n            var isDivisible = false\n  \
    \          var j = 1\n            while (j < i){\n                if (math.gcd(i,\
    \ j) == 1){\n                    isDivisible = true\n                    break\n\
    \                }\n                j+=1\n            }\n            if (isDivisible\
    \ == true){\n                isPrime = false\n                break\n        \
    \    }\n        }\n        isPrime", "        val characters = string.split(\"\
    \")\n        for(i <- 1 to characters.size - 1) {\n            val next = characters.apply(i)\n\
    \            for(j <- 1 to characters.size - 1) {\n                if(j > i &&\
    \ i == j)\n                    continue\n                val next2 = characters.apply(j)\n\
    \                if(next == next2 && i != j) \n                    return false\n\
    \            }\n        }\n        true", "        val list = new mutable.ArrayList\n\
    \        list.add(string)\n        val length = string.length\n        val count\
    \ = 1 until length\n        var prime = true\n        for(i <- count) {\n    \
    \        prime = prime && (!list.contains(string.substring(i, i + 1)))\n     \
    \   }\n        prime", '        // Implement here', "        var res = false\n\
    \        for (ch <- string) {\n            if (ch == 'a' || ch == 'e' || ch ==\
    \ 'i' || ch == 'o' || ch == 'u') {\n                res = true\n            }\n\
    \            else if (ch < 'a' || ch > 'z') {\n                res = false\n \
    \           }\n            else if (res){\n                res = false\n     \
    \       }\n        }\n        res", "        if(string == null || string.length\
    \ <= 0)\n            return false\n        val prime = scala.collection.mutable.Set[Int]()\n\
    \        var length = 0\n        for(c <- string.toCharArray){\n            length\
    \ += 1\n            if((c <= 'z') && (c >= 'a')){\n                prime += (c\
    \ - 'a' + 1)\n            }\n        }\n        val maxLength = prime.toSet.length\n\
    \        return (length == maxLength)", "        var flag = true\n        var\
    \ num = 1\n        var arr = string.split\n        for (i <- arr.length) {\n \
    \           if (num % arr.length == 0) {\n                flag = false\n     \
    \       }\n            if (arr(i) == 1) {\n                num += 1\n        \
    \    }\n        }\n        flag", "        for(i <- 1 to string.length)\n    \
    \        if(string.charAt(i) != 'a' && string.charAt(i) != 'e' &&\n          \
    \     string.charAt(i) != 'i' && string.charAt(i) != 'o' &&\n               string.charAt(i)\
    \ != 'u')\n                { return false }\n\n        for(i <- 2 to string.length)\n\
    \            if(string.charAt(i) != 'a' && string.charAt(i) != 'e' &&\n      \
    \         string.charAt(i) != 'i' && string.charAt(i) != 'o' &&\n            \
    \   string.charAt(i) != 'u' && string.charAt(i) != 'i' &&\n               string.charAt(i)\
    \ != 'u')\n                { return false }\n\n        return true", "       \
    \ var prime = Int()\n        var length = string.length\n        // Primes less\
    \ than or equal to 1 are not prime numbers\n        if(length == 0) return false\n\
    \        // Test each character in the string to see if it is evenly divisible\n\
    \        // by any number between 2 and its square root\n        for(i <- 0 until\
    \ length) {\n            if((i%2) == 0) prime = prime + 1\n            if((string(i)%2)\
    \ == 0) prime = prime + 1\n        }\n        // If the string length is a prime,\
    \ return true\n        if(prime == 2) true\n        // Otherwise, return false\n\
    \        else false", "        var flag = false \n        for ( i <- string.toCharArray.toList\
    \ ) {\n            if ( i % 2 == 1 ) {\n                flag = true \n       \
    \         break\n            }\n        }\n        return flag", "      val len\
    \ = string.length\n      val primes = mutable.Set.empty[Int]\n      val isPrime\
    \ = mutable.Set(false)\n      for(i <- 1 to len / 2){\n        val test = new\
    \ scala.math.BigInt(string(i))\n        if(test.isProbablePrime){\n          primes\
    \ += test\n        }\n        for(j <- primes.toSeq.iterator; j.isDefined) {\n\
    \          if(test*j == len){\n            isPrime += true\n            break\n\
    \          }\n        }\n      }\n      isPrime.length == primes.length", "  \
    \      var count = 0\n        for(i <- 0 until string.length) if(string.charAt(i)\
    \ == 'A'){\n            count += 1\n        }\n        if(count % 2 == 0){\n \
    \           return false\n        }\n        for(i <- 0 until string.length){\n\
    \            if(string.charAt(i) == string.charAt(i + 1)){\n                count\
    \ += 1\n            }\n        }\n        if(count % 2 == 0){\n            return\
    \ false\n        }\n        return true", "        val primeList = mutable.ListBuffer(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97)\n        val noPrimes = string.filterNot(primeList.contains)\n\
    \        if (primeList(primeList.size) !=  noPrimes.size) {\n            return\
    \ false\n        }\n        return true", "        for ( c <- string.toCharArray)\
    \ {\n            if ( ! (c % 2) ) {\n                if ( ! (c % 3) ) {\n    \
    \                if ( ! (c % 5) ) {\n                        if ( ! (c % 7) )\
    \ {\n                            if ( ! (c % 11) ) {\n                       \
    \         if ( ! (c % 13) ) {\n                                    if ( ! (c %\
    \ 17) ) {\n                                        if ( ! (c % 19) ) {\n     \
    \                                       if ( ! (c % 23) ) {\n                \
    \                                if ( ! (c % 29) ) {\n                       \
    \                             if ( ! (c % 31) ) {\n                          \
    \                              if ( ! (c % 37) ) {\n                         \
    \                                   return false\n                           \
    \                             }\n                                            \
    \        }\n                                                }\n              \
    \                              }\n                                        }\n\
    \                                    }\n                                }\n  \
    \                          }\n                        }\n                    }\n\
    \                }\n            }\n        }\n        return true", "        //\
    \ Code goes here\n        val len = string.length\n        val primes = mutable.MutableList[Int]()\n\
    \        def isPrime(num: Int) = {\n            if (num < 2)\n               \
    \ return false\n            if (num == 1 || num == 2)\n                return\
    \ true\n            for (i <- 2 until num) {\n                if (num % i == 0)\n\
    \                    return false\n            }\n            return true\n  \
    \      }\n        for (i <- 1 until len)\n            primes += i\n        primes.lastOption\
    \ match {\n            case Some(last) => isPrime(len) && isPrime(last)\n    \
    \        case None => false\n        }", "        val count = string.length\n\
    \        val primeFactors = Array[Int](2)\n        var i : Int = 0\n        while\
    \ (i < count) {\n            val factorOfString = count / i\n            primeFactors\
    \ = primeFactors :+ (factorOfString)\n            i = i + 1\n        }\n     \
    \   for {\n            prime <- primeFactors.toSet\n        } yield prime == 1",
  "        var isPrime = true\n        var length = 0\n        var index = string.length\
    \ - 1\n        var prime = string.slice(0, index).map(i => Integer.parseInt(i.toString))\n\
    \        while (index >= 0) {\n            val nextIndex = index -- //get index\
    \ of char at current index\n            if (prime(index) == 1) {\n           \
    \     isPrime = false\n            } else {\n                length += 1\n   \
    \             prime(index + 1) = //increase all prime chars by one\n         \
    \       prime(index) + 1 //new prime number\n            }\n        }\n      \
    \  isPrime", "        var isPrime : Boolean = false\n        for (x<-0 to (string.length-1))\
    \ {\n            var j = x*x + 1\n            for (k<-0 to string.length-1) {\n\
    \                if (j%string.length==0 && j>k)\n                    isPrime =\
    \ true\n                j+=1\n            }\n        }\n        isPrime", "  \
    \      if (string.length == 1) true\n        val prime = 2 \n        var isPrime\
    \ = true\n        val stringLength = string.length\n        var i : Int = 0\n\
    \        var j : Int = 0\n        while (i < stringLength){\n            val number\
    \ = string.charAt(i)\n            var isEven = false\n            while (j < (stringLength\
    \ - i)){\n                if (string.charAt(j) == number){\n                 \
    \   isEven = !isEven\n                    j++\n                }\n           \
    \     else{\n                    isEven = true\n                }\n          \
    \      if (isEven)\n                    prime = prime - 1\n            }\n   \
    \         i = i + 1\n            if (prime == 0) isPrime = false\n        }\n\
    \        isPrime", '    // ...', "        // TODO: implement a solution to your\
    \ problem here\n        return false", "        val characterList = string.characters\n\
    \        var prime = true\n        characterList.foreach(character => {\n    \
    \        if(character % 2 != 0) {\n                prime = false\n           \
    \ }\n        })\n        prime"]
stop_tokens:
- "\n    }\n"
